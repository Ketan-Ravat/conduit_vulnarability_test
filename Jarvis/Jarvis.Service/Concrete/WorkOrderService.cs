using AutoMapper;
using Jarvis.db.ExcludePropertiesfromDBHelper;
using Jarvis.db.Models;
using Jarvis.Service.Abstract;
using Jarvis.Service.Notification;
using Jarvis.Shared.Helper;
using Jarvis.Shared.StatusEnums;
using Jarvis.Shared.Utility;
using Jarvis.ViewModels;
using Jarvis.ViewModels.EmailRequestViewModel;
using Jarvis.ViewModels.RequestResponseViewModel;
using Jarvis.ViewModels.ViewModels;
using Microsoft.AspNetCore.Http;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text.Json;
using TimeZoneConverter;
using Amazon.S3.Model;
using Amazon.Translate.Model;
using DocumentFormat.OpenXml.Drawing.Diagrams;
using DocumentFormat.OpenXml.Wordprocessing;
using SendGrid;
using iTextSharp.text.pdf;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;
using System.Runtime.Intrinsics.X86;
using static Jarvis.Shared.Helper.FormIOObject;
using DocumentFormat.OpenXml.Spreadsheet;
using MongoDB.Bson.IO;
using Org.BouncyCastle.Asn1.Ocsp;
using DocumentFormat.OpenXml.Presentation;
using static Google.Apis.Requests.BatchRequest;
using Jarvis.Shared.Helper.FormIORequestmodel;
using Org.BouncyCastle.Asn1;
using Amazon.QuickSight.Model;
using Microsoft.Extensions.Options;
using ZXing;
using DocumentFormat.OpenXml.Bibliography;
using Amazon.Helpers;
using Amazon.QuickSight;
using System.Security.Policy;
using Microsoft.VisualBasic;
using System.Net.Http;
using Newtonsoft.Json;
using JsonConvert = Newtonsoft.Json.JsonConvert;
using JsonSerializer = System.Text.Json.JsonSerializer;
using System.Threading.Tasks;
using static Jarvis.ViewModels.RequestResponseViewModel.GetAllTempMasterLocationForWOResponseModel;
using System.Text;
using static Jarvis.Service.Concrete.UserService;

namespace Jarvis.Service.Concrete
{
    public class WorkOrderService : BaseService, IWorkOrderService, IDisposable
    {
        public readonly IMapper _mapper;
        private Logger _logger;
        private readonly IS3BucketService s3BucketService;
        AssetService assetservice = null;
        public WorkOrderService(IMapper mapper) : base(mapper)
        {
            _mapper = mapper;
            _logger = Logger.GetInstance<WorkOrderService>();
            this.s3BucketService = new S3BucketService();
            assetservice = new AssetService(mapper);
        }

        public async Task<WorkOrderResponseModel> AddUpdateWorkOrder(AddWorkOrderRequestModel woRequest)
        {
            WorkOrderResponseModel woResponse = new WorkOrderResponseModel();
            int result = (int)ResponseStatusNumber.Error;
            using (var _dbtransaction = _UoW.BeginTransaction())
            {
                try
                {
                    if (woRequest.wo_id != null && woRequest.wo_id != Guid.Empty)
                    {
                        var woDetails = _UoW.WorkOrderRepository.GetWorkOrderById(woRequest.wo_id);
                        _logger.LogInformation("woDetails are fetched");
                        if (woDetails != null)
                        {
                            var previousStatus = woDetails.status;
                            var due_date = woDetails.due_at;
                            var complete_date = woDetails.completed_date;
                            woDetails.description = woRequest.description;
                            woDetails.status = woRequest.status;
                            woDetails.due_at = woRequest.due_at;
                            woDetails.priority = woRequest.priority;
                            woDetails.modified_at = DateTime.UtcNow;
                            woDetails.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                            if (woRequest.status == (int)Status.WOCompleted)
                            {
                                woDetails.completed_date = woRequest.completed_date;
                            }
                            woDetails.service_dealer_id = woRequest.service_dealer_id;

                            #region Work Order Tasks

                            foreach (var tasks in woRequest.WorkOrderTasks)
                            {
                                WorkOrderTasks woTasks = new WorkOrderTasks();
                                if (tasks.wo_task_id == null || tasks.wo_task_id == Guid.Empty)
                                {
                                    var alreadyexist = woDetails.WorkOrderTasks.Where(x => x.task_id == tasks.task_id && x.wo_id == woDetails.wo_id).FirstOrDefault();
                                    if (alreadyexist != null && alreadyexist.wo_task_id != null && alreadyexist.wo_task_id != Guid.Empty)
                                    {
                                        alreadyexist.status = tasks.status;
                                        alreadyexist.time_spent_hours = tasks.time_spent_hours;
                                        alreadyexist.time_spent_minutes = tasks.time_spent_minutes;
                                        alreadyexist.time_remaining_display = String.Concat(
                                                  alreadyexist.time_spent_hours > 0 && alreadyexist.time_spent_hours > 1 ? alreadyexist.time_spent_hours.ToString() + " hours " : ""
                                                , alreadyexist.time_spent_hours > 0 && alreadyexist.time_spent_hours == 1 ? alreadyexist.time_spent_hours.ToString() + " hour " : ""
                                                , alreadyexist.time_spent_minutes > 0 && alreadyexist.time_spent_minutes > 1 ? alreadyexist.time_spent_minutes.ToString() + " minutes " : ""
                                                , alreadyexist.time_spent_minutes > 0 && alreadyexist.time_spent_minutes == 1 ? alreadyexist.time_spent_minutes.ToString() + " minute " : "");
                                        //alreadyexist.hourly_rate = tasks.hourly_rate;
                                        if (alreadyexist.is_archive == true)
                                        {
                                            alreadyexist.modified_at = DateTime.UtcNow;
                                            alreadyexist.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                            alreadyexist.is_archive = false;
                                        }
                                    }
                                    else
                                    {
                                        woTasks.task_id = tasks.task_id;
                                        woTasks.status = tasks.status;
                                        woTasks.time_spent_hours = tasks.time_spent_hours;
                                        woTasks.time_spent_minutes = tasks.time_spent_minutes;
                                        woTasks.time_remaining_display = String.Concat(
                                                  woTasks.time_spent_hours > 0 && woTasks.time_spent_hours > 1 ? woTasks.time_spent_hours.ToString() + " hours " : ""
                                                , woTasks.time_spent_hours > 0 && woTasks.time_spent_hours == 1 ? woTasks.time_spent_hours.ToString() + " hour " : ""
                                                , woTasks.time_spent_minutes > 0 && woTasks.time_spent_minutes > 1 ? woTasks.time_spent_minutes.ToString() + " minutes " : ""
                                                , woTasks.time_spent_minutes > 0 && woTasks.time_spent_minutes == 1 ? woTasks.time_spent_minutes.ToString() + " minute " : "");
                                        //woTasks.hourly_rate = tasks.hourly_rate;
                                        woTasks.created_at = DateTime.UtcNow;
                                        woTasks.is_archive = false;
                                        woTasks.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                        woTasks.modified_at = DateTime.UtcNow;
                                        woDetails.WorkOrderTasks.Add(woTasks);
                                    }
                                }
                            }

                            var wotasks = woDetails.WorkOrderTasks.Where(x => x.wo_id == woRequest.wo_id).ToList();

                            var removeTasks = wotasks.Where(p => !woRequest.WorkOrderTasks.Any(p2 => p2.task_id == p.task_id) && p.is_archive == false).ToList();

                            if (removeTasks.Count > 0)
                            {
                                removeTasks.ForEach(x => x.is_archive = true);
                            }

                            #endregion

                            #region Work Order Attachments

                            if (woRequest.WorkOrderAttachments != null)
                            {
                                foreach (var attachments in woRequest.WorkOrderAttachments)
                                {
                                    WorkOrderAttachments woAttachments = new WorkOrderAttachments();
                                    if (attachments.wo_attachment_id == null || attachments.wo_attachment_id == Guid.Empty)
                                    {
                                        var alreadyexist = woDetails.WorkOrderAttachments.Where(x => x.wo_id == woDetails.wo_id && x.user_uploaded_name == attachments.user_uploaded_name).FirstOrDefault();
                                        if (alreadyexist != null && alreadyexist.wo_attachment_id != null && alreadyexist.wo_attachment_id != Guid.Empty)
                                        {
                                            if (alreadyexist.is_archive == true)
                                            {
                                                alreadyexist.modified_at = DateTime.UtcNow;
                                                alreadyexist.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                                alreadyexist.is_archive = false;
                                                alreadyexist.filename = attachments.filename;
                                            }
                                        }
                                        else
                                        {
                                            woAttachments.filename = attachments.filename;
                                            woAttachments.user_uploaded_name = attachments.user_uploaded_name;
                                            woAttachments.created_at = DateTime.UtcNow;
                                            woAttachments.is_archive = false;
                                            woAttachments.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                            woAttachments.modified_at = DateTime.UtcNow;
                                            woDetails.WorkOrderAttachments.Add(woAttachments);
                                        }
                                    }
                                }

                                var woattachments = woDetails.WorkOrderAttachments.Where(x => x.wo_id == woRequest.wo_id).ToList();

                                var removeAttachments = woattachments.Where(p => !woRequest.WorkOrderAttachments.Any(p2 => p2.user_uploaded_name == p.user_uploaded_name) && p.is_archive == false).ToList();

                                if (removeAttachments.Count > 0)
                                {
                                    removeAttachments.ForEach(x => x.is_archive = true);
                                }
                            }

                            #endregion

                            result = _UoW.WorkOrderRepository.Update(woDetails).Result;
                            _logger.LogInformation("woDetails are updated");
                            if (result > 0)
                            {
                                #region Work Order Issues Link

                                var workOrderDetails = await _UoW.MRRepository.GetMRsByWorkOrderId(woDetails.wo_id);
                                _logger.LogInformation("GetMRsByWorkOrderId are fetched");
                                if ((workOrderDetails != null && workOrderDetails.Count > 0) && (woRequest.Issue != null && woRequest.Issue.Count > 0))
                                {
                                    var alreadyExistsMRs = workOrderDetails.Select(x => x.mr_id);
                                    foreach (var item in woRequest.Issue)
                                    {
                                        var addMR = alreadyExistsMRs.Contains(item.mr_id);
                                        if (addMR == false)
                                        {
                                            var mrDetails = await _UoW.MRRepository.GetMRsById(item.mr_id);
                                            if (mrDetails != null && mrDetails.wo_id != woRequest.wo_id)
                                            {
                                                mrDetails.wo_id = woRequest.wo_id;
                                                mrDetails.status = woRequest.status == (int)Status.WOCompleted ? (int)Status.MRCompeleted : (int)Status.MRWorkOrderCreated;
                                                int res = await _UoW.MRRepository.Update(mrDetails);
                                                if (res > 0)
                                                {
                                                    _UoW.SaveChanges();
                                                    var issueDetails = _UoW.IssueRepository.GetIssueByIssueId(item.issue_id);
                                                    var activityLog = NotificationGenerator.WorkOrderIssueLink(issueDetails.issue_number.ToString(), issueDetails.name.ToString());
                                                    activityLog.asset_id = woRequest.asset_id;
                                                    activityLog.created_at = DateTime.UtcNow;
                                                    activityLog.ref_id = woDetails.wo_id.ToString();
                                                    activityLog.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                                    activityLog.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                                    var updateActivity = await _UoW.BaseGenericRepository<AssetActivityLogs>().Update(activityLog);
                                                    if (updateActivity == true)
                                                    {
                                                        _UoW.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    var newIssueLinked = woRequest.Issue.Select(x => x.mr_id);
                                    foreach (var item in alreadyExistsMRs)
                                    {
                                        var deleteMR = newIssueLinked.Contains(item);
                                        if (deleteMR == false)
                                        {
                                            var mrDetails = await _UoW.MRRepository.GetMRsById(item);
                                            if (mrDetails != null)
                                            {
                                                mrDetails.wo_id = null;
                                                mrDetails.status = (int)Status.MROpen;
                                                int res = await _UoW.MRRepository.Update(mrDetails);
                                                if (res > 0)
                                                {
                                                    _UoW.SaveChanges();
                                                    var issueDetails = _UoW.IssueRepository.GetIssueByMrId(mrDetails.mr_id);
                                                    var activityLog = NotificationGenerator.WorkOrderIssueUnLink(issueDetails.issue_number.ToString(), issueDetails.name.ToString());
                                                    activityLog.asset_id = woRequest.asset_id;
                                                    activityLog.created_at = DateTime.UtcNow;
                                                    activityLog.ref_id = woDetails.wo_id.ToString();
                                                    activityLog.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                                    activityLog.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                                    var updateActivity = await _UoW.BaseGenericRepository<AssetActivityLogs>().Update(activityLog);

                                                    //var activityLogs = NotificationGenerator.WorkOrdersCreated(addWO.Asset.name, woRequest.title.ToString(), workorder_type);
                                                    //activityLogs.asset_id = woRequest.asset_id;
                                                    //activityLogs.created_at = DateTime.UtcNow;
                                                    //activityLogs.ref_id = addWO.wo_id.ToString();
                                                    //activityLogs.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                                    //activityLogs.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                                    //var res = await _UoW.BaseGenericRepository<AssetActivityLogs>().Update(activityLogs);
                                                    if (updateActivity == true)
                                                    {
                                                        _UoW.SaveChanges();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if ((workOrderDetails != null && workOrderDetails.Count > 0) && (woRequest.Issue == null || woRequest.Issue.Count == 0))
                                    {
                                        foreach (var item in workOrderDetails)
                                        {
                                            var mrDetails = await _UoW.MRRepository.GetMRsById(item.mr_id);
                                            if (mrDetails != null)
                                            {
                                                mrDetails.wo_id = null;
                                                mrDetails.status = (int)Status.MROpen;
                                                int res = await _UoW.MRRepository.Update(mrDetails);
                                                if (res > 0)
                                                {
                                                    _UoW.SaveChanges();
                                                }
                                            }
                                        }
                                    }
                                    else if ((workOrderDetails == null || workOrderDetails.Count == 0) && (woRequest.Issue != null && woRequest.Issue.Count > 0))
                                    {
                                        //var deletedIssues = woRequest.Issue.Where(x => x.is_archive == true);
                                        //var addedIssues = woRequest.Issue.Where(x => x.is_archive == false);

                                        //foreach (var issues in deletedIssues)
                                        //{
                                        //    Issue issue = new Issue();
                                        //    var mrDetails = await _UoW.MRRepository.GetMRsById(issues.mr_id);
                                        //    if (mrDetails != null)
                                        //    {
                                        //        mrDetails.wo_id = null;
                                        //        mrDetails.status = (int)Status.MROpen;
                                        //        int res = await _UoW.MRRepository.Update(mrDetails);
                                        //        if (res > 0)
                                        //        {
                                        //            _UoW.SaveChanges();
                                        //        }
                                        //    }
                                        //}
                                        //foreach (var issues in addedIssues)
                                        //{
                                        //    Issue issue = new Issue();
                                        //    var mrDetails = await _UoW.MRRepository.GetMRsById(issues.mr_id);
                                        //    if (mrDetails != null && mrDetails.wo_id != woRequest.wo_id)
                                        //    {
                                        //        mrDetails.wo_id = woRequest.wo_id;
                                        //        mrDetails.status = woRequest.status == (int)Status.WOCompleted ? (int)Status.MRCompeleted : (int)Status.MRWorkOrderCreated;
                                        //        int res = await _UoW.MRRepository.Update(mrDetails);
                                        //        if (res > 0)
                                        //        {
                                        //            _UoW.SaveChanges();
                                        //        }
                                        //    }

                                        //}

                                        foreach (var issues in woRequest.Issue)
                                        {
                                            var mrDetails = await _UoW.MRRepository.GetMRsById(issues.mr_id);
                                            if (mrDetails != null && mrDetails.wo_id != woRequest.wo_id)
                                            {
                                                mrDetails.wo_id = woRequest.wo_id;
                                                mrDetails.status = woRequest.status == (int)Status.WOCompleted ? (int)Status.MRCompeleted : (int)Status.MRWorkOrderCreated;
                                                int res = await _UoW.MRRepository.Update(mrDetails);
                                                if (res > 0)
                                                {
                                                    _UoW.SaveChanges();
                                                }
                                            }

                                        }
                                    }
                                }

                                #endregion

                                #region Work Order Completed

                                if (woRequest.status == (int)Status.WOCompleted)
                                {
                                    _logger.LogInformation("In WO completed if loop");
                                    if (woRequest.Issue != null && woRequest.Issue.Count > 0)
                                    {
                                        foreach (var issue in woRequest.Issue)
                                        {
                                            var issueDetails = _UoW.IssueRepository.GetIssueByIssueId(issue.issue_id);
                                            if (issueDetails != null)
                                            {
                                                issueDetails.status = (int)Status.Completed;
                                                issueDetails.modified_at = DateTime.UtcNow;
                                                issueDetails.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                                issueDetails.IssueRecord.status = (int)Status.Completed;
                                                issueDetails.IssueRecord.fixed_datetime = DateTime.UtcNow;
                                                issueDetails.IssueRecord.fixed_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                                bool updateresult = await _UoW.IssueRepository.Update(issueDetails);

                                                if (updateresult)
                                                {
                                                    IssueStatus issueStatus = new IssueStatus();
                                                    issueStatus.issue_id = issueDetails.issue_uuid;
                                                    issueStatus.status = (int)Status.Completed;
                                                    issueStatus.modified_at = DateTime.UtcNow;
                                                    issueStatus.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                                    var response = _UoW.IssueRepository.CreateIssueStatus(issueStatus);

                                                    if (response > 0)
                                                    {
                                                        _UoW.SaveChanges();
                                                        var activityLogs = NotificationGenerator.IssueResolved(issueDetails.Asset.name, issueDetails.Asset.meter_hours.Value.ToString(), issueDetails.name);
                                                        activityLogs.asset_id = issueDetails.asset_id;
                                                        activityLogs.created_at = DateTime.UtcNow;
                                                        activityLogs.ref_id = issueDetails.issue_uuid.ToString();
                                                        activityLogs.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                                        activityLogs.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                                        var res = await _UoW.BaseGenericRepository<AssetActivityLogs>().Update(activityLogs);
                                                        if (res == true)
                                                        {
                                                            _UoW.SaveChanges();
                                                        }
                                                        result = (int)ResponseStatusNumber.Success;
                                                    }
                                                    else
                                                    {
                                                        _dbtransaction.Rollback();
                                                        result = (int)ResponseStatusNumber.Error;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    /// complete task if wo is getting completed
                                    if (woDetails.WorkOrderTasks != null && woDetails.WorkOrderTasks.Count > 0)
                                    {

                                        foreach (var wotask in woDetails.WorkOrderTasks)
                                        {
                                            var getwotask = _UoW.WorkOrderRepository.GetWOTaskById(wotask.wo_task_id);
                                            getwotask.status = (int)Status.Completed;
                                            var updatewotask = await _UoW.BaseGenericRepository<WorkOrderTasks>().Update(getwotask);
                                            _logger.LogInformation("WorkOrderTasks Deleted ");
                                        }
                                    }
                                    _logger.LogInformation("WO completed loop completed ");
                                }

                                #endregion

                                #region Work Order Status History 

                                if (previousStatus != woRequest.status)
                                {
                                    var status_value = "";
                                    if (woRequest.status == (int)Status.WOOpen)
                                    {
                                        status_value = "Open";
                                    }
                                    else if (woRequest.status == (int)Status.WOReOpen)
                                    {
                                        status_value = "ReOpen";
                                    }
                                    else if (woRequest.status == (int)Status.WOInProgress)
                                    {
                                        status_value = "InProgress";
                                    }
                                    else if (woRequest.status == (int)Status.WOCompleted)
                                    {
                                        status_value = "Completed";
                                    }
                                    var assetDetails = _UoW.AssetRepository.GetAssetByAssetID(woRequest.asset_id.ToString());
                                    var activityLog = NotificationGenerator.WorkOrderUpdated(assetDetails.name, woRequest.title.ToString(), status_value);
                                    activityLog.asset_id = woRequest.asset_id;
                                    activityLog.created_at = DateTime.UtcNow;
                                    activityLog.ref_id = woDetails.wo_id.ToString();
                                    activityLog.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                    activityLog.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                    activityLog.data = "Status changed from " + previousStatus + " to" + woRequest.status;
                                    var updateActivity = await _UoW.BaseGenericRepository<AssetActivityLogs>().Update(activityLog);
                                    if (updateActivity == true)
                                    {
                                        _UoW.SaveChanges();
                                    }
                                }

                                #endregion

                                #region Work Order Due At and Completed Date Status History

                                if ((due_date != null && woRequest.due_at != null) && due_date != woRequest.due_at)
                                {
                                    var assetDetails = _UoW.AssetRepository.GetAssetByAssetID(woRequest.asset_id.ToString());
                                    var activityLog = NotificationGenerator.WorkOrderDateUpdated(assetDetails.name, woRequest.title.ToString(), woRequest.due_at.ToString());
                                    activityLog.asset_id = woRequest.asset_id;
                                    activityLog.created_at = DateTime.UtcNow;
                                    activityLog.ref_id = woDetails.wo_id.ToString();
                                    activityLog.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                    activityLog.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                    activityLog.data = "Due Date changed from " + due_date + " to" + woRequest.due_at;
                                    var updateActivity = await _UoW.BaseGenericRepository<AssetActivityLogs>().Update(activityLog);
                                    if (updateActivity == true)
                                    {
                                        _UoW.SaveChanges();
                                    }
                                }

                                if ((complete_date != null && woRequest.completed_date != null) && complete_date != woRequest.completed_date)
                                {
                                    var assetDetails = _UoW.AssetRepository.GetAssetByAssetID(woRequest.asset_id.ToString());
                                    var activityLog = NotificationGenerator.WorkOrderDateUpdated(assetDetails.name, woRequest.title.ToString(), woRequest.completed_date.ToString());
                                    activityLog.asset_id = woRequest.asset_id;
                                    activityLog.created_at = DateTime.UtcNow;
                                    activityLog.ref_id = woDetails.wo_id.ToString();
                                    activityLog.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                    activityLog.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                    activityLog.data = "Completed Date changed from " + complete_date + " to" + woRequest.completed_date;
                                    var updateActivity = await _UoW.BaseGenericRepository<AssetActivityLogs>().Update(activityLog);
                                    if (updateActivity == true)
                                    {
                                        _UoW.SaveChanges();
                                    }
                                }

                                #endregion

                                _UoW.SaveChanges();
                                _dbtransaction.Commit();
                                var return_wo = woDetails;
                                return_wo.WorkOrderAttachments = return_wo.WorkOrderAttachments.Where(x => !x.is_archive).ToList();
                                woResponse = _mapper.Map<WorkOrderResponseModel>(return_wo);
                                woResponse.response_status = result;
                            }
                        }
                    }
                    else
                    {
                        var assetDetails = _UoW.AssetRepository.GetAssetByAssetID(woRequest.asset_id.ToString());
                        var addWO = _mapper.Map<WorkOrders>(woRequest);
                        addWO.status = (int)Status.WOOpen;
                        addWO.is_archive = false;
                        addWO.site_id = assetDetails.site_id;
                        addWO.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                        addWO.created_at = DateTime.UtcNow;

                        addWO.WorkOrderTasks.ToList().ForEach(x =>
                        {
                            x.created_at = DateTime.UtcNow;
                            x.modified_at = DateTime.UtcNow;
                            x.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                        });

                        addWO.WorkOrderAttachments.ToList().ForEach(x =>
                        {
                            x.created_at = DateTime.UtcNow;
                            x.modified_at = DateTime.UtcNow;
                            x.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                        });

                        result = await _UoW.WorkOrderRepository.Insert(addWO);
                        if (result > 0)
                        {
                            if (woRequest.mr_id != null && woRequest.mr_id != Guid.Empty)
                            {
                                var mrDetails = await _UoW.MRRepository.GetMRsById((Guid)woRequest.mr_id);
                                if (mrDetails != null)
                                {
                                    mrDetails.modified_at = DateTime.UtcNow;
                                    mrDetails.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                    mrDetails.status = (int)Status.MRWorkOrderCreated;
                                    mrDetails.wo_id = addWO.wo_id;

                                    result = _UoW.MRRepository.Update(mrDetails).Result;

                                    if (result > 0)
                                    {
                                        _UoW.SaveChanges();
                                    }
                                    else
                                    {
                                        _dbtransaction.Rollback();
                                        woResponse.response_status = result;
                                    }
                                }
                                else
                                {
                                    _dbtransaction.Rollback();
                                    woResponse.response_status = (int)ResponseStatusNumber.Error; ;
                                }
                            }
                            if (woRequest.Issue != null)
                            {
                                foreach (var item in woRequest.Issue)
                                {
                                    var mrDetails = await _UoW.MRRepository.GetMRsById((Guid)item.mr_id);

                                    if (mrDetails != null)
                                    {
                                        mrDetails.modified_at = DateTime.UtcNow;
                                        mrDetails.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                        mrDetails.status = (int)Status.MRWorkOrderCreated;
                                        mrDetails.wo_id = addWO.wo_id;

                                        result = _UoW.MRRepository.Update(mrDetails).Result;

                                        //if (result > 0)
                                        //{
                                        //    _UoW.SaveChanges();
                                        //}
                                        if (result > 0)
                                        {
                                            _UoW.SaveChanges();
                                            var issueDetails = _UoW.IssueRepository.GetIssueByIssueId(item.issue_id);
                                            var activityLog = NotificationGenerator.WorkOrderIssueLink(issueDetails.issue_number.ToString(), issueDetails.name.ToString());
                                            activityLog.asset_id = woRequest.asset_id;
                                            activityLog.created_at = DateTime.UtcNow;
                                            activityLog.ref_id = mrDetails.wo_id.ToString();
                                            activityLog.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                            activityLog.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                            var updateActivity = await _UoW.BaseGenericRepository<AssetActivityLogs>().Update(activityLog);
                                            if (updateActivity == true)
                                            {
                                                _UoW.SaveChanges();
                                            }
                                        }
                                        else
                                        {
                                            _dbtransaction.Rollback();
                                            woResponse.response_status = result;
                                        }
                                    }
                                    else
                                    {
                                        _dbtransaction.Rollback();
                                        woResponse.response_status = (int)ResponseStatusNumber.Error; ;
                                    }
                                }
                                //_dbtransaction.Commit();
                                //result = (int)ResponseStatusNumber.Success;
                                //woResponse = _mapper.Map<WorkOrderResponseModel>(addWO);
                                //woResponse.response_status = result;
                            }

                            _UoW.SaveChanges();
                            var workorder_type = "";
                            if (woRequest.wo_type == (int)Status.WOManual)
                            {
                                workorder_type = "Manually";
                            }
                            else if (woRequest.wo_type == (int)Status.WOInspection)
                            {
                                workorder_type = "From Maintenance Request for Issue";
                            }
                            else if (woRequest.wo_type == (int)Status.WOManualMaintenaceRequest)
                            {
                                workorder_type = "From Maintenance Request Created Manually";
                            }
                            var activityLogs = NotificationGenerator.WorkOrdersCreated(addWO.Asset.name, woRequest.title.ToString(), workorder_type);
                            activityLogs.asset_id = woRequest.asset_id;
                            activityLogs.created_at = DateTime.UtcNow;
                            activityLogs.ref_id = addWO.wo_id.ToString();
                            activityLogs.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                            activityLogs.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            var res = await _UoW.BaseGenericRepository<AssetActivityLogs>().Update(activityLogs);
                            if (res == true)
                            {
                                _UoW.SaveChanges();
                            }

                            _dbtransaction.Commit();
                            woResponse = _mapper.Map<WorkOrderResponseModel>(addWO);
                            result = (int)ResponseStatusNumber.Success;
                            woResponse.response_status = result;

                        }
                        else
                        {
                            woResponse.response_status = result;
                        }
                    }

                }
                catch (Exception ex)
                {
                    _dbtransaction.Rollback();
                    woResponse.response_status = (int)ResponseStatusNumber.Error;
                }
            }

            return woResponse;
        }

        public async Task<ListViewModel<WorkOrderResponseModel>> GetAllWorkOrder(GetAllWorkOrderRequestModel requestModel)
        {
            ListViewModel<WorkOrderResponseModel> WOList = new ListViewModel<WorkOrderResponseModel>();
            try
            {
                // get all Work Orders by site
                var woItems = await _UoW.WorkOrderRepository.GetAllWorkOrders(requestModel);

                if (woItems?.list?.Count > 0)
                {
                    int totalwo = woItems.list.Count;
                    if (requestModel.pageSize > 0 && requestModel.pageIndex > 0)
                    {
                        woItems.list = woItems.list.Skip((requestModel.pageIndex - 1) * requestModel.pageSize).Take(requestModel.pageSize).ToList();
                    }

                    WOList.list = _mapper.Map<List<WorkOrderResponseModel>>(woItems.list);

                    WOList.list.ForEach(x =>
                    {
                        x.WorkOrderTasks = x.WorkOrderTasks.Where(x => !x.is_archive).ToList();
                        var task_estimate_total = 0;
                        var task_time_spent_total = 0;
                        foreach (var item in x.WorkOrderTasks)
                        {
                            if (item.Tasks.task_est_hours != 0 || item.Tasks.task_est_minutes != 0)
                            {
                                task_estimate_total += (item.Tasks.task_est_hours * 60 + item.Tasks.task_est_minutes);
                            }
                            if (item.time_spent_hours != 0 || item.time_spent_minutes != 0)
                            {
                                task_time_spent_total += (item.time_spent_hours * 60 + item.time_spent_minutes);
                            }
                        }

                        var totalMinutes = task_estimate_total;
                        var time = TimeSpan.FromMinutes(totalMinutes);
                        x.task_total_estimate_time = String.Concat(
                                                  (int)time.TotalHours > 0 && (int)time.TotalHours > 1 ? time.TotalHours.ToString() + " hours " : ""
                                                , (int)time.TotalHours > 0 && (int)time.TotalHours == 1 ? time.TotalHours.ToString() + " hour " : ""
                                                , time.Minutes > 0 && time.Minutes > 1 ? time.Minutes.ToString() + " minutes " : ""
                                                , time.Minutes > 0 && time.Minutes == 1 ? time.Minutes.ToString() + " minute " : "");

                        var total_spent_Minutes = task_time_spent_total;
                        var spent_time = TimeSpan.FromMinutes(total_spent_Minutes);
                        x.task_total_time_spent = String.Concat(
                                                  (int)spent_time.TotalHours > 0 && (int)spent_time.TotalHours > 1 ? spent_time.TotalHours.ToString() + " hours " : ""
                                                , (int)spent_time.TotalHours > 0 && (int)spent_time.TotalHours == 1 ? spent_time.TotalHours.ToString() + " hour " : ""
                                                , spent_time.Minutes > 0 && spent_time.Minutes > 1 ? spent_time.Minutes.ToString() + " minutes " : ""
                                                , spent_time.Minutes > 0 && spent_time.Minutes == 1 ? spent_time.Minutes.ToString() + " minute " : "");

                    });

                    WOList.list.ForEach(x =>
                    {
                        x.WorkOrderAttachments = x.WorkOrderAttachments.Where(x => !x.is_archive).ToList();
                    });

                    WOList.list.ForEach(x =>
                    {
                        List<WorkOrderMRResponseModel> remove_MR_list = new List<WorkOrderMRResponseModel>();
                        foreach (var item in x.MaintenanceRequests)
                        {
                            if (item.mr_type == (int)Status.Inspection && item.mr_type_id != null)
                            {
                                var inspection = _UoW.MRRepository.GetInspectionIdByIssueId((Guid)item.mr_type_id);
                                item.inspection_id = inspection.inspection_id;
                                item.meter_at_inspection = inspection.meter_hours.ToString();
                            }
                            if (x.wo_type == (int)Status.WOManualMaintenaceRequest)
                            {
                                if (item.Issue != null && item.Issue.Count > 0)
                                {
                                    // do nothing
                                }
                                else
                                {
                                    // remove MR
                                    remove_MR_list.Add(item);
                                    //x.MaintenanceRequests.Remove(item);
                                }
                            }

                        }
                        remove_MR_list.ForEach(y =>
                        {
                            x.MaintenanceRequests.Remove(y);
                        });

                    });

                    WOList.listsize = totalwo;
                    WOList.pageIndex = requestModel.pageIndex;
                    WOList.pageSize = requestModel.pageSize;
                    WOList.result = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    WOList.result = (int)ResponseStatusNumber.NotFound;
                }
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message);
                WOList.result = (int)ResponseStatusNumber.Error;
            }
            return WOList;
        }

        public async Task<ListViewModel<IssueResponseModel>> GetNewIssuesListByAssetId(FilterWorkOrderIssueRequestModel filter_type)
        {
            ListViewModel<IssueResponseModel> IssueList = new ListViewModel<IssueResponseModel>();
            try
            {
                var issueList = _UoW.WorkOrderRepository.GetNewIssuesListByAssetId(filter_type.asset_id, filter_type.mr_id, filter_type.searchstring);

                if (issueList?.Count > 0)
                {
                    if (filter_type.pageindex == 0 || filter_type.pagesize == 0)
                    {
                        filter_type.pagesize = 20;
                        filter_type.pageindex = 1;
                    }
                    IssueList.listsize = issueList.Count;
                    issueList = issueList.Skip((filter_type.pageindex - 1) * filter_type.pagesize).Take(filter_type.pagesize).ToList();
                    IssueList.list = _mapper.Map<List<IssueResponseModel>>(issueList);
                    IssueList.pageIndex = filter_type.pageindex;
                    IssueList.pageSize = filter_type.pagesize;
                    IssueList.result = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    IssueList.result = (int)ResponseStatusNumber.NotFound;
                }
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message);
                IssueList.result = (int)ResponseStatusNumber.Error;
            }
            return IssueList;
        }

        public async Task<ListViewModel<AssetActivityLogsViewModel>> WorkOrderStatusHistory(Guid wo_id)
        {
            ListViewModel<AssetActivityLogsViewModel> StatusHistoryList = new ListViewModel<AssetActivityLogsViewModel>();
            try
            {
                var logList = _UoW.WorkOrderRepository.WorkOrderStatusHistory(wo_id);

                if (logList?.Count > 0)
                {
                    StatusHistoryList.list = _mapper.Map<List<AssetActivityLogsViewModel>>(logList);
                    foreach (var item in StatusHistoryList.list)
                    {
                        var user = await _UoW.UserRepository.GetUserByID(item.updated_by.ToString());
                        item.updated_by_name = user.firstname + " " + user.lastname;
                    }

                    StatusHistoryList.result = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    StatusHistoryList.result = (int)ResponseStatusNumber.NotFound;
                }
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message);
                StatusHistoryList.result = (int)ResponseStatusNumber.Error;
            }
            return StatusHistoryList;
        }

        public async Task<int> DeleteWorkOrder(Guid wo_id)
        {
            int result = (int)ResponseStatusNumber.Error;
            using (var _dbtransaction = _UoW.BeginTransaction())
            {
                try
                {
                    if (wo_id != null && wo_id != Guid.Empty)
                    {
                        var mrDetails = await _UoW.MRRepository.GetMRsByWorkOrderId(wo_id);
                        if (mrDetails != null && mrDetails.Count > 0)
                        {
                            foreach (var item in mrDetails)
                            {
                                item.wo_id = null;
                                item.status = (int)Status.MROpen;
                                int res = await _UoW.MRRepository.Update(item);
                                if (res > 0)
                                {
                                    _UoW.SaveChanges();
                                }
                            }
                        }
                        var woDetails = _UoW.WorkOrderRepository.GetWorkOrderById(wo_id);
                        if (woDetails != null)
                        {
                            woDetails.is_archive = true;
                            var woresult = _UoW.WorkOrderRepository.Update(woDetails).Result;
                            if (woresult > 0)
                            {
                                var status_value = "";
                                if (woDetails.status == (int)Status.WOOpen)
                                {
                                    status_value = "Open";
                                }
                                else if (woDetails.status == (int)Status.WOReOpen)
                                {
                                    status_value = "ReOpen";
                                }
                                else if (woDetails.status == (int)Status.WOInProgress)
                                {
                                    status_value = "InProgress";
                                }
                                else if (woDetails.status == (int)Status.WOCompleted)
                                {
                                    status_value = "Completed";
                                }

                                var assetDetails = _UoW.AssetRepository.GetAssetByAssetID(woDetails.asset_id.ToString());
                                var activityLogs = NotificationGenerator.WorkOrderDeleted(assetDetails.name, woDetails.title.ToString(), status_value);
                                activityLogs.asset_id = woDetails.asset_id.Value;
                                activityLogs.created_at = DateTime.UtcNow;
                                activityLogs.ref_id = woDetails.wo_id.ToString();
                                activityLogs.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                activityLogs.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                var activity = await _UoW.BaseGenericRepository<AssetActivityLogs>().Update(activityLogs);
                                if (activity == true)
                                {
                                    _UoW.SaveChanges();
                                    _dbtransaction.Commit();
                                    result = (int)ResponseStatusNumber.Success;
                                }
                            }
                        }
                        else
                        {
                            _dbtransaction.Rollback();
                            result = (int)ResponseStatusNumber.Error;
                        }
                    }
                    else
                    {
                        _dbtransaction.Rollback();
                        result = (int)ResponseStatusNumber.Error;
                    }
                }
                catch (Exception e)
                {
                    result = (int)ResponseStatusNumber.Error;
                    _dbtransaction.Rollback();
                    throw e;
                }
            }
            return result;
        }

        public ListViewModel<WorkOrderResponseModel> FilterWorkOrderTitleOption(FilterWorkOrderOptionsRequestModel requestModel)
        {
            ListViewModel<WorkOrderResponseModel> responseModel = new ListViewModel<WorkOrderResponseModel>();
            try
            {
                var response = _UoW.WorkOrderRepository.FilterWorkOrderTitleOption(requestModel);
                if (response.Item2 > 0)
                {
                    int totalworkorder = response.Item2;

                    //  response = response.Skip((requestModel.pageIndex - 1) * requestModel.pageSize).Take(requestModel.pageSize).ToList();
                    responseModel.list = _mapper.Map<List<WorkOrderResponseModel>>(response.Item1);
                    responseModel.listsize = totalworkorder;
                    responseModel.pageIndex = requestModel.pageIndex;
                    responseModel.pageSize = requestModel.pageSize;
                }
                responseModel.result = (int)ResponseStatusNumber.Success;
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message);
                throw e;
            }
            return responseModel;
        }

        public ListViewModel<WorkOrderResponseModel> FilterWorkOrderNumberOption(FilterWorkOrderOptionsRequestModel requestModel)
        {
            ListViewModel<WorkOrderResponseModel> responseModel = new ListViewModel<WorkOrderResponseModel>();
            try
            {
                var response = _UoW.WorkOrderRepository.FilterWorkOrderNumberOption(requestModel);
                if (response.Item2 > 0)
                {
                    int totalworkorder = response.Item2;

                    // response = response.Skip((requestModel.pageIndex - 1) * requestModel.pageSize).Take(requestModel.pageSize).ToList();
                    responseModel.list = _mapper.Map<List<WorkOrderResponseModel>>(response.Item1);
                    responseModel.listsize = totalworkorder;
                    responseModel.pageIndex = requestModel.pageIndex;
                    responseModel.pageSize = requestModel.pageSize;
                }
                responseModel.result = (int)ResponseStatusNumber.Success;
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message);
                throw e;
            }
            return responseModel;
        }

        public async Task<WorkOrderResponseModel> GetWorkOrderById(Guid wo_id)
        {
            WorkOrderResponseModel resModel = new WorkOrderResponseModel();
            try
            {
                var mrRequests = _UoW.WorkOrderRepository.GetWorkOrderById(wo_id);
                if (mrRequests != null)
                {
                    mrRequests.WorkOrderAttachments = mrRequests.WorkOrderAttachments.Where(s => !s.is_archive).ToList();
                    mrRequests.WorkOrderTasks = mrRequests.WorkOrderTasks.Where(s => !s.is_archive).ToList();
                    mrRequests.MaintenanceRequests = mrRequests.MaintenanceRequests.Where(s => !s.is_archive).ToList();
                    resModel = _mapper.Map<WorkOrderResponseModel>(mrRequests);
                    if (resModel != null)
                    {
                        resModel.response_status = (int)ResponseStatusNumber.Success;
                    }
                }
            }
            catch (Exception e)
            {
                throw e;
            }
            return resModel;
        }

        public ListViewModel<NewFlowWorkorderListResponseModel> GetAllWorkOrdersNewflow(NewFlowWorkorderListRequestModel requestModel)
        {
            ListViewModel<NewFlowWorkorderListResponseModel> response = new ListViewModel<NewFlowWorkorderListResponseModel>();

            var WO = _UoW.WorkOrderRepository.GetAllWorkOrdersNewflow(UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString(), requestModel);

            var mappedlist = _mapper.Map<List<NewFlowWorkorderListResponseModel>>(WO.Item1);

            if (mappedlist != null && mappedlist.Count > 0)
            {
                response.list = mappedlist;
                response.listsize = WO.Item2;
                response.list.ForEach(s =>
                {
                    if (s.due_date == DateTime.MinValue)
                    {
                        s.due_date = null;
                    }
                    if (s.wo_type == (int)Status.Acceptance_Test_WO)
                    {
                        s.wo_number = "AT" + s.wo_number;
                    }
                    else if (s.wo_type == (int)Status.Maintenance_WO)
                    {
                        s.wo_number = "WO" + s.wo_number;
                    }
                    if (!String.IsNullOrEmpty(s.wo_type_name))
                    {
                        s.wo_type_name = s.wo_type_name.Replace("WO", "");
                    }

                    /*
                    if (s.due_date != null && s.due_date != DateTime.MinValue)
                    {
                        var due_timing = DateTimeUtil.GetDueOverdueTimingByDueDate(s.due_date.Value);

                        string due_in = due_timing.Item1;
                        bool is_overdue = due_timing.Item2;

                        if (due_in != null)
                        {
                            s.due_in = due_in;
                        }
                        s.is_overdue = is_overdue;
                    }
                    */
                    if (!requestModel.is_request_for_backlogcards)
                    {
                        s.status_wise_asset_count_obj = new status_wise_asset_count_obj();
                        var status_wise_asset_count_obj = GetStatusWiseWOLineCountByWOId(s.wo_id);
                        if (status_wise_asset_count_obj != null)
                        {
                            s.status_wise_asset_count_obj = status_wise_asset_count_obj;
                        }

                        // if user is Watcher of this WorkOrder then return TRUE else FALSE
                        bool isWatcher = _UoW.WorkOrderRepository.CheckUserIsWatcherOrNot(s.wo_id, UpdatedGenericRequestmodel.CurrentUser.requested_by);
                        s.is_watcher = isWatcher;

                        var get_watchers = _UoW.WorkOrderRepository.GetAllWatcherOfWorkorder(s.wo_id);
                        var maped_watchers_list = _mapper.Map<List<watcher_users_list>>(get_watchers);
                        s.watcher_users_list = maped_watchers_list;
                    }

                });
            }
            return response;
        }

        public ListViewModel<GetAllWorkOrdersNewflowOptimizedResponsemodel> GetAllWorkOrdersNewflowOptimized(NewFlowWorkorderListRequestModel requestModel)
        {
            ListViewModel<GetAllWorkOrdersNewflowOptimizedResponsemodel> response = new ListViewModel<GetAllWorkOrdersNewflowOptimizedResponsemodel>();

            var WO = _UoW.WorkOrderRepository.GetAllWorkOrdersNewflowOptimized(UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString(), requestModel);

            var mappedlist = _mapper.Map<List<GetAllWorkOrdersNewflowOptimizedResponsemodel>>(WO.Item1);

            if (mappedlist != null && mappedlist.Count > 0)
            {
                response.list = mappedlist;
                response.listsize = WO.Item2;
                response.list.ForEach(s =>
                {
                    if (s.due_date == DateTime.MinValue)
                    {
                        s.due_date = null;
                    }
                    if (!requestModel.is_request_for_backlogcards)
                    {
                        s.status_wise_asset_count_obj = new status_wise_asset_count_obj();
                        var status_wise_asset_count_obj = GetStatusWiseWOLineCountByWOId(s.wo_id);
                        if (status_wise_asset_count_obj != null)
                        {
                            s.status_wise_asset_count_obj = status_wise_asset_count_obj;
                        }

                        // if user is Watcher of this WorkOrder then return TRUE else FALSE
                        bool isWatcher = _UoW.WorkOrderRepository.CheckUserIsWatcherOrNot(s.wo_id, UpdatedGenericRequestmodel.CurrentUser.requested_by);
                        s.is_watcher = isWatcher;

                        var get_watchers = _UoW.WorkOrderRepository.GetAllWatcherOfWorkorder(s.wo_id);
                        var maped_watchers_list = _mapper.Map<List<watcher_users_list>>(get_watchers);
                        s.watcher_users_list = maped_watchers_list;
                    }

                });
            }
            return response;
        }

        public async Task<CreateWorkorderNewflowResponsemodel> CreateWorkorderNewflow(NewFlowCreateWORequestModel requestModel, string S3_aws_access_key, string S3_aws_secret_key)
        {
            // WO number copy from WO_number to manual_WO_number for old records

            /* var wos = _UoW.WorkOrderRepository.GetWOs();

             wos.ForEach(x =>
             {
                 x.manual_wo_number = x.wo_number.ToString();
             });
             var updtae = _UoW.BaseGenericRepository<WorkOrders>().UpdateList(wos);*/
            //int response = (int)ResponseStatusNumber.Error;
            CreateWorkorderNewflowResponsemodel response = null;
            NotificationService notificationService = new NotificationService(_mapper);
            try
            {
                if (requestModel.wo_id != null && requestModel.wo_id != Guid.Empty) /// update WO
                {
                    // check WO number for duplicate 


                    var get_WO = _UoW.WorkOrderRepository.GetWorkOrderByIdForComplete(requestModel.wo_id.Value);
                    string old_wo_number = get_WO.manual_wo_number;
                    get_WO.client_company_id = requestModel.client_company_id;
                    get_WO.description = requestModel.Description;
                    get_WO.po_number = requestModel.po_number;
                    get_WO.site_id = requestModel.site_id;
                    get_WO.technician_user_id = requestModel.technician_user_id;
                    get_WO.start_date = requestModel.start_date;
                    get_WO.wo_type = requestModel.wo_type;
                    get_WO.modified_at = DateTime.UtcNow;
                    get_WO.due_at = requestModel.due_date;
                    get_WO.responsible_party_id = requestModel.responsible_party_id;
                    get_WO.ir_visual_camera_type = requestModel.ir_visual_camera_type;
                    get_WO.ir_visual_image_type = requestModel.ir_visual_image_type;
                    get_WO.is_reminder_required = requestModel.is_reminder_required;
                    get_WO.reminders_frequency_json = requestModel.reminders_frequency_json;
                    get_WO.wo_vendor_notes_json = requestModel.wo_vendor_notes_json;
                    //get_WO.calendarId = requestModel.calendarId;

                    if (DateTime.UtcNow.Date == get_WO.due_at.Date )
                    {
                        get_WO.wo_due_overdue_flag = (int)wo_due_overdue_flag.WO_Due;
                    }
                    else if (DateTime.UtcNow.Date > get_WO.due_at.Date)
                    {
                        get_WO.wo_due_overdue_flag = (int)wo_due_overdue_flag.WO_Overdue;
                    }
                    else
                    {
                        get_WO.wo_due_overdue_flag = (int)wo_due_overdue_flag.WO_OnTrack;
                    }
                    var due_timing = DateTimeUtil.GetDueOverdueTimingByDueDate(get_WO.due_at);
                    get_WO.wo_due_time_duration = due_timing.Item1;


                    if (!String.IsNullOrEmpty(requestModel.manual_wo_number))
                    {
                        var is_WO_number_valid = _UoW.WorkOrderRepository.IsWONumberValid(requestModel.wo_id, requestModel.manual_wo_number);
                        if (!is_WO_number_valid)
                        {
                            response = new CreateWorkorderNewflowResponsemodel();
                            response.response_status = (int)ResponseStatusNumber.duplicate_wo_number;
                            return response;
                        }
                        get_WO.manual_wo_number = requestModel.manual_wo_number;
                    }

                    // Assign Requested Technicians user to Workorder
                    if (requestModel.workorder_technician_list != null && requestModel.workorder_technician_list.Count > 0)
                    {
                        foreach (var tech_user_id in requestModel.workorder_technician_list)
                        {
                            if (tech_user_id.wo_technician_mapping_id == null)
                            {
                                WorkOrderTechnicianMapping workOrderTechnicianMapping = new WorkOrderTechnicianMapping();
                                workOrderTechnicianMapping.wo_id = get_WO.wo_id;
                                workOrderTechnicianMapping.user_id = tech_user_id.user_id;
                                workOrderTechnicianMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                                workOrderTechnicianMapping.created_at = DateTime.UtcNow;
                                workOrderTechnicianMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                workOrderTechnicianMapping.is_deleted = false;

                                var insert_WOUserMapping = await _UoW.BaseGenericRepository<WorkOrderTechnicianMapping>().Insert(workOrderTechnicianMapping);
                                _UoW.SaveChanges();
                            }
                            else if (tech_user_id.is_deleted == true && tech_user_id.wo_technician_mapping_id != null && tech_user_id.wo_technician_mapping_id != Guid.Empty)
                            {
                                var get_WorkOrderTechnicianMapping = _UoW.WorkOrderRepository.GetWorkOrderTechnicianMappingById(tech_user_id.wo_technician_mapping_id.Value);

                                get_WorkOrderTechnicianMapping.is_deleted = true;
                                get_WorkOrderTechnicianMapping.modified_at = DateTime.UtcNow;
                                get_WorkOrderTechnicianMapping.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                var update_WOUserMapping = await _UoW.BaseGenericRepository<WorkOrderTechnicianMapping>().Update(get_WorkOrderTechnicianMapping);
                                _UoW.SaveChanges();
                            }

                            //Assign site if curr site is not assigned to user
                            if (!tech_user_id.is_curr_site_user)
                            {
                                var get_usersite = _UoW.UserRepository.GetUserSiteById(tech_user_id.user_id);
                                if (get_usersite != null)
                                {
                                    get_usersite.status = (int)Status.Active;
                                    get_usersite.modified_at = DateTime.UtcNow;
                                    get_usersite.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                    await _UoW.BaseGenericRepository<UserSites>().Update(get_usersite);
                                    _UoW.SaveChanges();
                                }
                                else
                                {
                                    UserSites userSite = new UserSites();
                                    userSite.user_id = tech_user_id.user_id;
                                    userSite.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                    userSite.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                                    userSite.created_at = DateTime.UtcNow;
                                    userSite.status = (int)Status.Active;
                                    userSite.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                    await _UoW.BaseGenericRepository<UserSites>().Insert(userSite);
                                    _UoW.SaveChanges();
                                }
                            }
                        }
                        // Send Notification to All New Assigned Technicians
                        var ref_wo_id = new List<string> { requestModel.wo_id.Value.ToString() };
                        var new_assigned_technicians_ids = requestModel.workorder_technician_list.Where(x=>x.is_deleted==false&&x.wo_technician_mapping_id==null).Select(x=>x.user_id.ToString()).ToList();
                       
                        await notificationService.SendNotificationGenericNewFlow((int)NotificationType_Version_2.WorkOrderAssignedToTechnician, ref_wo_id, new_assigned_technicians_ids);
                    }

                    // Assign Requested BackOffice user to Workorder
                    if (requestModel.workorder_backoffice_list != null && requestModel.workorder_backoffice_list.Count > 0)
                    {
                        foreach (var bo_user in requestModel.workorder_backoffice_list)
                        {
                            if (bo_user.wo_backoffice_user_mapping_id == null)
                            {
                                WorkOrderBackOfficeUserMapping WorkOrderBackOfficeUserMapping = new WorkOrderBackOfficeUserMapping();
                                WorkOrderBackOfficeUserMapping.wo_id = get_WO.wo_id;
                                WorkOrderBackOfficeUserMapping.user_id = bo_user.user_id;
                                WorkOrderBackOfficeUserMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                                WorkOrderBackOfficeUserMapping.created_at = DateTime.UtcNow;
                                WorkOrderBackOfficeUserMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                WorkOrderBackOfficeUserMapping.is_deleted = false;

                                var insert_WOBOUserMapping = await _UoW.BaseGenericRepository<WorkOrderBackOfficeUserMapping>().Insert(WorkOrderBackOfficeUserMapping);
                                _UoW.SaveChanges();
                            }
                            else if (bo_user.is_deleted == true && bo_user.wo_backoffice_user_mapping_id != null && bo_user.wo_backoffice_user_mapping_id != Guid.Empty)
                            {
                                var get_WorkOrderBackOfficeMapping = _UoW.WorkOrderRepository.GetWorkOrderBackOfficeMappingById(bo_user.wo_backoffice_user_mapping_id.Value);

                                get_WorkOrderBackOfficeMapping.is_deleted = true;
                                get_WorkOrderBackOfficeMapping.modified_at = DateTime.UtcNow;
                                get_WorkOrderBackOfficeMapping.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                var update_WOBOUserMapping = await _UoW.BaseGenericRepository<WorkOrderBackOfficeUserMapping>().Update(get_WorkOrderBackOfficeMapping);
                                _UoW.SaveChanges();
                            }
                            //Assign site if curr site is not assigned to user
                            if (!bo_user.is_curr_site_user)
                            {
                                var get_usersite = _UoW.UserRepository.GetUserSiteById(bo_user.user_id);
                                if (get_usersite != null)
                                {
                                    get_usersite.status = (int)Status.Active;
                                    get_usersite.modified_at = DateTime.UtcNow;
                                    get_usersite.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                    await _UoW.BaseGenericRepository<UserSites>().Update(get_usersite);
                                    _UoW.SaveChanges();
                                }
                                else
                                {
                                    UserSites userSite = new UserSites();
                                    userSite.user_id = bo_user.user_id;
                                    userSite.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                    userSite.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                                    userSite.created_at = DateTime.UtcNow;
                                    userSite.status = (int)Status.Active;
                                    userSite.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                    await _UoW.BaseGenericRepository<UserSites>().Insert(userSite);
                                    _UoW.SaveChanges();
                                }
                            }
                        }
                    }

                    //Assign Vendors/Contacts to Workorder
                    if (requestModel.workorder_vendor_contacts_list != null && requestModel.workorder_vendor_contacts_list.Count > 0)
                    {
                        var deleted_vendors = requestModel.workorder_vendor_contacts_list.Where(x => x.is_deleted).ToList();

                        foreach (var vendor_obj in requestModel.workorder_vendor_contacts_list.Where(x => !x.is_deleted))
                        {
                            //check for deleted contacts -- FE will send only those contacts which are selected so we will check in db for other contacts and mark them as deleted
                            var requested_contacts = vendor_obj.contacts_list.Select(x => x.contact_id).ToList();
                            var get_extra_contacts_db = _UoW.WorkOrderRepository.GetVendorContactMappings(requested_contacts , vendor_obj.vendor_id.Value , requestModel.wo_id.Value);

                            // delete perticular contact from WO
                            foreach (var get_wo_contact_map in get_extra_contacts_db)
                            {   
                                get_wo_contact_map.is_deleted = true;
                                get_wo_contact_map.modified_at = DateTime.UtcNow;
                                get_wo_contact_map.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                var delete_wo_con = await _UoW.BaseGenericRepository<WorkordersVendorContactsMapping>().Update(get_wo_contact_map);
                                _UoW.SaveChanges();
                                
                            }

                            var added_contacts = vendor_obj.contacts_list.Where(x => (x.workorders_vendor_contacts_mapping_id == null
                            || x.workorders_vendor_contacts_mapping_id == Guid.Empty) && !x.is_deleted).ToList();
                            
                            if (added_contacts.Count > 0)
                            {
                                var contacts_ids_ = _UoW.WorkOrderRepository.CheckIfContactsAreAlreadyAdded(requestModel.wo_id.Value, added_contacts.Select(x => x.contact_id).ToList());
                                added_contacts = added_contacts.Where(x => contacts_ids_.Contains(x.contact_id)).ToList();
                            }
                            //Add new contact to WO
                            foreach (var contact in added_contacts)
                            {
                                WorkordersVendorContactsMapping workordersVendorContactsMapping = new WorkordersVendorContactsMapping();
                                workordersVendorContactsMapping.vendor_id = vendor_obj.vendor_id;
                                workordersVendorContactsMapping.contact_id = contact.contact_id;
                                workordersVendorContactsMapping.contact_invite_status = (int)Contact_Invite_Status.Pending;
                                workordersVendorContactsMapping.wo_id = requestModel.wo_id.Value;
                                workordersVendorContactsMapping.is_deleted = false;
                                workordersVendorContactsMapping.created_at = DateTime.UtcNow;
                                workordersVendorContactsMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                var insert_wo_contact = await _UoW.BaseGenericRepository<WorkordersVendorContactsMapping>().Insert(workordersVendorContactsMapping);
                                _UoW.SaveChanges();
                            }
                           
                        }

                        //delete all wo-contacts mapping if vendor removed from WO
                        foreach (var vendor_obj in deleted_vendors)
                        {
                            var contacts_wo_mapping = _UoW.WorkOrderRepository.GetWOContactMappingsByVendorId(vendor_obj.vendor_id.Value, requestModel.wo_id.Value);
                            foreach (var item in contacts_wo_mapping)
                            {
                                item.is_deleted = true;
                                item.modified_at = DateTime.UtcNow;
                                item.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                var delete_wo_con = await _UoW.BaseGenericRepository<WorkordersVendorContactsMapping>().Update(item);
                                _UoW.SaveChanges();
                            }
                        }
                    }


                    var update = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_WO);
                    if (update)
                    {
                        _UoW.SaveChanges();

                        // move images to updated folder  -- > 23-8-2024  now we are creatig folder with name as wo_id so no need to move ir imgs
                       // MoveIRImageTonewFolder(requestModel.wo_id.Value, old_wo_number, S3_aws_access_key, S3_aws_secret_key);

                        response = new CreateWorkorderNewflowResponsemodel();
                        response.wo_id = get_WO.wo_id;
                        response.wo_number = "AT" + get_WO.wo_number.ToString();
                        response.manual_wo_number = "AT" + get_WO.manual_wo_number;

                        /*region send email to tech and lead
                        #region send email to tech and lead
                        if (requestModel.is_required_to_send_email)
                        {
                            // send email to newly added technician 
                            var new_technicians = requestModel.workorder_technician_list.Where(x => x.wo_technician_mapping_id == null).ToList();
                            var list = _UoW.WorkOrderRepository.CheckForUserEmailFlag(new_technicians.Select(x => x.user_id).ToList());
                            new_technicians = new_technicians.Where(x => list.Contains(x.user_id)).ToList();
                            foreach (var new_tech in new_technicians)
                            {
                                await SendEmailtoWOAssignedUser(new_tech.user_id, get_WO.wo_id, ConfigurationManager.AppSettings["email_template_id_WorkorderLeadAssign"], 1, true, false);
                            }
                            // send email to newly added backoffice 
                            var new_backoffice = requestModel.workorder_backoffice_list.Where(x => x.wo_backoffice_user_mapping_id == null).ToList();
                            var list1 = _UoW.WorkOrderRepository.CheckForUserEmailFlag(new_backoffice.Select(x => x.user_id).ToList());
                            new_backoffice = new_backoffice.Where(x => list1.Contains(x.user_id)).ToList();
                            foreach (var item in new_backoffice)
                            {
                                await SendEmailtoWOAssignedUser(item.user_id, get_WO.wo_id, ConfigurationManager.AppSettings["email_template_id_WorkorderLeadAssign"], 2, true, false);
                            }
                            // send email to removed technician
                            var removed_technicians = requestModel.workorder_technician_list.Where(x => x.wo_technician_mapping_id != null && x.is_deleted).ToList();
                            var list2 = _UoW.WorkOrderRepository.CheckForUserEmailFlag(removed_technicians.Select(x => x.user_id).ToList());
                            removed_technicians = removed_technicians.Where(x => list2.Contains(x.user_id)).ToList();
                            foreach (var new_tech in removed_technicians)
                            {
                                await SendEmailtoWORemovedUser(new_tech.user_id, get_WO.wo_id, ConfigurationManager.AppSettings["email_template_id_WorkorderTechRemoved"], 1);
                            }
                            // send email to removed backoffice 
                            var removed_backoffice = requestModel.workorder_backoffice_list.Where(x => x.wo_backoffice_user_mapping_id != null && x.is_deleted).ToList();
                            var list3 = _UoW.WorkOrderRepository.CheckForUserEmailFlag(removed_backoffice.Select(x => x.user_id).ToList());
                            removed_backoffice = removed_backoffice.Where(x => list3.Contains(x.user_id)).ToList();
                            foreach (var item in removed_backoffice)
                            {
                                await SendEmailtoWORemovedUser(item.user_id, get_WO.wo_id, ConfigurationManager.AppSettings["email_template_id_WorkorderLeadRemoved"], 2);
                            }

                            // send email to existing tech users for WO update
                            var get_already_exist_technicians = _UoW.WorkOrderRepository.GetWOAlreadyAssignedTech(new_technicians.Select(x => x.user_id).ToList(), requestModel.wo_id.Value);
                            var list4 = _UoW.WorkOrderRepository.CheckForUserEmailFlag(get_already_exist_technicians.Select(x => x.user_id).ToList());
                            get_already_exist_technicians = get_already_exist_technicians.Where(x => list4.Contains(x.user_id)).ToList();
                            foreach (var already_assigned_tech in get_already_exist_technicians)
                            {
                                await SendEmailtoWOAssignedUser(already_assigned_tech.user_id, get_WO.wo_id, ConfigurationManager.AppSettings["email_template_id_WorkorderLeadAssign"], 1, true, true);
                            }
                            // send email to existing lead users for WO update
                            var get_already_exist_leads = _UoW.WorkOrderRepository.GetWOAlreadyAssignedBackoffice(new_backoffice.Select(x => x.user_id).ToList(), requestModel.wo_id.Value);
                            var list5 = _UoW.WorkOrderRepository.CheckForUserEmailFlag(get_already_exist_leads.Select(x => x.user_id).ToList());
                            get_already_exist_leads = get_already_exist_leads.Where(x => list5.Contains(x.user_id)).ToList();
                            foreach (var already_assigned_lead in get_already_exist_leads)
                            {
                                await SendEmailtoWOAssignedUser(already_assigned_lead.user_id, get_WO.wo_id, ConfigurationManager.AppSettings["email_template_id_WorkorderLeadAssign"], 2, true, true);
                            }
                        }
                        #endregion send email to tech and lead
                        */

                        #region send email to tech and lead
                        if (requestModel.is_required_to_send_email)
                        {
                            // send email to newly added technician 
                            var new_technicians = requestModel.workorder_technician_list.Where(x => x.wo_technician_mapping_id == null).ToList();
                            foreach (var new_tech in new_technicians)
                            {
                                await SendEmailtoWOAssignedUser(new_tech.user_id, get_WO.wo_id, ConfigurationManager.AppSettings["email_template_id_WorkorderTechAssign"], 1, false);
                            }
                            // send email to newly added backoffice 
                            var new_backoffice = requestModel.workorder_backoffice_list.Where(x => x.wo_backoffice_user_mapping_id == null).ToList();
                            foreach (var item in new_backoffice)
                            {
                                await SendEmailtoWOAssignedUser(item.user_id, get_WO.wo_id, ConfigurationManager.AppSettings["email_template_id_WorkorderLeadAssign"], 2, false);
                            }
                            // send email to removed technician
                            var removed_technicians = requestModel.workorder_technician_list.Where(x => x.wo_technician_mapping_id != null && x.is_deleted).ToList();
                            foreach (var new_tech in removed_technicians)
                            {
                                await SendEmailtoWORemovedUser(new_tech.user_id, get_WO.wo_id, ConfigurationManager.AppSettings["email_template_id_WorkorderTechRemoved"], 1);
                            }
                            // send email to removed backoffice 
                            var removed_backoffice = requestModel.workorder_backoffice_list.Where(x => x.wo_backoffice_user_mapping_id != null && x.is_deleted).ToList();
                            foreach (var item in removed_backoffice)
                            {
                                await SendEmailtoWORemovedUser(item.user_id, get_WO.wo_id, ConfigurationManager.AppSettings["email_template_id_WorkorderLeadRemoved"], 2);
                            }

                            // send email to existing tech users for WO update
                            var get_already_exist_technicians = _UoW.WorkOrderRepository.GetWOAlreadyAssignedTech(new_technicians.Select(x => x.user_id).ToList(), requestModel.wo_id.Value);
                            foreach (var already_assigned_tech in get_already_exist_technicians)
                            {
                                await SendEmailtoWOAssignedUser(already_assigned_tech.user_id, get_WO.wo_id, ConfigurationManager.AppSettings["email_template_id_WorkorderTechAssign"], 1, true);
                            }
                            // send email to existing lead users for WO update
                            var get_already_exist_leads = _UoW.WorkOrderRepository.GetWOAlreadyAssignedBackoffice(new_backoffice.Select(x => x.user_id).ToList(), requestModel.wo_id.Value);
                            foreach (var already_assigned_lead in get_already_exist_leads)
                            {
                                await SendEmailtoWOAssignedUser(already_assigned_lead.user_id, get_WO.wo_id, ConfigurationManager.AppSettings["email_template_id_WorkorderLeadAssign"], 2, true);
                            }
                        }
                        #endregion send email to tech and lead

                    }
                }
                else // insert WO
                {
                    // if WO is created by technician then add tech in assigned tech
                    if (UpdatedGenericRequestmodel.CurrentUser.device_uuid != Guid.Empty)
                    {
                        if (requestModel.workorder_technician_list == null || requestModel.workorder_technician_list.Count == 0)
                        {
                            requestModel.workorder_technician_list = new List<WO_TechnicianUser_Mapping_Class>();
                        }
                        WO_TechnicianUser_Mapping_Class WO_TechnicianUser_Mapping_Class = new WO_TechnicianUser_Mapping_Class();
                        WO_TechnicianUser_Mapping_Class.user_id = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                        WO_TechnicianUser_Mapping_Class.is_deleted = false;
                        requestModel.workorder_technician_list.Add(WO_TechnicianUser_Mapping_Class);
                    }

                    WorkOrders WO = new WorkOrders();
                    WO.client_company_id = requestModel.client_company_id;
                    WO.description = requestModel.Description;
                    WO.po_number = requestModel.po_number;
                    WO.site_id = requestModel.site_id;
                    WO.technician_user_id = requestModel.technician_user_id;
                    WO.start_date = requestModel.start_date;
                    WO.is_archive = false;
                    WO.created_at = DateTime.UtcNow;
                    WO.modified_at = DateTime.UtcNow;
                    WO.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                    WO.wo_type = requestModel.wo_type;
                    WO.status = requestModel.wo_status;
                    WO.responsible_party_id = requestModel.responsible_party_id;
                    WO.ir_visual_camera_type = requestModel.ir_visual_camera_type;
                    WO.ir_visual_image_type = requestModel.ir_visual_image_type;
                    WO.is_reminder_required = requestModel.is_reminder_required;
                    WO.reminders_frequency_json = requestModel.reminders_frequency_json;
                    WO.wo_vendor_notes_json = requestModel.wo_vendor_notes_json;
                    //WO.calendarId = requestModel.calendarId;

                    /* 
                    //if wo is released-open then quote will be accepted
                    if (requestModel.wo_status == (int)Status.ReleasedOpenWO)
                    {
                        WO.quote_status = (int)Status.QuoteAccepted;
                    }
                    //if wo is planned then quote will be open
                    else if (requestModel.wo_status == (int)Status.PlannedWO)
                    {
                        WO.quote_status = (int)Status.open;
                    }
                    */

                    if (requestModel.quote_status != null)
                    {
                        WO.quote_status = requestModel.quote_status;
                        WO.status = (int)Status.QuoteWO;
                    }

                    var is_WO_number_valid = _UoW.WorkOrderRepository.IsWONumberValid(null, requestModel.manual_wo_number);
                    if (!is_WO_number_valid)
                    {
                        response = new CreateWorkorderNewflowResponsemodel();
                        response.response_status = (int)ResponseStatusNumber.duplicate_wo_number;
                        return response;
                    }
                    WO.manual_wo_number = requestModel.manual_wo_number;
                    WO.due_at = requestModel.due_date;

                    if (DateTime.UtcNow.Date == WO.due_at.Date)
                    {
                        WO.wo_due_overdue_flag = (int)wo_due_overdue_flag.WO_Due;
                    }
                    else if (DateTime.UtcNow.Date > WO.due_at.Date)
                    {
                        WO.wo_due_overdue_flag = (int)wo_due_overdue_flag.WO_Overdue;
                    }
                    else
                    {
                        WO.wo_due_overdue_flag = (int)wo_due_overdue_flag.WO_OnTrack;
                    }
                    var due_timing = DateTimeUtil.GetDueOverdueTimingByDueDate(WO.due_at);
                    WO.wo_due_time_duration = due_timing.Item1;


                    var insert = await _UoW.BaseGenericRepository<WorkOrders>().Insert(WO);
                    if (insert)
                    {
                        if (requestModel.wo_type == (int)Status.IR_Scan_WO || requestModel.wo_type == (int)Status.Onboarding_WO)
                        {
                            //Add Default Building Location
                            TempFormIOBuildings tempFormIOBuildings = new TempFormIOBuildings();
                            tempFormIOBuildings.temp_formio_building_name = "Default";
                            tempFormIOBuildings.wo_id = WO.wo_id;
                            tempFormIOBuildings.created_at = DateTime.UtcNow;
                            tempFormIOBuildings.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            tempFormIOBuildings.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var inserttempbuilding = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Insert(tempFormIOBuildings);

                            //Add Default Floors Location
                            TempFormIOFloors tempFormIOFloors = new TempFormIOFloors();
                            tempFormIOFloors.temp_formio_floor_name = "Default";
                            tempFormIOFloors.temp_formiobuilding_id = tempFormIOBuildings.temp_formiobuilding_id;
                            tempFormIOFloors.wo_id = WO.wo_id;
                            tempFormIOFloors.created_at = DateTime.UtcNow;
                            tempFormIOFloors.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            tempFormIOFloors.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var insertfloor = await _UoW.BaseGenericRepository<TempFormIOFloors>().Insert(tempFormIOFloors);

                            //Add Default Room Location
                            TempFormIORooms tempFormIORooms = new TempFormIORooms();
                            tempFormIORooms.temp_formio_room_name = "Default";
                            tempFormIORooms.temp_formiofloor_id = tempFormIOFloors.temp_formiofloor_id;
                            tempFormIORooms.wo_id = WO.wo_id;
                            tempFormIORooms.created_at = DateTime.UtcNow;
                            tempFormIORooms.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            tempFormIORooms.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var insertroom = await _UoW.BaseGenericRepository<TempFormIORooms>().Insert(tempFormIORooms);
                            _UoW.SaveChanges();
                        }

                        _UoW.SaveChanges();
                        if (String.IsNullOrEmpty(requestModel.manual_wo_number))
                        {
                            WO.manual_wo_number = WO.wo_number.ToString();
                            var update = await _UoW.BaseGenericRepository<WorkOrders>().Update(WO);
                            _UoW.SaveChanges();
                        }

                        // Assign Requested Technicians user to Workorder
                        if (requestModel.workorder_technician_list != null && requestModel.workorder_technician_list.Count > 0)
                        {
                            foreach (var tech_user_id in requestModel.workorder_technician_list)
                            {
                                WorkOrderTechnicianMapping workOrderTechnicianMapping = new WorkOrderTechnicianMapping();
                                workOrderTechnicianMapping.wo_id = WO.wo_id;
                                workOrderTechnicianMapping.user_id = tech_user_id.user_id;
                                workOrderTechnicianMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                                workOrderTechnicianMapping.created_at = DateTime.UtcNow;
                                workOrderTechnicianMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                workOrderTechnicianMapping.is_deleted = false;

                                var insert_WOUserMapping = await _UoW.BaseGenericRepository<WorkOrderTechnicianMapping>().Insert(workOrderTechnicianMapping);
                                _UoW.SaveChanges();

                                //Assign site if curr site is not assigned to user
                                if (!tech_user_id.is_curr_site_user)
                                {
                                    var get_usersite = _UoW.UserRepository.GetUserSiteById(tech_user_id.user_id);
                                    if(get_usersite != null)
                                    {
                                        get_usersite.status = (int)Status.Active;
                                        get_usersite.modified_at = DateTime.UtcNow;
                                        get_usersite.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                        await _UoW.BaseGenericRepository<UserSites>().Update(get_usersite);
                                        _UoW.SaveChanges();
                                    }
                                    else
                                    {
                                        UserSites userSite = new UserSites();
                                        userSite.user_id = tech_user_id.user_id;
                                        userSite.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                        userSite.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                                        userSite.created_at = DateTime.UtcNow;
                                        userSite.status = (int)Status.Active;
                                        userSite.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                        await _UoW.BaseGenericRepository<UserSites>().Insert(userSite);
                                        _UoW.SaveChanges();
                                    }
                                }
                            }

                            // Send Notification to All New Assigned Technicians
                            var ref_wo_id = new List<string> { WO.wo_id.ToString() };
                            var new_assigned_technicians_ids = requestModel.workorder_technician_list.Select(x => x.user_id.ToString()).ToList();

                            await notificationService.SendNotificationGenericNewFlow((int)NotificationType_Version_2.WorkOrderAssignedToTechnician, ref_wo_id, new_assigned_technicians_ids);
                        }
                        // Assign Requested BackOffice user to Workorder
                        if (requestModel.workorder_backoffice_list != null && requestModel.workorder_backoffice_list.Count > 0)
                        {
                            foreach (var bo_user in requestModel.workorder_backoffice_list)
                            {
                                WorkOrderBackOfficeUserMapping WorkOrderBackOfficeUserMapping = new WorkOrderBackOfficeUserMapping();
                                WorkOrderBackOfficeUserMapping.wo_id = WO.wo_id;
                                WorkOrderBackOfficeUserMapping.user_id = bo_user.user_id;
                                WorkOrderBackOfficeUserMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                                WorkOrderBackOfficeUserMapping.created_at = DateTime.UtcNow;
                                WorkOrderBackOfficeUserMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                WorkOrderBackOfficeUserMapping.is_deleted = false;

                                var insert_WOBOUserMapping = await _UoW.BaseGenericRepository<WorkOrderBackOfficeUserMapping>().Insert(WorkOrderBackOfficeUserMapping);
                                _UoW.SaveChanges();
                                //Assign site if curr site is not assigned to user
                                if (!bo_user.is_curr_site_user)
                                {
                                    var get_usersite = _UoW.UserRepository.GetUserSiteById(bo_user.user_id);
                                    if (get_usersite != null)
                                    {
                                        get_usersite.status = (int)Status.Active;
                                        get_usersite.modified_at = DateTime.UtcNow;
                                        get_usersite.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                        await _UoW.BaseGenericRepository<UserSites>().Update(get_usersite);
                                        _UoW.SaveChanges();
                                    }
                                    else
                                    {
                                        UserSites userSite = new UserSites();
                                        userSite.user_id = bo_user.user_id;
                                        userSite.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                        userSite.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                                        userSite.created_at = DateTime.UtcNow;
                                        userSite.status = (int)Status.Active;
                                        userSite.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                        await _UoW.BaseGenericRepository<UserSites>().Insert(userSite);
                                        _UoW.SaveChanges();
                                    }
                                }
                            }
                        }

                        //Assign Vendors/Contacts to Workorder
                        if (requestModel.workorder_vendor_contacts_list != null && requestModel.workorder_vendor_contacts_list.Count > 0)
                        {
                            var deleted_vendors = requestModel.workorder_vendor_contacts_list.Where(x=>!x.is_deleted).ToList();

                            foreach (var vendor_obj in requestModel.workorder_vendor_contacts_list.Where(x => !x.is_deleted))
                            {
                                var added_contacts = vendor_obj.contacts_list.Where(x=> (x.workorders_vendor_contacts_mapping_id==null 
                                || x.workorders_vendor_contacts_mapping_id == Guid.Empty) && !x.is_deleted).ToList();

                                var deleted_contacts = vendor_obj.contacts_list.Where(x=> x.workorders_vendor_contacts_mapping_id!=null && x.is_deleted).ToList();
                                //Add new contact to WO
                                foreach (var contact in added_contacts)
                                {
                                    WorkordersVendorContactsMapping workordersVendorContactsMapping = new WorkordersVendorContactsMapping();
                                    workordersVendorContactsMapping.vendor_id = vendor_obj.vendor_id;
                                    workordersVendorContactsMapping.contact_id = contact.contact_id;
                                    workordersVendorContactsMapping.contact_invite_status = (int)Contact_Invite_Status.Pending;
                                    workordersVendorContactsMapping.wo_id = WO.wo_id;
                                    workordersVendorContactsMapping.is_deleted = false;
                                    workordersVendorContactsMapping.created_at = DateTime.UtcNow;
                                    workordersVendorContactsMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                    var insert_wo_contact = await _UoW.BaseGenericRepository<WorkordersVendorContactsMapping>().Insert(workordersVendorContactsMapping);
                                    _UoW.SaveChanges();
                                }
                                // delete perticular contact from WO
                                foreach (var contact in deleted_contacts)
                                {
                                    var get_wo_contact_map = _UoW.WorkOrderRepository.GetWOContactMappingById(contact.workorders_vendor_contacts_mapping_id.Value);
                                    if (get_wo_contact_map != null)
                                    {
                                        get_wo_contact_map.is_deleted = true;
                                        get_wo_contact_map.modified_at = DateTime.UtcNow;
                                        get_wo_contact_map.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                        var delete_wo_con = await _UoW.BaseGenericRepository<WorkordersVendorContactsMapping>().Update(get_wo_contact_map);
                                        _UoW.SaveChanges();
                                    }
                                }
                            }
                            //delete all wo-contacts mapping if vendor removed from WO
                            foreach (var vendor_obj in requestModel.workorder_vendor_contacts_list.Where(x => x.is_deleted))
                            {
                                var contacts_wo_mapping = _UoW.WorkOrderRepository.GetWOContactMappingsByVendorId(vendor_obj.vendor_id.Value, WO.wo_id);
                                foreach(var item in contacts_wo_mapping)
                                {
                                    item.is_deleted = true;
                                    item.modified_at = DateTime.UtcNow;
                                    item.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                    var delete_wo_con = await _UoW.BaseGenericRepository<WorkordersVendorContactsMapping>().Update(item);
                                    _UoW.SaveChanges();
                                }
                            }
                        }

                        if (requestModel.is_required_to_send_email)
                        {
                            // send email to tech
                            if (requestModel.workorder_technician_list != null && requestModel.workorder_technician_list.Count > 0)
                            {
                                foreach (var tech in requestModel.workorder_technician_list)
                                {
                                    await SendEmailtoWOAssignedUser(tech.user_id, WO.wo_id, ConfigurationManager.AppSettings["email_template_id_WorkorderLeadAssign"], 1,false, false);
                                }
                            }
                            // send email to Lead
                            if (requestModel.workorder_backoffice_list != null && requestModel.workorder_backoffice_list.Count > 0)
                            {
                                foreach (var lead in requestModel.workorder_backoffice_list)
                                {
                                    await SendEmailtoWOAssignedUser(lead.user_id, WO.wo_id, ConfigurationManager.AppSettings["email_template_id_WorkorderLeadAssign"], 2,false, false);
                                }
                            }
                        }
                        response = new CreateWorkorderNewflowResponsemodel();
                        response.wo_id = WO.wo_id;
                        response.wo_number = "AT" + WO.wo_number.ToString();
                        response.manual_wo_number = "AT" + WO.manual_wo_number;
                    }
                }

                AddUpdateCalendarEventForWorkorder(response.wo_id);
            }
            catch (Exception ex)
            {

            }
            return response;
        }

        public int AddUpdateCalendarEventForWorkorder(Guid wo_id)
        {
            UserService userService = new UserService(_mapper);
            try
            {
                var get_wo = _UoW.WorkOrderRepository.GetWObyIdforIRlambdareport(wo_id);
                if (get_wo != null)
                {
                    List<Reminders_Json_Class> reminders_list = new List<Reminders_Json_Class>();
                    var rem_json = get_wo.reminders_frequency_json;
                    if (get_wo.is_reminder_required && !String.IsNullOrEmpty(rem_json))
                    {
                        reminders_list = JsonConvert.DeserializeObject<List<Reminders_Json_Class>>(rem_json);
                        foreach (var item in reminders_list)
                        {
                            if (item.type == 1)//convert day to hours
                                item.duration = item.duration * 24;
                        }
                    }

                    if (!String.IsNullOrEmpty(get_wo.calendarId))
                    {
                        var contacts = _UoW.WorkOrderRepository.GetContactsEmailsByWOId(wo_id);

                        var site_name = _UoW.AssetPMsRepository.GetSiteNameById(get_wo.site_id);

                        CreateGoogleCalendarEventRequestModel createGoogleCalendarEventRequestModel = new CreateGoogleCalendarEventRequestModel();
                        createGoogleCalendarEventRequestModel.is_requested_for_add = false;
                        createGoogleCalendarEventRequestModel.attendees_email_list = contacts;
                        createGoogleCalendarEventRequestModel.event_id = get_wo.calendarId;
                        createGoogleCalendarEventRequestModel.reminders_list = reminders_list;
                        createGoogleCalendarEventRequestModel.summary = get_wo.manual_wo_number + " - " + site_name + " - " + UpdatedGenericRequestmodel.CurrentUser.domain_name;
                        createGoogleCalendarEventRequestModel.description = get_wo.description;
                        createGoogleCalendarEventRequestModel.start_datetime = get_wo.start_date;
                        createGoogleCalendarEventRequestModel.end_datetime = get_wo.due_at;

                        var res = userService.CreateGoogleCalendarEvent(createGoogleCalendarEventRequestModel);
                    }
                    else
                    {
                        var contacts = _UoW.WorkOrderRepository.GetContactsEmailsByWOId(wo_id);
                        var site_name = _UoW.AssetPMsRepository.GetSiteNameById(get_wo.site_id);
                        CreateGoogleCalendarEventRequestModel createGoogleCalendarEventRequestModel = new CreateGoogleCalendarEventRequestModel();
                        createGoogleCalendarEventRequestModel.is_requested_for_add = true;
                        createGoogleCalendarEventRequestModel.summary = get_wo.manual_wo_number + " - " + site_name + " - " + UpdatedGenericRequestmodel.CurrentUser.domain_name;
                        createGoogleCalendarEventRequestModel.description = get_wo.description;
                        createGoogleCalendarEventRequestModel.start_datetime = get_wo.start_date;
                        createGoogleCalendarEventRequestModel.end_datetime = get_wo.due_at;
                        createGoogleCalendarEventRequestModel.attendees_email_list = contacts;
                        createGoogleCalendarEventRequestModel.reminders_list = reminders_list;

                        var res = userService.CreateGoogleCalendarEvent(createGoogleCalendarEventRequestModel);
                        get_wo.calendarId = res.Item2;

                        var update = _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);
                        _UoW.SaveChanges();
                    }
                }
            }
            catch (Exception e)
            {
            }
            return 1;
        }

        public async Task<int> SendEmailtoWOAssignedUser(Guid to_user , Guid wo_id , string email_template_id , int user_type, bool request_for_wo_edit, bool is_for_update = false) //user_type = 1 then tech , user_type = 2 then lead
        {
            var get_wo_details = _UoW.WorkOrderRepository.GetWODetailsForUserAssignmentEmail(wo_id);
            var wo_assigned_techusers = get_wo_details.WorkOrderTechnicianMapping.Where(x => !x.is_deleted).ToList();
            //List<string> wo_assigned_techusers_names = new List<string>();
            List<tech_details> wo_assigned_techusers_details = new List<tech_details>();
            foreach(var item in wo_assigned_techusers)
            {
                //wo_assigned_techusers_names.Add(item.TechnicianUser.firstname + " " + item.TechnicianUser.lastname);
                tech_details tech_details = new tech_details();
                tech_details.technician_name = item.TechnicianUser.firstname + " " + item.TechnicianUser.lastname;
                tech_details.technician_email = item.TechnicianUser.email;
                tech_details.technician_phone = item.TechnicianUser.phone_number;
                wo_assigned_techusers_details.Add(tech_details);
            }
            var wo_assigned_leadusers = get_wo_details.WorkOrderBackOfficeUserMapping.Where(x => !x.is_deleted).ToList();
            //List<string> wo_assigned_leads_names = new List<string>();
            List<pm_details_class> wo_assigned_leads_details = new List<pm_details_class>();
            foreach (var item in wo_assigned_leadusers)
            {
                //wo_assigned_leads_names.Add(item.BackOfficeUser.firstname + " " + item.BackOfficeUser.lastname);
                pm_details_class pm_details_class = new pm_details_class();
                pm_details_class.pm_name = item.BackOfficeUser.firstname + " " + item.BackOfficeUser.lastname;
                pm_details_class.pm_email = item.BackOfficeUser.email;
                pm_details_class.pm_phone = item.BackOfficeUser.phone_number;
                wo_assigned_leads_details.Add(pm_details_class);
            }

            var vendor_details = _UoW.WorkOrderRepository.GetVedorContactsDetailsForWO(wo_id);

            string wo_assigned_tech_users = "";
            string wo_assigned_lead_users = "";

            //if (wo_assigned_techusers.Count() > 0)
            //   wo_assigned_tech_users = string.Join(" , ", wo_assigned_techusers_names);
            //if (wo_assigned_leadusers.Count() > 0)
            //    wo_assigned_lead_users = string.Join(" , ", wo_assigned_leads_names);

            //var get_site_details = _UoW.WorkOrderRepository.GetcompanyURLbySiteId(Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id));
            var get_site_details = _UoW.WorkOrderRepository.GetcompanyURLbySiteId(get_wo_details.site_id);
            var to_user_details = _UoW.WorkOrderRepository.GetUserFirstnameById(to_user);

            if (user_type == 1)// send email to technician
            {
                WOTechAssignEmailRequestmodel WOTechAssignEmailRequestmodel = new WOTechAssignEmailRequestmodel();

                WOTechAssignEmailRequestmodel.company_logo_url = get_site_details.Company.company_logo;
                WOTechAssignEmailRequestmodel.technician_name = to_user_details.firstname;
                WOTechAssignEmailRequestmodel.client_company_name = get_site_details.ClientCompany.client_company_name;
                WOTechAssignEmailRequestmodel.site_name = get_site_details.site_name;
                WOTechAssignEmailRequestmodel.manual_wo_number = get_wo_details.manual_wo_number;
                WOTechAssignEmailRequestmodel.wo_description = get_wo_details.description;
                if (!is_for_update)
                    WOTechAssignEmailRequestmodel.email_subject = "New Work Order" + " (" + get_wo_details.manual_wo_number + ")" + " Assignment";
                else
                    WOTechAssignEmailRequestmodel.email_subject = "Work Order" + " (" + get_wo_details.manual_wo_number + ")" + " Details Updated";
                WOTechAssignEmailRequestmodel.wo_start_date = get_wo_details.start_date.ToString("MM-dd-yyyy");
                WOTechAssignEmailRequestmodel.due_at = get_wo_details.due_at.ToString("MM-dd-yyyy");

                WOTechAssignEmailRequestmodel.technicians_names = wo_assigned_tech_users;
                WOTechAssignEmailRequestmodel.lead_names = wo_assigned_lead_users;

                WOTechAssignEmailRequestmodel.technicians = wo_assigned_techusers_details;
                WOTechAssignEmailRequestmodel.pms = wo_assigned_leads_details;
                WOTechAssignEmailRequestmodel.vendors = vendor_details;
                WOTechAssignEmailRequestmodel.wo_update = request_for_wo_edit;

                // send email to assigned tech
                await SendEmail.SendGridEmailWithTemplate(to_user_details.email, WOTechAssignEmailRequestmodel.email_subject, WOTechAssignEmailRequestmodel, email_template_id);
            }

            if (user_type == 2)// send email to lead/backoffice
            {
                WOLeadAssignEmailRequestmodel WOLeadAssignEmailRequestmodel = new WOLeadAssignEmailRequestmodel();

                WOLeadAssignEmailRequestmodel.company_logo_url = get_site_details.Company.company_logo;
                WOLeadAssignEmailRequestmodel.lead_name = to_user_details.firstname;
                WOLeadAssignEmailRequestmodel.client_company_name = get_site_details.ClientCompany.client_company_name;
                WOLeadAssignEmailRequestmodel.site_name = get_site_details.site_name;
                WOLeadAssignEmailRequestmodel.manual_wo_number = get_wo_details.manual_wo_number;
                WOLeadAssignEmailRequestmodel.wo_description = get_wo_details.description;
                if (!is_for_update)
                    WOLeadAssignEmailRequestmodel.email_subject = "New Work Order" +" ("+ get_wo_details.manual_wo_number +")"+ " Assignment";
                else
                    WOLeadAssignEmailRequestmodel.email_subject = "Work Order" + " (" + get_wo_details.manual_wo_number + ")" + " Details Updated";
                WOLeadAssignEmailRequestmodel.wo_start_date = get_wo_details.start_date.ToString("MM-dd-yyyy");
                WOLeadAssignEmailRequestmodel.due_at = get_wo_details.due_at.ToString("MM-dd-yyyy");

                WOLeadAssignEmailRequestmodel.technicians_names = wo_assigned_tech_users;
                WOLeadAssignEmailRequestmodel.lead_names = wo_assigned_lead_users;

                WOLeadAssignEmailRequestmodel.technicians = wo_assigned_techusers_details;
                WOLeadAssignEmailRequestmodel.pms = wo_assigned_leads_details;
                WOLeadAssignEmailRequestmodel.vendors = vendor_details;
                WOLeadAssignEmailRequestmodel.wo_update = request_for_wo_edit;

                // send email to assigned tech
                await SendEmail.SendGridEmailWithTemplate(to_user_details.email, WOLeadAssignEmailRequestmodel.email_subject, WOLeadAssignEmailRequestmodel, email_template_id);
            }

            return 1;
        }
        
        public async Task<int> SendEmailtoWORemovedUser(Guid to_user, Guid wo_id, string email_template_id, int user_type) //user_type = 1 then tech , user_type = 2 then lead
        {
            var get_wo_details = _UoW.WorkOrderRepository.GetWODetailsForUserAssignmentEmail(wo_id);
            var get_site_details = _UoW.WorkOrderRepository.GetcompanyURLbySiteId(Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id));
            var to_user_details = _UoW.WorkOrderRepository.GetUserFirstnameById(to_user);

            if (user_type == 1)// send email to technician
            {
                WOTechRemoveEmailRequestmodel WOTechRemoveEmailRequestmodel = new WOTechRemoveEmailRequestmodel();

                WOTechRemoveEmailRequestmodel.company_logo_url = get_site_details.Company.company_logo;
                WOTechRemoveEmailRequestmodel.technician_name = to_user_details.firstname;
                WOTechRemoveEmailRequestmodel.client_company_name = get_site_details.ClientCompany.client_company_name;
                WOTechRemoveEmailRequestmodel.site_name = get_site_details.site_name;
                WOTechRemoveEmailRequestmodel.manual_wo_number = get_wo_details.manual_wo_number;
                WOTechRemoveEmailRequestmodel.wo_description = get_wo_details.description;
                WOTechRemoveEmailRequestmodel.email_subject = "Work Order" + " (" + get_wo_details.manual_wo_number + ")" + " Removed";
                WOTechRemoveEmailRequestmodel.wo_start_date = get_wo_details.start_date.ToString("MM-dd-yyyy");
                WOTechRemoveEmailRequestmodel.due_at = get_wo_details.due_at.ToString("MM-dd-yyyy");

                // send email to assigned tech
                await SendEmail.SendGridEmailWithTemplate(to_user_details.email, WOTechRemoveEmailRequestmodel.email_subject, WOTechRemoveEmailRequestmodel, email_template_id);
            }

            if (user_type == 2)// send email to lead/backoffice
            {
                WOLeadRemoveEmailRequestmodel WOLeadRemoveEmailRequestmodel = new WOLeadRemoveEmailRequestmodel();

                WOLeadRemoveEmailRequestmodel.company_logo_url = get_site_details.Company.company_logo;
                WOLeadRemoveEmailRequestmodel.lead_name = to_user_details.firstname;
                WOLeadRemoveEmailRequestmodel.client_company_name = get_site_details.ClientCompany.client_company_name;
                WOLeadRemoveEmailRequestmodel.site_name = get_site_details.site_name;
                WOLeadRemoveEmailRequestmodel.manual_wo_number = get_wo_details.manual_wo_number;
                WOLeadRemoveEmailRequestmodel.wo_description = get_wo_details.description;
                WOLeadRemoveEmailRequestmodel.email_subject = "Work Order" + " (" + get_wo_details.manual_wo_number + ")" + " Removed";
                WOLeadRemoveEmailRequestmodel.wo_start_date = get_wo_details.start_date.ToString("MM-dd-yyyy");
                WOLeadRemoveEmailRequestmodel.due_at = get_wo_details.due_at.ToString("MM-dd-yyyy");

                // send email to assigned tech
                await SendEmail.SendGridEmailWithTemplate(to_user_details.email, WOLeadRemoveEmailRequestmodel.email_subject, WOLeadRemoveEmailRequestmodel, email_template_id);
            }

            return 1;
        }


        public async Task<int> MoveIRImageTonewFolder(Guid wo_id, string old_wo_number, string S3_aws_access_key, string S3_aws_secret_key)
        {
            try
            {
                var get_WO = _UoW.WorkOrderRepository.GetWorkOrderByIdForMoveIRImages(wo_id);

                if (get_WO.IRScanWOImageFileMapping != null && get_WO.IRScanWOImageFileMapping.Count() > 0)
                {
                    await s3BucketService.CopyImagesToAnotherFolderForIR(S3_aws_access_key, S3_aws_secret_key, ConfigurationManager.AppSettings["IR_photos_bucket_name"],
                    ConfigurationManager.AppSettings["IR_photos_bucket_name"], (get_WO.site_id.ToString() + "/" + old_wo_number + "/"), (get_WO.site_id.ToString() + "/" + get_WO.manual_wo_number + "/")
                    );
                }
                foreach (var item in get_WO.IRScanWOImageFileMapping.ToList())
                {
                    string[] parts = item.manual_wo_number.Split("/");
                    int index = Array.IndexOf(parts, old_wo_number);
                    if (index >= 0)
                    {
                        parts[index] = get_WO.manual_wo_number;
                    }
                    item.manual_wo_number = string.Join("/", parts);
                    item.updated_at = DateTime.UtcNow;
                    var update = await _UoW.BaseGenericRepository<IRScanWOImageFileMapping>().Update(item);
                    _UoW.SaveChanges();

                }
                if (get_WO.WOOnboardingAssets != null)
                {
                    foreach (var obwoline in get_WO.WOOnboardingAssets.ToList())
                    {
                        if (!obwoline.is_deleted)
                        {
                            foreach (var item in obwoline.IRWOImagesLabelMapping.ToList())
                            {
                                if (!item.is_deleted)
                                {
                                    string[] parts = item.s3_image_folder_name.Split("/");
                                    int index = Array.IndexOf(parts, old_wo_number);
                                    if (index >= 0)
                                    {
                                        parts[index] = get_WO.manual_wo_number;
                                    }
                                    item.s3_image_folder_name = string.Join("/", parts);
                                    item.updated_at = DateTime.UtcNow;
                                    var update = await _UoW.BaseGenericRepository<IRWOImagesLabelMapping>().Update(item);
                                    _UoW.SaveChanges();
                                }
                            }
                        }

                    }


                }
            }
            catch (Exception ex)
            {

            }



            return 1;
        }

        public ListViewModel<GetAllCatagoryForWOResponseModel> GetAllCatagoryForWO(GetAllCatagoryForWORequestModel requestModel)
        {

            ListViewModel<GetAllCatagoryForWOResponseModel> response = new ListViewModel<GetAllCatagoryForWOResponseModel>();

            try
            {
                var formlist = _UoW.WorkOrderRepository.GetAllCatagoryForWO(UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString(), requestModel);
                if (formlist.Item1 != null && formlist.Item1.Count > 0)
                {
                    var map = _mapper.Map<List<GetAllCatagoryForWOResponseModel>>(formlist.Item1);
                    response.list = map;
                    response.listsize = formlist.Item2;
                }
                response.pageIndex = requestModel.pageindex;
                response.pageSize = requestModel.pagesize;


            }
            catch (Exception ex)
            {

            }
            return response;

        }
        public async Task<int> AssignCategorytoWO(AssignCategorytoWORequestmodel requestModel)
        {

            int response = (int)ResponseStatusNumber.Error;

            try
            {
                _UoW.BeginTransaction();
                WOInspectionsTemplateFormIOAssignment WOInspectionsTemplateFormIOAssignment = new WOInspectionsTemplateFormIOAssignment();
                WOInspectionsTemplateFormIOAssignment.form_id = requestModel.form_id;
                WOInspectionsTemplateFormIOAssignment.task_id = requestModel.task_id;
                WOInspectionsTemplateFormIOAssignment.wo_id = requestModel.wo_id;
                WOInspectionsTemplateFormIOAssignment.created_at = DateTime.UtcNow;
                WOInspectionsTemplateFormIOAssignment.is_archived = false;
                WOInspectionsTemplateFormIOAssignment.status_id = (int)Status.open;

                var get_task = _UoW.WorkOrderRepository.GetTaskByID(requestModel.task_id);
                // get WO 
                var wo = _UoW.WorkOrderRepository.GetWOByidforUpdate(requestModel.wo_id);
                if (wo.wo_type == (int)Status.Maintenance_WO)
                {
                    WOInspectionsTemplateFormIOAssignment.asset_id = get_task.asset_id;
                }
                if (requestModel.technician_user_id != null && requestModel.technician_user_id.Value != Guid.Empty)
                {
                    WOInspectionsTemplateFormIOAssignment.technician_user_id = requestModel.technician_user_id;
                }
                var insert = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Insert(WOInspectionsTemplateFormIOAssignment);
                if (insert)
                {
                    // insert task to WO category mappin WOInspectionsTemplateFormIOAssignment


                    WOcategorytoTaskMapping WOcategorytoTaskMapping = new WOcategorytoTaskMapping();
                    WOcategorytoTaskMapping.wo_inspectionsTemplateFormIOAssignment_id = WOInspectionsTemplateFormIOAssignment.wo_inspectionsTemplateFormIOAssignment_id;
                    WOcategorytoTaskMapping.task_id = requestModel.task_id;
                    WOcategorytoTaskMapping.created_at = DateTime.UtcNow;
                    WOcategorytoTaskMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                    WOcategorytoTaskMapping.is_archived = false;
                    WOcategorytoTaskMapping.is_parent_task = true;
                    WOcategorytoTaskMapping.serial_number = 1;
                    WOcategorytoTaskMapping.wo_id = requestModel.wo_id;
                    WOcategorytoTaskMapping.inspection_type = (int)MWO_inspection_wo_type.Inspection;
                    var insert_task_mapping = _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Insert(WOcategorytoTaskMapping);

                    /// insert asset form while adding category
                    /// 
                    AssetFormIO AssetFormIO = new AssetFormIO();

                    AssetFormIO.form_id = get_task.form_id;
                    AssetFormIO.asset_form_name = get_task.FormIO.form_name;
                    AssetFormIO.asset_form_type = get_task.FormIO.form_type;
                    AssetFormIO.asset_form_description = get_task.FormIO.form_description;
                    AssetFormIO.asset_form_data = get_task.FormIO.form_data;
                    AssetFormIO.created_at = DateTime.UtcNow;
                    AssetFormIO.status = (int)Status.open;
                    AssetFormIO.wo_id = requestModel.wo_id;
                    AssetFormIO.site_id = wo.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    AssetFormIO.WOcategorytoTaskMapping_id = WOcategorytoTaskMapping.WOcategorytoTaskMapping_id;
                    //WOcategorytoTaskMapping.WOcategorytoTaskMapping_id = WOcategorytoTaskMapping.WOcategorytoTaskMapping_id;


                    /* var dynamic_form_obj = JsonSerializer.Deserialize<FormioDynamicobj.Root>(AssetFormIO.asset_form_data);
                     dynamic_form_obj.data = new FormioDynamicobj.Data();
                     dynamic_form_obj.data.header = new FormIOObject.header();
                     if (wo.wo_type == (int)Status.Acceptance_Test_WO)
                     {
                         dynamic_form_obj.data.header.workOrder = "AT" + wo.wo_number;
                     }
                     else if (wo.wo_type == (int)Status.Maintenance_WO)
                     {
                         dynamic_form_obj.data.header.workOrder = "WO" + wo.wo_number;
                     }
                     dynamic_form_obj.data.header.customer = wo.Sites.customer;
                     dynamic_form_obj.data.header.customerAddress = wo.Sites.customer_address;
                     dynamic_form_obj.data.header.owner = wo.Sites.ClientCompany.owner;
                     dynamic_form_obj.data.header.ownerAddress = wo.Sites.ClientCompany.owner_address;
                     dynamic_form_obj.data.nameplateInformation = new object();
                     dynamic_form_obj.data.visualInspection = new object();
                     AssetFormIO.asset_form_data = JsonSerializer.Serialize(dynamic_form_obj);*/

                    dynamic copy_from_form_data = new System.Dynamic.ExpandoObject();
                    copy_from_form_data.data = new System.Dynamic.ExpandoObject() as dynamic;
                    copy_from_form_data.data.header = new System.Dynamic.ExpandoObject() as dynamic;
                    if (wo.wo_type == (int)Status.Acceptance_Test_WO)
                    {
                        copy_from_form_data.data.header.workOrder = wo.manual_wo_number;
                        copy_from_form_data.data.header.workOrderType = "Acceptance Test";
                    }
                    else if (wo.wo_type == (int)Status.Maintenance_WO)
                    {
                        copy_from_form_data.data.header.workOrder = wo.manual_wo_number;
                        copy_from_form_data.data.header.workOrderType = "maintenance";
                    }
                    copy_from_form_data.data.header.customer = wo.Sites.customer;
                    copy_from_form_data.data.header.customerAddress = wo.Sites.customer_address;
                    copy_from_form_data.data.header.owner = wo.Sites.ClientCompany.owner;
                    copy_from_form_data.data.header.ownerAddress = wo.Sites.ClientCompany.owner_address;

                    //object obj = copy_from_form_data.data;
                    string str = Newtonsoft.Json.JsonConvert.SerializeObject(copy_from_form_data);
                    AssetFormIO.asset_form_data = str;

                    var insert_assetformio = _UoW.BaseGenericRepository<AssetFormIO>().Insert(AssetFormIO);
                    _UoW.SaveChanges();
                    _UoW.CommitTransaction();
                    /// update WO 
                    /// 
                    wo = _UoW.WorkOrderRepository.GetWOByidforUpdate(requestModel.wo_id);
                    if (wo.WOInspectionsTemplateFormIOAssignment.Where(x => !x.is_archived).All(q => q.status_id == (int)Status.open))
                    {
                        wo.status = (int)Status.ReleasedOpenWO;
                    }
                    wo.modified_at = DateTime.UtcNow;
                    var update_wo = _UoW.BaseGenericRepository<WorkOrders>().Update(wo);
                    response = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    _UoW.RollbackTransaction();
                }
            }
            catch (Exception ex)
            {
                _UoW.RollbackTransaction();
            }
            return response;
        }
        public async Task<AssignMultipleAssetClasstoWOResponsemodel> AssignMultipleAssetClasstoWO(AssignMultipleAssetClasstoWORequestmodel request)
        {
            AssignMultipleAssetClasstoWOResponsemodel response = new AssignMultipleAssetClasstoWOResponsemodel();
            try
            {
                #region check if class have maintennace form available or not 
                foreach (var requestModel in request.assign_inspection_asset_class_list)
                {
                    if (!String.IsNullOrEmpty(requestModel.new_create_asset_name))
                    {
                        var get_assetclass = _UoW.WorkOrderRepository.GetAssetclassByID(requestModel.inspectiontemplate_asset_class_id.Value);
                        if (get_assetclass != null)
                        {
                            // check for mt form
                            var class_form = get_assetclass.AssetClassFormIOMapping.Where(x => x.wo_type == (int)Status.Maintenance_WO).FirstOrDefault();
                            if (class_form != null && class_form.form_id != null)
                            {
                                requestModel.form_id = class_form.form_id;
                            }
                            else
                            {
                                // check for AT form 
                                class_form = get_assetclass.AssetClassFormIOMapping.Where(x => x.wo_type == (int)Status.Acceptance_Test_WO).FirstOrDefault();
                                if (class_form != null && class_form.form_id != null)
                                {
                                    requestModel.form_id = class_form.form_id;
                                }
                                else
                                {
                                    response.success = (int)ResponseStatusNumber.class_not_having_form;
                                    response.assset_class = get_assetclass.asset_class_code;
                                    return response;
                                }
                            }
                        }
                    }
                    if (requestModel.wo_ob_asset_id != null) // if Asset is selected form OB asset within WO.
                    {
                        var db_ob_asset = _UoW.WorkOrderRepository.GetOBWOAssetDetailsByIdForMWO(requestModel.wo_ob_asset_id.Value);
                        var class_code = db_ob_asset.asset_class_code.ToLower().Trim();
                        var asset_class = _UoW.WorkOrderRepository.GetAssetclassByCode(class_code);
                        if (asset_class != null)
                        {
                            var class_form = asset_class.AssetClassFormIOMapping.Where(x => x.wo_type == (int)Status.Maintenance_WO).FirstOrDefault();
                            if (class_form != null && class_form.form_id != null)
                            {
                                requestModel.form_id = class_form.form_id;
                            }
                            else
                            {
                                response.success = (int)ResponseStatusNumber.class_not_having_form;
                                response.assset_class = db_ob_asset.asset_class_code;
                                return response;
                            }
                        }
                    }
                }
                #endregion check if class have maintennace form available or not 


                foreach (var requestModel in request.assign_inspection_asset_class_list)
                {
                    // 
                    WOOnboardingAssets ob_asset = new WOOnboardingAssets();
                    if (!String.IsNullOrEmpty(requestModel.new_create_asset_name))
                    {

                        ob_asset.asset_name = requestModel.new_create_asset_name;
                        var get_assetclass = _UoW.WorkOrderRepository.GetAssetclassByID(requestModel.inspectiontemplate_asset_class_id.Value);
                        if (get_assetclass != null)
                        {
                            ob_asset.asset_class_name = get_assetclass.asset_class_name;
                            ob_asset.asset_class_code = get_assetclass.asset_class_code;
                            ob_asset.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            ob_asset.is_deleted = false;
                            ob_asset.created_at = DateTime.UtcNow;
                            ob_asset.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                            ob_asset.status = (int)Status.open;
                            ob_asset.wo_id = requestModel.wo_id;
                            requestModel.form_id = get_assetclass.AssetClassFormIOMapping.Where(x => x.wo_type == (int)Status.Maintenance_WO).FirstOrDefault().form_id;
                        }
                        ob_asset.inspection_type = (int)MWO_inspection_wo_type.OnBoarding;
                        ob_asset.is_wo_line_for_exisiting_asset = false;

                        var insert_new_ob_asset = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Insert(ob_asset);
                        _UoW.SaveChanges();
                    }
                    if (requestModel.wo_ob_asset_id != null) // if Asset is selected form OB asset within WO.
                    {
                        var db_ob_asset = _UoW.WorkOrderRepository.GetOBWOAssetDetailsByIdForMWO(requestModel.wo_ob_asset_id.Value);
                        var class_code = db_ob_asset.asset_class_code.ToLower().Trim();
                        var asset_class = _UoW.WorkOrderRepository.GetAssetclassByCode(class_code);
                        if (asset_class != null)
                        {
                            requestModel.inspectiontemplate_asset_class_id = asset_class.inspectiontemplate_asset_class_id;
                            requestModel.form_id = asset_class.AssetClassFormIOMapping.Where(x => x.wo_type == (int)Status.Maintenance_WO).FirstOrDefault().form_id;
                        }
                    }
                    _UoW.BeginTransaction();
                    WOInspectionsTemplateFormIOAssignment WOInspectionsTemplateFormIOAssignment = new WOInspectionsTemplateFormIOAssignment();
                    WOInspectionsTemplateFormIOAssignment.form_id = requestModel.form_id.Value;
                    WOInspectionsTemplateFormIOAssignment.wo_id = requestModel.wo_id;
                    WOInspectionsTemplateFormIOAssignment.created_at = DateTime.UtcNow;
                    WOInspectionsTemplateFormIOAssignment.is_archived = false;
                    WOInspectionsTemplateFormIOAssignment.status_id = (int)Status.open;
                    WOInspectionsTemplateFormIOAssignment.inspectiontemplate_asset_class_id = requestModel.inspectiontemplate_asset_class_id;
                    // get WO 
                    var wo = _UoW.WorkOrderRepository.GetWOByidforUpdate(requestModel.wo_id);

                    var insert = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Insert(WOInspectionsTemplateFormIOAssignment);
                    if (insert)
                    {
                        // insert task to WO category mappin WOInspectionsTemplateFormIOAssignment
                        WOcategorytoTaskMapping WOcategorytoTaskMapping = new WOcategorytoTaskMapping();
                        WOcategorytoTaskMapping.wo_inspectionsTemplateFormIOAssignment_id = WOInspectionsTemplateFormIOAssignment.wo_inspectionsTemplateFormIOAssignment_id;
                        WOcategorytoTaskMapping.created_at = DateTime.UtcNow;
                        WOcategorytoTaskMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                        WOcategorytoTaskMapping.is_archived = false;
                        WOcategorytoTaskMapping.is_parent_task = true;
                        WOcategorytoTaskMapping.serial_number = 1;
                        WOcategorytoTaskMapping.wo_id = requestModel.wo_id;
                        WOcategorytoTaskMapping.inspection_type = (int)MWO_inspection_wo_type.Inspection;  // requestModel.inspection_type;

                        if (!String.IsNullOrEmpty(requestModel.new_create_asset_name)) // if Asset is created for new asset so it will create as OB asset.
                        {
                            WOcategorytoTaskMapping.woonboardingassets_id = ob_asset.woonboardingassets_id;
                        }
                        if (requestModel.wo_ob_asset_id != null) // if Asset is selected form OB asset within WO.
                        {
                            WOcategorytoTaskMapping.woonboardingassets_id = requestModel.wo_ob_asset_id;
                        }
                        var insert_task_mapping = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Insert(WOcategorytoTaskMapping);

                        /// insert asset form while adding category
                        var get_form = await _UoW.formIORepository.GetFormIOById(requestModel.form_id.Value);

                        AssetFormIO AssetFormIO = new AssetFormIO();
                        AssetFormIO.form_id = requestModel.form_id;
                        AssetFormIO.asset_form_name = get_form.form_name;
                        AssetFormIO.asset_form_type = get_form.form_type;
                        AssetFormIO.asset_form_description = get_form.form_description;
                        AssetFormIO.created_at = DateTime.UtcNow;
                        AssetFormIO.status = (int)Status.open;
                        if (requestModel.status != null)
                        {
                            AssetFormIO.status = requestModel.status.Value;
                        }

                        AssetFormIO.wo_id = requestModel.wo_id;
                        AssetFormIO.site_id = wo.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        AssetFormIO.WOcategorytoTaskMapping_id = WOcategorytoTaskMapping.WOcategorytoTaskMapping_id;

                        dynamic copy_from_form_data = new System.Dynamic.ExpandoObject();
                        copy_from_form_data.data = new System.Dynamic.ExpandoObject() as dynamic;
                        copy_from_form_data.data.header = new System.Dynamic.ExpandoObject() as dynamic;
                        if (wo.wo_type == (int)Status.Acceptance_Test_WO)
                        {
                            copy_from_form_data.data.header.workOrder = wo.manual_wo_number;
                            copy_from_form_data.data.header.workOrderType = "Acceptance Test";
                        }
                        else if (wo.wo_type == (int)Status.Maintenance_WO)
                        {
                            copy_from_form_data.data.header.workOrder = wo.manual_wo_number;
                            copy_from_form_data.data.header.workOrderType = "maintenance";
                        }
                        copy_from_form_data.data.header.customer = wo.Sites.customer;
                        copy_from_form_data.data.header.customerAddress = wo.Sites.customer_address;
                        copy_from_form_data.data.header.owner = wo.Sites.ClientCompany.owner;
                        copy_from_form_data.data.header.ownerAddress = wo.Sites.ClientCompany.owner_address;

                        string str = Newtonsoft.Json.JsonConvert.SerializeObject(copy_from_form_data);
                        AssetFormIO.asset_form_data = str;

                        var insert_assetformio = await _UoW.BaseGenericRepository<AssetFormIO>().Insert(AssetFormIO);
                        _UoW.SaveChanges();
                        _UoW.CommitTransaction();
                        response.asset_form_id = AssetFormIO.asset_form_id;

                        /// update WO

                        if (requestModel.asset_id != null) /// if asset is selectd from main asset list
                        {
                            AssignAssettoWOcategoryRequestModel AssignAssettoWOcategoryRequestModel = new AssignAssettoWOcategoryRequestModel();
                            AssignAssettoWOcategoryRequestModel.WOcategorytoTaskMapping_id = WOcategorytoTaskMapping.WOcategorytoTaskMapping_id;
                            AssignAssettoWOcategoryRequestModel.parent_asset_id = requestModel.asset_id.Value;
                            await AssignAssettoWOcategory(AssignAssettoWOcategoryRequestModel);

                            // assign asset PM to WO line 
                            if (requestModel.asset_pm_id != null && requestModel.asset_pm_id != Guid.Empty)
                            {
                                var get_asset_pm = _UoW.WorkOrderRepository.GetAssetPMsbyId(requestModel.asset_pm_id.Value);
                                get_asset_pm.asset_form_id = AssetFormIO.asset_form_id;
                                get_asset_pm.wo_id = AssetFormIO.wo_id;

                                var update = await _UoW.BaseGenericRepository<AssetPMs>().Update(get_asset_pm);
                            }
                        }
                        else if (requestModel.wo_ob_asset_id != null) // if asset is selected from wo lines
                        {
                            var get_asset = _UoW.WorkOrderRepository.GetwooblineforMWObyid(requestModel.wo_ob_asset_id.Value);
                            var get_wocategory_task = _UoW.WorkOrderRepository.AssignAssettoWOcategoryTask(WOcategorytoTaskMapping.WOcategorytoTaskMapping_id);
                            dynamic dynamicform = Newtonsoft.Json.JsonConvert.DeserializeObject(get_wocategory_task.AssetFormIO.asset_form_data);
                            dynamicform.data.header.assetId = get_asset.QR_code;
                            dynamicform.data.header.identification = get_asset.asset_name;
                            dynamicform.data.header.building = get_asset.building;
                            dynamicform.data.header.floor = get_asset.floor;
                            dynamicform.data.header.room = get_asset.room;
                            dynamicform.data.header.section = get_asset.section;
                            get_wocategory_task.AssetFormIO.asset_form_data = Newtonsoft.Json.JsonConvert.SerializeObject(dynamicform);
                            get_wocategory_task.AssetFormIO.form_retrived_asset_name = get_asset.asset_name;
                            get_wocategory_task.AssetFormIO.form_retrived_asset_id = get_asset.QR_code;

                            var update_category_task = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Update(get_wocategory_task);
                            _UoW.SaveChanges();
                        }
                        else if (!String.IsNullOrEmpty(requestModel.new_create_asset_name))
                        {
                            var get_wocategory_task = _UoW.WorkOrderRepository.AssignAssettoWOcategoryTask(WOcategorytoTaskMapping.WOcategorytoTaskMapping_id);
                            dynamic dynamicform = Newtonsoft.Json.JsonConvert.DeserializeObject(get_wocategory_task.AssetFormIO.asset_form_data);
                            dynamicform.data.header.identification = requestModel.new_create_asset_name;
                            get_wocategory_task.AssetFormIO.asset_form_data = Newtonsoft.Json.JsonConvert.SerializeObject(dynamicform);
                            get_wocategory_task.AssetFormIO.form_retrived_asset_name = requestModel.new_create_asset_name;

                            var update_category_task = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Update(get_wocategory_task);
                            _UoW.SaveChanges();
                        }
                        response.success = (int)ResponseStatusNumber.Success;
                    }
                    else
                    {
                        _UoW.RollbackTransaction();

                    }
                }

                var update_wo_db = _UoW.WorkOrderRepository.GetWOByidforUpdate(request.wo_id);
                if (update_wo_db.status != (int)Status.PlannedWO)
                {
                    update_wo_db.status = (int)Status.ReleasedOpenWO;
                    update_wo_db.modified_at = DateTime.UtcNow;
                    var update_wo = await _UoW.BaseGenericRepository<WorkOrders>().Update(update_wo_db);
                }

            }
            catch (Exception ex)
            {
                _UoW.RollbackTransaction();
            }
            return response;
        }

        public async Task<AssignAssetClasstoWOResponsemodel> AssignAssetClasstoWO(AssignAssetClasstoWORequestmodel requestModel)
        {
            AssignAssetClasstoWOResponsemodel response = new AssignAssetClasstoWOResponsemodel();
            try
            {
                _UoW.BeginTransaction();
                WOInspectionsTemplateFormIOAssignment WOInspectionsTemplateFormIOAssignment = new WOInspectionsTemplateFormIOAssignment();
                WOInspectionsTemplateFormIOAssignment.form_id = requestModel.form_id;
                //  WOInspectionsTemplateFormIOAssignment.task_id = requestModel.task_id;
                WOInspectionsTemplateFormIOAssignment.wo_id = requestModel.wo_id;
                WOInspectionsTemplateFormIOAssignment.created_at = DateTime.UtcNow;
                WOInspectionsTemplateFormIOAssignment.is_archived = false;
                WOInspectionsTemplateFormIOAssignment.status_id = (int)Status.open;
                WOInspectionsTemplateFormIOAssignment.inspectiontemplate_asset_class_id = requestModel.inspectiontemplate_asset_class_id;
                WOInspectionsTemplateFormIOAssignment.group_string = requestModel.group_string;
                //   var get_task = _UoW.WorkOrderRepository.GetTaskByID(requestModel.task_id);
                // get WO 
                var wo = _UoW.WorkOrderRepository.GetWOByidforUpdate(requestModel.wo_id);
                /* if (wo.wo_type == (int)Status.Maintenance_WO)
                 {
                     WOInspectionsTemplateFormIOAssignment.asset_id = get_task.asset_id;
                 }
                 if (requestModel.technician_user_id != null && requestModel.technician_user_id.Value != Guid.Empty)
                 {
                     WOInspectionsTemplateFormIOAssignment.technician_user_id = requestModel.technician_user_id;
                 }*/
                var insert = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Insert(WOInspectionsTemplateFormIOAssignment);
                if (insert)
                {
                    // insert task to WO category mappin WOInspectionsTemplateFormIOAssignment


                    WOcategorytoTaskMapping WOcategorytoTaskMapping = new WOcategorytoTaskMapping();
                    WOcategorytoTaskMapping.wo_inspectionsTemplateFormIOAssignment_id = WOInspectionsTemplateFormIOAssignment.wo_inspectionsTemplateFormIOAssignment_id;
                    //  WOcategorytoTaskMapping.task_id = Guid.Parse("112cbf1e-afc8-41fd-b68d-45629e2b2d9d");
                    WOcategorytoTaskMapping.created_at = DateTime.UtcNow;
                    WOcategorytoTaskMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                    WOcategorytoTaskMapping.is_archived = false;
                    WOcategorytoTaskMapping.is_parent_task = true;
                    WOcategorytoTaskMapping.serial_number = 1;
                    WOcategorytoTaskMapping.wo_id = requestModel.wo_id;
                    WOcategorytoTaskMapping.inspection_type = (int)MWO_inspection_wo_type.Inspection;  // requestModel.inspection_type;

                    var insert_task_mapping = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Insert(WOcategorytoTaskMapping);

                    /// insert asset form while adding category
                    /// 
                    var get_form = await _UoW.formIORepository.GetFormIOById(requestModel.form_id);

                    AssetFormIO AssetFormIO = new AssetFormIO();

                    AssetFormIO.form_id = requestModel.form_id;
                    AssetFormIO.asset_form_name = get_form.form_name;
                    AssetFormIO.asset_form_type = get_form.form_type;
                    AssetFormIO.asset_form_description = get_form.form_description;
                    AssetFormIO.created_at = DateTime.UtcNow;
                    AssetFormIO.status = (int)Status.open;
                    AssetFormIO.wo_id = requestModel.wo_id;
                    AssetFormIO.site_id = wo.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    AssetFormIO.WOcategorytoTaskMapping_id = WOcategorytoTaskMapping.WOcategorytoTaskMapping_id;

                    dynamic copy_from_form_data = new System.Dynamic.ExpandoObject();
                    copy_from_form_data.data = new System.Dynamic.ExpandoObject() as dynamic;
                    copy_from_form_data.data.header = new System.Dynamic.ExpandoObject() as dynamic;
                    if (wo.wo_type == (int)Status.Acceptance_Test_WO)
                    {
                        copy_from_form_data.data.header.workOrder = wo.manual_wo_number;
                        copy_from_form_data.data.header.workOrderType = "Acceptance Test";
                    }
                    else if (wo.wo_type == (int)Status.Maintenance_WO)
                    {
                        copy_from_form_data.data.header.workOrder = wo.manual_wo_number;
                        copy_from_form_data.data.header.workOrderType = "maintenance";
                    }
                    copy_from_form_data.data.header.customer = wo.Sites.customer;
                    copy_from_form_data.data.header.customerAddress = wo.Sites.customer_address;
                    copy_from_form_data.data.header.owner = wo.Sites.ClientCompany.owner;
                    copy_from_form_data.data.header.ownerAddress = wo.Sites.ClientCompany.owner_address;
                    if (!String.IsNullOrEmpty(requestModel.asset_name))
                    {
                        copy_from_form_data.data.header.identification = requestModel.asset_name;
                        AssetFormIO.form_retrived_asset_name = requestModel.asset_name;
                    }

                    //object obj = copy_from_form_data.data;
                    string str = Newtonsoft.Json.JsonConvert.SerializeObject(copy_from_form_data);
                    AssetFormIO.asset_form_data = str;

                    var insert_assetformio = await _UoW.BaseGenericRepository<AssetFormIO>().Insert(AssetFormIO);
                    _UoW.SaveChanges();
                    _UoW.CommitTransaction();
                    /// update WO 
                    /// 
                    wo = _UoW.WorkOrderRepository.GetWOByidforUpdate(requestModel.wo_id);
                    //  if (wo.WOInspectionsTemplateFormIOAssignment.Where(x => !x.is_archived).All(q => q.status_id == (int)Status.open))
                    // {
                    wo.status = (int)Status.ReleasedOpenWO;
                    //  }
                    wo.modified_at = DateTime.UtcNow;
                    var update_wo = await _UoW.BaseGenericRepository<WorkOrders>().Update(wo);
                    if (requestModel.asset_id != null)
                    {
                        AssignAssettoWOcategoryRequestModel AssignAssettoWOcategoryRequestModel = new AssignAssettoWOcategoryRequestModel();
                        AssignAssettoWOcategoryRequestModel.WOcategorytoTaskMapping_id = WOcategorytoTaskMapping.WOcategorytoTaskMapping_id;
                        AssignAssettoWOcategoryRequestModel.parent_asset_id = requestModel.asset_id.Value;
                        //AssignAssettoWOcategory(AssignAssettoWOcategoryRequestModel request_model)

                        await AssignAssettoWOcategory(AssignAssettoWOcategoryRequestModel);
                    }
                    response.form_id = requestModel.form_id;
                    response.WOcategorytoTaskMapping_id = WOcategorytoTaskMapping.WOcategorytoTaskMapping_id;

                    var get_master_forms = _UoW.WorkOrderRepository.GetExcludedFormIOFormsByIds(new List<Guid> { requestModel.form_id });
                    if (get_master_forms != null && get_master_forms.Count > 0)
                    {
                        response.form_type = get_master_forms.FirstOrDefault().form_type;
                    }

                }
                else
                {
                    _UoW.RollbackTransaction();

                }
            }
            catch (Exception ex)
            {
                _UoW.RollbackTransaction();
            }
            return response;
        }
        public ViewWorkOrderDetailsByIdResponsemodel ViewWorkOrderDetailsById(string wo_id)
        {
            UserService userService = new UserService(_mapper);
            ViewWorkOrderDetailsByIdResponsemodel response = new ViewWorkOrderDetailsByIdResponsemodel();
            var wo_details = _UoW.WorkOrderRepository.ViewWorkOrderDetailsById(Guid.Parse(wo_id));
            if (wo_details != null) 
            {
                wo_details.WorkOrderAttachments = wo_details.WorkOrderAttachments.Where(q => !q.is_archive).ToList();
                response = _mapper.Map<ViewWorkOrderDetailsByIdResponsemodel>(wo_details);
                if (response.wo_type == (int)Status.Acceptance_Test_WO)
                {
                    response.wo_number = "AT" + response.wo_number;
                }
                else if (response.wo_type == (int)Status.Maintenance_WO)
                {
                    response.wo_number = "WO" + response.wo_number;
                }

                /// asset form ios
                /// 
                if (response.wo_type == (int)Status.Acceptance_Test_WO) // if WO is maintenneace then send all tasks of that WO 
                {
                    var get_asset_form = _UoW.WorkOrderRepository.GetAllAssetFormByWOIDOffline(new List<Guid>() { Guid.Parse(wo_id) }, null);
                    List<AssetFormIO> WO_Assetformios = _mapper.Map<List<AssetFormIO>>(get_asset_form);
                    List<AssetFormIO> test = null;

                    var get_wo_form_mapping = _UoW.WorkOrderRepository.GetWOcategorymapping(Guid.Parse(wo_id));
                    var WO_caegory_form_ids = get_wo_form_mapping.Select(x => x.form_id).Distinct().ToList();
                    var get_master_forms = _UoW.WorkOrderRepository.GetExcludedFormIOFormsByIds(WO_caegory_form_ids);

                    response.form_category_list = new List<form_categoty_list>();
                    if (get_wo_form_mapping != null && get_wo_form_mapping.Count > 0)
                    {
                        response.form_category_list = new List<form_categoty_list>();
                        get_wo_form_mapping.ForEach(q =>
                        {
                            var master_form = get_master_forms.Where(w => w.form_id == q.form_id).FirstOrDefault();
                            form_categoty_list form_categoty_list = new form_categoty_list();
                            form_categoty_list.wo_inspectionsTemplateFormIOAssignment_id = q.wo_inspectionsTemplateFormIOAssignment_id;
                            form_categoty_list.form_category_name = master_form.form_type;
                            form_categoty_list.form_name = master_form.form_name;
                            form_categoty_list.form_id = master_form.form_id;
                            form_categoty_list.group_string = q.group_string;
                            //  form_categoty_list.form_data = q.InspectionsTemplateFormIO.form_data;
                            //  form_categoty_list.form_description = q.Tasks != null ? q.Tasks.description : null;
                            form_categoty_list.WP = master_form.work_procedure;
                            if (q.InspectionTemplateAssetClass != null)
                            {
                                form_categoty_list.asset_class_name = q.InspectionTemplateAssetClass.asset_class_name;
                                form_categoty_list.asset_class_type = q.InspectionTemplateAssetClass.FormIOType.form_type_name;
                            }
                            if (q.Parent_Asset != null)
                            {
                                form_categoty_list.parent_asset_name = q.Parent_Asset.name;
                                form_categoty_list.parent_asset_id = q.asset_id;
                            }
                            if (q.User != null)
                            {
                                //  form_categoty_list.technician_name = q.User.firstname + q.User.lastname;
                                //    form_categoty_list.technician_id = q.User.uuid;
                                form_categoty_list.parent_asset_id = q.asset_id;
                            }
                            form_categoty_list.status_id = q.status_id;
                            form_categoty_list.status_name = q.StatusMaster.status_name;
                            var wo_category_to_task_mapping = _UoW.WorkOrderRepository.GetWoCategoryToTaskToviewWO(q.wo_inspectionsTemplateFormIOAssignment_id);
                            if (wo_category_to_task_mapping != null && wo_category_to_task_mapping.Count > 0)
                            {
                                form_categoty_list.progress_total = wo_category_to_task_mapping.Where(t => !t.is_archived).Count(); // total task in category
                                var wo_category_task_mapping_ids = wo_category_to_task_mapping.Where(t => !t.is_archived).Select(w => w.WOcategorytoTaskMapping_id).ToList();
                                test = WO_Assetformios.Where(w => wo_category_task_mapping_ids.Contains(w.WOcategorytoTaskMapping_id.Value)).ToList();
                                if (test != null && test.Count > 0)
                                {
                                    form_categoty_list.progress_completed = test.Where(x => x.status == (int)Status.Completed || x.status == (int)Status.Submitted).Count();
                                }
                                //form_categoty_list.progress_completed = q.WOcategorytoTaskMapping.Where(t => !t.is_archived).Select(x => x.AssetFormIO.status == (int)Status.Completed).Count();
                            }
                            response.form_category_list.Add(form_categoty_list);
                            Dispose();
                        });
                    }

                }
                if (response.wo_type == (int)Status.Maintenance_WO) // if WO is maintenneace then send all tasks of that WO 
                {
                    var wo_tasks = GetAllWOCategoryTaskByWOid(wo_details.wo_id.ToString(), 0);

                    response.wo_all_tasks = new List<GetWOcategoryTaskByCategoryIDListResponsemodel>();
                    if (wo_tasks != null)
                    {
                        var form_ids = wo_tasks.Select(x => x.form_id).Distinct().ToList();
                        var get_master_forms = _UoW.WorkOrderRepository.GetExcludedFormIOFormsByIds(form_ids);
                        response.wo_all_tasks = wo_tasks;
                        response.wo_all_tasks.ForEach(x =>
                        {
                            var master_form = get_master_forms.Where(w => w.form_id == x.form_id).FirstOrDefault();
                            x.form_type = master_form.form_type;

                            if (x.assigned_asset_id != null)
                            {
                                var get_assigned_asset = _UoW.WorkOrderRepository.GetAssetByID(Guid.Parse(x.assigned_asset_id));

                                x.component_level_type_id = get_assigned_asset.component_level_type_id;

                                if(get_assigned_asset.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent && get_assigned_asset.AssetTopLevelcomponentMapping.Count >0)
                                {
                                    x.toplevelcomponent_asset_id = get_assigned_asset.AssetTopLevelcomponentMapping.Select(x=>x.toplevelcomponent_asset_id).FirstOrDefault();
                                }
                            }
                        });
                    }

                    //////  send OB Asset Details if WO is MWO
                    ///

                    var OB_assets = _UoW.WorkOrderRepository.GetOBAssetForMWO(wo_details.wo_id);
                    //response.mwo_ob_assets = new List<mwo_ob_assets>();
                    response.mwo_ob_assets_v2 = new List<mwo_ob_assets>();

                    if (OB_assets.Count > 0)
                    {

                        OB_assets.ForEach(x =>
                        {
                            /*mwo_ob_assets mwo_ob_assets = new mwo_ob_assets();
                            mwo_ob_assets.woonboardingassets_id = x.woonboardingassets_id;
                            mwo_ob_assets.inspection_type = x.inspection_type;
                            mwo_ob_assets.status = x.status;
                            mwo_ob_assets.status_name = x.StatusMaster != null ? x.StatusMaster.status_name : null;
                            mwo_ob_assets.technician_user_id = x.technician_user_id;
                            mwo_ob_assets.building = x.building;
                            mwo_ob_assets.floor = x.floor;
                            mwo_ob_assets.room = x.room;
                            mwo_ob_assets.section = x.section;
                            mwo_ob_assets.site_id = x.site_id;
                            mwo_ob_assets.site_name = x.Sites.site_name;

                            if (x.Asset != null)
                            {
                                mwo_ob_assets.component_level_type_id = x.Asset.component_level_type_id;

                                if (mwo_ob_assets.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent)
                                {
                                    if (x.Asset.AssetTopLevelcomponentMapping != null)
                                    {
                                        var toplevelcomponent_asset = x.Asset.AssetTopLevelcomponentMapping.Where(x=>!x.is_deleted).FirstOrDefault();
                                        if (toplevelcomponent_asset != null)
                                        {
                                            mwo_ob_assets.toplevelcomponent_asset_id = toplevelcomponent_asset.toplevelcomponent_asset_id;
                                        }
                                    }
                                }

                            }
                            else
                            {
                                mwo_ob_assets.component_level_type_id = x.component_level_type_id;

                                if (mwo_ob_assets.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent)
                                {
                                    if (x.WOlineTopLevelcomponentMapping != null)
                                    {
                                        var toplevelcomponent_asset = x.WOlineTopLevelcomponentMapping.Where(x=>!x.is_deleted).FirstOrDefault();
                                        if (toplevelcomponent_asset != null)
                                        {
                                            mwo_ob_assets.toplevelcomponent_asset_id = toplevelcomponent_asset.toplevelcomponent_asset_id;
                                        }
                                    }
                                }
                            }

                            if (x.ActiveAssetPMWOlineMapping != null)
                            {
                                mwo_ob_assets.asset_pm_id = x.ActiveAssetPMWOlineMapping.AssetPMs.asset_pm_id;
                                mwo_ob_assets.asset_pm_title = x.ActiveAssetPMWOlineMapping.AssetPMs.title;

                                var pm_id = x.ActiveAssetPMWOlineMapping.AssetPMs.pm_id.Value;
                                if(pm_id != null && pm_id != Guid.Empty)
                                {
                                    var get_pm = _UoW.WorkOrderRepository.GetPMById(pm_id);
                                    if (get_pm != null)
                                    {
                                        mwo_ob_assets.pm_inspection_type_id = get_pm.pm_inspection_type_id;
                                    }
                                }
                            }
                            if (x.TempActiveAssetPMWOlineMapping != null)
                            {
                                mwo_ob_assets.temp_asset_pm_id = x.TempActiveAssetPMWOlineMapping.temp_asset_pm_id;
                                mwo_ob_assets.asset_pm_title = x.TempActiveAssetPMWOlineMapping.TempAssetPMs.PMs.title;
                                mwo_ob_assets.pm_inspection_type_id = x.TempActiveAssetPMWOlineMapping.TempAssetPMs.PMs.pm_inspection_type_id;
                                
                            }
                            if(x.TempAssetPMs != null)
                            {
                                var is_any_active_temp_assetpm = x.TempAssetPMs.Where(x => !x.is_archive).FirstOrDefault();
                                if (is_any_active_temp_assetpm != null)
                                {
                                    mwo_ob_assets.is_pm_main_woline = true;
                                }
                            }
                            if (x.asset_id != null)
                            {
                                mwo_ob_assets.asset_id = x.asset_id;
                                mwo_ob_assets.asset_name = x.Asset != null ? x.Asset.name : null;
                                mwo_ob_assets.inspectiontemplate_asset_class_id = x.Asset.inspectiontemplate_asset_class_id;
                                if (x.Asset.InspectionTemplateAssetClass != null)
                                {
                                    mwo_ob_assets.asset_class_code = x.Asset.InspectionTemplateAssetClass.asset_class_code;
                                    mwo_ob_assets.asset_class_name = x.Asset.InspectionTemplateAssetClass.asset_class_name;
                                    if (x.Asset.InspectionTemplateAssetClass.FormIOType != null)
                                    {
                                        mwo_ob_assets.asset_class_type = x.Asset.InspectionTemplateAssetClass.FormIOType.form_type_name;
                                    }
                                }
                            }
                            else
                            {
                                mwo_ob_assets.asset_name = x.asset_name;
                                mwo_ob_assets.asset_class_name = x.asset_class_name;
                                mwo_ob_assets.asset_class_code = x.asset_class_code;

                                // get main asset class by class code
                                if (mwo_ob_assets.asset_class_code != null)
                                {
                                    var get_asset_class = _UoW.FormIOAssetClassRepository.GetAssetclassByAssetclassCodes(new List<string> { mwo_ob_assets.asset_class_code.ToLower().Trim() });
                                    if (get_asset_class.Count > 0)
                                    {
                                        mwo_ob_assets.inspectiontemplate_asset_class_id = get_asset_class.FirstOrDefault().inspectiontemplate_asset_class_id;
                                        if (get_asset_class.FirstOrDefault().FormIOType != null)
                                        {
                                            mwo_ob_assets.asset_class_type = get_asset_class.FirstOrDefault().FormIOType.form_type_name;
                                        }
                                    }
                                }
                                
                            }

                            if (x.technician_user_id != null)
                            {
                                var technician_user = _UoW.WorkOrderRepository.GetUserByID(x.technician_user_id.Value);
                                mwo_ob_assets.technician_name = technician_user.firstname + " " + technician_user.lastname;
                            }
                            response.mwo_ob_assets.Add(mwo_ob_assets);
                            */


                            //mwo_ob_assets_v2   -- asset data from TempAsset

                            mwo_ob_assets mwo_ob_assets2 = new mwo_ob_assets();
                            mwo_ob_assets2.woonboardingassets_id = x.woonboardingassets_id;
                            mwo_ob_assets2.inspection_type = x.inspection_type;
                            mwo_ob_assets2.status = x.status;
                            mwo_ob_assets2.status_name = x.StatusMaster != null ? x.StatusMaster.status_name : null;
                            mwo_ob_assets2.technician_user_id = x.technician_user_id;

                            var img = _UoW.WorkOrderRepository.GetAssetProfileImage(mwo_ob_assets2.woonboardingassets_id);
                            if (!String.IsNullOrEmpty(img))
                            {
                                mwo_ob_assets2.asset_profile = UrlGenerator.GetAssetImagesURL(img);
                            }

                            if (x.TempAsset != null)
                            {
                                mwo_ob_assets2.building = x.TempAsset.TempFormIOBuildings != null ? x.TempAsset.TempFormIOBuildings.temp_formio_building_name : x.building;
                                mwo_ob_assets2.floor = x.TempAsset.TempFormIOFloors != null ? x.TempAsset.TempFormIOFloors.temp_formio_floor_name : x.floor;
                                mwo_ob_assets2.room = x.TempAsset.TempFormIORooms != null ? x.TempAsset.TempFormIORooms.temp_formio_room_name : x.room;
                                if (x.TempAsset.TempFormIOSections != null)
                                    mwo_ob_assets2.section = x.TempAsset.TempFormIOSections.temp_formio_section_name;
                                mwo_ob_assets2.temp_master_building = x.TempAsset.TempMasterBuilding != null ? x.TempAsset.TempMasterBuilding.temp_master_building_name : x.building;
                                mwo_ob_assets2.temp_master_floor = x.TempAsset.TempMasterFloor != null ? x.TempAsset.TempMasterFloor.temp_master_floor_name : x.floor;
                                mwo_ob_assets2.temp_master_room = x.TempAsset.TempMasterRoom != null ? x.TempAsset.TempMasterRoom.temp_master_room_name : x.room;
                                mwo_ob_assets2.temp_master_section = x.TempAsset.temp_master_section;

                                mwo_ob_assets2.component_level_type_id = x.TempAsset.component_level_type_id;
                                mwo_ob_assets2.site_id = x.site_id;
                                mwo_ob_assets2.site_name = x.Sites.site_name;
                                mwo_ob_assets2.arc_flash_label_valid = x.TempAsset.arc_flash_label_valid;
                                mwo_ob_assets2.maintenance_index_type = x.TempAsset.maintenance_index_type;
                                mwo_ob_assets2.form_nameplate_info = x.TempAsset.form_nameplate_info;
                                /*if (mwo_ob_assets2.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent)
                                {
                                    if (x.TempAsset.AssetTopLevelcomponentMapping != null)
                                    {
                                        var toplevelcomponent_asset = x.TempAsset.AssetTopLevelcomponentMapping.FirstOrDefault();
                                        if (toplevelcomponent_asset != null)
                                        {
                                            mwo_ob_assets2.toplevelcomponent_asset_id = toplevelcomponent_asset.toplevelcomponent_asset_id;
                                        }
                                    }
                                }*/

                            }

                            if (x.Asset != null)
                            {
                                mwo_ob_assets2.component_level_type_id = x.Asset.component_level_type_id;

                                if (mwo_ob_assets2.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent)
                                {
                                    if (x.Asset.AssetTopLevelcomponentMapping != null)
                                    {
                                        var toplevelcomponent_asset = x.Asset.AssetTopLevelcomponentMapping.Where(x=>!x.is_deleted).FirstOrDefault();
                                        if (toplevelcomponent_asset != null)
                                        {
                                            mwo_ob_assets2.toplevelcomponent_asset_id = toplevelcomponent_asset.toplevelcomponent_asset_id;
                                        }
                                    }
                                }

                            }
                            else
                            {
                                mwo_ob_assets2.component_level_type_id = x.component_level_type_id;

                                if (mwo_ob_assets2.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent)
                                {
                                    if (x.WOlineTopLevelcomponentMapping != null)
                                    {
                                        var toplevelcomponent_asset = x.WOlineTopLevelcomponentMapping.Where(x=>!x.is_deleted).FirstOrDefault();
                                        if (toplevelcomponent_asset != null)
                                        {
                                            mwo_ob_assets2.toplevelcomponent_asset_id = toplevelcomponent_asset.toplevelcomponent_asset_id;
                                        }
                                    }
                                }
                            }

                            if (x.ActiveAssetPMWOlineMapping != null)
                            {
                                mwo_ob_assets2.asset_pm_id = x.ActiveAssetPMWOlineMapping.AssetPMs.asset_pm_id;
                                mwo_ob_assets2.asset_pm_title = x.ActiveAssetPMWOlineMapping.AssetPMs.title;

                                var pm_id = x.ActiveAssetPMWOlineMapping.AssetPMs.pm_id.Value;
                                if (pm_id != null && pm_id != Guid.Empty)
                                {
                                    var get_pm = _UoW.WorkOrderRepository.GetPMById(pm_id);
                                    if (get_pm != null)
                                    {
                                        mwo_ob_assets2.pm_inspection_type_id = get_pm.pm_inspection_type_id;
                                    }
                                }
                            }
                            if (x.TempActiveAssetPMWOlineMapping != null)
                            {
                                mwo_ob_assets2.temp_asset_pm_id = x.TempActiveAssetPMWOlineMapping.temp_asset_pm_id;
                                mwo_ob_assets2.asset_pm_title = x.TempActiveAssetPMWOlineMapping.TempAssetPMs.PMs.title;
                                mwo_ob_assets2.pm_inspection_type_id = x.TempActiveAssetPMWOlineMapping.TempAssetPMs.PMs.pm_inspection_type_id;

                            }
                            if (x.TempAssetPMs != null)
                            {
                                var is_any_active_temp_assetpm = x.TempAssetPMs.Where(x => !x.is_archive).FirstOrDefault();
                                if (is_any_active_temp_assetpm != null)
                                {
                                    mwo_ob_assets2.is_pm_main_woline = true;
                                }
                            }

                            if (x.tempasset_id != null)
                            {
                                mwo_ob_assets2.tempasset_id = x.tempasset_id;
                                mwo_ob_assets2.asset_id = x.asset_id;
                                mwo_ob_assets2.asset_name = x.TempAsset != null ? x.TempAsset.asset_name : null;
                                mwo_ob_assets2.QR_code = x.TempAsset != null ? x.TempAsset.QR_code : null;
                                mwo_ob_assets2.inspectiontemplate_asset_class_id = x.TempAsset.inspectiontemplate_asset_class_id;
                                if (x.TempAsset.InspectionTemplateAssetClass != null)
                                {
                                    mwo_ob_assets2.asset_class_code = x.TempAsset.InspectionTemplateAssetClass.asset_class_code;
                                    mwo_ob_assets2.asset_class_name = x.TempAsset.InspectionTemplateAssetClass.asset_class_name;
                                    if (x.TempAsset.InspectionTemplateAssetClass.FormIOType != null)
                                    {
                                        mwo_ob_assets2.asset_class_type = x.TempAsset.InspectionTemplateAssetClass.FormIOType.form_type_name;
                                    }
                                }
                            }
                            else
                            {
                                mwo_ob_assets2.asset_id = x.asset_id;
                                mwo_ob_assets2.asset_name = x.Asset != null ? x.Asset.name : null;
                                mwo_ob_assets2.asset_class_code = x.asset_class_code;
                                mwo_ob_assets2.asset_class_name = x.asset_class_name;
                                // get main asset class by class code
                                if (mwo_ob_assets2.asset_class_code != null)
                                {
                                    var get_asset_class = _UoW.FormIOAssetClassRepository.GetAssetclassByAssetclassCodes(new List<string> { mwo_ob_assets2.asset_class_code.ToLower().Trim() });
                                    if (get_asset_class.Count > 0)
                                    {
                                        mwo_ob_assets2.inspectiontemplate_asset_class_id = get_asset_class.FirstOrDefault().inspectiontemplate_asset_class_id;
                                        if (get_asset_class.FirstOrDefault().FormIOType != null)
                                        {
                                            mwo_ob_assets2.asset_class_type = get_asset_class.FirstOrDefault().FormIOType.form_type_name;
                                        }
                                    }
                                }
                                mwo_ob_assets2.building = x.building;
                                mwo_ob_assets2.floor = x.floor;
                                mwo_ob_assets2.room = x.room;
                                mwo_ob_assets2.section = x.section;
                                mwo_ob_assets2.QR_code = x.QR_code;
                            }

                            if (x.technician_user_id != null)
                            {
                                var technician_user = _UoW.WorkOrderRepository.GetUserByID(x.technician_user_id.Value);
                                mwo_ob_assets2.technician_name = technician_user.firstname + " " + technician_user.lastname;
                            }

                            mwo_ob_assets2.temp_issues_count = _UoW.WorkOrderRepository.GetIssuesCountByOBWOAssetId(x.woonboardingassets_id);

                            if (x.WOLineIssue != null && x.WOLineIssue.Count>0)
                            {
                                mwo_ob_assets2.issues_title_list = x.WOLineIssue.Where(x=>!x.is_deleted).Select(x => x.issue_title).ToList();
                            }

                            response.mwo_ob_assets_v2.Add(mwo_ob_assets2);

                        });

                    }

                }

                var get_time_material_count = _UoW.WorkOrderRepository.GetAllTimeMaterialCountByWOId(Guid.Parse(wo_id));
                response.time_materials_count = get_time_material_count;

                GetAllIssueByWOidRequestmodel GetAllIssueByWOidRequestmodel = new GetAllIssueByWOidRequestmodel();
                GetAllIssueByWOidRequestmodel.wo_id = Guid.Parse(wo_id);

                var get_issues = GetAllIssueByWOid(GetAllIssueByWOidRequestmodel);
                int issues_count = get_issues.main_issue_list.Count + get_issues.temp_issue_list.Count;

                response.issues_count = issues_count;

                /*
                if (response.due_date != null && response.due_date != DateTime.MinValue)
                {
                    var due_timing = DateTimeUtil.GetDueOverdueTimingByDueDate(response.due_date.Value);

                    string due_in = due_timing.Item1;
                    bool is_overdue = due_timing.Item2;

                    if (due_in != null)
                    {
                        response.due_in = due_in;
                    }
                }
                */

                response.status_wise_asset_count_obj = new status_wise_asset_count_obj();
                var status_wise_asset_count_obj = GetStatusWiseWOLineCountByWOId(Guid.Parse(wo_id));
                if (status_wise_asset_count_obj != null)
                {
                    response.status_wise_asset_count_obj = status_wise_asset_count_obj;
                }

                // if user is Watcher of this WorkOrder then return TRUE else FALSE
                bool isWatcher = _UoW.WorkOrderRepository.CheckUserIsWatcherOrNot(Guid.Parse(wo_id), UpdatedGenericRequestmodel.CurrentUser.requested_by);
                response.is_watcher = isWatcher;
                
                var get_wo_contacts = _UoW.WorkOrderRepository.GetWOContactMappingsByWOId(Guid.Parse(wo_id));
                response.workorder_vendor_contacts_list = get_wo_contacts;

                //if (!String.IsNullOrEmpty(wo_details.calendarId))
                //{
                //    userService.UpdateWOInviteesStatus(Guid.Parse(wo_id));
                //}
                var count = _UoW.WorkOrderRepository.GetAcceptRejectCountForWO(Guid.Parse(wo_id));
                response.total_contacts_count = count.Item1;
                response.accepted_contacts_count = count.Item2;
            }
            else
            {
                /// not found
                response = null;
            }
            return response;
        }

        public ViewOBWODetailsByIdResponsemodel ViewOBWODetailsById(string wo_id)
        {
            UserService userService = new UserService(_mapper);
            ViewOBWODetailsByIdResponsemodel response = new ViewOBWODetailsByIdResponsemodel();
            var wo_details = _UoW.WorkOrderRepository.ViewOBWODetailsById(Guid.Parse(wo_id));
            if (wo_details != null)
            {
                if (wo_details.WOOnboardingAssets != null && wo_details.WOOnboardingAssets.Count > 0)
                {
                    wo_details.WOOnboardingAssets = wo_details.WOOnboardingAssets.Where(x => !x.is_deleted).ToList();
                }
                if (wo_details.WorkOrderAttachments != null && wo_details.WorkOrderAttachments.Count > 0)
                {
                    wo_details.WorkOrderAttachments = wo_details.WorkOrderAttachments.Where(x => !x.is_archive).ToList();
                }

                response = _mapper.Map<ViewOBWODetailsByIdResponsemodel>(wo_details);

                response.asset_details.ForEach(asset =>
                {
                    if (asset.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent)
                    {
                        asset.toplevelcomponent_asset_id = _UoW.WorkOrderRepository.GetTopLevelWOOBAsset(asset.woonboardingassets_id);
                    }
                    if (String.IsNullOrEmpty(asset.asset_class_type) && !String.IsNullOrEmpty(asset.asset_class_code))
                    {
                        // get from db
                        var get_class = _UoW.WorkOrderRepository.GetAssetClassByClasscode(asset.asset_class_code);
                        if(get_class!=null && get_class.FormIOType != null)
                        {
                            asset.asset_class_type = get_class.FormIOType.form_type_name;
                        }
                    }

                    var img = _UoW.WorkOrderRepository.GetAssetProfileImage(asset.woonboardingassets_id);
                    if (!String.IsNullOrEmpty(img))
                    {
                        asset.asset_profile = UrlGenerator.GetAssetImagesURL(img);
                    }
                    asset.temp_issues_count = _UoW.WorkOrderRepository.GetIssuesCountByOBWOAssetId(asset.woonboardingassets_id);
                });
                
                response.asset_details_v2.ForEach(asset =>
                {
                    if (asset.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent)
                    {
                        asset.toplevelcomponent_asset_id = _UoW.WorkOrderRepository.GetTopLevelWOOBAsset(asset.woonboardingassets_id);


                    }
                    var img = _UoW.WorkOrderRepository.GetAssetProfileImage(asset.woonboardingassets_id);
                    if (!String.IsNullOrEmpty(img))
                    {
                        asset.asset_profile = UrlGenerator.GetAssetImagesURL(img);
                    }
                    asset.temp_issues_count = _UoW.WorkOrderRepository.GetIssuesCountByOBWOAssetId(asset.woonboardingassets_id);


                    /*if (String.IsNullOrEmpty(asset.asset_class_type) && !String.IsNullOrEmpty(asset.asset_class_code))
                    {
                        // get from db
                        var get_class = _UoW.WorkOrderRepository.GetAssetClassByClasscode(asset.asset_class_code);
                        if (get_class != null && get_class.FormIOType != null)
                        {
                            asset.asset_class_type = get_class.FormIOType.form_type_name;
                        }
                    }*/

                    //foreach(var temp_issue in asset.)

                });

                response.location_room_count = _UoW.WorkOrderRepository.GetTempRoomCountForWorkOrder(Guid.Parse(wo_id));
                response.new_location_count = _UoW.WorkOrderRepository.GetTempMasterLocationCount(Guid.Parse(wo_id));

                GetAllIssueByWOidRequestmodel GetAllIssueByWOidRequestmodel = new GetAllIssueByWOidRequestmodel();
                GetAllIssueByWOidRequestmodel.wo_id = Guid.Parse(wo_id);

                var get_issues = GetAllIssueByWOid(GetAllIssueByWOidRequestmodel);
                int issues_count = get_issues.main_issue_list.Count + get_issues.temp_issue_list.Count;

                var get_time_material_count = _UoW.WorkOrderRepository.GetAllTimeMaterialCountByWOId(Guid.Parse(wo_id));
                response.time_materials_count = get_time_material_count;

                response.issues_count = issues_count;
                response.status_wise_asset_count_obj = new status_wise_asset_count_obj();
                var status_wise_asset_count_obj = GetStatusWiseWOLineCountByWOId(Guid.Parse(wo_id));
                if (status_wise_asset_count_obj != null)
                {
                    response.status_wise_asset_count_obj = status_wise_asset_count_obj;
                }

                // if user is Watcher of this WorkOrder then return TRUE else FALSE
                bool isWatcher = _UoW.WorkOrderRepository.CheckUserIsWatcherOrNot(Guid.Parse(wo_id), UpdatedGenericRequestmodel.CurrentUser.requested_by);
                response.is_watcher = isWatcher;

                var get_wo_contacts = _UoW.WorkOrderRepository.GetWOContactMappingsByWOId(Guid.Parse(wo_id));
                response.workorder_vendor_contacts_list = get_wo_contacts;

                //if (!String.IsNullOrEmpty(wo_details.calendarId))
                //{
                //    userService.UpdateWOInviteesStatus(Guid.Parse(wo_id));
                //}

                var count = _UoW.WorkOrderRepository.GetAcceptRejectCountForWO(Guid.Parse(wo_id));
                response.total_contacts_count = count.Item1;
                response.accepted_contacts_count = count.Item2;
                response.ir_image_count = _UoW.WorkOrderRepository.GetIRWOImagesCount(Guid.Parse(wo_id));
            }
            else
            {
                /// not found
                response = null;
            }
            return response;
        }
        public status_wise_asset_count_obj GetStatusWiseWOLineCountByWOId(Guid wo_id)
        {

            status_wise_asset_count_obj status_wise_asset_count_obj = new status_wise_asset_count_obj();

            int open_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(wo_id, (int)Status.open);
            int open_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(wo_id, (int)Status.open);
            int inprogress_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(wo_id, (int)Status.InProgress);
            int inprogress_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(wo_id, (int)Status.InProgress);
            int completed_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(wo_id, (int)Status.Completed);
            int completed_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(wo_id, (int)Status.Completed);
            int hold_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(wo_id, (int)Status.Hold);
            int hold_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(wo_id, (int)Status.Hold);
            int readyforReview_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(wo_id, (int)Status.Ready_for_review);
            int readyforReview_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(wo_id, (int)Status.Ready_for_review);
            int recheck_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(wo_id, (int)Status.Recheck);
            int recheck_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(wo_id, (int)Status.Recheck);
            int submitted_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(wo_id, (int)Status.Submitted);
            int submitted_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(wo_id, (int)Status.Submitted);

            status_wise_asset_count_obj.open_obwo_asset = open_asset + open_asset_formIO;
            status_wise_asset_count_obj.inprogress_obwo_asset = inprogress_asset + inprogress_asset_formIO;
            status_wise_asset_count_obj.completed_obwo_asset = completed_asset + completed_asset_formIO;
            status_wise_asset_count_obj.hold_obwo_asset = hold_asset + hold_asset_formIO;
            status_wise_asset_count_obj.ready_for_review_obwo_asset = readyforReview_asset + readyforReview_asset_formIO;
            status_wise_asset_count_obj.recheck_obwo_asset = recheck_asset + recheck_asset_formIO;
            status_wise_asset_count_obj.submitted_obwo_asset = submitted_asset + submitted_asset_formIO;

            status_wise_asset_count_obj.total_count = status_wise_asset_count_obj.open_obwo_asset + status_wise_asset_count_obj.inprogress_obwo_asset
                                            + status_wise_asset_count_obj.completed_obwo_asset + status_wise_asset_count_obj.hold_obwo_asset
                                            + status_wise_asset_count_obj.ready_for_review_obwo_asset + status_wise_asset_count_obj.recheck_obwo_asset
                                            + status_wise_asset_count_obj.submitted_obwo_asset ;

            return status_wise_asset_count_obj;
        }
        public GetOBWOAssetDetailsByIdResponsemodel GetOBWOAssetDetailsById(string woonboardingassets_id)
        {

            GetOBWOAssetDetailsByIdResponsemodel response = new GetOBWOAssetDetailsByIdResponsemodel();
            var get_asset_details = _UoW.WorkOrderRepository.GetOBWOAssetDetailsById(Guid.Parse(woonboardingassets_id));
            if (get_asset_details != null)
            {
                if (get_asset_details.WOOnboardingAssetsImagesMapping != null && get_asset_details.WOOnboardingAssetsImagesMapping.Count > 0)
                {
                    get_asset_details.WOOnboardingAssetsImagesMapping = get_asset_details.WOOnboardingAssetsImagesMapping.Where(x => !x.is_deleted && !String.IsNullOrEmpty(x.asset_photo)).ToList();
                }
                if (get_asset_details.IRWOImagesLabelMapping != null && get_asset_details.IRWOImagesLabelMapping.Count > 0)
                {
                    get_asset_details.IRWOImagesLabelMapping = get_asset_details.IRWOImagesLabelMapping.Where(x => !x.is_deleted).OrderBy(x => x.created_at).ToList();
                }
                if (get_asset_details.WOOBAssetFedByMapping != null && get_asset_details.WOOBAssetFedByMapping.Count > 0)
                {
                    get_asset_details.WOOBAssetFedByMapping = get_asset_details.WOOBAssetFedByMapping.Where(x => !x.is_deleted).OrderBy(x => x.created_at).ToList();
                }
                if (get_asset_details.WOlineSubLevelcomponentMapping != null && get_asset_details.WOlineSubLevelcomponentMapping.Count > 0)
                {
                    get_asset_details.WOlineSubLevelcomponentMapping = get_asset_details.WOlineSubLevelcomponentMapping.Where(x => !x.is_deleted).OrderBy(x => x.created_at).ToList();
                }
                if (get_asset_details.WOlineTopLevelcomponentMapping != null && get_asset_details.WOlineTopLevelcomponentMapping.Count > 0)
                {
                    get_asset_details.WOlineTopLevelcomponentMapping = get_asset_details.WOlineTopLevelcomponentMapping.Where(x => !x.is_deleted).OrderBy(x => x.created_at).ToList();
                }
                if (get_asset_details.WOLineIssue != null && get_asset_details.WOLineIssue.Count > 0)
                {
                    get_asset_details.WOLineIssue = get_asset_details.WOLineIssue.Where(x => !x.is_deleted && x.issue_caused_id != (int)WOLine_Temp_Issue_Caused.NFPA_70B_Violation).OrderBy(x => x.created_at).ToList();
                }
                response = _mapper.Map<GetOBWOAssetDetailsByIdResponsemodel>(get_asset_details);

                if (!String.IsNullOrEmpty(response.condition_index_type_name))
                    response.condition_index_type_name = response.condition_index_type_name.Substring(response.condition_index_type_name.IndexOf('_') + 1);

                response.form_nameplate_info = assetservice.CompareNPDatajsonAndTemplateJson(get_asset_details.TempAsset.InspectionTemplateAssetClass.form_nameplate_info, get_asset_details.TempAsset.form_nameplate_info);
                // update asset_photo_type in woline issye
                if (response.woline_issue_list!=null && response.woline_issue_list.Count > 0)
                {
                    foreach(var item in response.woline_issue_list)
                    {
                        if(item.woline_issue_image_list!=null && item.woline_issue_image_list.Count > 0)
                        {
                            if(item.issue_type == (int)WOLine_Temp_Issue_Type.Compliance && item.issue_caused_id == (int)WOLine_Temp_Issue_Caused.NEC_Violation)
                                item.woline_issue_image_list.ForEach(x => x.asset_photo_type = (int)AssetPhotoType.NEC_Violation_Photo);
                            if (item.issue_type == (int)WOLine_Temp_Issue_Type.Compliance &&  item.issue_caused_id == (int)WOLine_Temp_Issue_Caused.OSha_Violation)
                                item.woline_issue_image_list.ForEach(x => x.asset_photo_type = (int)AssetPhotoType.OSHA_Violation_Photo);
                            if (item.issue_type == (int)WOLine_Temp_Issue_Type.Compliance && item.issue_caused_id == (int)WOLine_Temp_Issue_Caused.NFPA_70B_Violation)
                                item.woline_issue_image_list.ForEach(x => x.asset_photo_type = (int)AssetPhotoType.NFPA_70B_Violation_Photo);
                            if (item.issue_type == (int)WOLine_Temp_Issue_Type.Thermal_Anamoly)
                                item.woline_issue_image_list.ForEach(x => x.asset_photo_type = (int)AssetPhotoType.Thermal_Anomly_Photo);
                            if (item.issue_type == (int)WOLine_Temp_Issue_Type.Repair)
                                item.woline_issue_image_list.ForEach(x => x.asset_photo_type = (int)AssetPhotoType.Repair_Woline_Issue_Photo);
                            if (item.issue_type == (int)WOLine_Temp_Issue_Type.Replace)
                                item.woline_issue_image_list.ForEach(x => x.asset_photo_type = (int)AssetPhotoType.Replace_Woline_Issue_photo);
                            if (item.issue_type == (int)WOLine_Temp_Issue_Type.Other)
                                item.woline_issue_image_list.ForEach(x => x.asset_photo_type = (int)AssetPhotoType.Other_Woline_Issue_photo);
                            if (item.issue_type == (int)WOLine_Temp_Issue_Type.ultrasonic_anamoly)
                                item.woline_issue_image_list.ForEach(x => x.asset_photo_type = (int)AssetPhotoType.Ultrasonic_anamoly_photo);


                        }
                    }
                }

                GetWOLinkedIssueRequestmodel getWOLinkedIssueRequestmodel = new GetWOLinkedIssueRequestmodel();
                getWOLinkedIssueRequestmodel.woonboardingassets_id = Guid.Parse(woonboardingassets_id);

                var get_linked_issues = GetWOLinkedIssue(getWOLinkedIssueRequestmodel);

                response.linked_issues = get_linked_issues;

                if (!String.IsNullOrEmpty(response.asset_class_code))
                {
                    var get_asset_class = _UoW.WorkOrderRepository.GetAssetclassByCode(response.asset_class_code.ToLower().Trim());
                    if (get_asset_class != null)
                    {
                        response.inspectiontemplate_asset_class_id = get_asset_class.inspectiontemplate_asset_class_id;
                    }
                }
                if (response.wo_ob_asset_fed_by_mapping != null && response.wo_ob_asset_fed_by_mapping.Count > 0)
                {
                    foreach (var parent_asset in response.wo_ob_asset_fed_by_mapping)
                    {
                        if (!parent_asset.is_parent_from_ob_wo)
                        {
                            //first check if WOLine of that Asset is Added in WO then get asset_name from WOLine
                            var get_ob_asset = _UoW.AssetRepository.GetOBWOAssetsByAssetId(parent_asset.parent_asset_id, get_asset_details.wo_id);
                            if (get_ob_asset != null)
                            {
                                parent_asset.parent_asset_name = get_ob_asset.asset_name;
                            }
                            else
                            {
                                var get_assset = _UoW.WorkOrderRepository.GetAssetByID(parent_asset.parent_asset_id);
                                if (get_assset != null)
                                    parent_asset.parent_asset_name = get_assset.name;
                            }
                        }
                        else
                        {
                            var get_assset = _UoW.WorkOrderRepository.GetFedByOBAssetByID(parent_asset.parent_asset_id);
                            if (get_assset != null)
                            {
                                parent_asset.parent_asset_name = get_assset.asset_name;

                                //if (get_assset.asset_id != null)
                                //    parent_asset.parent_asset_id = get_assset.asset_id.Value;
                            }
                        }

                        if (parent_asset.via_subcomponant_asset_id != null)
                        {
                            if (!parent_asset.is_via_subcomponant_asset_from_ob_wo)
                            {
                                var get_assset = _UoW.WorkOrderRepository.GetAssetByID(parent_asset.via_subcomponant_asset_id.Value);
                                if (get_assset != null)
                                {
                                    parent_asset.via_subcomponant_asset_name = get_assset.name;
                                }
                            }
                            else
                            {
                                var get_assset = _UoW.WorkOrderRepository.GetFedByOBAssetByID(parent_asset.via_subcomponant_asset_id.Value);
                                if (get_assset != null)
                                {
                                    parent_asset.via_subcomponant_asset_name = get_assset.asset_name;
                                }
                            }
                        }

                        if (parent_asset.fed_by_via_subcomponant_asset_id != null)
                        {
                            if (!parent_asset.is_fed_by_via_subcomponant_asset_from_ob_wo)
                            {
                                var get_assset = _UoW.WorkOrderRepository.GetAssetByID(parent_asset.fed_by_via_subcomponant_asset_id.Value);
                                if (get_assset != null)
                                {
                                    parent_asset.fed_by_via_subcomponent_asset_name = get_assset.name;
                                }
                            }
                            else
                            {
                                var get_assset = _UoW.WorkOrderRepository.GetFedByOBAssetByID(parent_asset.fed_by_via_subcomponant_asset_id.Value);
                                if (get_assset != null)
                                {
                                    parent_asset.fed_by_via_subcomponent_asset_name = get_assset.asset_name;
                                }
                            }
                        }
                    }
                }

                if (response.wo_ob_asset_toplevelcomponent_mapping != null && response.wo_ob_asset_toplevelcomponent_mapping.Count > 0)
                {
                    foreach (var top_level_asset in response.wo_ob_asset_toplevelcomponent_mapping)
                    {
                        if (!top_level_asset.is_toplevelcomponent_from_ob_wo)
                        {
                            var get_assset = _UoW.WorkOrderRepository.GetAssetByID(top_level_asset.toplevelcomponent_asset_id);
                            if (get_assset != null)
                            {
                                top_level_asset.toplevelcomponent_asset_name = get_assset.name;
                            }
                        }
                        else
                        {
                            var get_assset = _UoW.WorkOrderRepository.GetFedByOBAssetByID(top_level_asset.toplevelcomponent_asset_id);
                            if (get_assset != null)
                            {
                                top_level_asset.toplevelcomponent_asset_name = get_assset.asset_name;
                            }
                        }
                    }
                }

                if (response.wo_ob_asset_sublevelcomponent_mapping != null && response.wo_ob_asset_sublevelcomponent_mapping.Count > 0)
                {
                    foreach (var sub_level_asset in response.wo_ob_asset_sublevelcomponent_mapping)
                    {
                        if (!sub_level_asset.is_sublevelcomponent_from_ob_wo)
                        {
                            var get_assset = _UoW.WorkOrderRepository.GetAssetByID(sub_level_asset.sublevelcomponent_asset_id);
                            if (get_assset != null)
                            {
                                sub_level_asset.sublevelcomponent_asset_name = get_assset.name;
                                sub_level_asset.sublevelcomponent_asset_class_id = get_assset.inspectiontemplate_asset_class_id.Value;
                                sub_level_asset.sublevelcomponent_asset_class_name = get_assset.InspectionTemplateAssetClass.asset_class_name;
                                sub_level_asset.sublevelcomponent_asset_class_code = get_assset.InspectionTemplateAssetClass.asset_class_code;
                            }
                        }
                        else
                        {
                            var get_assset = _UoW.WorkOrderRepository.GetFedByOBAssetByID(sub_level_asset.sublevelcomponent_asset_id);
                            if (get_assset != null)
                            {
                                sub_level_asset.sublevelcomponent_asset_name = get_assset.asset_name;
                                if (!String.IsNullOrEmpty(get_assset.asset_class_code))
                                {
                                    var get_assetclass = _UoW.WorkOrderRepository.GetAssetclassByCode(get_assset.asset_class_code.ToLower().Trim());
                                    if (get_assetclass != null)
                                    {
                                        sub_level_asset.sublevelcomponent_asset_class_name = get_assetclass.asset_class_name;
                                        sub_level_asset.sublevelcomponent_asset_class_code = get_assetclass.asset_class_code;
                                        sub_level_asset.sublevelcomponent_asset_class_id = get_assetclass.inspectiontemplate_asset_class_id;
                                    }
                                }
                            }
                        }

                        if (sub_level_asset.is_sublevelcomponent_from_ob_wo) // if subcomp is from ob WO 
                        {
                            // Nameplate,Exterior and Multiple AdditionalImages of SubComponents New Flow
                            var get_subcomponent_asset = _UoW.WorkOrderRepository.GetOBWOAssetByID(sub_level_asset.sublevelcomponent_asset_id);
                            if (get_subcomponent_asset != null && get_subcomponent_asset.WOOnboardingAssetsImagesMapping != null && get_subcomponent_asset.WOOnboardingAssetsImagesMapping.Count > 0)
                            {
                                var db_img_list = get_subcomponent_asset.WOOnboardingAssetsImagesMapping.Where(x => !x.is_deleted).ToList();
                                var mapped_img_list = _mapper.Map<List<subcomponent_image_list_class>>(db_img_list);

                                sub_level_asset.subcomponent_image_list = mapped_img_list;
                            }
                        }
                        else
                        {    // if subcomp is from Existing Main Asset
                            var get_WOlineSubLevelcomponentMapping = _UoW.WorkOrderRepository.GetWolineSublevelAssetMappingById(sub_level_asset.sublevelcomponent_asset_id,sub_level_asset.woonboardingassets_id);
                            if (get_WOlineSubLevelcomponentMapping!=null && get_WOlineSubLevelcomponentMapping.WOOnboardingAssetsImagesMapping != null && get_WOlineSubLevelcomponentMapping.WOOnboardingAssetsImagesMapping.Count > 0)
                            {
                                var db_img_list = get_WOlineSubLevelcomponentMapping.WOOnboardingAssetsImagesMapping.Where(x => !x.is_deleted).ToList();
                                var mapped_img_list = _mapper.Map<List<subcomponent_image_list_class>>(db_img_list);

                                sub_level_asset.subcomponent_image_list = mapped_img_list;
                            }

                        }
                    }
                }

                if (response.ob_existing_asset_id != null)
                {
                    var get_assset = _UoW.WorkOrderRepository.GetAssetByID(response.ob_existing_asset_id.Value);
                    response.asset_name = get_assset.name;
                }
                if (response.replaced_asset_id != null && response.replaced_asset_id != Guid.Empty)
                {
                    if (response.is_replaced_asset_id_is_main)
                    {
                        var get_asssets = _UoW.AssetRepository.GetAssetByIDs(new List<Guid> { response.replaced_asset_id.Value });
                        response.replaced_asset_name = get_asssets.FirstOrDefault().name;
                    }
                    else
                    {
                        var get_ob_asset_name = _UoW.WorkOrderRepository.GetOBWOAssetNameByID(response.replaced_asset_id.Value);
                        response.replaced_asset_name = get_ob_asset_name;
                    }
                }

                if (response.issues_temp_asset_id != null)
                {
                    var get_main_temp_asset = _UoW.WorkOrderRepository.GetWOlineByIdForissueupdate(response.issues_temp_asset_id.Value);
                    if (get_main_temp_asset != null)
                    {
                        response.issues_temp_asset_name = get_main_temp_asset.asset_name;
                        response.asset_name = get_main_temp_asset.asset_name;

                    }
                }

                // override basic asset details from temp asset table 
                if (response.temp_asset_details != null)
                {
                    response.asset_name = response.temp_asset_details.asset_name;
                    response.qr_code = response.temp_asset_details.QR_code;
                    response.condition_index_type = response.temp_asset_details.condition_index_type;
                    response.criticality_index_type = response.temp_asset_details.criticality_index_type;
                    response.commisiion_date = response.temp_asset_details.commisiion_date;
                    //response.form_nameplate_info = response.temp_asset_details.form_nameplate_info;
                    response.form_nameplate_info = assetservice.CompareNPDatajsonAndTemplateJson(get_asset_details.TempAsset.InspectionTemplateAssetClass.form_nameplate_info, get_asset_details.TempAsset.form_nameplate_info);
                    response.temp_asset_details.form_nameplate_info = response.form_nameplate_info;
                    response.Component_level_type_id = response.temp_asset_details.component_level_type_id;
                    response.asset_operating_condition_state = response.temp_asset_details.asset_operating_condition_state;
                    response.code_compliance = response.temp_asset_details.code_compliance;
                    if(response.temp_asset_details.inspectiontemplate_asset_class_id!=null)
                        response.inspectiontemplate_asset_class_id = response.temp_asset_details.inspectiontemplate_asset_class_id.Value;
                    response.asset_class_code = response.temp_asset_details.asset_class_code;
                    response.asset_class_name = response.temp_asset_details.asset_class_name;

                    //it is updating to older locations so commenting it
                    //if (!String.IsNullOrEmpty(response.temp_asset_details.temp_formio_building_name))
                    //    response.building = response.temp_asset_details.temp_formio_building_name;
                    //if (!String.IsNullOrEmpty(response.temp_asset_details.temp_formio_floor_name))
                    //    response.floor = response.temp_asset_details.temp_formio_floor_name;
                    //if (!String.IsNullOrEmpty(response.temp_asset_details.temp_formio_room_name))
                    //    response.room = response.temp_asset_details.temp_formio_room_name;
                    //if (!String.IsNullOrEmpty(response.temp_asset_details.temp_formio_section_name))
                    //    response.section = response.temp_asset_details.temp_formio_section_name;

                    //response.building = response.temp_asset_details.temp_formio_building_name;
                    //response.floor = response.temp_asset_details.temp_formio_floor_name;
                    //response.room = response.temp_asset_details.temp_formio_room_name;
                    //response.section = response.temp_asset_details.temp_formio_section_name;
                    response.temp_formiobuilding_id = response.temp_asset_details.temp_formiobuilding_id;
                    response.temp_formiofloor_id = response.temp_asset_details.temp_formiofloor_id;
                    response.temp_formioroom_id = response.temp_asset_details.temp_formioroom_id;
                    response.temp_formiosection_id = response.temp_asset_details.temp_formiosection_id;

                    response.temp_master_building = !String.IsNullOrEmpty(response.temp_asset_details.temp_master_building) ? response.temp_asset_details.temp_master_building:response.building;
                    response.temp_master_floor = !String.IsNullOrEmpty(response.temp_asset_details.temp_master_floor) ? response.temp_asset_details.temp_master_floor : response.floor;
                    response.temp_master_room = !String.IsNullOrEmpty(response.temp_asset_details.temp_master_room) ? response.temp_asset_details.temp_master_room : response.room;
                    response.temp_master_section = !String.IsNullOrEmpty(response.temp_asset_details.temp_master_section) ? response.temp_asset_details.temp_master_section : response.section;
                    response.temp_master_building_id = response.temp_asset_details.temp_master_building_id;
                    response.temp_master_floor_id = response.temp_asset_details.temp_master_floor_id;
                    response.temp_master_room_id = response.temp_asset_details.temp_master_room_id;
                }

                var get_feeding_list = _UoW.WorkOrderRepository.GetOBAssetFeedingCircuitList(Guid.Parse(woonboardingassets_id));
                if (get_feeding_list != null && get_feeding_list.Count > 0)
                {
                    foreach (var item in get_feeding_list)
                    {
                        if (!String.IsNullOrEmpty(item.nameplate_json))
                        {
                            dynamic dynamicform1 = Newtonsoft.Json.JsonConvert.DeserializeObject(item.nameplate_json);
                            item.amps = dynamicform1.ampereRating;
                        }
                    }
                    response.feeding_circuit_list = get_feeding_list;
                }
            }
            return response;
        }

        public GetOBWOAssetDetailsByIdResponsemodel GetOBWOAssetDetailsById_V2(string woonboardingassets_id)
        {

            GetOBWOAssetDetailsByIdResponsemodel response = new GetOBWOAssetDetailsByIdResponsemodel();
            var get_asset_details = _UoW.WorkOrderRepository.GetOBWOAssetDetailsById(Guid.Parse(woonboardingassets_id));
            if (get_asset_details != null)
            {
                if (get_asset_details.WOOnboardingAssetsImagesMapping != null && get_asset_details.WOOnboardingAssetsImagesMapping.Count > 0)
                {
                    get_asset_details.WOOnboardingAssetsImagesMapping = get_asset_details.WOOnboardingAssetsImagesMapping.Where(x => !x.is_deleted && !String.IsNullOrEmpty(x.asset_photo)).ToList();
                }
                if (get_asset_details.IRWOImagesLabelMapping != null && get_asset_details.IRWOImagesLabelMapping.Count > 0)
                {
                    get_asset_details.IRWOImagesLabelMapping = get_asset_details.IRWOImagesLabelMapping.Where(x => !x.is_deleted).OrderBy(x => x.created_at).ToList();
                }
                if (get_asset_details.WOOBAssetFedByMapping != null && get_asset_details.WOOBAssetFedByMapping.Count > 0)
                {
                    get_asset_details.WOOBAssetFedByMapping = get_asset_details.WOOBAssetFedByMapping.Where(x => !x.is_deleted).OrderBy(x => x.created_at).ToList();
                }
                if (get_asset_details.WOlineSubLevelcomponentMapping != null && get_asset_details.WOlineSubLevelcomponentMapping.Count > 0)
                {
                    get_asset_details.WOlineSubLevelcomponentMapping = get_asset_details.WOlineSubLevelcomponentMapping.Where(x => !x.is_deleted).OrderBy(x => x.created_at).ToList();
                }
                if (get_asset_details.WOlineTopLevelcomponentMapping != null && get_asset_details.WOlineTopLevelcomponentMapping.Count > 0)
                {
                    get_asset_details.WOlineTopLevelcomponentMapping = get_asset_details.WOlineTopLevelcomponentMapping.Where(x => !x.is_deleted).OrderBy(x => x.created_at).ToList();
                }
                if (get_asset_details.WOLineIssue != null && get_asset_details.WOLineIssue.Count > 0)
                {
                    get_asset_details.WOLineIssue = get_asset_details.WOLineIssue.Where(x => !x.is_deleted).OrderBy(x => x.created_at).ToList();
                }
                

                response = _mapper.Map<GetOBWOAssetDetailsByIdResponsemodel>(get_asset_details);

                if (!String.IsNullOrEmpty(response.condition_index_type_name))
                    response.condition_index_type_name = response.condition_index_type_name.Substring(response.condition_index_type_name.IndexOf('_') + 1);

                response.form_nameplate_info = assetservice.CompareNPDatajsonAndTemplateJson(get_asset_details.TempAsset.InspectionTemplateAssetClass.form_nameplate_info, get_asset_details.TempAsset.form_nameplate_info);
                // update asset_photo_type in woline issye
                if (response.woline_issue_list != null && response.woline_issue_list.Count > 0)
                {
                    foreach (var item in response.woline_issue_list)
                    {
                        if (item.woline_issue_image_list != null && item.woline_issue_image_list.Count > 0)
                        {
                            if (item.issue_type == (int)WOLine_Temp_Issue_Type.Compliance && item.issue_caused_id == (int)WOLine_Temp_Issue_Caused.NEC_Violation)
                                item.woline_issue_image_list.ForEach(x => x.asset_photo_type = (int)AssetPhotoType.NEC_Violation_Photo);
                            if (item.issue_type == (int)WOLine_Temp_Issue_Type.Compliance && item.issue_caused_id == (int)WOLine_Temp_Issue_Caused.OSha_Violation)
                                item.woline_issue_image_list.ForEach(x => x.asset_photo_type = (int)AssetPhotoType.OSHA_Violation_Photo);
                            if (item.issue_type == (int)WOLine_Temp_Issue_Type.Compliance && item.issue_caused_id == (int)WOLine_Temp_Issue_Caused.NFPA_70B_Violation)
                                item.woline_issue_image_list.ForEach(x => x.asset_photo_type = (int)AssetPhotoType.NFPA_70B_Violation_Photo);
                            if (item.issue_type == (int)WOLine_Temp_Issue_Type.Thermal_Anamoly)
                                item.woline_issue_image_list.ForEach(x => x.asset_photo_type = (int)AssetPhotoType.Thermal_Anomly_Photo);
                            if (item.issue_type == (int)WOLine_Temp_Issue_Type.Repair)
                                item.woline_issue_image_list.ForEach(x => x.asset_photo_type = (int)AssetPhotoType.Repair_Woline_Issue_Photo);
                            if (item.issue_type == (int)WOLine_Temp_Issue_Type.Replace)
                                item.woline_issue_image_list.ForEach(x => x.asset_photo_type = (int)AssetPhotoType.Replace_Woline_Issue_photo);
                            if (item.issue_type == (int)WOLine_Temp_Issue_Type.Other)
                                item.woline_issue_image_list.ForEach(x => x.asset_photo_type = (int)AssetPhotoType.Other_Woline_Issue_photo);
                            if (item.issue_type == (int)WOLine_Temp_Issue_Type.ultrasonic_anamoly)
                                item.woline_issue_image_list.ForEach(x => x.asset_photo_type = (int)AssetPhotoType.Ultrasonic_anamoly_photo);


                        }
                    }
                }

                GetWOLinkedIssueRequestmodel getWOLinkedIssueRequestmodel = new GetWOLinkedIssueRequestmodel();
                getWOLinkedIssueRequestmodel.woonboardingassets_id = Guid.Parse(woonboardingassets_id);

                var get_linked_issues = GetWOLinkedIssue(getWOLinkedIssueRequestmodel);

                response.linked_issues = get_linked_issues;

                if (!String.IsNullOrEmpty(response.asset_class_code))
                {
                    var get_asset_class = _UoW.WorkOrderRepository.GetAssetclassByCode(response.asset_class_code.ToLower().Trim());
                    if (get_asset_class != null)
                    {
                        response.inspectiontemplate_asset_class_id = get_asset_class.inspectiontemplate_asset_class_id;
                    }
                }
                if (response.wo_ob_asset_fed_by_mapping != null && response.wo_ob_asset_fed_by_mapping.Count > 0)
                {
                    foreach (var parent_asset in response.wo_ob_asset_fed_by_mapping)
                    {
                        if (!parent_asset.is_parent_from_ob_wo)
                        {
                            //first check if WOLine of that Asset is Added in WO then get asset_name from WOLine
                            var get_ob_asset = _UoW.AssetRepository.GetOBWOAssetsByAssetId(parent_asset.parent_asset_id, get_asset_details.wo_id);
                            if (get_ob_asset != null)
                            {
                                parent_asset.parent_asset_name = get_ob_asset.asset_name;
                            }
                            else
                            {
                                var get_assset = _UoW.WorkOrderRepository.GetAssetByID(parent_asset.parent_asset_id);
                                if (get_assset != null)
                                    parent_asset.parent_asset_name = get_assset.name;
                            }
                        }
                        else
                        {
                            var get_assset = _UoW.WorkOrderRepository.GetFedByOBAssetByID(parent_asset.parent_asset_id);
                            if (get_assset != null)
                            {
                                parent_asset.parent_asset_name = get_assset.asset_name;

                                //if (get_assset.asset_id != null)
                                //    parent_asset.parent_asset_id = get_assset.asset_id.Value;
                            }
                        }

                        if (parent_asset.via_subcomponant_asset_id != null)
                        {
                            if (!parent_asset.is_via_subcomponant_asset_from_ob_wo)
                            {
                                var get_assset = _UoW.WorkOrderRepository.GetAssetByID(parent_asset.via_subcomponant_asset_id.Value);
                                if (get_assset != null)
                                {
                                    parent_asset.via_subcomponant_asset_name = get_assset.name;
                                }
                            }
                            else
                            {
                                var get_assset = _UoW.WorkOrderRepository.GetFedByOBAssetByID(parent_asset.via_subcomponant_asset_id.Value);
                                if (get_assset != null)
                                {
                                    parent_asset.via_subcomponant_asset_name = get_assset.asset_name;
                                }
                            }
                        }

                        if (parent_asset.fed_by_via_subcomponant_asset_id != null)
                        {
                            if (!parent_asset.is_fed_by_via_subcomponant_asset_from_ob_wo)
                            {
                                var get_assset = _UoW.WorkOrderRepository.GetAssetByID(parent_asset.fed_by_via_subcomponant_asset_id.Value);
                                if (get_assset != null)
                                {
                                    parent_asset.fed_by_via_subcomponent_asset_name = get_assset.name;
                                }
                            }
                            else
                            {
                                var get_assset = _UoW.WorkOrderRepository.GetFedByOBAssetByID(parent_asset.fed_by_via_subcomponant_asset_id.Value);
                                if (get_assset != null)
                                {
                                    parent_asset.fed_by_via_subcomponent_asset_name = get_assset.asset_name;
                                }
                            }
                        }
                    }
                }

                if (response.wo_ob_asset_toplevelcomponent_mapping != null && response.wo_ob_asset_toplevelcomponent_mapping.Count > 0)
                {
                    foreach (var top_level_asset in response.wo_ob_asset_toplevelcomponent_mapping)
                    {
                        if (!top_level_asset.is_toplevelcomponent_from_ob_wo)
                        {
                            var get_assset = _UoW.WorkOrderRepository.GetAssetByID(top_level_asset.toplevelcomponent_asset_id);
                            if (get_assset != null)
                            {
                                top_level_asset.toplevelcomponent_asset_name = get_assset.name;
                            }
                        }
                        else
                        {
                            var get_assset = _UoW.WorkOrderRepository.GetFedByOBAssetByID(top_level_asset.toplevelcomponent_asset_id);
                            if (get_assset != null)
                            {
                                top_level_asset.toplevelcomponent_asset_name = get_assset.asset_name;
                            }
                        }
                    }
                }

                if (response.wo_ob_asset_sublevelcomponent_mapping != null && response.wo_ob_asset_sublevelcomponent_mapping.Count > 0)
                {
                    foreach (var sub_level_asset in response.wo_ob_asset_sublevelcomponent_mapping)
                    {
                        if (!sub_level_asset.is_sublevelcomponent_from_ob_wo)
                        {
                            var get_assset = _UoW.WorkOrderRepository.GetAssetByID(sub_level_asset.sublevelcomponent_asset_id);
                            if (get_assset != null)
                            {
                                sub_level_asset.sublevelcomponent_asset_name = get_assset.name;
                                sub_level_asset.sublevelcomponent_asset_class_id = get_assset.inspectiontemplate_asset_class_id.Value;
                                sub_level_asset.sublevelcomponent_asset_class_name = get_assset.InspectionTemplateAssetClass.asset_class_name;
                                sub_level_asset.sublevelcomponent_asset_class_code = get_assset.InspectionTemplateAssetClass.asset_class_code;
                            }
                        }
                        else
                        {
                            var get_assset = _UoW.WorkOrderRepository.GetFedByOBAssetByID(sub_level_asset.sublevelcomponent_asset_id);
                            if (get_assset != null)
                            {
                                sub_level_asset.sublevelcomponent_asset_name = get_assset.asset_name;
                                if (!String.IsNullOrEmpty(get_assset.asset_class_code))
                                {
                                    var get_assetclass = _UoW.WorkOrderRepository.GetAssetclassByCode(get_assset.asset_class_code.ToLower().Trim());
                                    if (get_assetclass != null)
                                    {
                                        sub_level_asset.sublevelcomponent_asset_class_name = get_assetclass.asset_class_name;
                                        sub_level_asset.sublevelcomponent_asset_class_code = get_assetclass.asset_class_code;
                                        sub_level_asset.sublevelcomponent_asset_class_id = get_assetclass.inspectiontemplate_asset_class_id;
                                    }
                                }
                            }
                        }

                        if (sub_level_asset.is_sublevelcomponent_from_ob_wo) // if subcomp is from ob WO 
                        {
                            // Nameplate,Exterior and Multiple AdditionalImages of SubComponents New Flow
                            var get_subcomponent_asset = _UoW.WorkOrderRepository.GetOBWOAssetByID(sub_level_asset.sublevelcomponent_asset_id);
                            if (get_subcomponent_asset != null && get_subcomponent_asset.WOOnboardingAssetsImagesMapping != null && get_subcomponent_asset.WOOnboardingAssetsImagesMapping.Count > 0)
                            {
                                var db_img_list = get_subcomponent_asset.WOOnboardingAssetsImagesMapping.Where(x => !x.is_deleted).ToList();
                                var mapped_img_list = _mapper.Map<List<subcomponent_image_list_class>>(db_img_list);

                                sub_level_asset.subcomponent_image_list = mapped_img_list;
                            }
                        }
                        else
                        {    // if subcomp is from Existing Main Asset
                            var get_WOlineSubLevelcomponentMapping = _UoW.WorkOrderRepository.GetWolineSublevelAssetMappingById(sub_level_asset.sublevelcomponent_asset_id, sub_level_asset.woonboardingassets_id);
                            if (get_WOlineSubLevelcomponentMapping != null && get_WOlineSubLevelcomponentMapping.WOOnboardingAssetsImagesMapping != null && get_WOlineSubLevelcomponentMapping.WOOnboardingAssetsImagesMapping.Count > 0)
                            {
                                var db_img_list = get_WOlineSubLevelcomponentMapping.WOOnboardingAssetsImagesMapping.Where(x => !x.is_deleted).ToList();
                                var mapped_img_list = _mapper.Map<List<subcomponent_image_list_class>>(db_img_list);

                                sub_level_asset.subcomponent_image_list = mapped_img_list;
                            }

                        }
                    }
                }

                if (response.ob_existing_asset_id != null)
                {
                    var get_assset = _UoW.WorkOrderRepository.GetAssetByID(response.ob_existing_asset_id.Value);
                    response.asset_name = get_assset.name;
                }
                if (response.replaced_asset_id != null && response.replaced_asset_id != Guid.Empty)
                {
                    if (response.is_replaced_asset_id_is_main)
                    {
                        var get_asssets = _UoW.AssetRepository.GetAssetByIDs(new List<Guid> { response.replaced_asset_id.Value });
                        response.replaced_asset_name = get_asssets.FirstOrDefault().name;
                    }
                    else
                    {
                        var get_ob_asset_name = _UoW.WorkOrderRepository.GetOBWOAssetNameByID(response.replaced_asset_id.Value);
                        response.replaced_asset_name = get_ob_asset_name;
                    }
                }

                if (response.issues_temp_asset_id != null)
                {
                    var get_main_temp_asset = _UoW.WorkOrderRepository.GetWOlineByIdForissueupdate(response.issues_temp_asset_id.Value);
                    if (get_main_temp_asset != null)
                    {
                        response.issues_temp_asset_name = get_main_temp_asset.asset_name;
                        response.asset_name = get_main_temp_asset.asset_name;

                    }
                }

                // override basic asset details from temp asset table 
                if (response.temp_asset_details != null)
                {
                    response.asset_name = response.temp_asset_details.asset_name;
                    response.qr_code = response.temp_asset_details.QR_code;
                    response.condition_index_type = response.temp_asset_details.condition_index_type;
                    response.criticality_index_type = response.temp_asset_details.criticality_index_type;
                    response.commisiion_date = response.temp_asset_details.commisiion_date;
                    //response.form_nameplate_info = response.temp_asset_details.form_nameplate_info;
                    response.form_nameplate_info = assetservice.CompareNPDatajsonAndTemplateJson(get_asset_details.TempAsset.InspectionTemplateAssetClass.form_nameplate_info, get_asset_details.TempAsset.form_nameplate_info);
                    response.temp_asset_details.form_nameplate_info = response.form_nameplate_info;
                    response.Component_level_type_id = response.temp_asset_details.component_level_type_id;
                    response.asset_operating_condition_state = response.temp_asset_details.asset_operating_condition_state;
                    response.code_compliance = response.temp_asset_details.code_compliance;
                    if (response.temp_asset_details.inspectiontemplate_asset_class_id != null)
                        response.inspectiontemplate_asset_class_id = response.temp_asset_details.inspectiontemplate_asset_class_id.Value;
                    response.asset_class_code = response.temp_asset_details.asset_class_code;
                    response.asset_class_name = response.temp_asset_details.asset_class_name;

                    //it is updating to older locations so commenting it
                    //if (!String.IsNullOrEmpty(response.temp_asset_details.temp_formio_building_name))
                    //    response.building = response.temp_asset_details.temp_formio_building_name;
                    //if (!String.IsNullOrEmpty(response.temp_asset_details.temp_formio_floor_name))
                    //    response.floor = response.temp_asset_details.temp_formio_floor_name;
                    //if (!String.IsNullOrEmpty(response.temp_asset_details.temp_formio_room_name))
                    //    response.room = response.temp_asset_details.temp_formio_room_name;
                    //if (!String.IsNullOrEmpty(response.temp_asset_details.temp_formio_section_name))
                    //    response.section = response.temp_asset_details.temp_formio_section_name;

                    //response.building = response.temp_asset_details.temp_formio_building_name;
                    //response.floor = response.temp_asset_details.temp_formio_floor_name;
                    //response.room = response.temp_asset_details.temp_formio_room_name;
                    //response.section = response.temp_asset_details.temp_formio_section_name;
                    response.temp_formiobuilding_id = response.temp_asset_details.temp_formiobuilding_id;
                    response.temp_formiofloor_id = response.temp_asset_details.temp_formiofloor_id;
                    response.temp_formioroom_id = response.temp_asset_details.temp_formioroom_id;
                    response.temp_formiosection_id = response.temp_asset_details.temp_formiosection_id;

                    response.temp_master_building = !String.IsNullOrEmpty(response.temp_asset_details.temp_master_building) ? response.temp_asset_details.temp_master_building : response.building;
                    response.temp_master_floor = !String.IsNullOrEmpty(response.temp_asset_details.temp_master_floor) ? response.temp_asset_details.temp_master_floor : response.floor;
                    response.temp_master_room = !String.IsNullOrEmpty(response.temp_asset_details.temp_master_room) ? response.temp_asset_details.temp_master_room : response.room;
                    response.temp_master_section = !String.IsNullOrEmpty(response.temp_asset_details.temp_master_section) ? response.temp_asset_details.temp_master_section : response.section;
                    response.temp_master_building_id = response.temp_asset_details.temp_master_building_id;
                    response.temp_master_floor_id = response.temp_asset_details.temp_master_floor_id;
                    response.temp_master_room_id = response.temp_asset_details.temp_master_room_id;
                }

                var get_feeding_list = _UoW.WorkOrderRepository.GetOBAssetFeedingCircuitList(Guid.Parse(woonboardingassets_id));
                if (get_feeding_list != null && get_feeding_list.Count > 0)
                {
                    foreach (var item in get_feeding_list)
                    {
                        if (!String.IsNullOrEmpty(item.nameplate_json))
                        {
                            dynamic dynamicform1 = Newtonsoft.Json.JsonConvert.DeserializeObject(item.nameplate_json);
                            item.amps = dynamicform1.ampereRating;
                        }
                    }
                    response.feeding_circuit_list = get_feeding_list;
                }

                if (get_asset_details.SitewalkthroughTempPmEstimation != null && get_asset_details.SitewalkthroughTempPmEstimation.Count > 0)
                {
                    var details = get_asset_details.SitewalkthroughTempPmEstimation.Where(x =>!x.is_deleted).OrderBy(x => x.created_at).FirstOrDefault();
                    if (details != null)
                    {
                        response.pm_plan_id = details.pm_plan_id;
                        response.plan_name = details.PMPlans != null ? details.PMPlans.plan_name : null;
                     //   response.pm_estimation_list = _mapper.Map<List<ActiveClintCompany_Data>>(get_client_company);
                    }
                }
            }
            return response;
        }


        public ListViewModel<GetAllTechnicianResponsemodel> GetAllTechnician(GetAllTechnicianRequestModel requestmodel)
        {

            ListViewModel<GetAllTechnicianResponsemodel> response = new ListViewModel<GetAllTechnicianResponsemodel>();

            try
            {
                var formlist = _UoW.WorkOrderRepository.GetAllTechnician(requestmodel);
                if (formlist.Item1 != null && formlist.Item1.Count > 0)
                {
                    var map = _mapper.Map<List<GetAllTechnicianResponsemodel>>(formlist.Item1);
                    response.list = map;
                    response.listsize = formlist.Item2;
                }
                response.pageIndex = requestmodel.page_index;
                response.pageSize = requestmodel.page_size;
            }
            catch (Exception ex)
            {

            }
            return response;

        }

        public List<GetWOcategoryTaskByCategoryIDListResponsemodel> GetWOcategoryTaskByCategoryID(string wo_inspectionsTemplateFormIOAssignment_id)
        {
            List<GetWOcategoryTaskByCategoryIDListResponsemodel> response = new List<GetWOcategoryTaskByCategoryIDListResponsemodel>();
            try
            {
                var task_lists = _UoW.WorkOrderRepository.GetWOcategoryTaskByCategoryID(wo_inspectionsTemplateFormIOAssignment_id);
                if (task_lists != null && task_lists.Count > 0)
                {
                    task_lists = task_lists.OrderBy(x => x.serial_number).ToList();
                    // int serial_no = 0;
                    response = _mapper.Map<List<GetWOcategoryTaskByCategoryIDListResponsemodel>>(task_lists);
                    response.ForEach(x =>
                    {

                        // serial_no++;
                        // x.serial_number = serial_no;
                        if (x.technician_id != null && x.technician_id != Guid.Empty)
                        {
                            var technician_user = _UoW.WorkOrderRepository.GetUserByID(x.technician_id.Value);
                            x.technician_name = technician_user.firstname + " " + technician_user.lastname;
                        }
                    });
                }
            }
            catch (Exception ex)
            {

            }
            return response;
        }


        public GetWOGridView GetWOGridView(string wo_inspectionsTemplateFormIOAssignment_id)
        {
            GetWOGridView response = new GetWOGridView();
            try
            {
                var task_lists = _UoW.WorkOrderRepository.GetWOcategoryTaskByCategoryID(wo_inspectionsTemplateFormIOAssignment_id);
                if (task_lists != null && task_lists.Count > 0)
                {
                    task_lists = task_lists.OrderBy(x => x.serial_number).ToList();
                    //  int serial_no = 0;
                    var task_list = _mapper.Map<List<GetWOGridViewTaskResponsemodel>>(task_lists);
                    task_list.ForEach(x =>
                    {
                        var form_data = task_lists.Where(q => q.WOcategorytoTaskMapping_id == x.WOcategorytoTaskMapping_id).FirstOrDefault().AssetFormIO.asset_form_data;//.Select(w => w.AssetFormIO.asset_form_data);
                        var dynamic_form_obj = JsonSerializer.Deserialize<FormioDynamicDataobj.Root>(form_data);
                        x.inspection_form_data = JsonSerializer.Serialize(dynamic_form_obj.data);

                        //  serial_no++;
                        //  x.serial_number = serial_no;
                        if (x.technician_id != null && x.technician_id != Guid.Empty)
                        {
                            var technician_user = _UoW.WorkOrderRepository.GetUserByID(x.technician_id.Value);
                            if (technician_user != null)
                            {
                                x.technician_name = technician_user.firstname + " " + technician_user.lastname;
                            }
                        }
                        x.dynamic_field = new List<DynamicFields>();

                        /*for (int i = 0; i < task_list.Count(); i++)
                        {
                            var DynamicFields = new DynamicFields();
                            DynamicFields.field_name = "testname" + i.ToString();
                            DynamicFields.field_value = "testvalue";
                            x.dynamic_field.Add(DynamicFields);
                        }*/
                    });
                    response.task_list = task_list;
                    /*  response.DynamicFields = new List<TaskDynamicFieldResponsemodel>();
                      for (int i = 0; i < task_list.Count(); i++)
                      {
                          TaskDynamicFieldResponsemodel TaskDynamicFieldResponsemodel = new TaskDynamicFieldResponsemodel();
                          TaskDynamicFieldResponsemodel.DynamicFieldName = "testname" + i.ToString();
                          response.DynamicFields.Add(TaskDynamicFieldResponsemodel);
                      }*/
                    var first_task = task_lists.FirstOrDefault().WOInspectionsTemplateFormIOAssignment.InspectionsTemplateFormIO.dynamic_fields;
                    var dynamic_fields_obj = JsonSerializer.Deserialize<List<form_dynamic_fields>>(first_task);
                    response.dynamic_fields = dynamic_fields_obj;
                }
            }
            catch (Exception ex)
            {

            }
            return response;
        }

        public GetFormByWOTaskIDResponsemodel GetFormByWOTaskID(string wo_inspectionsTemplateFormIOAssignment_id)
        {
            GetFormByWOTaskIDResponsemodel response = null;

            var get_form = _UoW.WorkOrderRepository.GetFormByTaskID(Guid.Parse(wo_inspectionsTemplateFormIOAssignment_id));

            if (get_form != null)
            {
                response = _mapper.Map<GetFormByWOTaskIDResponsemodel>(get_form);

                //var dynamic_form_obj = JsonSerializer.Deserialize<FormioDynamicDataobj.Root>(response.asset_form_data);
                //var data = dynamic_form_obj.data;
                //var test = data.GetType().GetProperty("submit");//.SetValue(objName, objValue, null);
                // var datastr = 
                // if(dynamic_form_obj.data!=null&& get_form.intial_form_filled_date != null)
                // {
                //   dynamic_form_obj.data.header.date = get_form.intial_form_filled_date.Value.Date.ToString();
                //}
                // response.asset_form_data = JsonSerializer.Serialize(dynamic_form_obj);
            }
            return response;

        }

        public async Task<int> AssignTechniciantoWOcategory(AssignTechniciantoWOcategoryRequestmodel request_model)
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {


                var get_wocategory_task = _UoW.WorkOrderRepository.AssignTechniciantoWOcategoryTask(request_model.WOcategorytoTaskMapping_id);
                if (get_wocategory_task != null)
                {
                    // get_wocategory_task.technician_user_id = request_model.technician_user_id;
                    get_wocategory_task.updated_at = DateTime.UtcNow;
                    var update = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Update(get_wocategory_task);
                    response = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    response = (int)ResponseStatusNumber.NotFound;
                }
            }
            catch (Exception ex)
            {

            }
            return response;
        }

        public async Task<int> AssignAssettoWOcategory(AssignAssettoWOcategoryRequestModel request_model)
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {
                var get_wocategory_task = _UoW.WorkOrderRepository.AssignAssettoWOcategoryTask(request_model.WOcategorytoTaskMapping_id);
                if (get_wocategory_task != null)
                {
                    get_wocategory_task.assigned_asset = request_model.parent_asset_id;
                    if (get_wocategory_task.WorkOrders.wo_type == (int)Status.Maintenance_WO)
                    {
                        get_wocategory_task.AssetFormIO.asset_id = request_model.parent_asset_id;
                        ///   auto populate form with data
                        ///   

                        var get_laset_inspection = _UoW.WorkOrderRepository.GetLastInspectionByAssetID(request_model.parent_asset_id);

                        if (get_laset_inspection != null)
                        {
                            dynamic dynamicform = Newtonsoft.Json.JsonConvert.DeserializeObject(get_laset_inspection.asset_form_data);
                            dynamicform.data.header.date = null;
                            dynamicform.data.header.workOrderType = "maintenance";
                            dynamicform.data.header.workOrder = get_wocategory_task.WorkOrders.manual_wo_number;
                            get_wocategory_task.AssetFormIO.building = dynamicform.data.header.building;
                            get_wocategory_task.AssetFormIO.floor = dynamicform.data.header.floor;
                            get_wocategory_task.AssetFormIO.room = dynamicform.data.header.room;
                            get_wocategory_task.AssetFormIO.section = dynamicform.data.header.section;
                            get_wocategory_task.AssetFormIO.asset_form_data = Newtonsoft.Json.JsonConvert.SerializeObject(dynamicform);
                        }
                        else
                        {
                            #region we have new flow , we will copy all info from last completetd inspection for that asset

                            var get_asset = _UoW.WorkOrderRepository.GetAssetByID(request_model.parent_asset_id);
                            dynamic dynamicform = Newtonsoft.Json.JsonConvert.DeserializeObject(get_wocategory_task.AssetFormIO.asset_form_data);
                            dynamicform.data.header.assetId = get_asset.internal_asset_id;
                            dynamicform.data.header.identification = get_asset.name;
                            dynamicform.data.header.parent = get_asset.parent;
                            if (String.IsNullOrEmpty(get_asset.form_retrived_nameplate_info))
                            {
                                get_asset.form_retrived_nameplate_info = "{}";
                            }
                            dynamic nameplate = Newtonsoft.Json.JsonConvert.DeserializeObject(get_asset.form_retrived_nameplate_info);
                            dynamicform.data.nameplateInformation = nameplate;
                            dynamicform.data.header.parent = get_asset.parent;
                            if (get_asset.AssetFormIOBuildingMappings != null)
                            {
                                if (get_asset.AssetFormIOBuildingMappings.FormIOBuildings != null)
                                {
                                    dynamicform.data.header.building = get_asset.AssetFormIOBuildingMappings.FormIOBuildings.formio_building_name;
                                    get_wocategory_task.AssetFormIO.building= get_asset.AssetFormIOBuildingMappings.FormIOBuildings.formio_building_name;
                                }
                                if (get_asset.AssetFormIOBuildingMappings.FormIOFloors != null)
                                {
                                    dynamicform.data.header.floor = get_asset.AssetFormIOBuildingMappings.FormIOFloors.formio_floor_name;
                                    get_wocategory_task.AssetFormIO.floor = get_asset.AssetFormIOBuildingMappings.FormIOFloors.formio_floor_name;
                                }
                                if (get_asset.AssetFormIOBuildingMappings.FormIORooms != null)
                                {
                                    dynamicform.data.header.room = get_asset.AssetFormIOBuildingMappings.FormIORooms.formio_room_name;
                                    get_wocategory_task.AssetFormIO.room = get_asset.AssetFormIOBuildingMappings.FormIORooms.formio_room_name;
                                }
                                if (get_asset.AssetFormIOBuildingMappings.FormIOSections != null)
                                {
                                    dynamicform.data.header.section = get_asset.AssetFormIOBuildingMappings.FormIOSections.formio_section_name;
                                    get_wocategory_task.AssetFormIO.section = get_asset.AssetFormIOBuildingMappings.FormIOSections.formio_section_name;
                                }
                                if (get_asset.AssetFormIOBuildingMappings.FormIOSections != null && get_asset.AssetFormIOBuildingMappings.FormIOSections.FormIOLocationNotes != null)
                                {
                                    dynamicform.data.header.note = get_asset.AssetFormIOBuildingMappings.FormIOSections.FormIOLocationNotes.notes;
                                }
                            }
                            dynamic asset_nameplate_info = Newtonsoft.Json.JsonConvert.DeserializeObject(get_asset.form_retrived_nameplate_info);
                            dynamicform.data.nameplateInformation = asset_nameplate_info;
                            get_wocategory_task.AssetFormIO.asset_form_data = Newtonsoft.Json.JsonConvert.SerializeObject(dynamicform);
                        }
                        #endregion we have new flow , we will copy all info from last completetd inspection for that asset

                        get_wocategory_task.AssetFormIO.modified_at = DateTime.UtcNow;
                        get_wocategory_task.updated_at = DateTime.UtcNow;

                    }
                    var update = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Update(get_wocategory_task);
                    response = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    response = (int)ResponseStatusNumber.NotFound;
                }
            }
            catch (Exception ex)
            {

            }
            return response;
        }

        public async Task<int> UpdateWOCategoryTask(UpdateWOCategoryTaskRequestmodel request_model, string aws_access_key, string aws_secret_key, string formio_pdf_bucket)
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {
                var get_wocategory_task = _UoW.WorkOrderRepository.GetWOcategoryTaskByTaskIDForUpdateStatus(request_model.WOcategorytoTaskMapping_id);
                if (get_wocategory_task != null)
                {
                    get_wocategory_task.AssetFormIO.status = request_model.status;
                    get_wocategory_task.AssetFormIO.modified_at = DateTime.UtcNow;
                    get_wocategory_task.updated_at = DateTime.UtcNow;
                    if (request_model.status == (int)Status.Completed)
                    {
                        get_wocategory_task.AssetFormIO.accepted_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                        get_wocategory_task.AssetFormIO.accepted_at = DateTime.UtcNow;

                        // create report pdf 


                        // update asset nameplate info
                        if (get_wocategory_task._assigned_asset != null)
                        {
                          // var dynamic_form_obj = JsonSerializer.Deserialize<FormioDynamicobj.Root>(get_wocategory_task.AssetFormIO.asset_form_data);
                            //get_wocategory_task._assigned_asset.form_retrived_nameplate_info = JsonSerializer.Serialize(dynamic_form_obj.data.nameplateInformation);
                            dynamic dynamic_form_obj = new ExpandoObject();
                            dynamic_form_obj = Newtonsoft.Json.JsonConvert.DeserializeObject(get_wocategory_task.AssetFormIO.asset_form_data);

                            dynamic dynaicnameplate = new ExpandoObject();
                            dynaicnameplate = dynamic_form_obj.data.nameplateInformation;
                            if (String.IsNullOrEmpty(get_wocategory_task._assigned_asset.form_retrived_nameplate_info) || get_wocategory_task._assigned_asset.form_retrived_nameplate_info == "{}")
                            {
                                get_wocategory_task._assigned_asset.form_retrived_nameplate_info = Newtonsoft.Json.JsonConvert.SerializeObject(dynaicnameplate);
                            }
                            else // compare existing asset NP and new NP and mearge
                            {
                                var asset_old_np_info = get_wocategory_task._assigned_asset.form_retrived_nameplate_info;
                                get_wocategory_task._assigned_asset.form_retrived_nameplate_info = AssetNetaNPJsonMearge(asset_old_np_info, Newtonsoft.Json.JsonConvert.SerializeObject(dynaicnameplate));
                            }

                            get_wocategory_task._assigned_asset.last_inspected_formio_date = DateTime.UtcNow;
                            get_wocategory_task._assigned_asset.modified_at = DateTime.UtcNow;
                        }
                    }
                    if (request_model.status == (int)Status.Recheck || request_model.status == (int)Status.Rejected) // if status is recheck or reject..
                    {
                        get_wocategory_task.task_rejected_notes = request_model.task_rejected_notes;
                        get_wocategory_task.AssetFormIO.status = (int)Status.Recheck;

                    }

                    var update = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Update(get_wocategory_task);

                    await updateWOCategoryStatusforStatusmanage(get_wocategory_task.wo_inspectionsTemplateFormIOAssignment_id);
                    await updateWOStatusforStatusmanage(get_wocategory_task.AssetFormIO.wo_id.Value);


                    if (request_model.status == (int)Status.Completed)
                    {
                        GenerateAssetInspectionFormioReportRequestmodel GenerateAssetInspectionFormioReportRequestmodel = new GenerateAssetInspectionFormioReportRequestmodel();
                        GenerateAssetInspectionFormioReportRequestmodel.asset_form_id = get_wocategory_task.AssetFormIO.asset_form_id;
                        await GenerateAssetInspectionFormioReport(GenerateAssetInspectionFormioReportRequestmodel, aws_access_key, aws_secret_key, formio_pdf_bucket);
                    }
                    response = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    response = (int)ResponseStatusNumber.NotFound;
                }
            }
            catch (Exception ex)
            {

            }
            return response;
        }
        public async Task<int> UpdateMultiWOCategoryTaskStatus(UpdateMultiWOCategoryTaskStatusRequestmodel request_model, string aws_access_key, string aws_secret_key)
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {

                var get_wocategory_task_list = _UoW.WorkOrderRepository.UpdateMultiWOCategoryTaskStatus(request_model.WOcategorytoTaskMapping_id);
                if (get_wocategory_task_list.Count > 0)
                {
                    foreach (WOcategorytoTaskMapping get_wocategory_task in get_wocategory_task_list)
                    {
                        if (get_wocategory_task != null)
                        {
                            get_wocategory_task.AssetFormIO.status = request_model.status;
                            get_wocategory_task.AssetFormIO.modified_at = DateTime.UtcNow;
                            get_wocategory_task.updated_at = DateTime.UtcNow;
                            if (request_model.status == (int)Status.Completed)
                            {
                                get_wocategory_task.AssetFormIO.accepted_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                get_wocategory_task.AssetFormIO.accepted_at = DateTime.UtcNow;

                                // create report pdf 


                                // update asset nameplate info
                                if (get_wocategory_task._assigned_asset != null)
                                {
                                    //var dynamic_form_obj = JsonSerializer.Deserialize<FormioDynamicobj.Root>(get_wocategory_task.AssetFormIO.asset_form_data);
                                    //get_wocategory_task._assigned_asset.form_retrived_nameplate_info = JsonSerializer.Serialize(dynamic_form_obj.data.nameplateInformation);
                                    dynamic dynamic_form_obj = new ExpandoObject();
                                    dynamic_form_obj = Newtonsoft.Json.JsonConvert.DeserializeObject(get_wocategory_task.AssetFormIO.asset_form_data);

                                    dynamic dynaicnameplate = new ExpandoObject();
                                    dynaicnameplate = dynamic_form_obj.data.nameplateInformation;
                                    if (String.IsNullOrEmpty(get_wocategory_task._assigned_asset.form_retrived_nameplate_info) || get_wocategory_task._assigned_asset.form_retrived_nameplate_info == "{}")
                                    {
                                        get_wocategory_task._assigned_asset.form_retrived_nameplate_info = Newtonsoft.Json.JsonConvert.SerializeObject(dynaicnameplate);
                                    }
                                    else // compare existing asset NP and new NP and mearge
                                    {
                                        var asset_old_np_info = get_wocategory_task._assigned_asset.form_retrived_nameplate_info;
                                        get_wocategory_task._assigned_asset.form_retrived_nameplate_info = AssetNetaNPJsonMearge(asset_old_np_info, Newtonsoft.Json.JsonConvert.SerializeObject(dynaicnameplate));
                                    }

                                    get_wocategory_task._assigned_asset.last_inspected_formio_date = DateTime.UtcNow;
                                    get_wocategory_task._assigned_asset.modified_at = DateTime.UtcNow;
                                }
                            }
                            if (request_model.status == (int)Status.Recheck || request_model.status == (int)Status.Rejected) // if status is recheck or reject..
                            {
                                get_wocategory_task.task_rejected_notes = request_model.task_rejected_notes;
                                get_wocategory_task.AssetFormIO.status = (int)Status.Recheck;

                            }
                            var update = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Update(get_wocategory_task);
                            response = (int)ResponseStatusNumber.Success;
                        }
                        else
                        {
                            response = (int)ResponseStatusNumber.NotFound;
                        }
                    }

                    var category_ids = get_wocategory_task_list.Select(x => x.wo_inspectionsTemplateFormIOAssignment_id).Distinct().ToList();
                    foreach (var item in category_ids)
                    {
                        await updateWOCategoryStatusforStatusmanage(item);

                    }

                }
            }
            catch (Exception ex)
            {

            }
            return response;
        }


        public async Task<int> updateWOCategoryStatusforStatusmanage(Guid wo_inspectionsTemplateFormIOAssignment_id)
        {
            var wo_category = _UoW.WorkOrderRepository.GetWOCategoryStatusforStatusmanage(wo_inspectionsTemplateFormIOAssignment_id);
            var category_task_mapping_ids = wo_category.WOcategorytoTaskMapping.Select(x => x.WOcategorytoTaskMapping_id).ToList();
            var get_asset_formio = _UoW.WorkOrderRepository.GetWOAssetFormIOStatusforStatusmanage(category_task_mapping_ids);
            var db_get_all_status = get_asset_formio.Where(x => x.status != (int)Status.Deactive).Select(x => x.status).ToList();

            // check for submitted and completed of assetform if some are submitted and some are completed then make submitted as completed status for formio and then check if all assetformio status becomes completed then mark category status as completed
            List<int> get_all_status = new List<int>();
            foreach (var item in db_get_all_status)
            {
                int status = item;
                /*if (status == (int)Status.Submitted) // old flow : we treated submitted as completed
                {
                    status = (int)Status.Completed;
                }*/
                get_all_status.Add(status);
            }

            if (get_all_status.All(q => q == (int)Status.open))
            {
                wo_category.status_id = (int)Status.open;
                wo_category.updated_at = DateTime.UtcNow;
                var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(wo_category);
            }
            else if (get_all_status.All(x => x == (int)Status.Submitted))
            {
                wo_category.status_id = (int)Status.Submitted;
                wo_category.updated_at = DateTime.UtcNow;
                var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(wo_category);
            }
            else if (get_all_status.All(x =>( x == (int)Status.Completed) || x == (int)Status.Submitted))
            {
                wo_category.status_id = (int)Status.Completed;
                wo_category.updated_at = DateTime.UtcNow;
                var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(wo_category);
            }
            else if (get_all_status.All(x => x == (int)Status.Recheck))
            {
                wo_category.status_id = (int)Status.Recheck;
                wo_category.updated_at = DateTime.UtcNow;
                var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(wo_category);
            }
            else if (get_all_status.All(x => x == (int)Status.Hold))
            {
                wo_category.status_id = (int)Status.Hold;
                wo_category.updated_at = DateTime.UtcNow;
                var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(wo_category);
            }
            else if (get_all_status.Any(x => x == (int)Status.Ready_for_review))
            {
                wo_category.status_id = (int)Status.Ready_for_review;
                wo_category.updated_at = DateTime.UtcNow;
                var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(wo_category);
            }
            else
            {
                wo_category.status_id = (int)Status.InProgress;
                wo_category.updated_at = DateTime.UtcNow;
                var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(wo_category);
            }

            #region old flow
            /* if (get_asset_formio.All(q => q.status == (int)Status.Completed))
             {
                 wo_category.status_id = (int)Status.Completed;
                 wo_category.updated_at = DateTime.UtcNow;
                 var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(wo_category);
             }
             else if (get_asset_formio.All(q => q.status == (int)Status.Submitted))
             {
                 wo_category.status_id = (int)Status.Completed;
                 wo_category.updated_at = DateTime.UtcNow;
                 var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(wo_category);
             }
             else if (get_asset_formio.All(q => q.status == (int)Status.InProgress))
             {
                 wo_category.status_id = (int)Status.InProgress;
                 wo_category.updated_at = DateTime.UtcNow;
                 var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(wo_category);
             }
             else if (get_asset_formio.Any(q => q.status == (int)Status.Ready_for_review))
             {
                 wo_category.status_id = (int)Status.Ready_for_review;
                 wo_category.updated_at = DateTime.UtcNow;
                 var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(wo_category);
             }
             else if (get_asset_formio.All(q => q.status == (int)Status.Hold))
             {
                 wo_category.status_id = (int)Status.Hold;
                 wo_category.updated_at = DateTime.UtcNow;

                 var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(wo_category);
             }
             else if (get_asset_formio.All(q => q.status == (int)Status.Recheck))
             {
                 wo_category.status_id = (int)Status.Recheck;
                 wo_category.updated_at = DateTime.UtcNow;
                 var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(wo_category);
             }
             else
             {
                 wo_category.status_id = (int)Status.open;
                 wo_category.updated_at = DateTime.UtcNow;
                 var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(wo_category);
             }*/
            #endregion old flow



            return 1;
        }
        public async Task<int> updateWOStatusforStatusmanage(Guid wo_id)
        {
            var wo = _UoW.WorkOrderRepository.GetWOByidforUpdateStatus(wo_id);
            if (wo != null)
            {
                var get_all_category_of_WO = _UoW.WorkOrderRepository.GetAllCatagoryOFWO(wo_id);
                if (get_all_category_of_WO.Count > 0 && (get_all_category_of_WO.All(q => q.status_id == (int)Status.Submitted) || get_all_category_of_WO.All(q => q.status_id == (int)Status.Ready_for_review) || get_all_category_of_WO.All(q => q.status_id == (int)Status.Completed)))
                {
                    // wo.status = (int)Status.Ready_for_review;
                    wo.status = (int)Status.InProgress;
                    wo.modified_at = DateTime.UtcNow;
                    var res1ult = await _UoW.BaseGenericRepository<db.Models.WorkOrders>().Update(wo);
                }
                else if (get_all_category_of_WO.Count > 0 && get_all_category_of_WO.All(q => q.status_id == (int)Status.InProgress))
                {
                    wo.status = (int)Status.InProgress;
                    wo.modified_at = DateTime.UtcNow;
                    var res1ult = await _UoW.BaseGenericRepository<db.Models.WorkOrders>().Update(wo);
                }
                else if (get_all_category_of_WO.Count > 0 && get_all_category_of_WO.All(q => q.status_id == (int)Status.Hold))
                {
                    wo.status = (int)Status.Hold;
                    wo.modified_at = DateTime.UtcNow;
                    var res1ult = await _UoW.BaseGenericRepository<db.Models.WorkOrders>().Update(wo);
                }
                else if (get_all_category_of_WO.Count > 0 && get_all_category_of_WO.All(q => q.status_id == (int)Status.Recheck))
                {
                    // wo.status = (int)Status.Recheck;
                    wo.status = (int)Status.InProgress;
                    wo.modified_at = DateTime.UtcNow;
                    var res1ult = await _UoW.BaseGenericRepository<db.Models.WorkOrders>().Update(wo);
                }
                else
                {
                    wo.status = (int)Status.ReleasedOpenWO;
                    wo.modified_at = DateTime.UtcNow;
                    var res1ult = await _UoW.BaseGenericRepository<db.Models.WorkOrders>().Update(wo);
                }
            }
            return 1;
        }

        public async Task<int> UpdateWOCategoryStatus(UpdateWOCategoryRequestmodel request_model)
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {


                var get_wocategory = _UoW.WorkOrderRepository.GetWOcategoryID(request_model.wo_inspectionsTemplateFormIOAssignment_id);
                if (get_wocategory != null)
                {
                    get_wocategory.status_id = request_model.status;
                    get_wocategory.updated_at = DateTime.UtcNow;
                    var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(get_wocategory);
                    response = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    response = (int)ResponseStatusNumber.NotFound;
                }
            }
            catch (Exception ex)
            {

            }
            return response;
        }

        public async Task<int> MapWOAttachmenttoWO(MapWOAttachmenttoWORequestModel request_model)
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {


                //var get_wocategory = await _UoW.WorkOrderRepository.GetWorkOrderById(request_model.wo_id);
                //if (get_wocategory != null)
                //{
                ///if(get_wocategory.WorkOrderAttachments!=null && get_wocategory.WorkOrderAttachments.Count > 0)
                //{
                WorkOrderAttachments WorkOrderAttachments = new WorkOrderAttachments();
                WorkOrderAttachments.wo_id = request_model.wo_id;
                WorkOrderAttachments.filename = request_model.file_name;
                WorkOrderAttachments.user_uploaded_name = request_model.user_uploaded_name;
                WorkOrderAttachments.created_at = DateTime.UtcNow;
                //}

                var insert = await _UoW.BaseGenericRepository<WorkOrderAttachments>().Insert(WorkOrderAttachments);
                if (insert)
                {
                    _UoW.SaveChanges();
                    response = (int)ResponseStatusNumber.Success;
                }
                //}
                //else
                //{
                //  response = (int)ResponseStatusNumber.NotFound;
                //}
            }
            catch (Exception ex)
            {

            }
            return response;
        }

        public async Task<int> DeleteWOAttachment(DeleteWOAttachmentRequestModel request_model)
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {
                var get_woattachment = _UoW.WorkOrderRepository.GetWOAttachmentById(request_model.wo_attachment_id);
                if (get_woattachment != null)
                {
                    get_woattachment.is_archive = true;
                    get_woattachment.modified_at = DateTime.UtcNow;
                    var update = await _UoW.BaseGenericRepository<WorkOrderAttachments>().Update(get_woattachment);
                    response = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    response = (int)ResponseStatusNumber.NotFound;
                }
            }
            catch (Exception ex)
            {

            }
            return response;
        }

        public async Task<int> MultiCopyWOTask(MultiCopyWOTaskRequestModel request_model)
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {
                var get_wocategorytask = _UoW.WorkOrderRepository.GetWOcategoryTaskByTaskID(request_model.WOcategorytoTaskMapping_id);

                // calculation for serial number of task
                var serial_no_count = get_wocategorytask.WOInspectionsTemplateFormIOAssignment.WOcategorytoTaskMapping.Where(q => !q.is_archived).Count();

                if (get_wocategorytask != null)
                {
                    if (request_model.number_of_copies > 0)
                    {
                        for (int i = 0; i < request_model.number_of_copies; i++)
                        {
                            serial_no_count = serial_no_count + 1;
                            WOcategorytoTaskMapping WOcategorytoTaskMapping = new WOcategorytoTaskMapping();

                            // var WOcategorytoTaskMapping = _mapper.Map<WOcategorytoTaskMapping>(get_wocategorytask);
                            //  WOcategorytoTaskMapping.WOcategorytoTaskMapping_id = Guid.Empty;
                            WOcategorytoTaskMapping.wo_inspectionsTemplateFormIOAssignment_id = get_wocategorytask.wo_inspectionsTemplateFormIOAssignment_id;
                            WOcategorytoTaskMapping.task_id = get_wocategorytask.task_id;
                            WOcategorytoTaskMapping.wo_id = get_wocategorytask.wo_id;

                            WOcategorytoTaskMapping.wo_id = get_wocategorytask.wo_id;
                            WOcategorytoTaskMapping.created_at = DateTime.UtcNow;
                            WOcategorytoTaskMapping.is_parent_task = false;
                            WOcategorytoTaskMapping.serial_number = serial_no_count;

                            var insert_task_mapping = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Insert(WOcategorytoTaskMapping);

                            AssetFormIO AssetFormIO = new AssetFormIO();
                            AssetFormIO = new AssetFormIO();
                            AssetFormIO.asset_id = get_wocategorytask.AssetFormIO.asset_id;
                            AssetFormIO.form_id = get_wocategorytask.AssetFormIO.form_id;
                            AssetFormIO.asset_form_name = get_wocategorytask.AssetFormIO.asset_form_name;
                            AssetFormIO.asset_form_type = get_wocategorytask.AssetFormIO.asset_form_type;
                            AssetFormIO.asset_form_description = get_wocategorytask.AssetFormIO.asset_form_description;
                            AssetFormIO.created_at = DateTime.UtcNow;
                            AssetFormIO.wo_id = get_wocategorytask.wo_id;
                            AssetFormIO.site_id = get_wocategorytask.WorkOrders.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            AssetFormIO.WOcategorytoTaskMapping_id = WOcategorytoTaskMapping.WOcategorytoTaskMapping_id;
                            //WOcategorytoTaskMapping.WOcategorytoTaskMapping_id = WOcategorytoTaskMapping.WOcategorytoTaskMapping_id;

                            AssetFormIO.status = (int)Status.open;
                            //AssetFormIO.asset_form_data = get_wocategorytask.Tasks.FormIO.form_data;
                            try
                            {

                                if (get_wocategorytask.AssetFormIO.asset_form_data != null)
                                {
                                    dynamic copy_from_form_data = Newtonsoft.Json.JsonConvert.DeserializeObject(get_wocategorytask.AssetFormIO.asset_form_data);

                                    dynamic copy_to_form_data = new System.Dynamic.ExpandoObject();

                                    if (request_model.keep_all_data)
                                    {
                                        copy_to_form_data = Newtonsoft.Json.JsonConvert.DeserializeObject(get_wocategorytask.AssetFormIO.asset_form_data);
                                        AssetFormIO.form_retrived_location = copy_from_form_data.data.header.parent;
                                        // keep identification null
                                        copy_to_form_data.data.header.identification = null;
                                        copy_to_form_data.data.header.assetId = null;
                                    }
                                    else
                                    {
                                        copy_to_form_data.data = new System.Dynamic.ExpandoObject() as dynamic;
                                        copy_to_form_data.data.header = new System.Dynamic.ExpandoObject() as dynamic;

                                        if (request_model.keep_visual_inspection)
                                        {
                                            //
                                            //ssetFormIO.asset_form_data = get_wocategorytask.AssetFormIO.asset_form_data;
                                            if (copy_from_form_data.data.visualInspection != null)
                                            {
                                                copy_to_form_data.data.visualInspection = copy_from_form_data.data.visualInspection;
                                            }
                                            AssetFormIO.status = (int)Status.open;
                                        }
                                        else
                                        {
                                            AssetFormIO.status = (int)Status.open;
                                            //  copy_to_form_data.data.visualInspection = new object();
                                        }

                                        if (request_model.keep_nameplate)
                                        {
                                            if (copy_from_form_data.data.nameplateInformation != null)
                                            {
                                                copy_to_form_data.data.nameplateInformation = copy_from_form_data.data.nameplateInformation;// != null ? parent_form_obj.data.nameplateInformation : new object();
                                            }
                                        }
                                        else
                                        {
                                            // copy_to_form_data.data.nameplateInformation = new object();
                                        }
                                        if (request_model.keep_trip_test)
                                        {
                                            try
                                            {
                                                trip_test_checkbox trip_test_checkbox = new trip_test_checkbox();
                                                string longtimeElements = copy_from_form_data.data.pleaseSelectTests.longTimeElements;
                                                bool longtimeElementsbool = Convert.ToBoolean(longtimeElements);
                                                if (longtimeElementsbool)
                                                {
                                                    trip_test_checkbox.longTimeElements = true;
                                                    copy_to_form_data.data.longtimeElements = copy_from_form_data.data.longtimeElements;// != null ? parent_form_obj.data.nameplateInformation : new object();
                                                }
                                                string shorttimeElements = copy_from_form_data.data.pleaseSelectTests.shortTimeElements;
                                                bool shorttimeElementsbool = Convert.ToBoolean(shorttimeElements);
                                                if (shorttimeElementsbool)
                                                {
                                                    trip_test_checkbox.shortTimeElements = true;
                                                    copy_to_form_data.data.shorttimeElements = copy_from_form_data.data.shorttimeElements;// != null ? parent_form_obj.data.nameplateInformation : new object();
                                                }
                                                string groundFaultElements1 = copy_from_form_data.data.pleaseSelectTests.groundFaultElements;
                                                bool groundFaultElements1bool = Convert.ToBoolean(groundFaultElements1);
                                                if (groundFaultElements1bool)
                                                {
                                                    trip_test_checkbox.groundFaultElements = true;
                                                    copy_to_form_data.data.groundFaultElements1 = copy_from_form_data.data.groundFaultElements1;// != null ? parent_form_obj.data.nameplateInformation : new object();
                                                }
                                                string instantaneousElements1 = copy_from_form_data.data.pleaseSelectTests.instantaneousElements;
                                                bool instantaneousElements11bool = Convert.ToBoolean(instantaneousElements1);
                                                if (instantaneousElements11bool)
                                                {
                                                    trip_test_checkbox.instantaneousElements = true;
                                                    copy_to_form_data.data.instantaneousElements1 = copy_from_form_data.data.instantaneousElements1;// != null ? parent_form_obj.data.nameplateInformation : new object();
                                                }
                                                string trip_test_checkbox_str = Newtonsoft.Json.JsonConvert.SerializeObject(trip_test_checkbox);
                                                dynamic trip_test_checkbox_obj = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(trip_test_checkbox_str, new Newtonsoft.Json.Converters.ExpandoObjectConverter());
                                                copy_to_form_data.data.nameplateInformation = copy_from_form_data.data.nameplateInformation;
                                                if (!request_model.keep_nameplate)
                                                {
                                                    /// remove all values
                                                    /// 
                                                    foreach (Newtonsoft.Json.Linq.JProperty property in copy_from_form_data.data.nameplateInformation) /// marking every properties as null 
                                                    {
                                                        copy_to_form_data.data.nameplateInformation[property.Name] = null;
                                                    }
                                                }
                                                copy_to_form_data.data.pleaseSelectTests = trip_test_checkbox_obj; // new ExpandoObject() as dynamic;
                                            }
                                            catch (Exception ex)
                                            {

                                            }
                                        }
                                        else
                                        {
                                            // copy_to_form_data.data.nameplateInformation = new object();
                                        }
                                        if (request_model.keep_parent_assset)
                                        {
                                            copy_to_form_data.data.header.parent = copy_from_form_data.data.header.parent;
                                            AssetFormIO.form_retrived_location = copy_from_form_data.data.header.parent;
                                        }
                                        else
                                        {
                                            copy_to_form_data.data.header.parent = null;
                                        }
                                        copy_to_form_data.data.header.owner = copy_from_form_data.data.header.owner;
                                        copy_to_form_data.data.header.ownerAddress = copy_from_form_data.data.header.ownerAddress;
                                        copy_to_form_data.data.header.customer = copy_from_form_data.data.header.customer;
                                        copy_to_form_data.data.header.customerAddress = copy_from_form_data.data.header.customerAddress;
                                        copy_to_form_data.data.header.workOrder = copy_from_form_data.data.header.workOrder;
                                    }



                                    string str = Newtonsoft.Json.JsonConvert.SerializeObject(copy_to_form_data);
                                    AssetFormIO.asset_form_data = str;
                                }
                                /* var copied_form_obj = JsonSerializer.Deserialize<FormioDynamicobj.Root>(AssetFormIO.asset_form_data);
                                 var parent_form_obj = JsonSerializer.Deserialize<FormioDynamicobj.Root>(get_wocategorytask.AssetFormIO.asset_form_data);
                                 copied_form_obj.data = new FormioDynamicobj.Data();
                                 copied_form_obj.data.header = new FormIOObject.header();

                                 if (request_model.keep_visual_inspection)
                                 {
                                     //
                                     //ssetFormIO.asset_form_data = get_wocategorytask.AssetFormIO.asset_form_data;
                                     copied_form_obj.data.visualInspection = parent_form_obj.data.visualInspection;
                                     AssetFormIO.status = (int)Status.open;
                                 }
                                 else
                                 {
                                     AssetFormIO.status = (int)Status.open;
                                     copied_form_obj.data.visualInspection = new object();
                                 }

                                 if (request_model.keep_nameplate)
                                 {

                                     copied_form_obj.data.nameplateInformation = parent_form_obj.data != null ? parent_form_obj.data.nameplateInformation : new object();

                                 }
                                 else
                                 {
                                     copied_form_obj.data.nameplateInformation = new object();
                                 }
                                 if (request_model.keep_parent_assset)
                                 {
                                     copied_form_obj.data.header.parent = parent_form_obj.data.header.parent;
                                     AssetFormIO.form_retrived_location = parent_form_obj.data.header.parent;
                                 }
                                 else
                                 {
                                     copied_form_obj.data.header.parent = null;
                                 }*/


                                // update form in asset formio

                            }
                            catch (Exception ex)
                            {

                            }
                            if (insert_task_mapping)
                            {
                                var insert_task_assetformio = await _UoW.BaseGenericRepository<AssetFormIO>().Insert(AssetFormIO);
                                _UoW.SaveChanges();
                                _UoW.CommitTransaction();
                                response = (int)ResponseStatusNumber.Success;
                            }
                        }
                        if (response == (int)ResponseStatusNumber.Success)
                        {
                            await updateWOCategoryStatusforStatusmanage(get_wocategorytask.wo_inspectionsTemplateFormIOAssignment_id);

                            /*  var get_wo_category = _UoW.WorkOrderRepository.GetWOcategoryID(get_wocategorytask.wo_inspectionsTemplateFormIOAssignment_id);
                              if (get_wo_category.status_id == (int)Status.InProgress || get_wo_category.status_id == (int)Status.Ready_for_review || get_wo_category.status_id == (int)Status.Completed)
                              {
                                  get_wo_category.status_id = (int)Status.open;
                                  get_wo_category.updated_at = DateTime.UtcNow;
                                  get_wo_category.WorkOrders.status = (int)Status.ReleasedOpenWO;
                                  get_wo_category.WorkOrders.modified_at = DateTime.UtcNow;

                                  var update_wocategory = _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(get_wo_category);
                              }*/
                        }
                    }
                }
                else
                {
                    response = (int)ResponseStatusNumber.NotFound;
                }
            }
            catch (Exception ex)
            {

            }
            return response;
        }
        public async Task<UpdateWOStatusResponseModel> UpdateWOStatus(UpdateWOStatusRequestModel request_model)
        {
            UpdateWOStatusResponseModel response = new UpdateWOStatusResponseModel();
            try
            {

                var get_wo = _UoW.WorkOrderRepository.GetWorkOrderByIdForComplete(request_model.wo_id);
                var asset_formio = _UoW.WorkOrderRepository.GetAssetFormIOByWOid(request_model.wo_id);
                if (get_wo != null)
                {
                    if (request_model.status == (int)Status.Completed)
                    {
                        //// create asset and task 
                        ///
                        if (get_wo.wo_type == (int)Status.Acceptance_Test_WO)
                        {
                            // get categories
                            var categories = _UoW.WorkOrderRepository.GetWOCategoriesByWOid(request_model.wo_id);
                            var categori_task = _UoW.WorkOrderRepository.GetWOCategorytaskByWOid(request_model.wo_id);

                            var check_duplicates = CheckduplicatesinwoforAT(asset_formio); // check duplicate if exist
                            if (check_duplicates != null && check_duplicates.success != (int)ResponseStatusNumber.Success)
                            {
                                return check_duplicates;
                            }
                            get_wo.complete_wo_thread_status = (int)CompleteWOThreadStatus.Inprogress;
                            var update_wo = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);
                            CreateAssetAndTasks(request_model.wo_id, asset_formio, categories, categori_task, true);

                            response.success = (int)ResponseStatusNumber.Success;
                            return response;
                        }
                        else
                        {
                            // for new flow in MWO we have OB,repair,replace etc lines so we are checking their duplicates in db if its exist or not before processing further in WO

                            #region check duplictaes for AT inspection 
                            // only get asset formio which are AT wo line 
                            var ATcategories = _UoW.WorkOrderRepository.GetWOCategoriesByWOid(request_model.wo_id);
                            var ATcategori_task = _UoW.WorkOrderRepository.GetWOCategorytaskByWOid(request_model.wo_id);
                            var get_category_task_AT_line = ATcategori_task.Where(x => x.assigned_asset == null).Select(x => x.WOcategorytoTaskMapping_id).ToList();
                            var AT_wo_line_assetformio = asset_formio.Where(x => x.WOcategorytoTaskMapping_id != null && get_category_task_AT_line.Contains(x.WOcategorytoTaskMapping_id.Value)).ToList();
                            var check_duplicates = CheckduplicatesinwoforAT(AT_wo_line_assetformio); // check duplicate if exist
                            if (check_duplicates != null && check_duplicates.success != (int)ResponseStatusNumber.Success)
                            {
                                return check_duplicates;
                            }
                            #endregion  check duplictaes for AT inspection 

                            #region check duplicate for wo lines OB,repair,replace etc
                            // check duplicates for WO line
                            var get_wo_for_duplicate = _UoW.WorkOrderRepository.GetOBWOByID(request_model.wo_id);
                            if (get_wo_for_duplicate.WOOnboardingAssets != null && get_wo_for_duplicate.WOOnboardingAssets.Count > 0)
                            {
                                var wo_assets = get_wo_for_duplicate.WOOnboardingAssets.Where(x => x.status == (int)Status.Completed).ToList();
                                if (wo_assets.Count > 0)
                                {
                                    var requested_qr_codes = wo_assets.Where(x => !String.IsNullOrEmpty(x.QR_code) && x.asset_id == null && x.inspection_type == (int)MWO_inspection_wo_type.OnBoarding).Select(x => x.QR_code).ToList();
                                    var duplicateQRcode = requested_qr_codes.GroupBy(x => x).Where(x => x.Count() > 1).Select(x => x.Key).ToList().FirstOrDefault();

                                    if (!String.IsNullOrEmpty(duplicateQRcode))
                                    {
                                        //   response.task_id = int.Parse(w.Tasks.task_code.ToString());
                                        var duplicate_qr_asset_names = wo_assets.Where(x => !String.IsNullOrEmpty(x.QR_code) && x.QR_code == duplicateQRcode).Select(x => x.asset_name).ToList();
                                        var stringify_names = String.Join(" , ", duplicate_qr_asset_names);
                                        response.asset_id = "Qr code " + duplicateQRcode + " in Assets : " + stringify_names;
                                        response.success = (int)ResponseStatusNumber.qr_code_must_be_unique;
                                        return response;
                                    }
                                    var get_asset_by_internal_id = _UoW.WorkOrderRepository.GetAssetByQRCode(requested_qr_codes);
                                    if (get_asset_by_internal_id != null)
                                    {
                                        response.asset_id = "Qr code " + get_asset_by_internal_id.QR_code + " in Assets : " + get_asset_by_internal_id.name;
                                        response.success = (int)ResponseStatusNumber.qr_code_must_be_unique;
                                        return response;
                                    }

                                    ///check for existing asset id QR code
                                    var requested_existing_asset_id = wo_assets.Where(x => x.asset_id != null).Select(x => x.asset_id.Value).ToList();
                                    var requested_existing_asset_id_qr_code = wo_assets.Where(x => !String.IsNullOrEmpty(x.QR_code)).Select(x => x.QR_code).ToList();
                                    var get_asset_by_qr = _UoW.WorkOrderRepository.GetAssetByQRCodeExist(requested_existing_asset_id_qr_code, requested_existing_asset_id);
                                    if (get_asset_by_qr != null)
                                    {
                                        var get_woline_forQr = wo_assets.Where(x => !String.IsNullOrEmpty(x.QR_code) && !String.IsNullOrEmpty(get_asset_by_qr.QR_code) && (x.QR_code == get_asset_by_qr.QR_code)).FirstOrDefault();
                                        if (get_woline_forQr != null)
                                        {
                                            response.asset_id = "Qr code " + get_woline_forQr.QR_code + " in Asset : " + get_woline_forQr.asset_name;
                                            response.success = (int)ResponseStatusNumber.qr_code_must_be_unique;
                                        }
                                        else
                                        {
                                            response.asset_id = "Qr code " + get_asset_by_qr.QR_code + " in Asset : " + get_asset_by_qr.name;
                                            response.success = (int)ResponseStatusNumber.qr_code_must_be_unique;
                                        }
                                        return response;
                                    }

                                    // check if any fed by is in complete from wo line 
                                    var ob_wo_fed_by_mappings = wo_assets.Where(x => x.WOOBAssetFedByMapping != null).SelectMany(x => x.WOOBAssetFedByMapping).ToList();
                                    var ob_wo_line_fed_bys = ob_wo_fed_by_mappings.Where(x => x.is_parent_from_ob_wo && !x.is_deleted).ToList();
                                    if (ob_wo_line_fed_bys.Count > 0)
                                    {
                                        var ob_wo_line_fed_by_ids = ob_wo_line_fed_bys.Select(x => x.parent_asset_id).ToList();
                                        var incompletes_ob_lines = get_wo.WOOnboardingAssets.Where(x => ob_wo_line_fed_by_ids.Contains(x.woonboardingassets_id) && x.status != (int)Status.Completed && !x.is_deleted && !x.is_woline_from_other_inspection).Select(x => x.asset_name).ToList();
                                        if (incompletes_ob_lines.Count > 0)
                                        {
                                            response.asset_id = string.Join(",", incompletes_ob_lines);
                                            response.success = (int)ResponseStatusNumber.fed_by_wo_ines_must_be_completes;
                                            return response;
                                        }
                                    }


                                    //check for sublevel and top level if not completed
                                    if (get_wo_for_duplicate.WOOnboardingAssets.Count > 0)
                                    {
                                        // check for sublevel components
                                        var all_sublevel = get_wo_for_duplicate.WOOnboardingAssets.Where(x => x.WOlineSubLevelcomponentMapping != null && x.WOlineSubLevelcomponentMapping.Count() > 0).SelectMany(x => x.WOlineSubLevelcomponentMapping).ToList();
                                        var all_woline_sublevel = all_sublevel.Where(x => !x.is_deleted && x.is_sublevelcomponent_from_ob_wo).ToList();
                                        if (all_woline_sublevel.Count() > 0)
                                        {
                                            var ob_wo_line_sublevel_ids = all_woline_sublevel.Select(x => x.sublevelcomponent_asset_id).ToList();
                                            var incompletes_ob_lines = get_wo.WOOnboardingAssets.Where(x => ob_wo_line_sublevel_ids.Contains(x.woonboardingassets_id) && x.status != (int)Status.Completed && !x.is_deleted && !x.is_woline_from_other_inspection).Select(x => x.asset_name).ToList();
                                            if (incompletes_ob_lines.Count > 0)
                                            {
                                                response.asset_id = string.Join(",", incompletes_ob_lines);
                                                response.success = (int)ResponseStatusNumber.compoentlevel_wo_ines_must_be_completes;
                                                return response;
                                            }

                                        }

                                        // check for toplevel
                                        var all_toplevel = get_wo_for_duplicate.WOOnboardingAssets.Where(x => x.WOlineTopLevelcomponentMapping != null && x.WOlineTopLevelcomponentMapping.Count() > 0).SelectMany(x => x.WOlineTopLevelcomponentMapping).ToList();
                                        var all_woline_toplevel = all_toplevel.Where(x => !x.is_deleted && x.is_toplevelcomponent_from_ob_wo).ToList();
                                        if (all_woline_toplevel.Count() > 0)
                                        {
                                            var ob_wo_line_toplevel_ids = all_woline_toplevel.Select(x => x.toplevelcomponent_asset_id).ToList();
                                            var incompletes_ob_lines = get_wo.WOOnboardingAssets.Where(x => ob_wo_line_toplevel_ids.Contains(x.woonboardingassets_id) && x.status != (int)Status.Completed && !x.is_deleted && !x.is_woline_from_other_inspection).Select(x => x.asset_name).ToList();
                                            if (incompletes_ob_lines.Count > 0)
                                            {
                                                response.asset_id = string.Join(",", incompletes_ob_lines);
                                                response.success = (int)ResponseStatusNumber.compoentlevel_wo_ines_must_be_completes;
                                                return response;
                                            }

                                        }
                                    }


                                }
                            }
                            #endregion check duplicate for wo lines OB,repair,replace etc

                            #region check duplicate for wo lines in inspection tab
                            //// check for inspecton line
                            try
                            {

                                long failed_task_code = (int)ResponseStatusNumber.Error;

                                //  ///  check in db if asset is already exist
                                //    foreach (var q in categories)
                                // {
                                var categori_task = _UoW.WorkOrderRepository.GetWOCategorytaskByWOid(request_model.wo_id);
                                {
                                    foreach (var w in asset_formio)
                                    {
                                        if (w.status == (int)Status.Completed || w.status == (int)Status.Submitted)
                                        {
                                            try
                                            {
                                                var asset_form_category_task = categori_task.Where(x => x.WOcategorytoTaskMapping_id == w.WOcategorytoTaskMapping_id && x.assigned_asset != null).FirstOrDefault();
                                                if (asset_form_category_task != null)
                                                {
                                                    var form_obj = JsonSerializer.Deserialize<FormIOObject.Root>(w.asset_form_data);
                                                    if (form_obj != null && form_obj.data != null)
                                                    {
                                                        string asset_id = form_obj.data.header.assetId;
                                                        if (!String.IsNullOrEmpty(asset_id))
                                                        {
                                                            var get_asset_by_internal_id = _UoW.WorkOrderRepository.GetAssetByInternalIDCount(form_obj.data.header.assetId, asset_form_category_task.assigned_asset.Value);
                                                            if (get_asset_by_internal_id != null)
                                                            {
                                                                response.task_id = 1;
                                                                response.asset_id = form_obj.data.header.assetId;
                                                                response.success = (int)ResponseStatusNumber.internal_asset_id_must_be_unique;
                                                                return response;
                                                            }
                                                        }
                                                        /// uncomment to not allow duplicate asset name
                                                        /*var get_asset_ = _UoW.WorkOrderRepository.GetAssetByLocation(form_obj.data.header.identification.ToLower().Trim());
                                                        if (get_asset_ != null)
                                                        {
                                                            response.task_id = 1;
                                                            response.asset_id = form_obj.data.header.identification;
                                                            response.success = (int)ResponseStatusNumber.identification_must_be_unique;
                                                            return response;
                                                        }*/
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            {

                                            }
                                        }
                                    }
                                }
                                //}

                            }
                            catch (Exception ex)
                            {
                                _UoW.RollbackTransaction();
                            }
                            #endregion check duplicate for wo lines in inspection tab

                            get_wo.complete_wo_thread_status = (int)CompleteWOThreadStatus.Inprogress;
                            var update_wo = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);

                            CompleteMWOAsync(request_model, AT_wo_line_assetformio, ATcategories, ATcategori_task, get_wo, asset_formio);

                            response.success = (int)ResponseStatusNumber.Success;
                            return response;
                        }
                    }
                    else
                    {
                        _UoW.BeginTransaction();

                        get_wo.status = request_model.status;

                        if(get_wo.status == (int)Status.ReleasedOpenWO || get_wo.status == (int)Status.Completed)
                        {
                            get_wo.quote_status = (int)Status.QuoteAccepted;
                        }
                        else if (get_wo.status == (int)Status.PlannedWO)
                        {
                            get_wo.quote_status = (int)Status.open;
                        }

                        get_wo.modified_at = DateTime.UtcNow;
                        var update = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);

                        _UoW.SaveChanges();
                        _UoW.CommitTransaction();
                    }
                    response.success = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    response.success = (int)ResponseStatusNumber.NotFound;
                }
            }
            catch (Exception ex)
            {
                _UoW.RollbackTransaction();
            }
            return response;
        }

        public async Task CompleteMWOAsync(UpdateWOStatusRequestModel request_model, List<AssetFormIO> AT_wo_line_assetformio, List<WOInspectionsTemplateFormIOAssignment> ATcategories, List<WOcategorytoTaskMapping> ATcategori_task, WorkOrders get_wo, List<AssetFormIO> asset_formio)
        {
            NotificationService notificationService = new NotificationService(_mapper);
            #region for AT inspection WO line
            createassetresponse result = await CreateAssetAndTasks(request_model.wo_id, AT_wo_line_assetformio, ATcategories, ATcategori_task, false);

            #endregion for AT inspection WO line

            #region for maintenance WO line
            int mwo_success = (int)ResponseStatusNumber.Success;
            var categories = _UoW.WorkOrderRepository.GetWOCategorytaskByWOid(request_model.wo_id);

            foreach (var q in categories)
            {
                if (q._assigned_asset != null)
                {
                    var mwo_result = await MWOWolineAsync(asset_formio, q, get_wo);
                    if (mwo_result == (int)ResponseStatusNumber.Error)
                    {
                        mwo_success = (int)ResponseStatusNumber.Error;
                        break;
                    }
                }
            }
            #endregion for maintenance WO line

            #region for other category WO lines like repair/replace/OB etc
            UpdateOBWOStatusResponsemodel OBWOResult = new UpdateOBWOStatusResponsemodel();
            OBWOResult.success = (int)ResponseStatusNumber.Success;
            var is_other_inspection_type = _UoW.WorkOrderRepository.IsOtherInspectionTypeINWO(request_model.wo_id);
            if (is_other_inspection_type)
            {
                UpdateOBWOStatusRequestmodel ob_wo_requestmodel = new UpdateOBWOStatusRequestmodel();
                ob_wo_requestmodel.wo_id = request_model.wo_id;
                ob_wo_requestmodel.status = (int)Status.Completed;
                ob_wo_requestmodel.is_from_MWO = true;
                OBWOResult = await UpdateOBWOStatus(ob_wo_requestmodel);
            }
            #endregion for other category WO lines like repair/replace/OB etc



            #region updateWOStatus
            if (result.success == (int)ResponseStatusNumber.Success && mwo_success == (int)ResponseStatusNumber.Success && OBWOResult.success == (int)ResponseStatusNumber.Success)
            {
                get_wo.status = (int)Status.Completed;
                get_wo.modified_at = DateTime.UtcNow;
                get_wo.complete_wo_thread_status = (int)CompleteWOThreadStatus.Completed;
                get_wo.completed_date = DateTime.UtcNow;
                var update = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);

                // Send Notifications to all Back-Office Users of that Site
                var get_ref_wo_id = new List<string> { request_model.wo_id.ToString() };
                await notificationService.SendNotificationGenericNewFlow((int)NotificationType_Version_2.WorkOrder_is_Completed_With_Issue_Created, get_ref_wo_id, null);

                // mark delete for WO line which are in open status
                // mark delete for WO line which are in open status
                var get_open_wo_line = _UoW.WorkOrderRepository.GetOpenAssetformio(get_wo.wo_id);
                get_open_wo_line.ForEach(x => x.status = (int)Status.Deactive);
                get_open_wo_line.ForEach(x => x.WOcategorytoTaskMapping.is_archived = true);

                var updatewoline = _UoW.BaseGenericRepository<AssetFormIO>().UpdateList(get_open_wo_line);

                #region updateIssue/PM
                await UpdateIssueAndPMAsync(request_model);
                #endregion updateIssue/PM
            }
            else
            {
                _logger.LogError("in else function after adding asset  for MWO: ");
                get_wo.complete_wo_thread_status = (int)CompleteWOThreadStatus.Failed;
                var update = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);
            }
            #endregion updateWOStatus

        }

        public async Task<int> MWOWolineAsync(List<AssetFormIO> asset_formio, WOcategorytoTaskMapping q, WorkOrders get_wo)
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {
                var asset_form_io = asset_formio.Where(w => w.WOcategorytoTaskMapping_id == q.WOcategorytoTaskMapping_id).FirstOrDefault();
                if (asset_form_io != null && (asset_form_io.status == (int)Status.Completed || asset_form_io.status == (int)Status.Submitted))
                {
                    _UoW.BeginTransaction();
                    var form_obj = JsonSerializer.Deserialize<FormIOObject.Root>(asset_form_io.asset_form_data);
                    if (q.AssetFormIO.inspection_verdict != null)
                    {
                        q._assigned_asset.inspection_verdict = q.AssetFormIO.inspection_verdict;

                        if (q._assigned_asset.inspection_verdict != null) // update asset operating condition based on verdict
                        {
                            if (q._assigned_asset.inspection_verdict == (int)inspectionVerdictnumber.acceptable)
                            {
                                q._assigned_asset.inspection_verdict = (int)AssetOperatingConduitionState.Operating_Normally;
                                q._assigned_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Operating_Normally;
                            }
                            else if (q._assigned_asset.inspection_verdict == (int)inspectionVerdictnumber.alert)
                            {
                                q._assigned_asset.inspection_verdict = (int)AssetOperatingConduitionState.Repair_Needed;
                                q._assigned_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Repair_Needed;
                            }
                            else if (q._assigned_asset.inspection_verdict == (int)inspectionVerdictnumber.danger)
                            {
                                q._assigned_asset.inspection_verdict = (int)AssetOperatingConduitionState.Replacement_Needed;
                                q._assigned_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Replacement_Needed;
                            }
                            else if (q._assigned_asset.inspection_verdict == (int)inspectionVerdictnumber.defective)
                            {
                                q._assigned_asset.inspection_verdict = (int)AssetOperatingConduitionState.Defective;
                                q._assigned_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Defective;
                            }
                        }
                    }
                    if (q._assigned_asset != null)
                    {
                        if (String.IsNullOrEmpty(form_obj.data.header.building))
                        {
                            form_obj.data.header.building = "Default";
                        }
                        if (String.IsNullOrEmpty(form_obj.data.header.floor))
                        {
                            form_obj.data.header.floor = "Default";
                        }
                        if (String.IsNullOrEmpty(form_obj.data.header.room))
                        {
                            form_obj.data.header.room = "Default";
                        }
                        if (String.IsNullOrEmpty(form_obj.data.header.section))
                        {
                            form_obj.data.header.section = "Default";
                        }

                        FormIOBuildings FormIOBuildings = null;
                        FormIOFloors FormIOFloors = null;
                        FormIORooms FormIORooms = null;
                        FormIOSections FormIOSections = null;
                        if (!String.IsNullOrEmpty(form_obj.data.header.building))
                        {
                            FormIOBuildings = _UoW.WorkOrderRepository.GetFormIOBuildingByName(form_obj.data.header.building);
                            if (FormIOBuildings == null)
                            {
                                FormIOBuildings = new FormIOBuildings();
                                FormIOBuildings.formio_building_name = form_obj.data.header.building;
                                FormIOBuildings.created_at = DateTime.UtcNow;
                                FormIOBuildings.site_id = get_wo.site_id;
                                FormIOBuildings.company_id = get_wo.Sites.company_id;

                                var insertbuilding = await _UoW.BaseGenericRepository<FormIOBuildings>().Insert(FormIOBuildings);
                                _UoW.SaveChanges();
                            }
                        }
                        if (!String.IsNullOrEmpty(form_obj.data.header.floor))
                        {
                            FormIOFloors = _UoW.WorkOrderRepository.GetFormIOFloorByName(form_obj.data.header.floor, FormIOBuildings.formiobuilding_id);
                            if (FormIOFloors == null)
                            {
                                FormIOFloors = new FormIOFloors();
                                FormIOFloors.formio_floor_name = form_obj.data.header.floor;
                                FormIOFloors.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                                FormIOFloors.created_at = DateTime.UtcNow;
                                FormIOFloors.site_id = get_wo.site_id;
                                FormIOFloors.company_id = get_wo.Sites.company_id;

                                var insertfloor = await _UoW.BaseGenericRepository<FormIOFloors>().Insert(FormIOFloors);
                                _UoW.SaveChanges();
                            }
                        }
                        if (!String.IsNullOrEmpty(form_obj.data.header.room))
                        {
                            FormIORooms = _UoW.WorkOrderRepository.GetFormIORoomByName(form_obj.data.header.room, FormIOFloors.formiofloor_id);
                            if (FormIORooms == null)
                            {
                                FormIORooms = new FormIORooms();
                                FormIORooms.formio_room_name = form_obj.data.header.room;
                                FormIORooms.formiofloor_id = FormIOFloors.formiofloor_id;
                                FormIORooms.created_at = DateTime.UtcNow;
                                FormIORooms.site_id = get_wo.site_id;
                                FormIORooms.company_id = get_wo.Sites.company_id;

                                var insertroom = await _UoW.BaseGenericRepository<FormIORooms>().Insert(FormIORooms);
                                _UoW.SaveChanges();
                            }
                        }
                        if (!String.IsNullOrEmpty(form_obj.data.header.section))
                        {
                            FormIOSections = _UoW.WorkOrderRepository.GetFormIOSectionByName(form_obj.data.header.section, FormIORooms.formioroom_id);
                            if (FormIOSections == null)
                            {
                                FormIOSections = new FormIOSections();
                                FormIOSections.formio_section_name = form_obj.data.header.section;
                                FormIOSections.formioroom_id = FormIORooms.formioroom_id;
                                FormIOSections.created_at = DateTime.UtcNow;
                                FormIOSections.site_id = get_wo.site_id;
                                FormIOSections.company_id = get_wo.Sites.company_id;

                                var insertroom = await _UoW.BaseGenericRepository<FormIOSections>().Insert(FormIOSections);
                                _UoW.SaveChanges();
                            }
                        }
                        _UoW.CommitTransaction();
                        if (q._assigned_asset.AssetFormIOBuildingMappings != null)
                        {
                            if (FormIOBuildings != null)
                                q._assigned_asset.AssetFormIOBuildingMappings.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                            if (FormIOFloors != null)
                                q._assigned_asset.AssetFormIOBuildingMappings.formiofloor_id = FormIOFloors.formiofloor_id;
                            if (FormIORooms != null)
                                q._assigned_asset.AssetFormIOBuildingMappings.formioroom_id = FormIORooms.formioroom_id;
                            if (FormIOSections != null)
                                q._assigned_asset.AssetFormIOBuildingMappings.formiosection_id = FormIOSections.formiosection_id;

                        }
                        else
                        {
                            // if (FormIOBuildings != null && FormIOFloors != null && FormIORooms != null && FormIOSections != null)
                            // {
                            q._assigned_asset.AssetFormIOBuildingMappings = new AssetFormIOBuildingMappings();
                            if (FormIOBuildings != null)
                                q._assigned_asset.AssetFormIOBuildingMappings.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                            if (FormIOFloors != null)
                                q._assigned_asset.AssetFormIOBuildingMappings.formiofloor_id = FormIOFloors.formiofloor_id;
                            if (FormIORooms != null)
                                q._assigned_asset.AssetFormIOBuildingMappings.formioroom_id = FormIORooms.formioroom_id;
                            if (FormIOSections != null)
                                q._assigned_asset.AssetFormIOBuildingMappings.formiosection_id = FormIOSections.formiosection_id;

                            // }
                        }
                    }

                    //update NP information
                    dynamic dynamic_form_obj = new ExpandoObject();
                    dynamic_form_obj = Newtonsoft.Json.JsonConvert.DeserializeObject(asset_form_io.asset_form_data);

                    dynamic dynaicnameplate = new ExpandoObject();
                    dynaicnameplate = dynamic_form_obj.data.nameplateInformation;
                    if (String.IsNullOrEmpty(q._assigned_asset.form_retrived_nameplate_info) || q._assigned_asset.form_retrived_nameplate_info == "{}")
                    {
                        q._assigned_asset.form_retrived_nameplate_info = Newtonsoft.Json.JsonConvert.SerializeObject(dynaicnameplate);
                    }
                    else // compare existing asset NP and new NP and mearge
                    {
                        var asset_old_np_info = q._assigned_asset.form_retrived_nameplate_info;
                        q._assigned_asset.form_retrived_nameplate_info = AssetNetaNPJsonMearge(asset_old_np_info, Newtonsoft.Json.JsonConvert.SerializeObject(dynaicnameplate));
                    }
                    q._assigned_asset.modified_at = DateTime.UtcNow;
                    string MWO_filled_identification = form_obj.data.header.identification;
                    string MWO_filled_asset_id = form_obj.data.header.assetId;
                    if (!String.IsNullOrEmpty(MWO_filled_identification))
                    {
                        q._assigned_asset.name = MWO_filled_identification;
                    }
                    if (!String.IsNullOrEmpty(MWO_filled_asset_id))
                    {
                        q._assigned_asset.internal_asset_id = MWO_filled_asset_id;
                        q._assigned_asset.QR_code = MWO_filled_asset_id;
                    }

                    // insert Issues in main table from temp table
                    if (asset_form_io.WOLineIssue != null && asset_form_io.WOLineIssue.Count > 0)
                    {

                        var wo_line_issues_list = asset_form_io.WOLineIssue.Where(x => !x.is_deleted).ToList();
                        var totalIssues = _UoW.WorkOrderRepository.GetTotalNumberOfIssues(get_wo.site_id);
                        var siteCode = _UoW.WorkOrderRepository.GetSiteCodeById(get_wo.site_id);
                        foreach (var wo_line_issues in wo_line_issues_list)
                        {
                            var AssetIssueMapper = _mapper.Map<AssetIssue>(wo_line_issues);
                            AssetIssueMapper.asset_id = q._assigned_asset.asset_id;
                            AssetIssueMapper.issue_status = (int)Status.open;
                            AssetIssueMapper.issue_number = siteCode + " Issue-" + (++totalIssues);
                            if (!wo_line_issues.is_issue_linked_for_fix) /// if issue is added to fix then do not do null for below values 
                            {
                                AssetIssueMapper.wo_id = null;
                                AssetIssueMapper.asset_form_id = null;
                                AssetIssueMapper.woonboardingassets_id = null;
                            }
                            var insert_asset_Issues = await _UoW.BaseGenericRepository<AssetIssue>().Insert(AssetIssueMapper);

                            // add first coomment in Issue if issue is not NEC/OSHA
                            if (wo_line_issues.issue_caused_id != (int)WOLine_Temp_Issue_Caused.OSha_Violation && wo_line_issues.issue_caused_id != (int)WOLine_Temp_Issue_Caused.NEC_Violation)
                            {
                                AssetIssueMapper.AssetIssueComments = new List<AssetIssueComments>();
                                AssetIssueComments AssetIssueComments = new AssetIssueComments();
                                AssetIssueComments.asset_issue_id = AssetIssueMapper.asset_issue_id;
                                AssetIssueComments.comment = wo_line_issues.atmw_first_comment;
                                AssetIssueComments.comment_user_id = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                                if (UpdatedGenericRequestmodel.CurrentUser.role_id != null)
                                    AssetIssueComments.comment_user_role_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.role_id);
                                AssetIssueComments.created_at = DateTime.UtcNow;
                                if (UpdatedGenericRequestmodel.CurrentUser.requested_by != null)
                                    AssetIssueComments.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                AssetIssueMapper.AssetIssueComments.Add(AssetIssueComments);
                            }
                            /// add activity logs 
                            /// 
                            try
                            {
                                AssetActivityLogs assetActivityLogs = new AssetActivityLogs();
                                assetActivityLogs.created_at = DateTime.UtcNow;
                                assetActivityLogs.activity_header = "Issue - " + AssetIssueMapper.issue_title + " is Created for Asset - " + q._assigned_asset.name + " in Workorder - " + get_wo.manual_wo_number;
                                assetActivityLogs.activity_message = "Issue - " + AssetIssueMapper.issue_title + " is Created for Asset - " + q._assigned_asset.name + " in Workorder - " + get_wo.manual_wo_number;
                                assetActivityLogs.activity_type = (int)ActivityTypes.NewIssueCreated;
                                assetActivityLogs.status = (int)Status.Active;
                                assetActivityLogs.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                assetActivityLogs.asset_id = q._assigned_asset.asset_id;

                                var insert_activity_log = await _UoW.BaseGenericRepository<AssetActivityLogs>().Insert(assetActivityLogs);
                            }
                            catch (Exception ex)
                            {

                            }
                        }

                        asset_form_io.WOLineIssue.ToList().Where(x => !x.is_deleted).ToList().ForEach(x => x.is_main_issue_created = true); // mark is_main_issue_created for temp table
                    }


                    // update Asset PM and create New PM
                    if (asset_form_io.AssetPMs != null && asset_form_io.AssetPMs.Count > 0)
                    {
                        var asset_pms = asset_form_io.AssetPMs.Where(x => x.is_Asset_PM_fixed && x.status != (int)Status.Completed).ToList();
                        if (asset_pms != null && asset_pms.Count > 0)
                        {
                            foreach (var item in asset_pms)
                            {
                                item.status = (int)Status.Completed;
                                item.modified_at = DateTime.UtcNow;
                                item.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                item.asset_pm_completed_date = DateTime.UtcNow;

                                var update_old_pm = await _UoW.BaseGenericRepository<AssetPMs>().Update(item);
                                // create new PM if schedular is reoccure
                                if (item.pm_trigger_type == (int)Status.Recurring)
                                {
                                    var get_master_pm = _UoW.WorkOrderRepository.GetPMById(item.pm_id.Value);
                                    get_master_pm.PMAttachments = get_master_pm.PMAttachments.Where(y => !y.is_archive).ToList();

                                    AssetPMs assetpm = new AssetPMs();
                                    assetpm = _mapper.Map<AssetPMs>(get_master_pm);
                                    assetpm.asset_id = q._assigned_asset.asset_id;
                                    assetpm.created_at = DateTime.UtcNow;
                                    assetpm.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                    assetpm.status = (int)Status.Active;
                                    assetpm.asset_pm_plan_id = item.asset_pm_plan_id;
                                    assetpm.datetime_starting_at = DateTime.UtcNow;
                                    assetpm.asset_pm_completed_date = DateTime.UtcNow;
                                    assetpm.AssetPMAttachments.ToList().ForEach(y =>
                                    {
                                        y.asset_pm_plan_id = item.asset_pm_plan_id;
                                        y.asset_pm_id = assetpm.asset_pm_id;
                                        y.asset_id = q._assigned_asset.asset_id;
                                        y.created_at = DateTime.UtcNow;
                                        y.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                    });
                                    assetpm.AssetPMsTriggerConditionMapping.ToList().ForEach(y =>
                                    {
                                        y.asset_pm_id = assetpm.asset_pm_id;
                                        y.created_at = DateTime.UtcNow;
                                        if (asset_form_io.site_id != null)
                                        {
                                            y.site_id = asset_form_io.site_id.Value;
                                        }
                                        y.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                    });
                                    var insert_pm = await _UoW.BaseGenericRepository<AssetPMs>().Insert(assetpm);
                                }
                            }
                        }
                        asset_form_io.AssetPMs.Where(x => !x.is_Asset_PM_fixed && x.status != (int)Status.Completed).ToList().ForEach(x => x.asset_form_id = null);
                        asset_form_io.AssetPMs.Where(x => !x.is_Asset_PM_fixed && x.status != (int)Status.Completed).ToList().ForEach(x => x.wo_id = null);
                    }

                    var update_asset = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Update(q);
                    _UoW.SaveChanges();
                }

                response = (int)ResponseStatusNumber.Success;
            }
            catch (Exception ex)
            {
                _logger.LogError("exception in MWOWolineAsync  : " + ex.Message);
                response = (int)ResponseStatusNumber.Error;
            }
            return response;
        }

        public async Task UpdateIssueAndPMAsync(UpdateWOStatusRequestModel request_model)
        {
            try
            {
                ///change issue status and asset condition for inspection WO line
                ///
                var get_asset_form_ids = _UoW.WorkOrderRepository.GetAssetformIdsbyWO(request_model.wo_id);
                var get_asset_issues = _UoW.WorkOrderRepository.GetAssetIssuebyAssetformId(get_asset_form_ids);
                foreach (var asset_issue in get_asset_issues)
                {
                    // update Issue condition based on WO line 
                    await UpdateIssueStatusBasedonWOline(asset_issue.asset_issue_id);
                    // update asset condition based on issue condition 
                    await ChangeAssetConditionBasedOnIssue(asset_issue.asset_issue_id);
                }
                var WOline_which_have_no_issue = _UoW.WorkOrderRepository.GetAssetwhichhavenoIssue(request_model.wo_id);
                var OBWOline_which_have_no_issue = _UoW.WorkOrderRepository.GetWOlineAssetwhichhavenoIssue(request_model.wo_id);
                WOline_which_have_no_issue.AddRange(OBWOline_which_have_no_issue);
                if (WOline_which_have_no_issue != null && WOline_which_have_no_issue.Count > 0)// if there is no issue linked then updtae asset condition based on issue count 
                {
                    foreach (var asset in WOline_which_have_no_issue)
                    {
                        if (asset != null)
                        {
                            var total_asset_issues = asset.AssetIssue.ToList();
                            var pending_issue = total_asset_issues.Where(x => !x.is_deleted && x.issue_status != (int)Status.Completed).FirstOrDefault();
                            if (pending_issue == null) // if there are no any pending issue then change asset condition based on condition json 
                            {
                                // asset.asset_operating_condition_state = asset_condition_id;
                            }
                            else // if there are any issue then check if there is any open issue as replace then keep replace needed else repair needed
                            {
                                var replace_issue_type = total_asset_issues.Any(x => !x.is_deleted && x.issue_status != (int)Status.Completed && x.issue_type == (int)WOLine_Temp_Issue_Type.Replace);
                                if (replace_issue_type)
                                {
                                    asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Replacement_Needed;
                                }
                                else
                                {
                                    asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Repair_Needed;
                                }

                                var update_asset = await _UoW.BaseGenericRepository<Asset>().Update(asset);
                            }
                        }
                    }
                }

                // unlink issue which wo line is not completed 
                var get_issue_for_unlink = _UoW.WorkOrderRepository.GetIssueByWOidtoUnlink(request_model.wo_id);
                if (get_issue_for_unlink != null && get_issue_for_unlink.Count > 0)
                {
                    get_issue_for_unlink.ForEach(x =>
                    {
                        x.wo_id = null;
                        x.asset_form_id = null;
                        x.woonboardingassets_id = null;
                        x.is_issue_linked = false;
                    });
                    var update_issue = _UoW.BaseGenericRepository<AssetIssue>().UpdateList(get_issue_for_unlink);
                }

                // unlink issue Which are not completed
                var get_notcompleted_issue_for_unlink = _UoW.WorkOrderRepository.GetnotCompletedIssueByWOidtoUnlink(request_model.wo_id);
                if (get_notcompleted_issue_for_unlink != null && get_notcompleted_issue_for_unlink.Count > 0)
                {
                    get_notcompleted_issue_for_unlink.ForEach(x =>
                    {
                        x.wo_id = null;
                        x.asset_form_id = null;
                        x.woonboardingassets_id = null;
                        x.is_issue_linked = false;
                    });
                    var update_issue = _UoW.BaseGenericRepository<AssetIssue>().UpdateList(get_notcompleted_issue_for_unlink);
                }

                //unlink PMs which wo line is not completed 
                var get_assetpm_for_unlink = _UoW.WorkOrderRepository.GetAssetpmByWOidtoUnlinkUpdated(request_model.wo_id);
                if (get_assetpm_for_unlink != null && get_assetpm_for_unlink.Count > 0)
                {
                    foreach(var x in get_assetpm_for_unlink)
                    {
                        if (x.ActiveAssetPMWOlineMapping != null && x.ActiveAssetPMWOlineMapping.Count() > 0)
                        {
                            var wolinepmmapping = x.ActiveAssetPMWOlineMapping.Where(x => x.is_active && !x.is_deleted).FirstOrDefault();
                            if (wolinepmmapping != null)
                            {
                                x.ActiveAssetPMWOlineMapping.Where(x => x.is_active && !x.is_deleted).FirstOrDefault().is_active = false;
                                x.ActiveAssetPMWOlineMapping.Where(x => !x.is_deleted).FirstOrDefault().modified_at = DateTime.UtcNow;
                                x.ActiveAssetPMWOlineMapping.Where(x => !x.is_deleted).FirstOrDefault().is_deleted = true;
                            }
                        }
                        x.wo_id = null;
                        x.asset_form_id = null;
                        x.is_Asset_PM_fixed = false;
                        x.woonboardingassets_id = null;
                        x.pm_form_output_data = null;
                        x.modified_at = DateTime.UtcNow;
                        x.status = (int)Status.Active;
                        var update_issue = await _UoW.BaseGenericRepository<AssetPMs>().Update(x);
                    }
                 }
            }
            catch (Exception ex)
            {

            }
        }

        public UpdateWOStatusResponseModel CheckduplicatesinwoforAT(List<AssetFormIO> asset_formio)
        {
            UpdateWOStatusResponseModel response = new UpdateWOStatusResponseModel();
            try
            {

                long failed_task_code = (int)ResponseStatusNumber.Error;
                //  var categories = get_wo.WOInspectionsTemplateFormIOAssignment.ToList().Where(q => !q.is_archived).ToList();

                // check in WO if its already exist
                //     var wo_categories = get_wo.WOInspectionsTemplateFormIOAssignment.ToList().Where(q => !q.is_archived).ToList();
                //     List<WOcategorytoTaskMapping> all_tasks = new List<WOcategorytoTaskMapping>();
                //     categories.ForEach(x =>
                //   {
                //     all_tasks.AddRange(x.WOcategorytoTaskMapping);
                //  });
                List<string> asset_name = new List<string>();
                List<string> internal_asset_id = new List<string>();
                asset_formio.ForEach(x =>
                {
                    if (x.status == (int)Status.Completed || x.status == (int)Status.Submitted)
                    {
                        var form_obj = JsonSerializer.Deserialize<FormIOObject.Root>(x.asset_form_data);
                        if (form_obj != null && form_obj.data != null)
                        {
                            if (!String.IsNullOrEmpty(form_obj.data.header.identification))
                            {
                                asset_name.Add(form_obj.data.header.identification.ToLower().Trim());
                            }
                            if (!String.IsNullOrEmpty(form_obj.data.header.assetId))
                            {
                                internal_asset_id.Add(form_obj.data.header.assetId.ToLower().Trim());
                            }
                        }
                    }
                });
                var duplicateAssetname = asset_name.GroupBy(x => x).Where(x => x.Count() > 1).Select(x => x.Key).ToList().FirstOrDefault();
                var duplicateAssetID = internal_asset_id.GroupBy(x => x).Where(x => x.Count() > 1).Select(x => x.Key).ToList().FirstOrDefault();

                /*if (!String.IsNullOrEmpty(duplicateAssetname)) // uncomment to not allow duplicate asset name
                {
                  //  response.task_id = int.Parse(w.Tasks.task_code.ToString());
                    response.asset_id = duplicateAssetname;
                    response.success = (int)ResponseStatusNumber.identification_must_be_unique;
                    return response;
                }*/
                if (!String.IsNullOrEmpty(duplicateAssetID))
                {
                    //   response.task_id = int.Parse(w.Tasks.task_code.ToString());
                    response.asset_id = duplicateAssetID;
                    response.success = (int)ResponseStatusNumber.internal_asset_id_must_be_unique;
                    return response;
                }

                //  ///  check in db if asset is already exist
                //    foreach (var q in categories)
                // {
                foreach (var w in asset_formio)
                {
                    if (w.status == (int)Status.Completed || w.status == (int)Status.Submitted)
                    {
                        try
                        {
                            var form_obj = JsonSerializer.Deserialize<FormIOObject.Root>(w.asset_form_data);
                            if (form_obj != null && form_obj.data != null)
                            {
                                string asset_id = form_obj.data.header.assetId;
                                if (!String.IsNullOrEmpty(asset_id))
                                {
                                    var get_asset_by_internal_id = _UoW.WorkOrderRepository.GetAssetByInternalID(form_obj.data.header.assetId);
                                    if (get_asset_by_internal_id != null)
                                    {
                                        response.task_id = 1;
                                        response.asset_id = form_obj.data.header.assetId;
                                        response.success = (int)ResponseStatusNumber.internal_asset_id_must_be_unique;
                                        return response;
                                    }
                                }
                                /// uncomment to not allow duplicate asset name
                                /*var get_asset_ = _UoW.WorkOrderRepository.GetAssetByLocation(form_obj.data.header.identification.ToLower().Trim());
                                if (get_asset_ != null)
                                {
                                    response.task_id = 1;
                                    response.asset_id = form_obj.data.header.identification;
                                    response.success = (int)ResponseStatusNumber.identification_must_be_unique;
                                    return response;
                                }*/
                            }
                        }
                        catch (Exception ex)
                        {

                        }
                    }
                }
                //}

            }
            catch (Exception ex)
            {
                _UoW.RollbackTransaction();
                response.success = (int)ResponseStatusNumber.Error;
            }
            response.success = (int)ResponseStatusNumber.Success;
            return response;
        }

        public async Task<int> CreateAssetsForAT(List<AssetFormIO> asset_formio, WorkOrders get_wo, createassetresponse result)
        {

            List<asset_form_data> list_form_data = new List<asset_form_data>();
            foreach (var w in asset_formio)
            {
                if (w.status == (int)Status.Completed || w.status == (int)Status.Submitted)
                {
                    var form_obj = JsonSerializer.Deserialize<FormIOObject.Root>(w.asset_form_data);
                    if (form_obj != null && form_obj.data != null)
                    {
                        if (!String.IsNullOrEmpty(form_obj.data.header.parent))
                        {
                            string location = form_obj.data.header.parent.Trim().ToLower();
                            var get_asset_ = _UoW.WorkOrderRepository.GetAssetByLocation(location);
                            if (get_asset_ == null)
                            {
                                // create new assset for location
                                get_asset_ = new Asset();
                                get_asset_.name = form_obj.data.header.parent.Trim();
                                get_asset_.internal_asset_id = form_obj.data.header.parent.Trim();
                                get_asset_.client_internal_id = form_obj.data.header.parent.Trim();
                                get_asset_.status = (int)Status.AssetActive;
                                get_asset_.company_id = UpdatedGenericRequestmodel.CurrentUser.company_id;
                                get_asset_.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                get_asset_.created_at = DateTime.UtcNow;
                                get_asset_.site_location = get_wo.Sites.location;
                                get_asset_.levels = "1";
                                get_asset_.asset_operating_condition_state = (int)AssetOperatingConduitionState.Operating_Normally;
                                var insert_parent = _UoW.BaseGenericRepository<Asset>().Insert(get_asset_);
                                _UoW.SaveChanges();
                            }
                            if (!String.IsNullOrEmpty(form_obj.data.header.identification))
                            {
                                asset_form_data asset_form_data = new asset_form_data();
                                asset_form_data.location = location;
                                asset_form_data.identification = form_obj.data.header.identification.ToLower().Trim();
                                asset_form_data.asset_id = form_obj.data.header.assetId;
                                list_form_data.Add(asset_form_data);
                            }
                        }
                    }
                }
            }
            /// update parent and child assets 
            /// 
            /// we have new flow for parent and children
            /* try
             {
                 _UoW.BeginTransaction();
                 foreach (var w in asset_formio)
                 {
                     if (w.status == (int)Status.Completed || w.status == (int)Status.Submitted)
                     {
                         var form_obj = JsonSerializer.Deserialize<FormIOObject.Root>(w.asset_form_data);
                         if (form_obj != null && form_obj.data != null)
                         {
                             if (!String.IsNullOrEmpty(form_obj.data.header.parent))
                             {
                                 /// insert children in location asset
                                 string location = form_obj.data.header.parent.Trim().ToLower();
                                 var get_asset_ = _UoW.WorkOrderRepository.GetAssetByLocation(location);
                                 if (!String.IsNullOrEmpty(get_asset_.children))
                                 {
                                     get_asset_.children = get_asset_.children + "," + form_obj.data.header.assetId;
                                 }
                                 else
                                 {
                                     get_asset_.children = form_obj.data.header.assetId;
                                 }
                                 // insert paret and level in new_asset
                                 Asset inserted_asset = null;
                                 if (!String.IsNullOrEmpty(form_obj.data.header.assetId))
                                 {
                                     inserted_asset = _UoW.WorkOrderRepository.GetAssetByInternalID(form_obj.data.header.assetId);
                                 }
                                 else if (!String.IsNullOrEmpty(form_obj.data.header.identification))
                                 {
                                     inserted_asset = _UoW.WorkOrderRepository.GetAssetByLocation(form_obj.data.header.identification.ToLower().Trim());
                                 }
                                 if (inserted_asset != null)
                                 {
                                     inserted_asset.parent = get_asset_.internal_asset_id;
                                     //if (!String.IsNullOrEmpty(get_asset_.levels))
                                     // {
                                     inserted_asset.levels = GetLevel(list_form_data, location);
                                     // }
                                 }
                                 get_asset_.modified_at = DateTime.UtcNow;
                                 var update_parent_asset = await _UoW.BaseGenericRepository<Asset>().Update(get_asset_);
                                 inserted_asset.modified_at = DateTime.UtcNow;
                                 var update_child_asset = await _UoW.BaseGenericRepository<Asset>().Update(inserted_asset);
                                 _UoW.SaveChanges();
                             }
                         }
                     }
                 }
                 _UoW.CommitTransaction();
             }
             catch (Exception ex)
             {
                 _UoW.RollbackTransaction();
             }*/

            foreach (var asset_data in list_form_data)
            {
                if (!String.IsNullOrEmpty(asset_data.location))
                {
                    string location = asset_data.location.Trim().ToLower();
                    var get_parent_asset_ = _UoW.WorkOrderRepository.GetAssetByLocation(location);
                    var get_asset_by_internal_id = _UoW.WorkOrderRepository.GetAssetByInternalID(asset_data.asset_id);

                    // add parent detail
                    AssetParentHierarchyMapping AssetParentHierarchyMapping = new AssetParentHierarchyMapping();
                    AssetParentHierarchyMapping.asset_id = get_asset_by_internal_id.asset_id;
                    AssetParentHierarchyMapping.parent_asset_id = get_parent_asset_.asset_id;
                    AssetParentHierarchyMapping.fed_by_usage_type_id = 1; // set default as normal
                    AssetParentHierarchyMapping.created_at = DateTime.UtcNow;
                    AssetParentHierarchyMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                    AssetParentHierarchyMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    AssetParentHierarchyMapping.fed_by_usage_type_id = 1; // default will be normal - 1
                    AssetParentHierarchyMapping.is_deleted = false;

                    var insert_parent = await _UoW.BaseGenericRepository<AssetParentHierarchyMapping>().Insert(AssetParentHierarchyMapping);

                    /// add children
                    /// 
                    AssetChildrenHierarchyMapping AssetChildrenHierarchyMapping = new AssetChildrenHierarchyMapping();
                    AssetChildrenHierarchyMapping.asset_id = get_parent_asset_.asset_id;
                    AssetChildrenHierarchyMapping.children_asset_id = get_asset_by_internal_id.asset_id;
                    AssetChildrenHierarchyMapping.created_at = DateTime.UtcNow;
                    AssetChildrenHierarchyMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                    AssetChildrenHierarchyMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    AssetChildrenHierarchyMapping.is_deleted = false;

                    var insert_children = await _UoW.BaseGenericRepository<AssetChildrenHierarchyMapping>().Insert(AssetChildrenHierarchyMapping);

                    _UoW.SaveChanges();
                }
            }

            if (result.formandassetmappig != null && result.formandassetmappig.Count > 0)
            {
                /*  var get_tasks = _UoW.WorkOrderRepository.GetAllWOCategoryTaskByWOid(get_wo.wo_id);
                  if (get_tasks != null && get_tasks.Count > 0)
                  {
                      get_tasks = get_tasks.Where(x => !x.is_archived &&( x.AssetFormIO.status == (int)Status.Completed || x.AssetFormIO.status == (int)Status.Completed)).ToList();
                      if (get_tasks != null && get_tasks.Count > 0)
                      {
                          var forms = get_tasks.Select(x => x.AssetFormIO).ToList();

                      }
                  }*/
                asset_formio.ForEach(x =>
                {
                    if (x.status == (int)Status.Completed || x.status == (int)Status.Submitted)
                    {
                        var asset_id = result.formandassetmappig.Where(q => q.asset_form_id == x.asset_form_id).Select(w => w.asset_id).FirstOrDefault();
                        if (asset_id != null && asset_id != Guid.Empty)
                        {
                            x.asset_id = asset_id;
                        }
                        x.modified_at = DateTime.UtcNow;
                    }

                });
                var updatelist = _UoW.BaseGenericRepository<AssetFormIO>().UpdateList(asset_formio);
                _UoW.SaveChanges();
            }
            return 1;
        }
        public async Task<UpdateOBWOStatusResponsemodel> UpdateOBWOStatus(UpdateOBWOStatusRequestmodel request_model)
        {
            UpdateOBWOStatusResponsemodel response = new UpdateOBWOStatusResponsemodel();

            var get_wo = _UoW.WorkOrderRepository.GetOBWOByIDForComplete(request_model.wo_id);

            if (request_model.status == (int)Status.Completed)
            {
                if (get_wo.WOOnboardingAssets != null && get_wo.WOOnboardingAssets.Count > 0)
                {

                    var wo_assets = get_wo.WOOnboardingAssets.Where(x => x.status == (int)Status.Completed && !x.is_main_asset_created && !x.is_woline_from_other_inspection).ToList();

                    // check if any fed by is open or not 
                    if (wo_assets.Count > 0)
                    {
                        // check if any fed by is not complete from wo line 
                        var ob_wo_fed_by_mappings = wo_assets.Where(x => x.WOOBAssetFedByMapping != null).SelectMany(x => x.WOOBAssetFedByMapping).ToList();
                        var ob_wo_line_fed_bys = ob_wo_fed_by_mappings.Where(x => x.is_parent_from_ob_wo && !x.is_deleted).ToList();
                        if (ob_wo_line_fed_bys.Count > 0)
                        {
                            var ob_wo_line_fed_by_ids = ob_wo_line_fed_bys.Select(x => x.parent_asset_id).ToList();
                            var incompletes_ob_lines = get_wo.WOOnboardingAssets.Where(x => ob_wo_line_fed_by_ids.Contains(x.woonboardingassets_id) && x.status != (int)Status.Completed && !x.is_deleted && !x.is_woline_from_other_inspection).Select(x => x.asset_name).ToList();
                            if (incompletes_ob_lines.Count > 0)
                            {
                                response.asset_name = string.Join(",", incompletes_ob_lines);
                                response.success = (int)ResponseStatusNumber.fed_by_wo_ines_must_be_completes;
                                return response;
                            }
                        }
                    }

                    //check for sublevel and top level if not completed
                    if (wo_assets.Count > 0)
                    {
                        // check for sublevel components
                        var all_sublevel = wo_assets.Where(x => x.WOlineSubLevelcomponentMapping != null && x.WOlineSubLevelcomponentMapping.Count() > 0).SelectMany(x => x.WOlineSubLevelcomponentMapping).ToList();
                        var all_woline_sublevel = all_sublevel.Where(x => !x.is_deleted && x.is_sublevelcomponent_from_ob_wo).ToList();
                        if (all_woline_sublevel.Count() > 0)
                        {
                            var ob_wo_line_sublevel_ids = all_woline_sublevel.Select(x => x.sublevelcomponent_asset_id).ToList();
                            var incompletes_ob_lines = get_wo.WOOnboardingAssets.Where(x => ob_wo_line_sublevel_ids.Contains(x.woonboardingassets_id) && x.status != (int)Status.Completed && !x.is_deleted && !x.is_woline_from_other_inspection).Select(x => x.asset_name).ToList();
                            if (incompletes_ob_lines.Count > 0)
                            {
                                response.asset_name = string.Join(",", incompletes_ob_lines);
                                response.success = (int)ResponseStatusNumber.compoentlevel_wo_ines_must_be_completes;
                                return response;
                            }

                        }

                        // check for toplevel
                        var all_toplevel = wo_assets.Where(x => x.WOlineTopLevelcomponentMapping != null && x.WOlineTopLevelcomponentMapping.Count() > 0).SelectMany(x => x.WOlineTopLevelcomponentMapping).ToList();
                        var all_woline_toplevel = all_toplevel.Where(x => !x.is_deleted && x.is_toplevelcomponent_from_ob_wo).ToList();
                        if (all_woline_toplevel.Count() > 0)
                        {
                            var ob_wo_line_toplevel_ids = all_woline_toplevel.Select(x => x.toplevelcomponent_asset_id).ToList();
                            var incompletes_ob_lines = get_wo.WOOnboardingAssets.Where(x => ob_wo_line_toplevel_ids.Contains(x.woonboardingassets_id) && x.status != (int)Status.Completed && !x.is_deleted && !x.is_woline_from_other_inspection).Select(x => x.asset_name).ToList();
                            if (incompletes_ob_lines.Count > 0)
                            {
                                response.asset_name = string.Join(",", incompletes_ob_lines);
                                response.success = (int)ResponseStatusNumber.compoentlevel_wo_ines_must_be_completes;
                                return response;
                            }

                        }
                    }

                    // mark delete for WO line which are in open status and it is not from issue/pm woline
                    var get_open_wo_line = _UoW.WorkOrderRepository.GetOpenwoobline(get_wo.wo_id);
                    get_open_wo_line.ForEach(x => x.is_deleted = true);
                    get_open_wo_line.ForEach(x =>
                    {
                        if (x.WOLineIssue != null && x.WOLineIssue.Count > 0)
                        {
                            x.WOLineIssue.ToList().ForEach(q =>
                            {
                                q.is_deleted = true;
                                q.is_issue_linked_for_fix = false;
                            });
                        }
                        if (x.AssetIssue != null && x.AssetIssue.Count > 0)
                        {
                            x.AssetIssue.ToList().ForEach(q =>
                            {
                                q.wo_id = null;
                                q.asset_form_id = null;
                                q.woonboardingassets_id = null;
                                q.is_issue_linked = false;
                            });
                        }
                        if (x.AssetPMs != null)
                        {
                            x.AssetPMs.status = (int)Status.Active;
                            if (x.AssetPMs.ActiveAssetPMWOlineMapping != null)
                            {
                                var active_mapping = x.AssetPMs.ActiveAssetPMWOlineMapping.Where(x => x.is_active).FirstOrDefault();
                                if (active_mapping != null)
                                {
                                    active_mapping.is_active = false;
                                    active_mapping.modified_at = DateTime.UtcNow;
                                }
                            }
                            x.AssetPMs.wo_id = null;
                            x.AssetPMs.asset_form_id = null;
                            x.AssetPMs.woonboardingassets_id = null;
                            x.AssetPMs.is_Asset_PM_fixed = false;
                            x.AssetPMs.modified_at = DateTime.UtcNow;
                        }
                        if(x.TempActiveAssetPMWOlineMapping != null)
                        {
                            x.TempActiveAssetPMWOlineMapping.is_active = false;
                            x.TempActiveAssetPMWOlineMapping.modified_at = DateTime.UtcNow;
                            x.TempActiveAssetPMWOlineMapping.TempAssetPMs.modified_at = DateTime.UtcNow;
                            x.TempActiveAssetPMWOlineMapping.TempAssetPMs.is_archive = true;
                        }
                    });
                    var updatewoline = _UoW.BaseGenericRepository<WOOnboardingAssets>().UpdateList(get_open_wo_line);



                    wo_assets = get_wo.WOOnboardingAssets.Where(x => x.status == (int)Status.Completed && !x.is_main_asset_created).ToList();
                    if (wo_assets.Count > 0)
                    {
                       
                        /// check QR is exist or not 
                        /// 
                        var requested_qr_codes = wo_assets.Where(x => !String.IsNullOrEmpty(x.QR_code) && x.asset_id == null && x.inspection_type == (int)MWO_inspection_wo_type.OnBoarding).Select(x => x.QR_code).ToList();
                        var duplicateQRcode = requested_qr_codes.GroupBy(x => x).Where(x => x.Count() > 1).Select(x => x.Key).ToList().FirstOrDefault();

                        if (!String.IsNullOrEmpty(duplicateQRcode))
                        {
                            //   response.task_id = int.Parse(w.Tasks.task_code.ToString());
                            var duplicate_qr_asset_names = wo_assets.Where(x => !String.IsNullOrEmpty(x.QR_code) && x.QR_code == duplicateQRcode).Select(x => x.asset_name).ToList();
                            var stringify_names = String.Join(" , ", duplicate_qr_asset_names);
                            response.asset_name = "Qr code " + duplicateQRcode + " in Asset : " + stringify_names;
                            response.success = (int)ResponseStatusNumber.qr_code_must_be_unique;
                            return response;
                        }

                        ///check for existing asset id QR code
                        var requested_existing_asset_id = wo_assets.Where(x => x.asset_id != null).Select(x => x.asset_id.Value).ToList();
                        var requested_existing_asset_id_qr_code = wo_assets.Where(x => !String.IsNullOrEmpty(x.QR_code)).Select(x => x.QR_code).ToList();
                        var get_asset_by_qr = _UoW.WorkOrderRepository.GetAssetByQRCodeExist(requested_existing_asset_id_qr_code, requested_existing_asset_id);
                        if (get_asset_by_qr != null)
                        {

                            var get_woline_forQr = wo_assets.Where(x => !String.IsNullOrEmpty(x.QR_code) && !String.IsNullOrEmpty(get_asset_by_qr.QR_code) && (x.QR_code == get_asset_by_qr.QR_code)).FirstOrDefault();
                            if (get_woline_forQr != null)
                            {
                                response.asset_name = "Qr code " + get_woline_forQr.QR_code + " in Asset : " + get_woline_forQr.asset_name;
                                response.success = (int)ResponseStatusNumber.qr_code_must_be_unique;
                            }
                            else
                            {
                                response.asset_name = "Qr code " + get_asset_by_qr.QR_code + " in Asset : " + get_asset_by_qr.name;
                                response.success = (int)ResponseStatusNumber.qr_code_must_be_unique;
                            }
                            return response;
                        }

                        /*var get_asset_by_internal_id = _UoW.WorkOrderRepository.GetAssetByQRCode(requested_qr_codes);
                        if (get_asset_by_internal_id != null)
                        {
                            response.asset_name = get_asset_by_internal_id.QR_code;
                            response.success = (int)ResponseStatusNumber.qr_code_must_be_unique;
                            return response;
                        }*/



                        // check if any fed by is not complete from wo line 
                        var ob_wo_fed_by_mappings = wo_assets.Where(x => x.WOOBAssetFedByMapping != null).SelectMany(x => x.WOOBAssetFedByMapping).ToList();
                        var ob_wo_line_fed_bys = ob_wo_fed_by_mappings.Where(x => x.is_parent_from_ob_wo && !x.is_deleted).ToList();
                        if (ob_wo_line_fed_bys.Count > 0)
                        {
                            var ob_wo_line_fed_by_ids = ob_wo_line_fed_bys.Select(x => x.parent_asset_id).ToList();
                            var incompletes_ob_lines = get_wo.WOOnboardingAssets.Where(x => ob_wo_line_fed_by_ids.Contains(x.woonboardingassets_id) && x.status != (int)Status.Completed && !x.is_deleted && !x.is_woline_from_other_inspection).Select(x => x.asset_name).ToList();
                            if (incompletes_ob_lines.Count > 0)
                            {
                                response.asset_name = string.Join(",", incompletes_ob_lines);
                                response.success = (int)ResponseStatusNumber.fed_by_wo_ines_must_be_completes;
                                return response;
                            }
                        }

                        wo_assets = get_wo.WOOnboardingAssets.Where(x => (x.status == (int)Status.Completed || x.is_woline_from_other_inspection) && !x.is_main_asset_created).ToList();
                        //// first insert asset class if itsnot in db
                        var requested_asset_class = wo_assets.Where(x => !String.IsNullOrEmpty(x.asset_class_code)).Select(x => x.asset_class_code.ToLower().Trim()).ToList();
                        var get_assetclass_fromDB = _UoW.FormIOAssetClassRepository.GetAssetclassByAssetclassCodes(requested_asset_class);
                        var get_assetclass_code_fromDB = get_assetclass_fromDB.Where(x => !String.IsNullOrEmpty(x.asset_class_code))
                                                                              .Select(x => x.asset_class_code.ToLower().Trim()).ToList();
                        var absent_asset_class = requested_asset_class.Where(x => !get_assetclass_code_fromDB.Contains(x)).Distinct().ToList();

                        foreach (var asset_class in absent_asset_class)
                        {

                            var requested_absent_asset_class = wo_assets.Where(x => !String.IsNullOrEmpty(x.asset_class_code) &&
                                                                            x.asset_class_code.ToLower().Trim() == asset_class).FirstOrDefault();


                            InspectionTemplateAssetClass InspectionTemplateAssetClass = new InspectionTemplateAssetClass();
                            InspectionTemplateAssetClass.asset_class_code = requested_absent_asset_class.asset_class_code;
                            InspectionTemplateAssetClass.asset_class_name = requested_absent_asset_class.asset_class_name;
                            InspectionTemplateAssetClass.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                            InspectionTemplateAssetClass.isarchive = false;
                            InspectionTemplateAssetClass.created_at = DateTime.UtcNow;
                            InspectionTemplateAssetClass.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                            var insert_class = await _UoW.BaseGenericRepository<InspectionTemplateAssetClass>().Insert(InspectionTemplateAssetClass);
                            _UoW.SaveChanges();
                        }

                        if (!request_model.is_from_MWO)
                        {
                            // do something
                            get_wo.complete_wo_thread_status = (int)CompleteWOThreadStatus.Inprogress;
                            var update_wo_thread = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);

                            await DoSomethingAsync(requested_asset_class, wo_assets, get_wo);

                            response.success = (int)ResponseStatusNumber.Success;
                            return response;
                        }
                        else
                        {
                            var result = await DoSomethingAsync(requested_asset_class, wo_assets, get_wo);
                            if (result == (int)ResponseStatusNumber.Success)
                            {
                                response.success = (int)ResponseStatusNumber.Success;
                            }
                            else
                            {
                                response.success = (int)ResponseStatusNumber.Error;
                            }
                            return response;
                        }
                    }


                }
            }

            get_wo.status = request_model.status;
            get_wo.modified_at = DateTime.UtcNow;
            get_wo.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
            var update_wo = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);
            _UoW.SaveChanges();

            response.success = (int)ResponseStatusNumber.Success;
            return response;
        }

        public async Task<int> DoSomethingAsync(List<string> requested_asset_class, List<WOOnboardingAssets> wo_assets, WorkOrders get_wo)
        {
            int response = (int)ResponseStatusNumber.Success;
            NotificationService notificationService = new NotificationService(_mapper);
            AssetPMService assetPMService = new AssetPMService(_mapper);
            //// insert assets
            ///
            try
            {
                var get_all_assetclass_fromDB = _UoW.FormIOAssetClassRepository.GetAssetclassByAssetclassCodes(requested_asset_class);
                int last_internal_id = _UoW.WorkOrderRepository.GetAssetscountBySite(get_wo.site_id.ToString());

                //int last_internal_id = get_assets_site_wise.Count();
                int result = 0;
                foreach (var asset in wo_assets)
                {
                    var get_ob_woline = _UoW.WorkOrderRepository.GetOBWOAssetByID(asset.woonboardingassets_id);
                    if((get_ob_woline.inspection_type == (int)MWO_inspection_wo_type.PM ||
                        get_ob_woline.inspection_type == (int)MWO_inspection_wo_type.Repair ||
                        get_ob_woline.inspection_type == (int)MWO_inspection_wo_type.Replace ||
                        get_ob_woline.inspection_type == (int)MWO_inspection_wo_type.Trouble_Call_Check ||
                        get_ob_woline.inspection_type == (int)MWO_inspection_wo_type.Others
                        )
                        && get_ob_woline.asset_id == null) // do not execute script for pm/issue imspection with null assset id as it will be not to create new asset
                    {
                       
                    }
                    else
                    {
                        result = await CreateOBWOAsset(get_ob_woline, last_internal_id, get_all_assetclass_fromDB, get_wo);
                    }

                    last_internal_id++;
                    if (result == (int)ResponseStatusNumber.Error)
                    {
                        response = (int)ResponseStatusNumber.Error;
                        break;
                    }
                }
                
                /// create main Asset from issue woline
                /// 
                var issue_install_wolines = _UoW.WorkOrderRepository.GetIssueInstallWoline(get_wo.wo_id);

                if(issue_install_wolines != null && issue_install_wolines.Count > 0)
                {
                    foreach (var asset in issue_install_wolines)
                    {
                        var get_ob_woline = _UoW.WorkOrderRepository.GetOBWOAssetByID(asset.woonboardingassets_id);
                        if (get_ob_woline.TempAsset != null)
                        {
                            // check for issue woline if any of issue woline is mark completed then only create Asset 
                            var completed_issue_woline = _UoW.WorkOrderRepository.GetCompletedIssueWOlinebyTempAsset(get_ob_woline.TempAsset.tempasset_id);
                            if (completed_issue_woline != null)
                            {
                                result = await CreateOBWOAsset(get_ob_woline, last_internal_id, get_all_assetclass_fromDB, get_wo);
                                if (result == (int)ResponseStatusNumber.Error)
                                {
                                    response = (int)ResponseStatusNumber.Error;
                                    break;
                                }
                            }
                        }
                    }
                }
                if (result != (int)ResponseStatusNumber.Error)
                {
                    foreach (var asset in wo_assets)
                    {
                        // add fed by mappings
                        try
                        {
                            Asset req_asset = null;
                            if (asset.asset_id != null)
                            {
                                req_asset = _UoW.WorkOrderRepository.GetAssetforFedby(asset.asset_id.Value);
                            }
                            else
                            {
                                var get_newly_created_asset_id = _UoW.WorkOrderRepository.GetNewCreatedAssetID(asset.woonboardingassets_id);
                                req_asset = _UoW.WorkOrderRepository.GetAssetforFedby(get_newly_created_asset_id);
                                /* if (!String.IsNullOrEmpty(asset.QR_code))// if OR code is not empty then get asset by internal_asset_id which is QR of asset
                                 {
                                     string qr_code = asset.QR_code.Trim().ToLower();
                                     req_asset = _UoW.WorkOrderRepository.GetAsssetByInternalID(qr_code , asset.site_id);
                                 }
                                 else if (!String.IsNullOrEmpty(asset.asset_name))// if OR code is  empty then get asset by asset name
                                 {
                                     string asset_name = asset.asset_name.Trim().ToLower();
                                     req_asset = _UoW.WorkOrderRepository.GetAssetByLocation(asset_name);
                                 }*/
                            }
                            if (asset.WOOBAssetFedByMapping != null && asset.WOOBAssetFedByMapping.Count > 0)
                            {
                                var asset_parents = asset.WOOBAssetFedByMapping.Where(x => !x.is_deleted).ToList();
                                if (asset_parents != null && asset_parents.Count > 0) // check if requested asset have any parent/Fed by
                                {
                                    foreach (var asset_parent in asset_parents)
                                    {
                                        Asset db_parent_asset = null;
                                        if (!asset_parent.is_parent_from_ob_wo)
                                        {
                                            db_parent_asset = _UoW.WorkOrderRepository.GetAssetByFedBy(asset_parent.parent_asset_id);
                                        }
                                        else
                                        {
                                            var wo_line_asset = wo_assets.Where(x => x.woonboardingassets_id == asset_parent.parent_asset_id).FirstOrDefault();
                                            var get_newly_created_asset_id = _UoW.WorkOrderRepository.GetNewCreatedAssetID(wo_line_asset.woonboardingassets_id);
                                            db_parent_asset = _UoW.WorkOrderRepository.GetAssetByFedBy(get_newly_created_asset_id);
                                            /*if (!String.IsNullOrEmpty(wo_line_asset.QR_code))// if OR code is not empty then get asset by internal_asset_id which is QR of asset
                                            {
                                                string qr_code = wo_line_asset.QR_code.Trim().ToLower();
                                                db_parent_asset = _UoW.WorkOrderRepository.GetAsssetByInternalID(qr_code , wo_line_asset.site_id);
                                            }
                                            else if (!String.IsNullOrEmpty(wo_line_asset.asset_name))// if OR code is  empty then get asset by asset name
                                            {
                                                string asset_name = wo_line_asset.asset_name.Trim().ToLower();
                                                db_parent_asset = _UoW.WorkOrderRepository.GetAssetByLocation(asset_name);
                                            }*/
                                        }
                                        

                                        /// now assign parent in table 
                                        /// 
                                        bool insert_hierarchy = true;
                                        var wo_line_asset_via_subcomp = wo_assets.Where(x => x.woonboardingassets_id == asset_parent.via_subcomponant_asset_id && x.is_main_asset_created).FirstOrDefault();
                                        var wo_line_asset_fedby_via_subcomp = wo_assets.Where(x => x.woonboardingassets_id == asset_parent.fed_by_via_subcomponant_asset_id && x.is_main_asset_created).FirstOrDefault();

                                        if (req_asset.AssetParentHierarchyMapping != null && req_asset.AssetParentHierarchyMapping.Count() > 0) // if parent is already exist then do not insert.
                                        {
                                            var parent_exist = req_asset.AssetParentHierarchyMapping.Where(x => x.parent_asset_id == db_parent_asset.asset_id).FirstOrDefault();
                                            if (parent_exist != null)
                                            {
                                                //update parent
                                                parent_exist.style = asset_parent.style;
                                                parent_exist.length = asset_parent.length;
                                                parent_exist.raceway_type_id = asset_parent.raceway_type_id;
                                                parent_exist.conductor_type_id = asset_parent.conductor_type_id;
                                                parent_exist.number_of_conductor = asset_parent.number_of_conductor;

                                                
                                                if (asset_parent.is_via_subcomponant_asset_from_ob_wo && wo_line_asset_via_subcomp != null)
                                                    parent_exist.via_subcomponent_asset_id = wo_line_asset_via_subcomp.asset_id;
                                                else
                                                    parent_exist.via_subcomponent_asset_id = asset_parent.via_subcomponant_asset_id;

                                                if (asset_parent.is_fed_by_via_subcomponant_asset_from_ob_wo && wo_line_asset_fedby_via_subcomp != null)
                                                    parent_exist.fed_by_via_subcomponant_asset_id = wo_line_asset_fedby_via_subcomp.asset_id;
                                                else
                                                    parent_exist.fed_by_via_subcomponant_asset_id = asset_parent.fed_by_via_subcomponant_asset_id;


                                                var update = await _UoW.BaseGenericRepository<AssetParentHierarchyMapping>().Update(parent_exist);
                                                _UoW.SaveChanges();

                                                insert_hierarchy = false;
                                            }
                                        }
                                        if (insert_hierarchy)
                                        {
                                            AssetParentHierarchyMapping AssetParentHierarchyMapping = new AssetParentHierarchyMapping();
                                            AssetParentHierarchyMapping.asset_id = req_asset.asset_id;
                                            AssetParentHierarchyMapping.parent_asset_id = db_parent_asset.asset_id;
                                            AssetParentHierarchyMapping.fed_by_usage_type_id = asset_parent.fed_by_usage_type_id;
                                            if (asset_parent.fed_by_usage_type_id == null || asset_parent.fed_by_usage_type_id == 0)
                                            {
                                                AssetParentHierarchyMapping.fed_by_usage_type_id = 1; // set defuault as normal
                                            }
                                            AssetParentHierarchyMapping.created_at = DateTime.UtcNow;
                                            AssetParentHierarchyMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                            AssetParentHierarchyMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                            AssetParentHierarchyMapping.is_deleted = false;
                                            AssetParentHierarchyMapping.style = asset_parent.style;
                                            AssetParentHierarchyMapping.length = asset_parent.length;
                                            AssetParentHierarchyMapping.raceway_type_id = asset_parent.raceway_type_id;
                                            AssetParentHierarchyMapping.conductor_type_id = asset_parent.conductor_type_id;
                                            AssetParentHierarchyMapping.number_of_conductor = asset_parent.number_of_conductor;

                                            if (asset_parent.is_via_subcomponant_asset_from_ob_wo && wo_line_asset_via_subcomp != null)
                                                AssetParentHierarchyMapping.via_subcomponent_asset_id = wo_line_asset_via_subcomp.asset_id;
                                            else
                                                AssetParentHierarchyMapping.via_subcomponent_asset_id = asset_parent.via_subcomponant_asset_id;

                                            if (asset_parent.is_fed_by_via_subcomponant_asset_from_ob_wo && wo_line_asset_fedby_via_subcomp != null)
                                                AssetParentHierarchyMapping.fed_by_via_subcomponant_asset_id = wo_line_asset_fedby_via_subcomp.asset_id;
                                            else
                                                AssetParentHierarchyMapping.fed_by_via_subcomponant_asset_id = asset_parent.fed_by_via_subcomponant_asset_id;


                                            var insert = await _UoW.BaseGenericRepository<AssetParentHierarchyMapping>().Insert(AssetParentHierarchyMapping);
                                            _UoW.SaveChanges();
                                            // now insert children in parnt asset
                                            AssetChildrenHierarchyMapping AssetChildrenHierarchyMapping = new AssetChildrenHierarchyMapping();
                                            AssetChildrenHierarchyMapping.asset_id = db_parent_asset.asset_id;
                                            AssetChildrenHierarchyMapping.children_asset_id = req_asset.asset_id;

                                            /*if (asset_parent.is_via_subcomponant_asset_from_ob_wo && wo_line_asset_via_subcomp != null)
                                            {
                                                AssetChildrenHierarchyMapping.via_subcomponent_asset_id = wo_line_asset_via_subcomp.asset_id;
                                                var sub_mapping = _UoW.WorkOrderRepository.Getsublevelcomponenttocheck(wo_line_asset_via_subcomp.woonboardingassets_id);
                                                AssetChildrenHierarchyMapping.circuit = sub_mapping != null ? sub_mapping.circuit : null;
                                            }
                                            else
                                            {
                                                AssetChildrenHierarchyMapping.via_subcomponent_asset_id = asset_parent.via_subcomponant_asset_id;
                                                if (asset_parent.via_subcomponant_asset_id != null)
                                                {
                                                    var sub_mapping2 = _UoW.WorkOrderRepository.GetAssetSublevelMappingBySubId(asset_parent.via_subcomponant_asset_id.Value);
                                                    AssetChildrenHierarchyMapping.circuit = sub_mapping2 != null ? sub_mapping2.circuit : null;
                                                }
                                            }*/

                                            /// old code
                                            //if (asset_parent.is_via_subcomponant_asset_from_ob_wo && wo_line_asset_fedby_via_subcomp != null)
                                            //    AssetChildrenHierarchyMapping.via_subcomponent_asset_id = wo_line_asset_fedby_via_subcomp.asset_id;
                                            //else
                                            //    AssetChildrenHierarchyMapping.via_subcomponent_asset_id = asset_parent.fed_by_via_subcomponant_asset_id;


                                            // 24-April-2024  circuit we are adding fedby's subcomponent(fed_by_via_subcomponant_asset_id) as ocp (via_subcomponent_asset_id)
                                            if (asset_parent.is_via_subcomponant_asset_from_ob_wo && wo_line_asset_fedby_via_subcomp != null)
                                            {
                                                AssetChildrenHierarchyMapping.via_subcomponent_asset_id = wo_line_asset_fedby_via_subcomp.asset_id;
                                                var sub_mapping = _UoW.WorkOrderRepository.Getsublevelcomponenttocheck(wo_line_asset_fedby_via_subcomp.woonboardingassets_id);
                                                AssetChildrenHierarchyMapping.circuit = sub_mapping != null ? sub_mapping.circuit : null;
                                            }
                                            else
                                            {
                                                AssetChildrenHierarchyMapping.via_subcomponent_asset_id = asset_parent.fed_by_via_subcomponant_asset_id;
                                                if (asset_parent.fed_by_via_subcomponant_asset_id != null)
                                                {
                                                    var sub_mapping2 = _UoW.WorkOrderRepository.GetAssetSublevelMappingBySubId(asset_parent.fed_by_via_subcomponant_asset_id.Value);
                                                    AssetChildrenHierarchyMapping.circuit = sub_mapping2 != null ? sub_mapping2.circuit : null;
                                                }
                                            }


                                            AssetChildrenHierarchyMapping.created_at = DateTime.UtcNow;
                                            AssetChildrenHierarchyMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                            AssetChildrenHierarchyMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                            AssetChildrenHierarchyMapping.is_deleted = false;

                                            var insert1 = await _UoW.BaseGenericRepository<AssetChildrenHierarchyMapping>().Insert(AssetChildrenHierarchyMapping);
                                            _UoW.SaveChanges();
                                        }

                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError("Exception in DoSomethingAsync while asset Parent mapping added  : " + asset.asset_name + ex.Message);
                        }
                        // add top level and sub component mappings
                        try
                        {
                            // get asset details from db
                            Asset req_asset = null;
                            if (asset.asset_id != null)
                            {
                                req_asset = _UoW.WorkOrderRepository.GetAssetforFedby(asset.asset_id.Value);
                            }
                            else
                            {
                                var get_newly_created_asset_id = _UoW.WorkOrderRepository.GetNewCreatedAssetID(asset.woonboardingassets_id);
                                req_asset = _UoW.WorkOrderRepository.GetAssetforFedby(get_newly_created_asset_id);
                                /*if (!String.IsNullOrEmpty(asset.QR_code))// if OR code is not empty then get asset by internal_asset_id which is QR of asset
                                {
                                    string qr_code = asset.QR_code.Trim().ToLower();
                                    req_asset = _UoW.WorkOrderRepository.GetAsssetByInternalID(qr_code , asset.site_id);
                                }
                                else if (!String.IsNullOrEmpty(asset.asset_name))// if OR code is  empty then get asset by asset name
                                {
                                    string asset_name = asset.asset_name.Trim().ToLower();
                                    req_asset = _UoW.WorkOrderRepository.GetAssetByLocation(asset_name);
                                }*/
                            }

                            // add mappings
                            if (asset.component_level_type_id == (int)ComponentLevelTypes.ToplevelComponent)
                            {
                                var existing_subcomponents = asset.WOlineSubLevelcomponentMapping.Where(x => !x.is_sublevelcomponent_from_ob_wo).ToList();
                                var new_subcomponents = asset.WOlineSubLevelcomponentMapping.Where(x => !x.is_deleted && x.is_sublevelcomponent_from_ob_wo).ToList();

                                var requested_asset_subcomponents = req_asset.AssetSubLevelcomponentMapping.Where(x => !x.is_deleted).ToList();

                                if (existing_subcomponents != null && existing_subcomponents.Count > 0)
                                {
                                    // delete subcompnenets for existing if any deleted
                                    var deleted_existing_subcomponens = existing_subcomponents.Where(x => x.is_deleted).Select(x => x.sublevelcomponent_asset_id).ToList();
                                    var db_deleted_existing_subcomponens = req_asset.AssetSubLevelcomponentMapping.Where(x => deleted_existing_subcomponens.Contains(x.sublevelcomponent_asset_id)).ToList();

                                    foreach (var item in db_deleted_existing_subcomponens)
                                    {
                                        item.is_deleted = true;
                                        item.updated_at = DateTime.UtcNow;

                                        var update = await _UoW.BaseGenericRepository<AssetSubLevelcomponentMapping>().Update(item);
                                        _UoW.SaveChanges();



                                        // delete top level mapping from subcomponent asset
                                        var get_sublevel_component = _UoW.WorkOrderRepository.Getsublevelcomponent(item.sublevelcomponent_asset_id);
                                        get_sublevel_component.component_level_type_id = 0;
                                        get_sublevel_component.modified_at = DateTime.UtcNow;
                                        get_sublevel_component.AssetTopLevelcomponentMapping.Where(x => x.toplevelcomponent_asset_id == req_asset.asset_id).FirstOrDefault().is_deleted = true;

                                        var udate_subcomponent = await _UoW.BaseGenericRepository<Asset>().Update(get_sublevel_component);
                                        _UoW.SaveChanges();


                                        // delete nameplate photo from asset if exist 
                                        if (get_sublevel_component.AssetProfileImages != null && get_sublevel_component.AssetProfileImages.Count > 0)
                                        {
                                            var get_profile_images = get_sublevel_component.AssetProfileImages.Where(x => x.asset_photo == item.image_name && !x.is_deleted).FirstOrDefault();
                                            if (get_profile_images != null)
                                            {
                                                get_profile_images.is_deleted = true;
                                                get_profile_images.modified_at = DateTime.UtcNow;

                                                var update_imgs = await _UoW.BaseGenericRepository<AssetProfileImages>().Update(get_profile_images);
                                            }
                                        }
                                    }

                                    foreach(var item in existing_subcomponents)
                                    {
                                        // Add Images to SubComp-MainAsset if added in WO before Completed
                                        var get_mainAsset_images = _UoW.WorkOrderRepository.GetMainAssetImagesById(item.sublevelcomponent_asset_id);
                                        var imagename_list = get_mainAsset_images.Select(x => x.asset_photo).ToList();
                                        var get_WOlineSubLevelcomponentMapping = _UoW.WorkOrderRepository.GetWolineSublevelAssetMappingById(item.sublevelcomponent_asset_id, item.woonboardingassets_id);
                                        var get_subcomp_images = get_WOlineSubLevelcomponentMapping.WOOnboardingAssetsImagesMapping.Where(x => !imagename_list.Contains(x.asset_photo) && !x.is_deleted).ToList();
                                        //var get_subcomp_images = _UoW.WorkOrderRepository.GetWOOBAssetImagesById(item.sublevelcomponent_asset_id);

                                        foreach (var img in get_subcomp_images)
                                        {
                                            AssetProfileImages AssetProfileImages = new AssetProfileImages();
                                            AssetProfileImages.asset_id = item.sublevelcomponent_asset_id;
                                            AssetProfileImages.asset_photo = img.asset_photo;
                                            AssetProfileImages.created_at = DateTime.UtcNow;
                                            AssetProfileImages.asset_photo_type = img.asset_photo_type;
                                            AssetProfileImages.is_deleted = false;

                                            var insert_img = await _UoW.BaseGenericRepository<AssetProfileImages>().Insert(AssetProfileImages);
                                            _UoW.SaveChanges();
                                        }

                                        var get_main_subcompont_mapping = req_asset.AssetSubLevelcomponentMapping.Where(x => x.sublevelcomponent_asset_id == item.sublevelcomponent_asset_id && !x.is_deleted).FirstOrDefault();
                                        if (get_main_subcompont_mapping != null)
                                        {
                                            get_main_subcompont_mapping.circuit = item.circuit;
                                            var update_main_sub = await _UoW.BaseGenericRepository<AssetSubLevelcomponentMapping>().Update(get_main_subcompont_mapping);
                                            _UoW.SaveChanges();
                                        }
                                    }

                                    // insert any new asset for existing
                                    var requested_asset_subcomponent_ids = requested_asset_subcomponents.Select(x => x.sublevelcomponent_asset_id).ToList();
                                    var inserted_new_asset = existing_subcomponents.Where(x => !requested_asset_subcomponent_ids.Contains(x.sublevelcomponent_asset_id)).ToList();

                                    foreach (var item in inserted_new_asset)
                                    {
                                        AssetSubLevelcomponentMapping AssetSubLevelcomponentMapping = new AssetSubLevelcomponentMapping();
                                        AssetSubLevelcomponentMapping.asset_id = req_asset.asset_id;
                                        AssetSubLevelcomponentMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                        AssetSubLevelcomponentMapping.sublevelcomponent_asset_id = item.sublevelcomponent_asset_id;
                                        AssetSubLevelcomponentMapping.circuit = item.circuit;
                                        AssetSubLevelcomponentMapping.image_name = item.image_name;
                                        AssetSubLevelcomponentMapping.created_at = DateTime.UtcNow;
                                        AssetSubLevelcomponentMapping.is_deleted = false;

                                        var insert_subcomponant = await _UoW.BaseGenericRepository<AssetSubLevelcomponentMapping>().Insert(AssetSubLevelcomponentMapping);
                                        _UoW.SaveChanges();

                                        // insert nameplate photo
                                        /*AssetProfileImages AssetProfileImages = new AssetProfileImages();
                                          AssetProfileImages.asset_id = item.sublevelcomponent_asset_id;
                                          AssetProfileImages.asset_photo = item.image_name;
                                          AssetProfileImages.created_at = DateTime.UtcNow;
                                          AssetProfileImages.asset_photo_type = (int)AssetPhotoType.Nameplate_Photo;
                                          AssetProfileImages.is_deleted = false;

                                          var insert_img = await _UoW.BaseGenericRepository<AssetProfileImages>().Insert(AssetProfileImages);
                                          _UoW.SaveChanges();
                                          */

                                        // Add Images to NewAdded SubComp if added before WO Complete 
                                        var get_mainAsset_images = _UoW.WorkOrderRepository.GetMainAssetImagesByWOLineId(item.sublevelcomponent_asset_id);
                                        var imagename_list = get_mainAsset_images.Select(x => x.asset_photo).ToList();
                                        var get_WOlineSubLevelcomponentMapping = _UoW.WorkOrderRepository.GetWolineSublevelAssetMappingById(item.sublevelcomponent_asset_id, item.woonboardingassets_id);
                                        var get_subcomp_images2 = get_WOlineSubLevelcomponentMapping.WOOnboardingAssetsImagesMapping.Where(x => !imagename_list.Contains(x.asset_photo) && !x.is_deleted).ToList();

                                        //var get_subcomp_images = _UoW.WorkOrderRepository.GetWOOBAssetImagesById(item.sublevelcomponent_asset_id);

                                        foreach (var img in get_subcomp_images2)
                                        {
                                            AssetProfileImages AssetProfileImages = new AssetProfileImages();
                                            AssetProfileImages.asset_id = item.sublevelcomponent_asset_id;
                                            AssetProfileImages.asset_photo = img.asset_photo;
                                            AssetProfileImages.created_at = DateTime.UtcNow;
                                            AssetProfileImages.asset_photo_type = img.asset_photo_type;
                                            AssetProfileImages.is_deleted = false;

                                            var insert_img = await _UoW.BaseGenericRepository<AssetProfileImages>().Insert(AssetProfileImages);
                                            _UoW.SaveChanges();
                                        }


                                        // check if top level is added in subcomponent asset mapping if not then add
                                        var subcomponent_asset = _UoW.WorkOrderRepository.Getsublevelcomponent(item.sublevelcomponent_asset_id);
                                        var top_level_map = subcomponent_asset.AssetTopLevelcomponentMapping.Where(x => x.toplevelcomponent_asset_id == req_asset.asset_id).FirstOrDefault();
                                        if (top_level_map == null)
                                        {
                                            AssetTopLevelcomponentMapping AssetTopLevelcomponentMapping = new AssetTopLevelcomponentMapping();
                                            AssetTopLevelcomponentMapping.asset_id = subcomponent_asset.asset_id;
                                            AssetTopLevelcomponentMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                            AssetTopLevelcomponentMapping.toplevelcomponent_asset_id = req_asset.asset_id;
                                            AssetTopLevelcomponentMapping.created_at = DateTime.UtcNow;
                                            AssetTopLevelcomponentMapping.is_deleted = false;

                                            var insert_toplevel = await _UoW.BaseGenericRepository<AssetTopLevelcomponentMapping>().Insert(AssetTopLevelcomponentMapping);
                                            _UoW.SaveChanges();
                                        }
                                    }
                                }

                                if (new_subcomponents != null && new_subcomponents.Count > 0)
                                {
                                    foreach (var item in new_subcomponents)
                                    {
                                        Asset subcomponent_asset = null;
                                        var wo_line_asset = wo_assets.Where(x => x.woonboardingassets_id == item.sublevelcomponent_asset_id).FirstOrDefault();
                                        var get_newly_created_asset_id = _UoW.WorkOrderRepository.GetNewCreatedAssetID(wo_line_asset.woonboardingassets_id);
                                        subcomponent_asset =_UoW.WorkOrderRepository.GetAssetforFedby(get_newly_created_asset_id);
                                        /*if (!String.IsNullOrEmpty(wo_line_asset.QR_code))// if OR code is not empty then get asset by internal_asset_id which is QR of asset
                                        {
                                            string qr_code = wo_line_asset.QR_code.Trim().ToLower();
                                            subcomponent_asset = _UoW.WorkOrderRepository.GetAsssetByInternalID(qr_code , wo_line_asset.site_id);
                                        }
                                        else if (!String.IsNullOrEmpty(wo_line_asset.asset_name))// if OR code is  empty then get asset by asset name
                                        {
                                            string asset_name = wo_line_asset.asset_name.Trim().ToLower();
                                            subcomponent_asset = _UoW.WorkOrderRepository.GetAssetByLocation(asset_name);
                                        }*/

                                        //
                                        if (subcomponent_asset != null)
                                        {
                                            // get if subcomponent is added if not then add
                                            var get_subcomponent = _UoW.WorkOrderRepository.CheckSubcomponent(req_asset.asset_id, subcomponent_asset.asset_id);
                                            if (get_subcomponent == null)
                                            {

                                                // update internal asset id for subcomponent
                                                if(req_asset.AssetSubLevelcomponentMapping != null)
                                                {
                                                    if (!String.IsNullOrEmpty(req_asset.internal_asset_id))
                                                    {
                                                        subcomponent_asset.internal_asset_id = req_asset.internal_asset_id + " - " + (req_asset.AssetSubLevelcomponentMapping.Count + 1).ToString();
                                                        subcomponent_asset.QR_code = subcomponent_asset.internal_asset_id;
                                                        var update_sub = await _UoW.BaseGenericRepository<Asset>().Update(subcomponent_asset);
                                                    }

                                                }
                                                AssetSubLevelcomponentMapping AssetSubLevelcomponentMapping = new AssetSubLevelcomponentMapping();
                                                AssetSubLevelcomponentMapping.asset_id = req_asset.asset_id;
                                                AssetSubLevelcomponentMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                                AssetSubLevelcomponentMapping.sublevelcomponent_asset_id = subcomponent_asset.asset_id;
                                                AssetSubLevelcomponentMapping.circuit = item.circuit;
                                                AssetSubLevelcomponentMapping.image_name = item.image_name;
                                                AssetSubLevelcomponentMapping.created_at = DateTime.UtcNow;
                                                AssetSubLevelcomponentMapping.is_deleted = false;

                                                var insert_subcomponant = await _UoW.BaseGenericRepository<AssetSubLevelcomponentMapping>().Insert(AssetSubLevelcomponentMapping);
                                                _UoW.SaveChanges();

                                                AssetProfileImages AssetProfileImages = new AssetProfileImages();
                                                AssetProfileImages.asset_id = subcomponent_asset.asset_id;
                                                AssetProfileImages.asset_photo = item.image_name;
                                                AssetProfileImages.created_at = DateTime.UtcNow;
                                                AssetProfileImages.asset_photo_type = (int)AssetPhotoType.Nameplate_Photo;
                                                AssetProfileImages.is_deleted = false;
                                                if (!String.IsNullOrEmpty(AssetProfileImages.asset_photo))
                                                {
                                                    var insert_img = await _UoW.BaseGenericRepository<AssetProfileImages>().Insert(AssetProfileImages);
                                                    _UoW.SaveChanges();
                                                }


                                                // Add Images to SubComp-MainAsset if added in WO before Completed
                                                var get_mainAsset_images = _UoW.WorkOrderRepository.GetMainAssetImagesByWOLineId(item.sublevelcomponent_asset_id);
                                                var imagename_list = get_mainAsset_images.Select(x => x.asset_photo).ToList();
                                                var get_WOlineSubLevelcomponentMapping = _UoW.WorkOrderRepository.GetWolineSublevelAssetMappingById(item.sublevelcomponent_asset_id, item.woonboardingassets_id);
                                                var get_subcomp_images2 = get_WOlineSubLevelcomponentMapping.WOOnboardingAssetsImagesMapping.Where(x => !imagename_list.Contains(x.asset_photo) && !x.is_deleted).ToList();

                                                //var get_subcomp_images = _UoW.WorkOrderRepository.GetWOOBAssetImagesById(item.sublevelcomponent_asset_id);

                                                foreach (var img in get_subcomp_images2)
                                                {
                                                    AssetProfileImages AssetProfileImages2 = new AssetProfileImages();
                                                    AssetProfileImages2.asset_id = subcomponent_asset.asset_id;
                                                    AssetProfileImages2.asset_photo = img.asset_photo;
                                                    AssetProfileImages2.created_at = DateTime.UtcNow;
                                                    AssetProfileImages2.asset_photo_type = img.asset_photo_type;
                                                    AssetProfileImages2.is_deleted = false;

                                                    var insert_img2 = await _UoW.BaseGenericRepository<AssetProfileImages>().Insert(AssetProfileImages2);
                                                    _UoW.SaveChanges();
                                                }
                                            }
                                            else
                                            {
                                                get_subcomponent.circuit = item.circuit;
                                                get_subcomponent.image_name = item.image_name;

                                                var insert_subcomponant = await _UoW.BaseGenericRepository<AssetSubLevelcomponentMapping>().Update(get_subcomponent);
                                                _UoW.SaveChanges();

                                                var get_profile_images = subcomponent_asset.AssetProfileImages.Where(x => x.asset_photo == item.image_name && !x.is_deleted).FirstOrDefault();
                                                if (get_profile_images == null)
                                                {
                                                    AssetProfileImages AssetProfileImages = new AssetProfileImages();
                                                    AssetProfileImages.asset_id = req_asset.asset_id;
                                                    AssetProfileImages.asset_photo = item.image_name;
                                                    AssetProfileImages.created_at = DateTime.UtcNow;
                                                    AssetProfileImages.asset_photo_type = (int)AssetPhotoType.Nameplate_Photo;
                                                    AssetProfileImages.is_deleted = false;
                                                    if (!String.IsNullOrEmpty(AssetProfileImages.asset_photo))
                                                    {
                                                        var insert_img = await _UoW.BaseGenericRepository<AssetProfileImages>().Insert(AssetProfileImages);
                                                        _UoW.SaveChanges();
                                                    }

                                                }

                                                // Add Images to SubComp-MainAsset if added in WO before Completed
                                                var get_mainAsset_images = _UoW.WorkOrderRepository.GetMainAssetImagesByWOLineId(item.sublevelcomponent_asset_id);
                                                var imagename_list = get_mainAsset_images.Select(x => x.asset_photo).ToList();
                                                var get_WOlineSubLevelcomponentMapping = _UoW.WorkOrderRepository.GetWolineSublevelAssetMappingById(item.sublevelcomponent_asset_id, item.woonboardingassets_id);
                                                var get_subcomp_images2 = get_WOlineSubLevelcomponentMapping.WOOnboardingAssetsImagesMapping.Where(x => !imagename_list.Contains(x.asset_photo) && !x.is_deleted).ToList();

                                                //var get_subcomp_images = _UoW.WorkOrderRepository.GetWOOBAssetImagesById(item.sublevelcomponent_asset_id);
                                                foreach (var img in get_subcomp_images2)
                                                {
                                                    AssetProfileImages AssetProfileImages = new AssetProfileImages();
                                                    AssetProfileImages.asset_id = get_subcomponent.sublevelcomponent_asset_id;
                                                    AssetProfileImages.asset_photo = img.asset_photo;
                                                    AssetProfileImages.created_at = DateTime.UtcNow;
                                                    AssetProfileImages.asset_photo_type = img.asset_photo_type;
                                                    AssetProfileImages.is_deleted = false;

                                                    var insert_img = await _UoW.BaseGenericRepository<AssetProfileImages>().Insert(AssetProfileImages);
                                                    _UoW.SaveChanges();
                                                }

                                            }
                                            // check for top level also
                                            // check if top level is added in subcomponent asset mapping if not then add
                                            var subcomponent_asset1 = _UoW.WorkOrderRepository.Getsublevelcomponent(subcomponent_asset.asset_id);
                                            var top_level_map = subcomponent_asset1.AssetTopLevelcomponentMapping.Where(x => x.toplevelcomponent_asset_id == req_asset.asset_id).FirstOrDefault();
                                            if (top_level_map == null)
                                            {
                                                AssetTopLevelcomponentMapping AssetTopLevelcomponentMapping = new AssetTopLevelcomponentMapping();
                                                AssetTopLevelcomponentMapping.asset_id = subcomponent_asset.asset_id;
                                                AssetTopLevelcomponentMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                                AssetTopLevelcomponentMapping.toplevelcomponent_asset_id = req_asset.asset_id;
                                                AssetTopLevelcomponentMapping.created_at = DateTime.UtcNow;
                                                AssetTopLevelcomponentMapping.is_deleted = false;

                                                var insert_toplevel = await _UoW.BaseGenericRepository<AssetTopLevelcomponentMapping>().Insert(AssetTopLevelcomponentMapping);
                                                _UoW.SaveChanges();
                                            }
                                        }
                                    }
                                }
                            }
                            if (asset.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent)
                            {
                                var toplevel = asset.WOlineTopLevelcomponentMapping.Where(x => !x.is_deleted).FirstOrDefault();
                                if (toplevel != null)
                                {
                                    Asset db_topcomponent_asset = null;
                                    if (!toplevel.is_toplevelcomponent_from_ob_wo) //  if top level componant is from main asset
                                    {
                                        db_topcomponent_asset = _UoW.WorkOrderRepository.GetAssetforFedby(toplevel.toplevelcomponent_asset_id);
                                    }
                                    else //  if sub level componant is only from woline then only proceed
                                    {
                                        var wo_line_asset = wo_assets.Where(x => x.woonboardingassets_id == toplevel.toplevelcomponent_asset_id).FirstOrDefault();
                                        var get_newly_created_asset_id = _UoW.WorkOrderRepository.GetNewCreatedAssetID(wo_line_asset.woonboardingassets_id);
                                        db_topcomponent_asset =  _UoW.WorkOrderRepository.GetAssetforFedby(get_newly_created_asset_id);
                                        /*if (!String.IsNullOrEmpty(wo_line_asset.QR_code))// if OR code is not empty then get asset by internal_asset_id which is QR of asset
                                        {
                                            string qr_code = wo_line_asset.QR_code.Trim().ToLower();
                                            db_topcomponent_asset = _UoW.WorkOrderRepository.GetAsssetByInternalID(qr_code , wo_line_asset.site_id);
                                        }
                                        else if (!String.IsNullOrEmpty(wo_line_asset.asset_name))// if OR code is  empty then get asset by asset name
                                        {
                                            string asset_name = wo_line_asset.asset_name.Trim().ToLower();
                                            db_topcomponent_asset = _UoW.WorkOrderRepository.GetAssetByLocation(asset_name);
                                        }*/
                                    }
                                    if (db_topcomponent_asset != null)
                                    {
                                        // do not insert if top level is already exist
                                        var is_toplevel_exist = _UoW.WorkOrderRepository.CheckToplevelAssetofSubcomponent(req_asset.asset_id, db_topcomponent_asset.asset_id);
                                        if (is_toplevel_exist == null)
                                        {
                                            /// check if there is any top level asset assigned other than requested from woline then first delete that
                                            var existed_toplevel = req_asset.AssetTopLevelcomponentMapping.Where(x => !x.is_deleted).FirstOrDefault();
                                            if (existed_toplevel != null) //delete any toplevel mapping if exist
                                            {
                                                existed_toplevel.is_deleted = true;
                                                existed_toplevel.updated_at = DateTime.UtcNow;

                                                var updtate_toplevel = await _UoW.BaseGenericRepository<AssetTopLevelcomponentMapping>().Update(existed_toplevel);
                                                _UoW.SaveChanges();
                                                // delete subcomponent mapping of that top level

                                                var get_subcomponent = _UoW.WorkOrderRepository.CheckSubcomponent(existed_toplevel.toplevelcomponent_asset_id, req_asset.asset_id);
                                                if (get_subcomponent != null)
                                                {
                                                    get_subcomponent.is_deleted = true;
                                                    get_subcomponent.updated_at = DateTime.UtcNow;

                                                    var updtate_subcomponent = await _UoW.BaseGenericRepository<AssetSubLevelcomponentMapping>().Update(get_subcomponent);
                                                    _UoW.SaveChanges();
                                                }

                                            }


                                            // insert top level asset mapping
                                            AssetTopLevelcomponentMapping AssetTopLevelcomponentMapping = new AssetTopLevelcomponentMapping();
                                            AssetTopLevelcomponentMapping.asset_id = req_asset.asset_id;
                                            AssetTopLevelcomponentMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                            AssetTopLevelcomponentMapping.toplevelcomponent_asset_id = db_topcomponent_asset.asset_id;
                                            AssetTopLevelcomponentMapping.created_at = DateTime.UtcNow;
                                            AssetTopLevelcomponentMapping.is_deleted = false;

                                            if (!String.IsNullOrEmpty(db_topcomponent_asset.internal_asset_id) && req_asset.internal_asset_id.Contains(db_topcomponent_asset.internal_asset_id))
                                            {
                                                req_asset.internal_asset_id = db_topcomponent_asset.internal_asset_id + " - " + (db_topcomponent_asset.AssetSubLevelcomponentMapping.Count + 1).ToString();
                                            }
                                            var update_req_asset = await _UoW.BaseGenericRepository<Asset>().Update(req_asset);

                                            var insert_toplevel = await _UoW.BaseGenericRepository<AssetTopLevelcomponentMapping>().Insert(AssetTopLevelcomponentMapping);
                                            _UoW.SaveChanges();

                                            // check if subcomponent is added for this asset or not if not then insert
                                            var check_subcomponent = _UoW.WorkOrderRepository.CheckSubcomponent(db_topcomponent_asset.asset_id, req_asset.asset_id);
                                            if (check_subcomponent == null)
                                            {
                                                AssetSubLevelcomponentMapping AssetSubLevelcomponentMapping = new AssetSubLevelcomponentMapping();
                                                AssetSubLevelcomponentMapping.asset_id = db_topcomponent_asset.asset_id;
                                                AssetSubLevelcomponentMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                                AssetSubLevelcomponentMapping.sublevelcomponent_asset_id = req_asset.asset_id;
                                                AssetSubLevelcomponentMapping.created_at = DateTime.UtcNow;
                                                AssetSubLevelcomponentMapping.is_deleted = false;

                                                var sub_mapping = _UoW.WorkOrderRepository.Getsublevelcomponenttocheck(asset.woonboardingassets_id);
                                                AssetSubLevelcomponentMapping.circuit = sub_mapping != null ? sub_mapping.circuit : null;

                                                var insert_subcomponant = await _UoW.BaseGenericRepository<AssetSubLevelcomponentMapping>().Insert(AssetSubLevelcomponentMapping);
                                                _UoW.SaveChanges();
                                            }
                                            
                                        }
                                        else
                                        {
                                            // if topLvel is already exist then set internal_asset_id to subLevel from its TopLevel
                                            if (!req_asset.internal_asset_id.Contains(db_topcomponent_asset.internal_asset_id))
                                            {
                                                if (!String.IsNullOrEmpty(db_topcomponent_asset.internal_asset_id))
                                                {
                                                    req_asset.internal_asset_id = db_topcomponent_asset.internal_asset_id + " - " + (db_topcomponent_asset.AssetSubLevelcomponentMapping.Count + 1).ToString();
                                                    var update_req_asset2 = await _UoW.BaseGenericRepository<Asset>().Update(req_asset);
                                                }
                                                

                                            }
                                        }



                                    }



                                }


                            }
                        }
                        catch (Exception ex)
                        {

                        }

                        // update main asset_id in new PM wolines
                        if(asset.inspection_type == (int)MWO_inspection_wo_type.PM && asset.asset_id == null)
                        {
                            // create asset issue of pm woline
                            await createmainissuefromtemp(asset, asset.TempActiveAssetPMWOlineMapping.TempAssetPMs.WOOnboardingAssets.Asset , get_wo);

                            if (asset.TempActiveAssetPMWOlineMapping != null && asset.TempActiveAssetPMWOlineMapping.is_active && !asset.TempActiveAssetPMWOlineMapping.is_deleted)
                            {
                                asset.asset_id = asset.TempActiveAssetPMWOlineMapping.TempAssetPMs.WOOnboardingAssets.asset_id;
                            }
                        }

                        // move temp Asset pms to main asset pms
                        try
                        {
                            if (asset.TempAssetPMs != null && asset.TempAssetPMs.Count > 0) // main temp asset pm
                            {
                                Asset req_asset = null;
                                var get_newly_created_asset_id = _UoW.WorkOrderRepository.GetNewCreatedAssetID(asset.woonboardingassets_id);
                                req_asset = _UoW.WorkOrderRepository.GetAssetforFedby(get_newly_created_asset_id);
                                /*if (!String.IsNullOrEmpty(asset.QR_code))// if OR code is not empty then get asset by internal_asset_id which is QR of asset
                                {
                                    string qr_code = asset.QR_code.Trim().ToLower();
                                    req_asset = _UoW.WorkOrderRepository.GetAsssetByInternalID(qr_code , asset.site_id);
                                }
                                else if (!String.IsNullOrEmpty(asset.asset_name))// if OR code is  empty then get asset by asset name
                                {
                                    string asset_name = asset.asset_name.Trim().ToLower();
                                    req_asset = _UoW.WorkOrderRepository.GetAssetByLocation(asset_name);
                                }*/
                                if (req_asset != null)
                                {
                                    var get_temp_assset_pms = asset.TempAssetPMs.Where(x => !x.is_archive).ToList();
                                    if (get_temp_assset_pms.Count > 0)
                                    {
                                        foreach (var temp_asset_pm in get_temp_assset_pms)
                                        {
                                            if (!temp_asset_pm.is_archive)
                                            {
                                                // check if pm plan is added or not for this pm
                                                var pm_plan_id = temp_asset_pm.PMs.pm_plan_id;
                                                var AssetPMPlans = _UoW.WorkOrderRepository.GetAssetPMPlanforMapping(pm_plan_id);
                                                if (AssetPMPlans == null) // insert asset pm plan 
                                                {
                                                    AssetPMPlans = new AssetPMPlans();
                                                    AssetPMPlans.asset_id = req_asset.asset_id;
                                                    AssetPMPlans.pm_plan_id = pm_plan_id;
                                                    AssetPMPlans.plan_name = temp_asset_pm.PMs.PMPlans.plan_name;
                                                    AssetPMPlans.is_pm_plan_inspection_manual = true;
                                                    AssetPMPlans.created_at = DateTime.UtcNow;
                                                    AssetPMPlans.status = (int)Status.Active;

                                                    var inert_pm_plan = await _UoW.BaseGenericRepository<AssetPMPlans>().Insert(AssetPMPlans);
                                                    _UoW.SaveChanges();
                                                }

                                                // insert Asset PM------------------------------------
                                                AssetPMs AssetPMs = new AssetPMs();
                                                AssetPMs = _mapper.Map<AssetPMs>(temp_asset_pm.PMs);

                                                AssetPMs.asset_id = req_asset.asset_id;
                                                AssetPMs.created_at = DateTime.UtcNow;
                                                AssetPMs.status = (int)Status.Completed;
                                                AssetPMs.is_pm_inspection_manual = true;
                                                AssetPMs.asset_pm_plan_id = AssetPMPlans.asset_pm_plan_id;

                                                if (temp_asset_pm.PMs.PMAttachments != null && temp_asset_pm.PMs.PMAttachments.Count > 0)
                                                {
                                                    AssetPMs.AssetPMAttachments = new List<AssetPMAttachments>();
                                                    temp_asset_pm.PMs.PMAttachments.ToList().ForEach(x =>
                                                    {
                                                        if (!x.is_archive)
                                                        {
                                                            AssetPMAttachments AssetPMAttachments = new AssetPMAttachments();
                                                            AssetPMAttachments.asset_id = req_asset.asset_id;
                                                            AssetPMAttachments.asset_pm_id = AssetPMs.asset_pm_id;
                                                            AssetPMAttachments.asset_pm_plan_id = AssetPMPlans.asset_pm_plan_id;
                                                            AssetPMAttachments.user_uploaded_name = x.user_uploaded_name;
                                                            AssetPMAttachments.filename = x.filename;
                                                            AssetPMAttachments.created_at = DateTime.UtcNow;

                                                            AssetPMs.AssetPMAttachments.Add(AssetPMAttachments);
                                                        }
                                                    });
                                                }

                                                if (temp_asset_pm.PMs.PMsTriggerConditionMapping != null && temp_asset_pm.PMs.PMsTriggerConditionMapping.Count > 0)
                                                {
                                                    AssetPMs.AssetPMsTriggerConditionMapping = new List<AssetPMsTriggerConditionMapping>();
                                                    temp_asset_pm.PMs.PMsTriggerConditionMapping.ToList().ForEach(x =>
                                                    {
                                                        if (!x.is_archive)
                                                        {
                                                            AssetPMsTriggerConditionMapping AssetPMsTriggerConditionMapping = new AssetPMsTriggerConditionMapping();
                                                            AssetPMsTriggerConditionMapping.datetime_repeates_every = x.datetime_repeates_every;
                                                            AssetPMsTriggerConditionMapping.datetime_repeat_time_period_type = x.datetime_repeat_time_period_type;
                                                            AssetPMsTriggerConditionMapping.asset_pm_id = AssetPMs.asset_pm_id;
                                                            AssetPMsTriggerConditionMapping.condition_type_id = x.condition_type_id;
                                                            AssetPMsTriggerConditionMapping.site_id = asset.site_id;
                                                            AssetPMsTriggerConditionMapping.created_at = DateTime.UtcNow;

                                                            AssetPMs.AssetPMsTriggerConditionMapping.Add(AssetPMsTriggerConditionMapping);
                                                        }
                                                    });
                                                }

                                                if (temp_asset_pm.TempActiveAssetPMWOlineMapping != null && temp_asset_pm.TempActiveAssetPMWOlineMapping.Count > 0)
                                                {
                                                    AssetPMs.ActiveAssetPMWOlineMapping = new List<ActiveAssetPMWOlineMapping>();
                                                    temp_asset_pm.TempActiveAssetPMWOlineMapping.ToList().ForEach(x =>
                                                    {
                                                        if (!x.is_deleted && x.is_active)
                                                        {
                                                            ActiveAssetPMWOlineMapping ActiveAssetPMWOlineMapping = new ActiveAssetPMWOlineMapping();
                                                            ActiveAssetPMWOlineMapping.is_active = x.is_active;
                                                            ActiveAssetPMWOlineMapping.woonboardingassets_id = x.woonboardingassets_id;
                                                            ActiveAssetPMWOlineMapping.asset_pm_id = AssetPMs.asset_pm_id;
                                                            ActiveAssetPMWOlineMapping.pm_form_output_data = x.pm_form_output_data;
                                                            ActiveAssetPMWOlineMapping.is_deleted = x.is_deleted;
                                                            ActiveAssetPMWOlineMapping.created_at = DateTime.UtcNow;

                                                            ActiveAssetPMWOlineMapping.WOlineAssetPMImagesMapping = new List<WOlineAssetPMImagesMapping>();
                                                            // save images 
                                                            if (x.WOlineAssetPMImagesMapping != null && x.WOlineAssetPMImagesMapping.Count > 0)
                                                            {
                                                                x.WOlineAssetPMImagesMapping.ToList().ForEach(x =>
                                                                {
                                                                    if (!x.is_deleted)
                                                                    {
                                                                        WOlineAssetPMImagesMapping WOlineAssetPMImagesMapping = new WOlineAssetPMImagesMapping();
                                                                        WOlineAssetPMImagesMapping.image_name = x.image_name;
                                                                        WOlineAssetPMImagesMapping.image_type = x.image_type;
                                                                        WOlineAssetPMImagesMapping.pm_image_caption = x.pm_image_caption;
                                                                        WOlineAssetPMImagesMapping.active_asset_pm_woline_mapping_id = ActiveAssetPMWOlineMapping.active_asset_pm_woline_mapping_id;
                                                                        WOlineAssetPMImagesMapping.created_at = DateTime.UtcNow;

                                                                        ActiveAssetPMWOlineMapping.WOlineAssetPMImagesMapping.Add(WOlineAssetPMImagesMapping);
                                                                    }
                                                                });
                                                            }
                                                            AssetPMs.ActiveAssetPMWOlineMapping.Add(ActiveAssetPMWOlineMapping);

                                                            // save active woline and woid in assetpm also
                                                            AssetPMs.woonboardingassets_id = x.woonboardingassets_id;
                                                            AssetPMs.wo_id = asset.wo_id;
                                                            AssetPMs.pm_form_output_data = x.pm_form_output_data;
                                                        }
                                                    });


                                                }

                                                var insert_assetpm = await _UoW.AssetPMsRepository.Insert(AssetPMs);
                                                _UoW.SaveChanges();
                                            }
                                            
                                        }
                                    }

                                }
                               
                            }
                        }
                        catch(Exception ex)
                        {

                        }


                        // if woline is for repair/replace/other/troublecallcheck and asset_id is null then create new issue from temp issue
                        if (asset.TempAsset != null) // added condition for backward compatibility
                        {
                            if ((asset.inspection_type == (int)MWO_inspection_wo_type.Repair
                              || asset.inspection_type == (int)MWO_inspection_wo_type.Replace
                              || asset.inspection_type == (int)MWO_inspection_wo_type.Trouble_Call_Check) && asset.asset_id == null)
                            {
                                if (asset.WOLineIssue != null && asset.WOLineIssue.Count > 0)
                                {
                                    var wo_line_issues = asset.WOLineIssue.FirstOrDefault();
                                    var AssetIssueMapper = _mapper.Map<AssetIssue>(wo_line_issues);
                                    AssetIssueMapper.asset_id = asset.TempAsset.new_created_asset_id;

                                    AssetIssueMapper.issue_status = (int)Status.open;
                                    AssetIssueMapper.created_at = DateTime.UtcNow;
                                    if (!String.IsNullOrEmpty(asset.issue_title))
                                        AssetIssueMapper.issue_title = asset.issue_title;
                                    if (asset.issue_priority > 0)
                                        AssetIssueMapper.priority = asset.issue_priority;
                                    AssetIssueMapper.created_at = DateTime.UtcNow;
                                    AssetIssueMapper.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                    var totalIssues = _UoW.WorkOrderRepository.GetTotalNumberOfIssues(
                                        Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id));
                                    var siteCode = _UoW.WorkOrderRepository.GetSiteCodeById(
                                        Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id));

                                    AssetIssueMapper.issue_number = siteCode + " Issue-" + (++totalIssues);

                                    if (wo_line_issues.is_issue_linked_for_fix && !String.IsNullOrEmpty(wo_line_issues.pm_issue_identity_key))// issue is from pm and is_issue_linked_for_fix is true then set issue status as completed 
                                    {
                                        AssetIssueMapper.issue_status = (int)Status.Completed;
                                        wo_line_issues.issue_status = (int)Status.Completed;
                                    }

                                    if (!wo_line_issues.is_issue_linked_for_fix) // if is_issue_linked_for_fix is true then resolve issue 
                                    {
                                        AssetIssueMapper.wo_id = null;
                                        AssetIssueMapper.asset_form_id = null;
                                        AssetIssueMapper.woonboardingassets_id = null;
                                    }
                                    if (asset.WOOnboardingAssetsImagesMapping != null && asset.WOOnboardingAssetsImagesMapping.Count > 0)
                                    {
                                        foreach (var img in asset.WOOnboardingAssetsImagesMapping)
                                        {

                                            AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                                            AssetIssueImagesMapping.asset_issue_id = AssetIssueMapper.asset_issue_id;
                                            AssetIssueImagesMapping.site_id = AssetIssueMapper.site_id.Value;
                                            AssetIssueImagesMapping.image_file_name = img.asset_photo;
                                            AssetIssueImagesMapping.image_thumbnail_file_name = img.asset_thumbnail_photo;
                                            AssetIssueImagesMapping.image_duration_type_id = (int)IssueImageDuration.before;
                                            AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                                            AssetIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                            AssetIssueMapper.AssetIssueImagesMapping.Add(AssetIssueImagesMapping);

                                            // copy image from conduit-dev-assetimages to conduit-dev-issuephotos
                                            try
                                            {
                                                s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], AssetIssueImagesMapping.image_file_name);
                                                s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], AssetIssueImagesMapping.image_thumbnail_file_name);
                                            }
                                            catch (Exception ex)
                                            {

                                            }
                                        }
                                    }
                                    var insert_asset_Issues = await _UoW.BaseGenericRepository<AssetIssue>().Insert(AssetIssueMapper);

                                    if (wo_line_issues.is_issue_linked_for_fix) // if issue is linkd for fix then mark as complete
                                        wo_line_issues.issue_status = (int)Status.Completed;
                                    else // if issue is not link for fix then turn issue status as open bakc
                                        wo_line_issues.issue_status = (int)Status.open;

                                    // if temp issue is not resolved then update asset's condition based on issue 
                                    if (AssetIssueMapper.issue_status != (int)Status.Completed)
                                    {
                                        if (AssetIssueMapper.asset_id != null)
                                        {
                                            // get assset and update operating condition
                                            var get_asset = _UoW.WorkOrderRepository.GetAssetbyIDForCondition(AssetIssueMapper.asset_id.Value);
                                            if (wo_line_issues.issue_type == (int)WOLine_Temp_Issue_Type.Replace)
                                            {
                                                get_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Replacement_Needed;
                                            }
                                            else
                                            {
                                                get_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Repair_Needed;
                                            }
                                        }
                                    }
                                }
                            }


                        }


                        // check if inspection type is replace then insert in AssetReplacementMapping
                        if (asset.inspection_type == (int)MWO_inspection_wo_type.Replace)
                        {
                            if (asset.replacement_resolution == (int)MWO_inspection_replacement_resolution.Replacement_completed_successfully) // if replacement success then change asset condition
                            {
                                AssetReplacementMapping AssetReplacementMapping = new AssetReplacementMapping();

                                if (asset.TempAsset != null && (asset.TempAsset.asset_id != null || asset.TempAsset.new_created_asset_id != null))
                                {
                                    if (asset.TempAsset.asset_id != null)
                                        AssetReplacementMapping.asset_id = asset.TempAsset.asset_id.Value;
                                    else
                                        AssetReplacementMapping.asset_id = asset.TempAsset.new_created_asset_id.Value;

                                    if (asset.is_replaced_asset_id_is_main)
                                    {
                                        AssetReplacementMapping.replaced_asset_id = asset.replaced_asset_id != null ? asset.replaced_asset_id.Value : Guid.Empty;
                                    }
                                    else
                                    {
                                        var obasset = _UoW.WorkOrderRepository.GetOBWOAssetDetailsByIdForMWO(asset.woonboardingassets_id);
                                        AssetReplacementMapping.replaced_asset_id = (obasset != null && obasset.asset_id != null) ? obasset.asset_id.Value : Guid.Empty;
                                    }

                                    AssetReplacementMapping.created_at = DateTime.UtcNow;
                                    AssetReplacementMapping.modified_at = DateTime.UtcNow;
                                    AssetReplacementMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                    AssetReplacementMapping.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                    AssetReplacementMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                                    var insert_replacments = await _UoW.BaseGenericRepository<AssetReplacementMapping>().Insert(AssetReplacementMapping);
                                    _UoW.SaveChanges();
                                }

                            }
                        }

                    }

                    // For Updating AssetPMs Due_Date and Due_In based on Asset cricality condition
                   
                    var get_temp_assets = _UoW.WorkOrderRepository.GetAllTempAssetsByWOId(get_wo.wo_id);

                    foreach(var this_asset in get_temp_assets)
                    {
                        if(this_asset.asset_id != null || this_asset.new_created_asset_id != null)
                        {
                            await assetPMService.UpdateDueDateDueInDueFlagForAssetPMsByAssetId(this_asset.asset_id != null ? this_asset.asset_id.Value : this_asset.new_created_asset_id.Value);
                        }
                    }

                    //update estimation time of pms 
                    foreach (var this_asset in get_temp_assets)
                    {
                        try
                        {
                            if(this_asset.SitewalkthroughTempPmEstimation!=null && this_asset.SitewalkthroughTempPmEstimation.Count > 0)
                            {
                                var get_assetpms = _UoW.WorkOrderRepository.GetAssetpmsbyAssetId(this_asset.asset_id != null ? this_asset.asset_id.Value : this_asset.new_created_asset_id.Value);
                                foreach (var assetpm in get_assetpms)
                                {
                                    var get_sitewalkthroughpm = this_asset.SitewalkthroughTempPmEstimation.Where(x => x.pm_id == assetpm.pm_id).FirstOrDefault();
                                    if (get_sitewalkthroughpm != null)
                                    {
                                        assetpm.estimation_time = get_sitewalkthroughpm.estimation_time;
                                    }
                                    await _UoW.BaseGenericRepository<AssetPMs>().Update(assetpm);
                                    _UoW.SaveChanges();
                                }
                            }
                        }
                        catch (Exception ex)
                        {

                        }                        
                    }

                    get_wo.status = (int)Status.Completed;
                    get_wo.modified_at = DateTime.UtcNow;
                    get_wo.completed_date = DateTime.UtcNow;
                    get_wo.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                    get_wo.complete_wo_thread_status = (int)CompleteWOThreadStatus.Completed;

                    var update_wo = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);
                    _UoW.SaveChanges();

                    // Send Notifications to all Back-Office Users of that Site
                    var get_ref_wo_id = new List<string> { get_wo.wo_id.ToString() };
                    await notificationService.SendNotificationGenericNewFlow((int)NotificationType_Version_2.WorkOrder_is_Completed_With_Issue_Created, get_ref_wo_id, null);

                    ///  update Issue and asset condition based on issue
                    var get_wo_lines = _UoW.WorkOrderRepository.GetWOObWOlineIds(get_wo.wo_id);

                    var get_asset_issue_list = _UoW.WorkOrderRepository.GetAssetIssuebyOBWOline(get_wo_lines);
                    if (get_asset_issue_list.Count > 0)
                    {
                        foreach (var get_asset_issue in get_asset_issue_list)
                        {
                            // update Issue condition based on WO line 
                            await UpdateIssueStatusBasedonWOline(get_asset_issue.asset_issue_id);
                            // update asset condition based on issue condition 
                            await ChangeAssetConditionBasedOnIssue(get_asset_issue.asset_issue_id);
                            // update after photos if issue is resolved
                            if (get_asset_issue.issue_status == (int)Status.Completed)
                            {
                                // get woline for after photos 
                                if (get_asset_issue.WOOnboardingAssets != null && get_asset_issue.WOOnboardingAssets.WOOnboardingAssetsImagesMapping != null 
                                    && get_asset_issue.WOOnboardingAssets.WOOnboardingAssetsImagesMapping.Count > 0 
                                    &&  get_asset_issue.WOOnboardingAssets.inspection_type != (int)MWO_inspection_wo_type.OnBoarding)
                                {
                                    var after_photo_list = get_asset_issue.WOOnboardingAssets.WOOnboardingAssetsImagesMapping.Where(x => x.image_duration_type_id == (int)IssueImageDuration.after && !x.is_deleted).ToList();
                                    if (after_photo_list.Count > 0) // add after photos in issue
                                    {
                                        foreach (var after_photo in after_photo_list)
                                        {
                                            AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                                            AssetIssueImagesMapping.asset_issue_id = get_asset_issue.asset_issue_id;
                                            AssetIssueImagesMapping.site_id = get_asset_issue.site_id.Value;
                                            AssetIssueImagesMapping.image_file_name = after_photo.asset_photo;
                                            AssetIssueImagesMapping.image_thumbnail_file_name = after_photo.asset_thumbnail_photo;
                                            AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                                            AssetIssueImagesMapping.image_duration_type_id = (int)IssueImageDuration.after;
                                            AssetIssueImagesMapping.is_deleted = false;
                                            AssetIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                            var insert_photo = await _UoW.BaseGenericRepository<AssetIssueImagesMapping>().Insert(AssetIssueImagesMapping);

                                            try
                                            {
                                                // copy image from Issue bucket to conduit-dev-assetimages
                                                s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], after_photo.asset_photo);
                                                s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], after_photo.asset_thumbnail_photo);
                                            }
                                            catch (Exception ex)
                                            {

                                            }
                                        }
                                    }
                                    // Add/Update before photo list and description
                                    var db_get_before_images = get_asset_issue.AssetIssueImagesMapping.Where(x => !x.is_deleted && x.image_duration_type_id == (int)IssueImageDuration.before).ToList();
                                    var db_get_before_images_name_list = db_get_before_images.Select(x => x.image_file_name);
                                    var requested_before_photo_list = get_asset_issue.WOOnboardingAssets.WOOnboardingAssetsImagesMapping.Where(x =>!x.is_deleted && x.image_duration_type_id == (int)IssueImageDuration.before).ToList();
                                    var requested_before_photo_name_list = requested_before_photo_list.Select(x => x.asset_photo).ToList();

                                    // get new before image and insert 
                                    var new_before_images = requested_before_photo_name_list.Where(x => !db_get_before_images_name_list.Contains(x)).ToList();
                                    var new_images = requested_before_photo_list.Where(x => new_before_images.Contains(x.asset_photo)).ToList();
                                    foreach (var before_photo in new_images)
                                    {
                                        AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                                        AssetIssueImagesMapping.asset_issue_id = get_asset_issue.asset_issue_id;
                                        AssetIssueImagesMapping.site_id = get_asset_issue.site_id.Value;
                                        AssetIssueImagesMapping.image_file_name = before_photo.asset_photo;
                                        AssetIssueImagesMapping.image_thumbnail_file_name = before_photo.asset_thumbnail_photo;
                                        AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                                        AssetIssueImagesMapping.image_duration_type_id = (int)IssueImageDuration.before;
                                        AssetIssueImagesMapping.is_deleted = false;

                                        var insert_photo = await _UoW.BaseGenericRepository<AssetIssueImagesMapping>().Insert(AssetIssueImagesMapping);

                                        try
                                        {
                                            // copy image from Issue bucket to conduit-dev-assetimages
                                            s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], before_photo.asset_photo);
                                            s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], before_photo.asset_thumbnail_photo);
                                        }
                                        catch (Exception ex)
                                        {

                                        }
                                    }


                                }

                                // update description i issue
                                if (get_asset_issue.WOOnboardingAssets != null && get_asset_issue.WOOnboardingAssets.inspection_type != (int)MWO_inspection_wo_type.OnBoarding)
                                {
                                    get_asset_issue.issue_description = get_asset_issue.WOOnboardingAssets.problem_description;
                                    get_asset_issue.priority = get_asset_issue.WOOnboardingAssets.issue_priority;
                                    await _UoW.BaseGenericRepository<AssetIssue>().Update(get_asset_issue);
                                }

                            }
                        }
                    }


                    _UoW.SaveChanges();
                }
                else
                {
                    response = (int)ResponseStatusNumber.Error;
                    get_wo.complete_wo_thread_status = (int)CompleteWOThreadStatus.Failed;
                    var update_wo = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("Exception in DoSomethingAsync " + ex.Message);
                response = (int)ResponseStatusNumber.Error;
                get_wo.complete_wo_thread_status = (int)CompleteWOThreadStatus.Failed;
                var update_wo = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);

            }
            return response;
        }
        public async Task<int> createmainissuefromtemp(WOOnboardingAssets asset , Asset Asset , WorkOrders get_wo)
        {
            if (asset.WOLineIssue != null && asset.WOLineIssue.Count > 0)
            {
                foreach (var wo_line_issues in asset.WOLineIssue.Where(x => !x.is_deleted).ToList())
                {
                    var AssetIssueMapper = _mapper.Map<AssetIssue>(wo_line_issues);
                    AssetIssueMapper.asset_id = Asset.asset_id;
                    AssetIssueMapper.issue_status = (int)Status.open;
                    AssetIssueMapper.created_at = DateTime.UtcNow;
                    AssetIssueMapper.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                    var totalIssues = _UoW.WorkOrderRepository.GetTotalNumberOfIssues(
                        Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id));
                    var siteCode = _UoW.WorkOrderRepository.GetSiteCodeById(
                        Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id));

                    AssetIssueMapper.issue_number = siteCode + " Issue-" + (++totalIssues);

                    if (wo_line_issues.is_issue_linked_for_fix && !String.IsNullOrEmpty(wo_line_issues.pm_issue_identity_key))// issue is from pm and is_issue_linked_for_fix is true then set issue status as completed 
                    {
                        AssetIssueMapper.issue_status = (int)Status.Completed;
                        wo_line_issues.issue_status = (int)Status.Completed;
                    }

                    if (!wo_line_issues.is_issue_linked_for_fix) // if is_issue_linked_for_fix is true then resolve issue 
                    {
                        AssetIssueMapper.wo_id = null;
                        AssetIssueMapper.asset_form_id = null;
                        AssetIssueMapper.woonboardingassets_id = null;
                    }

                    /// add before photo from violation images in issue 
                    /// 
                    if (asset.WOOnboardingAssetsImagesMapping != null && asset.WOOnboardingAssetsImagesMapping.Count > 0)
                    {
                        // add NEC images if issue is NEC violation
                        if (AssetIssueMapper.issue_caused_id == (int)WOLine_Temp_Issue_Caused.NEC_Violation)
                        {
                            var db_images = asset.WOOnboardingAssetsImagesMapping.ToList().Where(x => x.asset_photo_type == (int)AssetPhotoType.NEC_Violation_Photo && !x.is_deleted).ToList();
                            if (db_images != null && db_images.Count > 0)
                            {
                                AssetIssueMapper.AssetIssueImagesMapping = new List<AssetIssueImagesMapping>();
                                foreach (var img in db_images)
                                {
                                    AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                                    AssetIssueImagesMapping.asset_issue_id = AssetIssueMapper.asset_issue_id;
                                    AssetIssueImagesMapping.site_id = AssetIssueMapper.site_id.Value;
                                    AssetIssueImagesMapping.image_file_name = img.asset_photo;
                                    AssetIssueImagesMapping.image_thumbnail_file_name = img.asset_thumbnail_photo;
                                    AssetIssueImagesMapping.image_duration_type_id = (int)IssueImageDuration.before;
                                    AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                                    AssetIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                    AssetIssueMapper.AssetIssueImagesMapping.Add(AssetIssueImagesMapping);

                                    // copy image from conduit-dev-assetimages to conduit-dev-issuephotos
                                    try
                                    {
                                        s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], AssetIssueImagesMapping.image_file_name);
                                        s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], AssetIssueImagesMapping.image_thumbnail_file_name);
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                }
                            }
                        }
                        else if (AssetIssueMapper.issue_caused_id == (int)WOLine_Temp_Issue_Caused.OSha_Violation) // add osha images if issue is osha violation
                        {
                            var db_images = asset.WOOnboardingAssetsImagesMapping.ToList().Where(x => x.asset_photo_type == (int)AssetPhotoType.OSHA_Violation_Photo && !x.is_deleted).ToList();
                            if (db_images != null && db_images.Count > 0)
                            {
                                AssetIssueMapper.AssetIssueImagesMapping = new List<AssetIssueImagesMapping>();
                                foreach (var img in db_images)
                                {
                                    AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                                    AssetIssueImagesMapping.asset_issue_id = AssetIssueMapper.asset_issue_id;
                                    AssetIssueImagesMapping.site_id = AssetIssueMapper.site_id.Value;
                                    AssetIssueImagesMapping.image_file_name = img.asset_photo;
                                    AssetIssueImagesMapping.image_thumbnail_file_name = img.asset_thumbnail_photo;
                                    AssetIssueImagesMapping.image_duration_type_id = (int)IssueImageDuration.before;
                                    AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                                    AssetIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                    AssetIssueMapper.AssetIssueImagesMapping.Add(AssetIssueImagesMapping);

                                    // copy image from conduit-dev-assetimages to conduit-dev-issuephotos
                                    try
                                    {
                                        s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], AssetIssueImagesMapping.image_file_name);
                                        s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], AssetIssueImagesMapping.image_thumbnail_file_name);
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                }
                            }
                        }
                        else if (AssetIssueMapper.issue_caused_id == (int)WOLine_Temp_Issue_Caused.Thermal_Anamoly_Violation) // add osha images if issue is osha violation
                        {
                            var db_images = asset.WOOnboardingAssetsImagesMapping.ToList().Where(x => x.asset_photo_type == (int)AssetPhotoType.Thermal_Anomly_Photo && !x.is_deleted).ToList();
                            if (db_images != null && db_images.Count > 0)
                            {
                                AssetIssueMapper.AssetIssueImagesMapping = new List<AssetIssueImagesMapping>();
                                foreach (var img in db_images)
                                {
                                    AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                                    AssetIssueImagesMapping.asset_issue_id = AssetIssueMapper.asset_issue_id;
                                    AssetIssueImagesMapping.site_id = AssetIssueMapper.site_id.Value;
                                    AssetIssueImagesMapping.image_file_name = img.asset_photo;
                                    AssetIssueImagesMapping.image_thumbnail_file_name = img.asset_thumbnail_photo;
                                    AssetIssueImagesMapping.image_duration_type_id = (int)IssueImageDuration.before;
                                    AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                                    AssetIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                    AssetIssueMapper.AssetIssueImagesMapping.Add(AssetIssueImagesMapping);

                                    // copy image from conduit-dev-assetimages to conduit-dev-issuephotos
                                    try
                                    {
                                        s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], AssetIssueImagesMapping.image_file_name);
                                        s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], AssetIssueImagesMapping.image_thumbnail_file_name);
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                }
                            }
                        }
                    }
                    // Add before photo from IR/Visual Image section

                    if (asset.IRWOImagesLabelMapping != null && asset.IRWOImagesLabelMapping.Count > 0)
                    {
                        if (AssetIssueMapper.AssetIssueImagesMapping != null && AssetIssueMapper.AssetIssueImagesMapping.Count > 0) { }
                        else { AssetIssueMapper.AssetIssueImagesMapping = new List<AssetIssueImagesMapping>(); }
                        var db_img_labelmapping = asset.IRWOImagesLabelMapping.Where(x => !x.is_deleted).ToList();
                        foreach (var img in db_img_labelmapping)    // add visual photo to all type of issue(thermal/nec/osha)
                        {
                            if (!String.IsNullOrEmpty(img.visual_image_label))
                            {
                                AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                                AssetIssueImagesMapping.asset_issue_id = AssetIssueMapper.asset_issue_id;
                                AssetIssueImagesMapping.site_id = AssetIssueMapper.site_id.Value;
                                AssetIssueImagesMapping.image_file_name = img.visual_image_label;
                                //AssetIssueImagesMapping.image_thumbnail_file_name = img.asset_thumbnail_photo;
                                AssetIssueImagesMapping.image_duration_type_id = (int)IssueImageDuration.before;
                                AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                                AssetIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                AssetIssueMapper.AssetIssueImagesMapping.Add(AssetIssueImagesMapping);

                                // copy image from conduit-dev-assetimages to conduit-dev-issuephotos
                                try
                                {
                                    s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["IR_photos_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], (img.s3_image_folder_name + "/" + AssetIssueImagesMapping.image_file_name));
                                }
                                catch (Exception ex)
                                {

                                }
                            }

                        }

                        if (AssetIssueMapper.issue_caused_id == (int)WOLine_Temp_Issue_Caused.Thermal_Anamoly_Violation) // if issue caused is by thermal then attach IR Photos
                        {
                            foreach (var img in db_img_labelmapping)
                            {
                                if (!String.IsNullOrEmpty(img.ir_image_label))
                                {
                                    AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                                    AssetIssueImagesMapping.asset_issue_id = AssetIssueMapper.asset_issue_id;
                                    AssetIssueImagesMapping.site_id = AssetIssueMapper.site_id.Value;
                                    AssetIssueImagesMapping.image_file_name = img.ir_image_label;
                                    //AssetIssueImagesMapping.image_thumbnail_file_name = img.asset_thumbnail_photo;
                                    AssetIssueImagesMapping.image_duration_type_id = (int)IssueImageDuration.before;
                                    AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                                    AssetIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                    AssetIssueMapper.AssetIssueImagesMapping.Add(AssetIssueImagesMapping);

                                    // copy image from conduit-dev-assetimages to conduit-dev-issuephotos
                                    try
                                    {
                                        s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["IR_photos_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], (img.s3_image_folder_name + "/" + AssetIssueImagesMapping.image_file_name));
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                }

                            }
                        }
                    }

                    try
                    {
                        // add first coomment in Issue
                        AssetIssueMapper.AssetIssueComments = new List<AssetIssueComments>();
                        AssetIssueComments AssetIssueComments = new AssetIssueComments();
                        AssetIssueComments.asset_issue_id = AssetIssueMapper.asset_issue_id;
                        AssetIssueComments.comment = asset.other_notes;
                        AssetIssueComments.comment_user_id = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                        AssetIssueComments.comment_user_role_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.role_id);
                        AssetIssueComments.created_at = DateTime.UtcNow;
                        AssetIssueComments.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                        AssetIssueMapper.AssetIssueComments.Add(AssetIssueComments);
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError("Exception in inside CreateOBWOAsset when adding AssetIssueComments For Asset " + asset.asset_name + ex.Message);
                    }

                    try
                    {
                        AssetActivityLogs assetActivityLogs = new AssetActivityLogs();
                        assetActivityLogs.created_at = DateTime.UtcNow;
                        assetActivityLogs.activity_header = "Issue - " + AssetIssueMapper.issue_title + " is Created for Asset - " + Asset.name + " in Workorder - " + get_wo.manual_wo_number;
                        assetActivityLogs.activity_message = "Issue - " + AssetIssueMapper.issue_title + " is Created for Asset - " + Asset.name + " in Workorder - " + get_wo.manual_wo_number;
                        assetActivityLogs.activity_type = (int)ActivityTypes.NewIssueCreated;
                        assetActivityLogs.status = (int)Status.Active;
                        assetActivityLogs.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        assetActivityLogs.asset_id = Asset.asset_id;

                        var insert_activity_log = await _UoW.BaseGenericRepository<AssetActivityLogs>().Insert(assetActivityLogs);
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError("Exception in inside CreateOBWOAsset when adding asset activity For Asset " + asset.asset_name + ex.Message);
                    }

                    var insert_asset_Issues = await _UoW.BaseGenericRepository<AssetIssue>().Insert(AssetIssueMapper);

                    // update temp issue 
                    var update_temp_issue = await _UoW.BaseGenericRepository<WOLineIssue>().Update(wo_line_issues);
                }
                asset.WOLineIssue.ToList().Where(x => !x.is_deleted).ToList().ForEach(x => x.is_main_issue_created = true); // mark is_main_issue_created for temp table
                asset.WOLineIssue.ToList().Where(x => !x.is_deleted).ToList().ForEach(x => x.asset_id = Asset.asset_id); // insert asset id in table

                // update asset condition if there is any issue then keep condition as repair needed else it will be based on dropdown
                if (asset.WOLineIssue.Where(x => !x.is_deleted).Count() > 0)
                {
                    Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Repair_Needed;
                }
                else
                {
                    if (asset.asset_operating_condition_state != null)
                    {
                        Asset.asset_operating_condition_state = asset.asset_operating_condition_state;
                    }

                }
            }
            await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(asset);
            _UoW.SaveChanges();

            return 1;
        }
        public async Task<int> CreateOBWOAsset(WOOnboardingAssets asset, int last_internal_id, List<InspectionTemplateAssetClass> get_all_assetclass_fromDB, WorkOrders get_wo)
        {
            int success = (int)ResponseStatusNumber.Error;
            try
            {
                using (var _dbtransaction = _UoW.BeginTransaction())
                {
                    try
                    {
                        Asset Asset = null;
                        if (asset.asset_id != null)
                        {
                            Asset = _UoW.WorkOrderRepository.GetAssetByID(asset.asset_id.Value);
                        }
                        else
                        {
                            Asset = new Asset();
                        }

                        #region keys which will update for existing and new asset if wotype is OB/IR
                        if (asset.inspection_type == (int)MWO_inspection_wo_type.OnBoarding) //, we are using inspection_type = 1 for OB/IR
                        {

                            Asset.notes = asset.back_office_note;
                            Asset.name = asset.asset_name;
                            Asset.field_notes = asset.field_note;
                            Asset.last_inspected_formio_date = DateTime.UtcNow;
                            Asset.criticality_index_type = asset.criticality_index_type;
                            Asset.condition_index_type = asset.condition_index_type;
                            Asset.commisiion_date = asset.commisiion_date;
                            Asset.thermal_classification_id = asset.thermal_classification_id;
                            Asset.asset_hierarchy_id = (int)AssetHierarchyType.By_level;
                            if (!String.IsNullOrEmpty(asset.form_nameplate_info))
                            {
                                Asset.form_retrived_nameplate_info = asset.form_nameplate_info;
                            }
                            Asset.code_compliance = (int)code_compliance.compliant; //default will be compliance
                            Asset.asset_placement = asset.location;
                            if (asset.component_level_type_id != null)
                            {
                                Asset.component_level_type_id = asset.component_level_type_id.Value;
                            }
                            if (asset.TempAsset != null)
                            {
                                Asset.maintenance_index_type = asset.TempAsset.maintenance_index_type;
                                Asset.panel_schedule = asset.TempAsset.panel_schedule;
                                Asset.arc_flash_label_valid = asset.TempAsset.arc_flash_label_valid;
                            }
                        }
                        //if woline is not for existing then add asset
                        if (!asset.is_wo_line_for_exisiting_asset)
                        {
                            Asset.name = asset.asset_name;
                            Asset.last_inspected_formio_date = DateTime.UtcNow;
                        }
                        #endregion keys which will update for existing and new asset

                        if (asset.asset_id == null) /// if Asset was created new then fill all below details 
                        {
                            if (get_all_assetclass_fromDB.Where(x => x.asset_class_code == asset.asset_class_code).FirstOrDefault() != null)
                            {
                                Asset.inspectiontemplate_asset_class_id = get_all_assetclass_fromDB.Where(x => x.asset_class_code == asset.asset_class_code).FirstOrDefault().inspectiontemplate_asset_class_id;
                            }
                            Asset.company_id = UpdatedGenericRequestmodel.CurrentUser.company_id;
                            Asset.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            Asset.site_location = asset.Sites.location;
                            Asset.status = (int)Status.AssetActive;
                            Asset.created_at = DateTime.UtcNow;
                            
                            // new requiremnt now QR can be blank and user can update QR of existing asset.
                            /*if (!String.IsNullOrEmpty(asset.QR_code)) /// if QR code is not null then QR code will be asset's internal id
                            {
                                Asset.internal_asset_id = asset.QR_code;
                                Asset.QR_code = asset.QR_code;
                            }
                            else // if QR code is empty then asset's unique internal id will be its QR code
                            {
                                int asset_count = _UoW.WorkOrderRepository.GetAssetscountBySite(get_wo.site_id.ToString());
                                Asset.internal_asset_id = asset.Sites.site_code + (asset_count + 1).ToString();
                                Asset.QR_code = asset.Sites.site_code + (asset_count + 1).ToString();
                                asset.QR_code = Asset.QR_code;
                            }*/
                        }
                        Asset.QR_code = asset.QR_code;
                        if (!String.IsNullOrEmpty(asset.QR_code))
                        {
                            Asset.internal_asset_id = asset.QR_code;
                        }
                        #region insert building data 
                        FormIOBuildings FormIOBuildings = null;
                        FormIOFloors FormIOFloors = null;
                        FormIORooms FormIORooms = null;
                        FormIOSections FormIOSections = null;

                        if (asset.WOOBAssetTempFormIOBuildingMapping != null) // override temp location details from Temp table
                        {
                            if (asset.WOOBAssetTempFormIOBuildingMapping.TempFormIOBuildings != null)
                            {
                                asset.building = asset.WOOBAssetTempFormIOBuildingMapping.TempFormIOBuildings.temp_formio_building_name;
                            }
                            if (asset.WOOBAssetTempFormIOBuildingMapping.TempFormIOFloors != null)
                            {
                                asset.floor = asset.WOOBAssetTempFormIOBuildingMapping.TempFormIOFloors.temp_formio_floor_name;
                            }
                            if (asset.WOOBAssetTempFormIOBuildingMapping.TempFormIORooms != null)
                            {
                                asset.room = asset.WOOBAssetTempFormIOBuildingMapping.TempFormIORooms.temp_formio_room_name;
                            }
                            if (asset.WOOBAssetTempFormIOBuildingMapping.TempFormIOSections != null)
                            {
                                asset.section = asset.WOOBAssetTempFormIOBuildingMapping.TempFormIOSections.temp_formio_section_name;
                            }
                        }

                        if (asset.TempAsset != null)
                        {
                            if (asset.TempAsset.TempMasterBuilding != null)
                                asset.building = asset.TempAsset.TempMasterBuilding.temp_master_building_name;
                            if (asset.TempAsset.TempMasterFloor != null)
                                asset.floor = asset.TempAsset.TempMasterFloor.temp_master_floor_name;
                            if (asset.TempAsset.TempMasterRoom != null)
                                asset.room = asset.TempAsset.TempMasterRoom.temp_master_room_name;

                            asset.section = asset.TempAsset.temp_master_section;
                        }

                        if (String.IsNullOrEmpty(asset.building))
                        {
                            asset.building = "Default";
                        }
                        if (String.IsNullOrEmpty(asset.floor))
                        {
                            asset.floor = "Default";
                        }
                        if (String.IsNullOrEmpty(asset.room))
                        {
                            asset.room = "Default";
                        }
                        if (String.IsNullOrEmpty(asset.section))
                        {
                            asset.section = "Default";
                        }
                        FormIOBuildings = _UoW.WorkOrderRepository.GetFormIOBuildingByName(asset.building);
                        if (FormIOBuildings == null)
                        {
                            FormIOBuildings = new FormIOBuildings();
                            FormIOBuildings.formio_building_name = asset.building;
                            FormIOBuildings.created_at = DateTime.UtcNow;
                            FormIOBuildings.site_id = get_wo.site_id;
                            FormIOBuildings.company_id = get_wo.Sites.company_id;

                            var insertbuilding = await _UoW.BaseGenericRepository<FormIOBuildings>().Insert(FormIOBuildings);
                            _UoW.SaveChanges();
                        }

                        FormIOFloors = _UoW.WorkOrderRepository.GetFormIOFloorByName(asset.floor, FormIOBuildings.formiobuilding_id);
                        if (FormIOFloors == null)
                        {
                            FormIOFloors = new FormIOFloors();
                            FormIOFloors.formio_floor_name = asset.floor;
                            FormIOFloors.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                            FormIOFloors.created_at = DateTime.UtcNow;
                            FormIOFloors.site_id = get_wo.site_id;
                            FormIOFloors.company_id = get_wo.Sites.company_id;

                            var insertfloor = await _UoW.BaseGenericRepository<FormIOFloors>().Insert(FormIOFloors);
                            _UoW.SaveChanges();
                        }

                        FormIORooms = _UoW.WorkOrderRepository.GetFormIORoomByName(asset.room, FormIOFloors.formiofloor_id);
                        if (FormIORooms == null)
                        {
                            FormIORooms = new FormIORooms();
                            FormIORooms.formio_room_name = asset.room;
                            FormIORooms.formiofloor_id = FormIOFloors.formiofloor_id;
                            FormIORooms.created_at = DateTime.UtcNow;
                            FormIORooms.site_id = get_wo.site_id;
                            FormIORooms.company_id = get_wo.Sites.company_id;

                            var insertroom = await _UoW.BaseGenericRepository<FormIORooms>().Insert(FormIORooms);
                            _UoW.SaveChanges();
                        }

                        FormIOSections = _UoW.WorkOrderRepository.GetFormIOSectionByName(asset.section, FormIORooms.formioroom_id);
                        if (FormIOSections == null)
                        {
                            FormIOSections = new FormIOSections();
                            FormIOSections.formio_section_name = asset.section;
                            FormIOSections.formioroom_id = FormIORooms.formioroom_id;
                            FormIOSections.created_at = DateTime.UtcNow;
                            FormIOSections.site_id = get_wo.site_id;
                            FormIOSections.company_id = get_wo.Sites.company_id;

                            var insertroom = await _UoW.BaseGenericRepository<FormIOSections>().Insert(FormIOSections);
                            _UoW.SaveChanges();
                        }

                        #endregion insert building data

                        if (asset.asset_id == null) // if asset is for new create asset then insert asset building mapping
                        {
                            var insert_asset = await _UoW.BaseGenericRepository<Asset>().Insert(Asset);
                            _UoW.SaveChanges();

                            AssetFormIOBuildingMappings AssetFormIOBuildingMappings = new AssetFormIOBuildingMappings();
                            AssetFormIOBuildingMappings.asset_id = Asset.asset_id;
                            if (FormIOBuildings != null)
                                AssetFormIOBuildingMappings.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                            if (FormIOFloors != null)
                                AssetFormIOBuildingMappings.formiofloor_id = FormIOFloors.formiofloor_id;
                            if (FormIORooms != null)
                                AssetFormIOBuildingMappings.formioroom_id = FormIORooms.formioroom_id;
                            if (FormIOSections != null)
                                AssetFormIOBuildingMappings.formiosection_id = FormIOSections.formiosection_id;

                            var insert_asset_building_mapping = _UoW.BaseGenericRepository<AssetFormIOBuildingMappings>().Insert(AssetFormIOBuildingMappings);

                            _UoW.SaveChanges();

                        }
                        else
                        {

                            /// if inspection type is OB/IR then only update building data for exising asset
                            /// 
                            if (asset.inspection_type == (int)MWO_inspection_wo_type.OnBoarding)//, we are using inspection_type = 1 for OB/IR
                            {
                                if (Asset.AssetFormIOBuildingMappings != null)
                                {
                                    if (FormIOBuildings != null)
                                        Asset.AssetFormIOBuildingMappings.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                                    if (FormIOFloors != null)
                                        Asset.AssetFormIOBuildingMappings.formiofloor_id = FormIOFloors.formiofloor_id;
                                    if (FormIORooms != null)
                                        Asset.AssetFormIOBuildingMappings.formioroom_id = FormIORooms.formioroom_id;
                                    if (FormIOSections != null)
                                        Asset.AssetFormIOBuildingMappings.formiosection_id = FormIOSections.formiosection_id;
                                }
                                else
                                {
                                    AssetFormIOBuildingMappings AssetFormIOBuildingMappings = new AssetFormIOBuildingMappings();
                                    AssetFormIOBuildingMappings.asset_id = Asset.asset_id;
                                    if (FormIOBuildings != null)
                                        AssetFormIOBuildingMappings.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                                    if (FormIOFloors != null)
                                        AssetFormIOBuildingMappings.formiofloor_id = FormIOFloors.formiofloor_id;
                                    if (FormIORooms != null)
                                        AssetFormIOBuildingMappings.formioroom_id = FormIORooms.formioroom_id;
                                    if (FormIOSections != null)
                                        AssetFormIOBuildingMappings.formiosection_id = FormIOSections.formiosection_id;

                                    var insert_asset_building_mapping = _UoW.BaseGenericRepository<AssetFormIOBuildingMappings>().Insert(AssetFormIOBuildingMappings);
                                    _UoW.SaveChanges();
                                }
                            }
                            Asset.modified_at = DateTime.UtcNow;
                            var update_asset = await _UoW.BaseGenericRepository<Asset>().Update(Asset);
                        }
                        /// insert photo mapping to asset 
                        /// 
                        if (asset.WOOnboardingAssetsImagesMapping != null && asset.WOOnboardingAssetsImagesMapping.Count > 0)
                        {
                            var asset_images = asset.WOOnboardingAssetsImagesMapping.Where(x => !x.is_deleted).ToList();
                            if (asset_images.Count > 0)
                            {
                                foreach (var asset_image in asset_images)
                                {
                                    // check if requested asset os for existing and image is already available or not in asset 
                                    bool insert_images = true;
                                    if (asset.asset_id != null)
                                    {
                                        var assetimages = Asset.AssetProfileImages.Where(x => !x.is_deleted
                                                                                            && (x.asset_photo_type == (int)AssetPhotoType.Asset_Profile
                                                                                               || x.asset_photo_type == (int)AssetPhotoType.Nameplate_Photo)).ToList();

                                        var is_img_exist = assetimages.Where(x => x.asset_photo == asset_image.asset_photo && !x.is_deleted).FirstOrDefault();
                                        if (is_img_exist != null)
                                        {
                                            insert_images = false;
                                        }
                                    }

                                    if (insert_images)
                                    {
                                        AssetProfileImages AssetProfileImages = new AssetProfileImages();
                                        AssetProfileImages.asset_id = Asset.asset_id;
                                        AssetProfileImages.asset_photo = asset_image.asset_photo;
                                        AssetProfileImages.asset_thumbnail_photo = asset_image.asset_thumbnail_photo;
                                        AssetProfileImages.image_extracted_json = asset_image.image_extracted_json;
                                        AssetProfileImages.image_actual_json = asset_image.image_actual_json;
                                        AssetProfileImages.created_at = asset_image.created_at;
                                        AssetProfileImages.asset_photo_type = asset_image.asset_photo_type;
                                        AssetProfileImages.is_deleted = false;

                                        var insert_img = await _UoW.BaseGenericRepository<AssetProfileImages>().Insert(AssetProfileImages);
                                        _UoW.SaveChanges();
                                    }

                                }
                            }

                            if (asset.asset_id != null) // delete image from asset if image is deleted from WO
                            {
                                var deleted_asset_images = asset.WOOnboardingAssetsImagesMapping.Where(x => x.is_deleted).ToList();
                                var assetimages = Asset.AssetProfileImages.Where(x => !x.is_deleted
                                                                                           && (x.asset_photo_type == (int)AssetPhotoType.Asset_Profile
                                                                                              || x.asset_photo_type == (int)AssetPhotoType.Nameplate_Photo)).ToList();
                                foreach (var deleted_img in deleted_asset_images)
                                {
                                    if (asset.asset_id != null)
                                    {

                                        var is_img_exist = assetimages.Where(x => x.asset_photo == deleted_img.asset_photo && !x.is_deleted).FirstOrDefault();
                                        if (is_img_exist != null)
                                        {
                                            is_img_exist.is_deleted = true;
                                            var update = await _UoW.BaseGenericRepository<AssetProfileImages>().Update(is_img_exist);
                                        }
                                    }
                                }
                            }
                        }
                        /// add IR and Visual Img in asset 
                        if (asset.IRWOImagesLabelMapping != null && asset.IRWOImagesLabelMapping.Count > 0)
                        {
                            var asset_IR_images = asset.IRWOImagesLabelMapping.Where(x => !x.is_deleted).ToList();
                            if (asset_IR_images.Count > 0)
                            {
                                foreach (var asset_image in asset_IR_images)
                                {
                                    // check if requested asset os for existing and image is already available or not in asset 
                                    bool insert_images = true;
                                    if (asset.asset_id != null)
                                    {
                                        var IR_assetimages = Asset.AssetIRWOImagesLabelMapping.Where(x => !x.is_deleted).ToList();

                                        var is_img_exist = IR_assetimages.Where(x => x.ir_image_label == asset_image.ir_image_label && !x.is_deleted).FirstOrDefault();
                                        if (is_img_exist != null)
                                        {
                                            insert_images = false;
                                        }
                                    }

                                    if (insert_images)
                                    {
                                        AssetIRWOImagesLabelMapping AssetIRVisualImages = new AssetIRWOImagesLabelMapping();
                                        AssetIRVisualImages.ir_image_label = asset_image.ir_image_label;
                                        AssetIRVisualImages.visual_image_label = asset_image.visual_image_label;
                                        AssetIRVisualImages.created_at = DateTime.UtcNow;
                                        AssetIRVisualImages.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                        AssetIRVisualImages.is_deleted = false;
                                        AssetIRVisualImages.s3_image_folder_name = asset_image.s3_image_folder_name;
                                        AssetIRVisualImages.site_id = asset_image.site_id;
                                        AssetIRVisualImages.asset_id = Asset.asset_id;

                                        var insert_img = await _UoW.BaseGenericRepository<AssetIRWOImagesLabelMapping>().Insert(AssetIRVisualImages);
                                        _UoW.SaveChanges();
                                    }


                                    ///   delete image label if it gets deleted from obwo
                                    if (asset.asset_id != null) // delete image from asset if image is deleted from WO
                                    {
                                        var deleted_asset_images = asset.IRWOImagesLabelMapping.Where(x => x.is_deleted).ToList();
                                        var IR_assetimages = Asset.AssetIRWOImagesLabelMapping.Where(x => !x.is_deleted).ToList();

                                        foreach (var deleted_img in deleted_asset_images)
                                        {
                                            if (asset.asset_id != null)
                                            {

                                                var is_img_exist = IR_assetimages.Where(x => x.ir_image_label == deleted_img.ir_image_label && !x.is_deleted).FirstOrDefault();
                                                if (is_img_exist != null)
                                                {
                                                    is_img_exist.is_deleted = true;
                                                    var update_ir_img = await _UoW.BaseGenericRepository<AssetIRWOImagesLabelMapping>().Update(is_img_exist);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (!String.IsNullOrEmpty(asset.field_note)) /// add field note in asset notes
                        {
                            string form_comment = asset.field_note;

                            AssetNotes AssetNotes = new AssetNotes();
                            AssetNotes.asset_id = Asset.asset_id;
                            AssetNotes.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            AssetNotes.asset_note = form_comment;
                            AssetNotes.asset_note_added_by_userid = Asset.asset_id;
                            AssetNotes.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                            AssetNotes.created_at = DateTime.UtcNow;
                            AssetNotes.asset_note_added_by_userid = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                            AssetNotes.asset_form_id = null;
                            AssetNotes.woonboardingassets_id = asset.woonboardingassets_id;

                            var get_user = _UoW.AssetRepository.Getuserbyid(UpdatedGenericRequestmodel.CurrentUser.requested_by);
                            AssetNotes.asset_note_added_by_user = get_user.firstname + " " + get_user.lastname;

                            var insert_asset_notes = await _UoW.BaseGenericRepository<AssetNotes>().Insert(AssetNotes);
                            _UoW.SaveChanges();
                        }

                        if (!String.IsNullOrEmpty(asset.other_notes)) /// add other_notes  in asset notes
                        {
                            string form_comment = asset.other_notes;

                            AssetNotes AssetNotes = new AssetNotes();
                            AssetNotes.asset_id = Asset.asset_id;
                            AssetNotes.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            AssetNotes.asset_note = form_comment;
                            AssetNotes.asset_note_added_by_userid = Asset.asset_id;
                            AssetNotes.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                            AssetNotes.created_at = DateTime.UtcNow;
                            AssetNotes.asset_note_added_by_userid = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                            AssetNotes.asset_form_id = null;
                            AssetNotes.woonboardingassets_id = asset.woonboardingassets_id;

                            var get_user = _UoW.AssetRepository.Getuserbyid(UpdatedGenericRequestmodel.CurrentUser.requested_by);
                            AssetNotes.asset_note_added_by_user = get_user.firstname + " " + get_user.lastname;

                            var insert_asset_notes = await _UoW.BaseGenericRepository<AssetNotes>().Insert(AssetNotes);
                            _UoW.SaveChanges();
                        }
                        if (!String.IsNullOrEmpty(asset.back_office_note)) /// add backoffice notes  in asset notes
                        {
                            string form_comment = asset.back_office_note;

                            AssetNotes AssetNotes = new AssetNotes();
                            AssetNotes.asset_id = Asset.asset_id;
                            AssetNotes.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            AssetNotes.asset_note = form_comment;
                            AssetNotes.asset_note_added_by_userid = Asset.asset_id;
                            AssetNotes.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                            AssetNotes.created_at = DateTime.UtcNow;
                            AssetNotes.asset_note_added_by_userid = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                            AssetNotes.asset_form_id = null;
                            AssetNotes.woonboardingassets_id = asset.woonboardingassets_id;

                            var get_user = _UoW.AssetRepository.Getuserbyid(UpdatedGenericRequestmodel.CurrentUser.requested_by);
                            AssetNotes.asset_note_added_by_user = get_user.firstname + " " + get_user.lastname;

                            var insert_asset_notes = await _UoW.BaseGenericRepository<AssetNotes>().Insert(AssetNotes);
                            _UoW.SaveChanges();
                        }


                        //We moving this function out bcz of tobe replaced asset could be pending to be Added in Main Asset table
                        // check if inspection type is replace then insert in AssetReplacementMapping
                        /*
                        if (asset.inspection_type == (int)MWO_inspection_wo_type.Replace)
                        {
                            if (asset.replacement_resolution == (int)MWO_inspection_replacement_resolution.Replacement_completed_successfully) // if replacement success then change asset condition
                            {
                                AssetReplacementMapping AssetReplacementMapping = new AssetReplacementMapping();
                                AssetReplacementMapping.asset_id = Asset.asset_id;
                                
                                AssetReplacementMapping.replaced_asset_id = asset.replaced_asset_id != null ? asset.replaced_asset_id.Value : Guid.Empty;
                                AssetReplacementMapping.created_at = DateTime.UtcNow;
                                AssetReplacementMapping.modified_at = DateTime.UtcNow;
                                AssetReplacementMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                AssetReplacementMapping.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                AssetReplacementMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                                var insert_replacments = await _UoW.BaseGenericRepository<AssetReplacementMapping>().Insert(AssetReplacementMapping);
                                _UoW.SaveChanges();
                            }
                        }*/

                        //Inserted Asset Issues to main table
                        if (asset.WOLineIssue != null && asset.WOLineIssue.Count > 0)
                        {
                            foreach (var wo_line_issues in asset.WOLineIssue.Where(x => !x.is_deleted).ToList())
                            {
                                var AssetIssueMapper = _mapper.Map<AssetIssue>(wo_line_issues);
                                AssetIssueMapper.asset_id = Asset.asset_id;
                                AssetIssueMapper.issue_status = (int)Status.open;
                                AssetIssueMapper.created_at = DateTime.UtcNow;
                                if(!String.IsNullOrEmpty(asset.issue_title))
                                    AssetIssueMapper.issue_title = asset.issue_title;
                                if(asset.issue_priority>0)
                                    AssetIssueMapper.priority = asset.issue_priority;
                                AssetIssueMapper.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                var totalIssues = _UoW.WorkOrderRepository.GetTotalNumberOfIssues(
                                    Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id));
                                var siteCode = _UoW.WorkOrderRepository.GetSiteCodeById(
                                    Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id));

                                AssetIssueMapper.issue_number = siteCode + " Issue-" + (++totalIssues);

                               // if (wo_line_issues.is_issue_linked_for_fix && !String.IsNullOrEmpty(wo_line_issues.pm_issue_identity_key))// old flow : issue is from pm and is_issue_linked_for_fix is true then set issue status as completed 
                                if (wo_line_issues.is_issue_linked_for_fix )// old flow: issue is from pm and is_issue_linked_for_fix is true then set issue status as completed , new flow : now if issue is for fix then 
                                {
                                    AssetIssueMapper.issue_status = (int)Status.Completed;
                                    wo_line_issues.issue_status = (int)Status.Completed;
                                }

                                if (!wo_line_issues.is_issue_linked_for_fix) // if is_issue_linked_for_fix is true then resolve issue 
                                {
                                    AssetIssueMapper.wo_id = null;
                                    AssetIssueMapper.asset_form_id = null;
                                    AssetIssueMapper.woonboardingassets_id = null;
                                }
                                var insert_asset_Issues = await _UoW.BaseGenericRepository<AssetIssue>().Insert(AssetIssueMapper);

                                /// add before photo from violation images in issue 
                                /// 
                                if (asset.WOOnboardingAssetsImagesMapping != null && asset.WOOnboardingAssetsImagesMapping.Count > 0)
                                {
                                    // add NEC images if issue is NEC violation
                                    if (AssetIssueMapper.issue_caused_id == (int)WOLine_Temp_Issue_Caused.NEC_Violation)
                                    {
                                        var db_images = asset.WOOnboardingAssetsImagesMapping.ToList().Where(x => x.asset_photo_type == (int)AssetPhotoType.NEC_Violation_Photo  && !x.is_deleted).ToList();
                                        if (db_images != null && db_images.Count > 0)
                                        {
                                            AssetIssueMapper.AssetIssueImagesMapping = new List<AssetIssueImagesMapping>();
                                            foreach (var img in db_images)
                                            {
                                                AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                                                AssetIssueImagesMapping.asset_issue_id = AssetIssueMapper.asset_issue_id;
                                                AssetIssueImagesMapping.site_id = AssetIssueMapper.site_id.Value;
                                                AssetIssueImagesMapping.image_file_name = img.asset_photo;
                                                AssetIssueImagesMapping.image_thumbnail_file_name = img.asset_thumbnail_photo;
                                                AssetIssueImagesMapping.image_duration_type_id = img.image_duration_type_id;
                                                AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                                                AssetIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                                AssetIssueMapper.AssetIssueImagesMapping.Add(AssetIssueImagesMapping);

                                                // copy image from conduit-dev-assetimages to conduit-dev-issuephotos
                                                try
                                                {
                                                    s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], AssetIssueImagesMapping.image_file_name);
                                                    s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], AssetIssueImagesMapping.image_thumbnail_file_name);
                                                }
                                                catch (Exception ex)
                                                {

                                                }
                                            }
                                        }
                                    }
                                    else if (AssetIssueMapper.issue_caused_id == (int)WOLine_Temp_Issue_Caused.OSha_Violation) // add osha images if issue is osha violation
                                    {
                                        var db_images = asset.WOOnboardingAssetsImagesMapping.ToList().Where(x => x.asset_photo_type == (int)AssetPhotoType.OSHA_Violation_Photo && !x.is_deleted).ToList();
                                        if (db_images != null && db_images.Count > 0)
                                        {
                                            AssetIssueMapper.AssetIssueImagesMapping = new List<AssetIssueImagesMapping>();
                                            foreach (var img in db_images)
                                            {
                                                AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                                                AssetIssueImagesMapping.asset_issue_id = AssetIssueMapper.asset_issue_id;
                                                AssetIssueImagesMapping.site_id = AssetIssueMapper.site_id.Value;
                                                AssetIssueImagesMapping.image_file_name = img.asset_photo;
                                                AssetIssueImagesMapping.image_thumbnail_file_name = img.asset_thumbnail_photo;
                                                AssetIssueImagesMapping.image_duration_type_id = img.image_duration_type_id;
                                                AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                                                AssetIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                                AssetIssueMapper.AssetIssueImagesMapping.Add(AssetIssueImagesMapping);

                                                // copy image from conduit-dev-assetimages to conduit-dev-issuephotos
                                                try
                                                {
                                                    s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], AssetIssueImagesMapping.image_file_name);
                                                    s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], AssetIssueImagesMapping.image_thumbnail_file_name);
                                                }
                                                catch (Exception ex)
                                                {

                                                }
                                            }
                                        }
                                    }
                                    else if (AssetIssueMapper.issue_caused_id == (int)WOLine_Temp_Issue_Caused.Thermal_Anamoly_Violation) // add osha images if issue is osha violation
                                    {
                                        var db_images = asset.WOOnboardingAssetsImagesMapping.ToList().Where(x => x.asset_photo_type == (int)AssetPhotoType.Thermal_Anomly_Photo  && !x.is_deleted).ToList();
                                        if (db_images != null && db_images.Count > 0)
                                        {
                                            AssetIssueMapper.AssetIssueImagesMapping = new List<AssetIssueImagesMapping>();
                                            foreach (var img in db_images)
                                            {
                                                AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                                                AssetIssueImagesMapping.asset_issue_id = AssetIssueMapper.asset_issue_id;
                                                AssetIssueImagesMapping.site_id = AssetIssueMapper.site_id.Value;
                                                AssetIssueImagesMapping.image_file_name = img.asset_photo;
                                                AssetIssueImagesMapping.image_thumbnail_file_name = img.asset_thumbnail_photo;
                                                AssetIssueImagesMapping.image_duration_type_id = img.image_duration_type_id;
                                                AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                                                AssetIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                                AssetIssueMapper.AssetIssueImagesMapping.Add(AssetIssueImagesMapping);

                                                // copy image from conduit-dev-assetimages to conduit-dev-issuephotos
                                                try
                                                {
                                                    s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], AssetIssueImagesMapping.image_file_name);
                                                    s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["asset_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], AssetIssueImagesMapping.image_thumbnail_file_name);
                                                }
                                                catch (Exception ex)
                                                {

                                                }
                                            }
                                        }
                                    }
                                    else if (AssetIssueMapper.issue_caused_id == (int)WOLine_Temp_Issue_Caused.OB_repair || AssetIssueMapper.issue_caused_id == (int)WOLine_Temp_Issue_Caused.OB_replace) // add before and ater photo if issue type is from OB woline with repair/replace check mark
                                    {
                                        if(wo_line_issues.WOlineIssueImagesMapping!=null && wo_line_issues.WOlineIssueImagesMapping.Count > 0)
                                        {
                                            var db_images = wo_line_issues.WOlineIssueImagesMapping.ToList().Where(x => !x.is_deleted).ToList();
                                            if (db_images != null && db_images.Count > 0)
                                            {
                                                AssetIssueMapper.AssetIssueImagesMapping = new List<AssetIssueImagesMapping>();
                                                foreach (var img in db_images)
                                                {
                                                    AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                                                    AssetIssueImagesMapping.asset_issue_id = AssetIssueMapper.asset_issue_id;
                                                    AssetIssueImagesMapping.site_id = AssetIssueMapper.site_id.Value;
                                                    AssetIssueImagesMapping.image_file_name = img.image_file_name;
                                                    AssetIssueImagesMapping.image_thumbnail_file_name = img.image_thumbnail_file_name;
                                                    AssetIssueImagesMapping.image_duration_type_id = img.image_duration_type_id;
                                                    AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                                                    AssetIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                                    AssetIssueMapper.AssetIssueImagesMapping.Add(AssetIssueImagesMapping);
                                                }
                                            }
                                        }
                                    }



                                }
                                // Add before photo from IR/Visual Image section

                                // now in Thermal Issue we are addding selected IR-Visual images only
                                if (asset.IRWOImagesLabelMapping != null && asset.IRWOImagesLabelMapping.Count > 0 && wo_line_issues.issue_type!=(int)WOLine_Temp_Issue_Type.Thermal_Anamoly)
                                {
                                    if (AssetIssueMapper.AssetIssueImagesMapping != null && AssetIssueMapper.AssetIssueImagesMapping.Count > 0) { }
                                    else { AssetIssueMapper.AssetIssueImagesMapping = new List<AssetIssueImagesMapping>(); }
                                    var db_img_labelmapping = asset.IRWOImagesLabelMapping.Where(x => !x.is_deleted).ToList();
                                    foreach (var img in db_img_labelmapping)    // add visual photo to all type of issue(thermal/nec/osha)
                                    {
                                        if (!String.IsNullOrEmpty(img.visual_image_label))
                                        {
                                            AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                                            AssetIssueImagesMapping.asset_issue_id = AssetIssueMapper.asset_issue_id;
                                            AssetIssueImagesMapping.site_id = AssetIssueMapper.site_id.Value;
                                            AssetIssueImagesMapping.image_file_name = img.visual_image_label;
                                            //AssetIssueImagesMapping.image_thumbnail_file_name = img.asset_thumbnail_photo;
                                            AssetIssueImagesMapping.image_duration_type_id = (int)IssueImageDuration.before;
                                            AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                                            AssetIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                            AssetIssueMapper.AssetIssueImagesMapping.Add(AssetIssueImagesMapping);

                                            // copy image from conduit-dev-assetimages to conduit-dev-issuephotos
                                            try
                                            {
                                                s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["IR_photos_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], (img.s3_image_folder_name + "/" + AssetIssueImagesMapping.image_file_name));
                                            }
                                            catch (Exception ex)
                                            {

                                            }
                                        }
                                        
                                    }
                                }

                                //now in Thermal Issue we are addding selected IR-Visual images only
                                if (AssetIssueMapper.issue_caused_id == (int)WOLine_Temp_Issue_Caused.Thermal_Anamoly_Violation) // if issue caused is by thermal then attach IR Photos
                                {
                                    var irwoimagelabelmapping_id_list = wo_line_issues.WOlineIssueImagesMapping
                                        .Where(x => x.irwoimagelabelmapping_id != null && !x.is_deleted).Select(x => x.irwoimagelabelmapping_id).ToList();

                                    var irvisual_imgs = asset.IRWOImagesLabelMapping
                                        .Where(x => irwoimagelabelmapping_id_list.Contains(x.irwoimagelabelmapping_id) && !x.is_deleted).ToList();

                                    foreach (var img in irvisual_imgs)
                                    {
                                        if (!String.IsNullOrEmpty(img.ir_image_label))
                                        {
                                            AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                                            AssetIssueImagesMapping.asset_issue_id = AssetIssueMapper.asset_issue_id;
                                            AssetIssueImagesMapping.site_id = AssetIssueMapper.site_id.Value;
                                            AssetIssueImagesMapping.image_file_name = img.ir_image_label;
                                            //AssetIssueImagesMapping.image_thumbnail_file_name = img.asset_thumbnail_photo;
                                            AssetIssueImagesMapping.image_duration_type_id = (int)IssueImageDuration.before;
                                            AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                                            AssetIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                            AssetIssueMapper.AssetIssueImagesMapping.Add(AssetIssueImagesMapping);

                                            // copy image from conduit-dev-assetimages to conduit-dev-issuephotos
                                            try
                                            {
                                                s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["IR_photos_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], (img.s3_image_folder_name + "/" + AssetIssueImagesMapping.image_file_name));
                                            }
                                            catch (Exception ex)
                                            {

                                            }
                                        }
                                        if (!String.IsNullOrEmpty(img.visual_image_label))
                                        {
                                            AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                                            AssetIssueImagesMapping.asset_issue_id = AssetIssueMapper.asset_issue_id;
                                            AssetIssueImagesMapping.site_id = AssetIssueMapper.site_id.Value;
                                            AssetIssueImagesMapping.image_file_name = img.visual_image_label;
                                            //AssetIssueImagesMapping.image_thumbnail_file_name = img.asset_thumbnail_photo;
                                            AssetIssueImagesMapping.image_duration_type_id = (int)IssueImageDuration.before;
                                            AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                                            AssetIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                            AssetIssueMapper.AssetIssueImagesMapping.Add(AssetIssueImagesMapping);

                                            // copy image from conduit-dev-assetimages to conduit-dev-issuephotos
                                            try
                                            {
                                                s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["IR_photos_bucket_name"], ConfigurationManager.AppSettings["issue_photos_bucket"], (img.s3_image_folder_name + "/" + AssetIssueImagesMapping.image_file_name));
                                            }
                                            catch (Exception ex)
                                            {

                                            }
                                        }

                                    }
                                }

                                try
                                {
                                    // add first coomment in Issue
                                    AssetIssueMapper.AssetIssueComments = new List<AssetIssueComments>();
                                    AssetIssueComments AssetIssueComments = new AssetIssueComments();
                                    AssetIssueComments.asset_issue_id = AssetIssueMapper.asset_issue_id;
                                    AssetIssueComments.comment = asset.other_notes;
                                    AssetIssueComments.comment_user_id = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                                    AssetIssueComments.comment_user_role_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.role_id);
                                    AssetIssueComments.created_at = DateTime.UtcNow;
                                    AssetIssueComments.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                    AssetIssueMapper.AssetIssueComments.Add(AssetIssueComments);
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError("Exception in inside CreateOBWOAsset when adding AssetIssueComments For Asset " + asset.asset_name + ex.Message);
                                }

                                try
                                {
                                    AssetActivityLogs assetActivityLogs = new AssetActivityLogs();
                                    assetActivityLogs.created_at = DateTime.UtcNow;
                                    assetActivityLogs.activity_header = "Issue - " + AssetIssueMapper.issue_title + " is Created for Asset - " + Asset.name + " in Workorder - " + get_wo.manual_wo_number;
                                    assetActivityLogs.activity_message = "Issue - " + AssetIssueMapper.issue_title + " is Created for Asset - " + Asset.name + " in Workorder - " + get_wo.manual_wo_number;
                                    assetActivityLogs.activity_type = (int)ActivityTypes.NewIssueCreated;
                                    assetActivityLogs.status = (int)Status.Active;
                                    assetActivityLogs.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                    assetActivityLogs.asset_id = Asset.asset_id;

                                    var insert_activity_log = await _UoW.BaseGenericRepository<AssetActivityLogs>().Insert(assetActivityLogs);
                                }
                                catch (Exception ex)
                                {
                                    _logger.LogError("Exception in inside CreateOBWOAsset when adding asset activity For Asset " + asset.asset_name + ex.Message);
                                }

                                // update temp issue 
                                var update_temp_issue = await _UoW.BaseGenericRepository<WOLineIssue>().Update(wo_line_issues);
                            }
                            asset.WOLineIssue.ToList().Where(x => !x.is_deleted).ToList().ForEach(x => x.is_main_issue_created = true); // mark is_main_issue_created for temp table
                            asset.WOLineIssue.ToList().Where(x => !x.is_deleted).ToList().ForEach(x => x.asset_id = Asset.asset_id); // insert asset id in table

                            // update asset condition if there is any issue then keep condition as repair needed else it will be based on dropdown
                            if (asset.WOLineIssue.Where(x => !x.is_deleted).Count() > 0)
                            {
                                //if (asset.WOLineIssue.Select(x => x.issue_type).Contains((int)WOLine_Temp_Issue_Type.Repair))
                                //    Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Repair_Needed;
                                
                                if (asset.WOLineIssue.Select(x => x.issue_type).Contains((int)WOLine_Temp_Issue_Type.Replace))
                                    Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Replacement_Needed;
                                else
                                    Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Repair_Needed;
                            }
                            else
                            {
                                if (asset.asset_operating_condition_state != null)
                                    Asset.asset_operating_condition_state = asset.asset_operating_condition_state;
                                else
                                    Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Operating_Normally;
                            }
                        }
                        else
                        {
                            if (asset.asset_operating_condition_state != null && asset.asset_operating_condition_state > 0)
                            {
                                Asset.asset_operating_condition_state = asset.asset_operating_condition_state;
                            }
                            else // if woline tyoe is repair.replace/general and requested is to create new asset then asset condition will be based on resolution 
                            {
                                if (asset.asset_id == null || asset.inspection_type == (int)MWO_inspection_wo_type.Repair ||
                                   asset.inspection_type == (int)MWO_inspection_wo_type.Replace ||
                                   asset.inspection_type == (int)MWO_inspection_wo_type.Trouble_Call_Check ||
                                   asset.inspection_type == (int)MWO_inspection_wo_type.OnBoarding ||
                                   asset.inspection_type == (int)MWO_inspection_wo_type.Inspection
                                   )
                                {
                                    if (asset.inspection_type == (int)MWO_inspection_wo_type.Repair)
                                    {
                                        if (asset.repair_resolution == (int)MWO_inspection_Repair_resolution.Repair_completed_successfully)
                                        {
                                            Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Operating_Normally;
                                        }
                                        else
                                        {
                                            Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Repair_Needed;
                                        }
                                    }
                                    else if (asset.inspection_type == (int)MWO_inspection_wo_type.Replace)
                                    {
                                        /* // we are not changing condition of to be replaced asset
                                        if (asset.replacement_resolution == (int)MWO_inspection_replacement_resolution.Replacement_completed_successfully)
                                        {
                                            if (asset.replaced_asset_id != null)
                                            {
                                                var get_to_be_replace_asset = _UoW.WorkOrderRepository.GetTobeReplaceAsset(asset.replaced_asset_id.Value);
                                                if (get_to_be_replace_asset != null)
                                                {
                                                    get_to_be_replace_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Decomissioned;
                                                    get_to_be_replace_asset.name = get_to_be_replace_asset.name + " - old";

                                                    var update_tobe_replace = await _UoW.BaseGenericRepository<Asset>().Update(get_to_be_replace_asset);
                                                }
                                            }
                                            Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Operating_Normally;
                                        }
                                        else
                                        {
                                            var get_to_be_replace_asset = _UoW.WorkOrderRepository.GetTobeReplaceAsset(asset.replaced_asset_id.Value);
                                            if (get_to_be_replace_asset != null)
                                            {
                                                get_to_be_replace_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Replacement_Needed;
                                                var update_tobe_replace =await _UoW.BaseGenericRepository<Asset>().Update(get_to_be_replace_asset);
                                            }
                                            Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Operating_Normally;
                                        }
                                        */
                                    }
                                    else if (asset.inspection_type == (int)MWO_inspection_wo_type.Trouble_Call_Check)
                                    {
                                        if (asset.general_issue_resolution == (int)MWO_inspection_general_issue_resolution.Issue_completed_successfully)
                                        {
                                            Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Operating_Normally;
                                        }
                                        else
                                        {
                                            Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Repair_Needed;
                                        }
                                    }
                                    else if ((asset.inspection_type == (int)MWO_inspection_wo_type.OnBoarding ||
                                              asset.inspection_type == (int)MWO_inspection_wo_type.Inspection))
                                    {
                                        Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Operating_Normally;
                                    }
                                    else if ((asset.inspection_type == (int)MWO_inspection_wo_type.OnBoarding ||
                                             asset.inspection_type == (int)MWO_inspection_wo_type.Inspection))
                                    {
                                        Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Operating_Normally;
                                    }
                                }
                            }
                        }

                        // update PM if woline is for PM 
                        if (asset.inspection_type == (int)MWO_inspection_wo_type.PM)
                        {
                            if (asset.AssetPMs != null)
                            {
                                if (asset.AssetPMs.is_Asset_PM_fixed)
                                {
                                    if (asset.AssetPMs.title.ToLower().Trim().Replace(" ", "").Contains("mechanicalservicing")
                                   && asset.ActiveAssetPMWOlineMapping != null)
                                    {
                                        //it is only for mechanical pm torque json  | if in future requirement changes to add another PM json like VisualInspection in same key("asset_pm_form_json") Asset table then need to check before overriding entire json
                                        var pm_form_output_data = asset.ActiveAssetPMWOlineMapping.pm_form_output_data;

                                        /*
                                        //dynamic dynamicform1 = Newtonsoft.Json.JsonConvert.DeserializeObject(str);
                                        //object obj1 = dynamicform1.torqueDetails;

                                        //dynamic torqueDetails = new ExpandoObject();
                                        //torqueDetails.torqueDetails = obj1;
                                        //var torque_json_str = Newtonsoft.Json.JsonConvert.SerializeObject(torqueDetails);

                                        //asset_pm_form_json_class myDeserializedClass = Newtonsoft.Json.JsonConvert.DeserializeObject<asset_pm_form_json_class>("{\"pm_json\":[{\"pm_title\":\"mechanicalservicing\",\"name\":\"torqueDetails\",\"json\":\"\"}]}");
                                        //var aa = myDeserializedClass.pm_json.Where(x=>x.pm_title == "mechanicalservicing").FirstOrDefault();
                                        */
                                        asset_pm_form_json_class _asset_pm_form_json_class = new asset_pm_form_json_class();
                                        _asset_pm_form_json_class.pm_json = new List<pm_json_class>();
                                        pm_json_class pm_json_class = new pm_json_class();
                                        pm_json_class.pm_title = "mechanicalservicing";
                                        pm_json_class.json = pm_form_output_data;
                                        pm_json_class.name = "torqueDetails";
                                        _asset_pm_form_json_class.pm_json.Add(pm_json_class);

                                        var json_serialize = Newtonsoft.Json.JsonConvert.SerializeObject(_asset_pm_form_json_class);

                                        Asset.asset_pm_form_json = json_serialize;
                                        Asset.modified_at = DateTime.UtcNow;
                                        var update_asset = await _UoW.BaseGenericRepository<Asset>().Update(Asset);


                                    }
                                    if (asset.AssetPMs.status != (int)Status.Completed)
                                    {

                                        asset.AssetPMs.status = (int)Status.Completed;
                                        asset.AssetPMs.modified_at = DateTime.UtcNow;
                                        asset.AssetPMs.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                        asset.AssetPMs.asset_pm_completed_date = DateTime.UtcNow;

                                        var update_old_pm = await _UoW.BaseGenericRepository<AssetPMs>().Update(asset.AssetPMs);
                                       
                                        /* //As per new requirements now we will Add AssetPMs for 1 year every year on 1st-Jan by script
                                         * 
                                        // create new PM if schedular is reoccure
                                        if (asset.AssetPMs.pm_trigger_type == (int)Status.Recurring)
                                        {
                                            AssetPMService assetPMService = new AssetPMService(_mapper);
                                            var get_master_pm = _UoW.WorkOrderRepository.GetPMById(asset.AssetPMs.pm_id.Value);
                                            get_master_pm.PMAttachments = get_master_pm.PMAttachments.Where(y => !y.is_archive).ToList();

                                            AssetPMs assetpm = new AssetPMs();
                                            assetpm = _mapper.Map<AssetPMs>(get_master_pm);
                                            assetpm.asset_id = asset.asset_id.Value;
                                            assetpm.created_at = DateTime.UtcNow;
                                            assetpm.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                            assetpm.status = (int)Status.Active;
                                            assetpm.asset_pm_plan_id = asset.AssetPMs.asset_pm_plan_id;
                                            assetpm.datetime_starting_at = DateTime.UtcNow;
                                            assetpm.asset_pm_completed_date = DateTime.UtcNow;

                                            assetpm.AssetPMAttachments.ToList().ForEach(y =>
                                            {
                                                y.asset_pm_plan_id = asset.AssetPMs.asset_pm_plan_id;
                                                y.asset_pm_id = assetpm.asset_pm_id;
                                                y.asset_id = asset.asset_id.Value;
                                                y.created_at = DateTime.UtcNow;
                                                y.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                            });
                                            assetpm.AssetPMsTriggerConditionMapping.ToList().ForEach(y =>
                                            {
                                                y.asset_pm_id = assetpm.asset_pm_id;
                                                y.created_at = DateTime.UtcNow;
                                                y.site_id = asset.site_id;
                                                y.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                            });

                                            var insert_pm = await _UoW.BaseGenericRepository<AssetPMs>().Insert(assetpm);
                                            _UoW.SaveChanges();
                                        }
                                        */
                                    }
                                }
                                else // remove pm from woline
                                {
                                    if (asset.ActiveAssetPMWOlineMapping != null)
                                    {
                                        asset.ActiveAssetPMWOlineMapping.is_active = false;
                                        asset.ActiveAssetPMWOlineMapping.modified_at = DateTime.UtcNow;
                                    }
                                    asset.AssetPMs.status = (int)Status.Active;
                                    asset.AssetPMs.asset_form_id = null;
                                    asset.AssetPMs.woonboardingassets_id = null;
                                    asset.AssetPMs.wo_id = null;
                                    asset.AssetPMs.pm_form_output_data = "{ }";
                                    asset.AssetPMs.is_Asset_PM_fixed = false;
                                    asset.AssetPMs.modified_at = DateTime.UtcNow;
                                    

                                    var update_old_pm = await _UoW.BaseGenericRepository<AssetPMs>().Update(asset.AssetPMs);
                                }

                                if(asset.ActiveAssetPMWOlineMapping.WOlineAssetPMImagesMapping!=null && asset.ActiveAssetPMWOlineMapping.WOlineAssetPMImagesMapping.Count > 0)
                                {
                                    var pm_additional_images = asset.ActiveAssetPMWOlineMapping.WOlineAssetPMImagesMapping.Where(x => !x.is_deleted).ToList();
                                    
                                    foreach (var pm_photo in pm_additional_images)
                                    {

                                        AssetProfileImages AssetProfileImages = new AssetProfileImages();
                                        AssetProfileImages.asset_photo = pm_photo.image_name;
                                        AssetProfileImages.created_at = DateTime.UtcNow;
                                        AssetProfileImages.asset_photo_type = pm_photo.image_type;
                                        AssetProfileImages.pm_photo_caption = pm_photo.pm_image_caption;
                                        AssetProfileImages.asset_id = Asset.asset_id;

                                        var inert_pm_photo = await _UoW.BaseGenericRepository<AssetProfileImages>().Insert(AssetProfileImages);
                                        _UoW.SaveChanges();

                                        s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["issue_photos_bucket"], ConfigurationManager.AppSettings["asset_bucket_name"], pm_photo.image_name);

                                    }
                                }

                                
                            }
                            if(asset.TempAssetPMs != null)
                            {
                                if (asset.TempAssetPMs != null && asset.TempAssetPMs.Count > 0)
                                {
                                    foreach(var temp_asset_pm in asset.TempAssetPMs)
                                    {
                                        var active_asset_pm_woline = temp_asset_pm.TempActiveAssetPMWOlineMapping.Where(x => x.is_active && !x.is_deleted).FirstOrDefault();
                                        if (active_asset_pm_woline != null)
                                        {
                                            var pm_additional_images = active_asset_pm_woline.WOlineAssetPMImagesMapping.Where(x => !x.is_deleted).ToList();

                                            foreach (var pm_photo in pm_additional_images)
                                            {

                                                AssetProfileImages AssetProfileImages = new AssetProfileImages();
                                                AssetProfileImages.asset_photo = pm_photo.image_name;
                                                AssetProfileImages.created_at = DateTime.UtcNow;
                                                AssetProfileImages.asset_photo_type = pm_photo.image_type;
                                                AssetProfileImages.pm_photo_caption = pm_photo.pm_image_caption;
                                                AssetProfileImages.asset_id = Asset.asset_id;

                                                var inert_pm_photo = await _UoW.BaseGenericRepository<AssetProfileImages>().Insert(AssetProfileImages);
                                                _UoW.SaveChanges();

                                                s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["issue_photos_bucket"], ConfigurationManager.AppSettings["asset_bucket_name"], pm_photo.image_name);

                                            }
                                        }
                                    }

                                   
                                }

                            }
                        }
                       
                        
                        _dbtransaction.Commit();
                        asset.is_main_asset_created = true;
                        if (asset.asset_id == null)
                        {
                            InspectionTemplateAssetClass inspectionTemplateAssetClass = null;
                            if (Asset.inspectiontemplate_asset_class_id != null)
                            {
                                inspectionTemplateAssetClass = _UoW.WorkOrderRepository.GetInspectionTemplateAssetClass(Asset.inspectiontemplate_asset_class_id.Value);
                                if (inspectionTemplateAssetClass != null)
                                    Asset.asset_expected_usefull_life = inspectionTemplateAssetClass.asset_expected_usefull_life;
                            }
                            // insert default asset pm
                            if (inspectionTemplateAssetClass != null
                           && inspectionTemplateAssetClass.PMCategory != null
                           && inspectionTemplateAssetClass.PMCategory.PMPlans != null
                           && inspectionTemplateAssetClass.PMCategory.PMPlans.Count > 0)
                            {
                                var get_default_pm_plan = inspectionTemplateAssetClass.PMCategory.PMPlans.Where(x => x.is_default_pm_plan).FirstOrDefault();
                                if (get_default_pm_plan != null)
                                {
                                    AssignPMToAsset AssignPMToAsset = new AssignPMToAsset();
                                    AssignPMToAsset.asset_id = Asset.asset_id;
                                    AssignPMToAsset.pm_plan_id = get_default_pm_plan.pm_plan_id;

                                    AssetPMService assetpm = new AssetPMService(_mapper);
                                    var assignpm = await assetpm.AddAssetPM(AssignPMToAsset);
                                }
                            }
                        }
                        if(asset.asset_id == null)
                        {
                            asset.asset_id = Asset.asset_id;
                        }

                        //--Update PMs DueIn 
                        AssetPMService assetPMService1 = new AssetPMService(_mapper);
                        await assetPMService1.UpdateDueDateDueInDueFlagForAssetPMsByAssetId(asset.asset_id.Value);

                        if (asset.TempAsset != null && asset.TempAsset.asset_id == null && asset.TempAsset.new_created_asset_id == null) // if main asset id is empty it means temp woline is for new assset
                        {
                            asset.TempAsset.new_created_asset_id = Asset.asset_id;
                        }

                        // If wo is IR scan wo then complete asset's IR thermography PM if any open
                        // 
                        if (get_wo.wo_type == (int)Status.IR_Scan_WO)
                        {
                            // check if any ir pm is open or not
                            if (asset.asset_id != null)
                            {
                                //var get_open_assetpms = _UoW.WorkOrderRepository.GetOpenAssetpms(asset.asset_id.Value);
                                var get_curr_assetpms = _UoW.WorkOrderRepository.GetCurrentAssetPMsByAssetId(asset.asset_id.Value);
                                foreach (var assetpm in get_curr_assetpms)
                                {
                                    var get_master_pm = _UoW.WorkOrderRepository.GetPMById(assetpm.pm_id.Value);
                                    var isActive = _UoW.WorkOrderRepository.CheckForAssetPMIsActiveOrNot(assetpm.asset_pm_id);
                                    if (get_master_pm != null && (get_master_pm.pm_inspection_type_id == (int)PMInspectionTypeId.IRThermography
                                        || get_master_pm.title.ToLower().Trim().Replace(" ", "") == "visualinspection") && !isActive)
                                    {
                                        assetpm.status = (int)Status.Completed;
                                        assetpm.modified_at = DateTime.UtcNow;
                                        assetpm.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                        assetpm.asset_pm_completed_date = DateTime.UtcNow;

                                        var update_old_pm = await _UoW.BaseGenericRepository<AssetPMs>().Update(assetpm);

                                        /*
                                         * //As per new requirements now we will Add AssetPMs for 1 year every year on 1st-Jan by script
                                        // create new PM if schedular is reoccure
                                        if (assetpm.pm_trigger_type == (int)Status.Recurring)
                                        {
                                            get_master_pm.PMAttachments = get_master_pm.PMAttachments.Where(y => !y.is_archive).ToList();

                                            AssetPMs assetpm1 = new AssetPMs();
                                            assetpm1 = _mapper.Map<AssetPMs>(get_master_pm);
                                            assetpm1.asset_id = asset.asset_id.Value;
                                            assetpm1.created_at = DateTime.UtcNow;
                                            assetpm1.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                            assetpm1.status = (int)Status.Active;
                                            assetpm1.asset_pm_plan_id = assetpm.asset_pm_plan_id;
                                            assetpm1.datetime_starting_at = DateTime.UtcNow;
                                            assetpm1.asset_pm_completed_date = DateTime.UtcNow;
                                            assetpm1.AssetPMAttachments.ToList().ForEach(y =>
                                            {
                                                y.asset_pm_plan_id = assetpm.asset_pm_plan_id;
                                                y.asset_pm_id = assetpm1.asset_pm_id;
                                                y.asset_id = asset.asset_id.Value;
                                                y.created_at = DateTime.UtcNow;
                                                y.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                            });
                                            assetpm1.AssetPMsTriggerConditionMapping.ToList().ForEach(y =>
                                            {
                                                y.asset_pm_id = assetpm1.asset_pm_id;
                                                y.created_at = DateTime.UtcNow;
                                                y.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                            });
                                            var insert_pm = await _UoW.BaseGenericRepository<AssetPMs>().Insert(assetpm1);
                                            _UoW.SaveChanges();
                                        }
                                        */
                                    }
                                }
                            }
                        }

                        // OB WO then complete Visual PMs only
                        if (get_wo.wo_type == (int)Status.Onboarding_WO)
                        {
                            // check if any ir pm is open or not
                            if (asset.asset_id != null)
                            {
                                //var get_open_assetpms = _UoW.WorkOrderRepository.GetOpenAssetpms(asset.asset_id.Value);
                                var get_curr_assetpms = _UoW.WorkOrderRepository.GetCurrentAssetPMsByAssetId(asset.asset_id.Value);
                                foreach (var assetpm in get_curr_assetpms)
                                {
                                    var get_master_pm = _UoW.WorkOrderRepository.GetPMById(assetpm.pm_id.Value);
                                    var isActive = _UoW.WorkOrderRepository.CheckForAssetPMIsActiveOrNot(assetpm.asset_pm_id);
                                    if (get_master_pm != null && get_master_pm.title.ToLower().Trim().Replace(" ", "") == "visualinspection" && !isActive)
                                    {
                                        assetpm.status = (int)Status.Completed;
                                        assetpm.modified_at = DateTime.UtcNow;
                                        assetpm.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                        assetpm.asset_pm_completed_date = DateTime.UtcNow;

                                        var update_old_pm = await _UoW.BaseGenericRepository<AssetPMs>().Update(assetpm);
                                    }
                                }
                            }
                        }

                        var update_ob_asset = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(asset);
                        success = (int)ResponseStatusNumber.Success;
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError("Exception in inside CreateOBWOAsset For Asset " + asset.asset_name + ex.Message);
                        _dbtransaction.Rollback();
                        get_wo.complete_wo_thread_status = (int)CompleteWOThreadStatus.Failed;
                        var update_wo = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("Exception in CreateOBWOAsset For Asset " + asset.asset_name + ex.Message);
                get_wo.complete_wo_thread_status = (int)CompleteWOThreadStatus.Failed;
                var update_wo = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);
            }
            return success;
        }



        /*public string GetLevelForOBAssets(List<asset_form_data> list_form_data, string location)
        {
            int level = 1;
            Asset get_asset_ = null;
            get_asset_ = _UoW.WorkOrderRepository.GetAsssetByInternalID(location);
            if (!String.IsNullOrEmpty(get_asset_.levels))
            {
                return (int.Parse(get_asset_.levels) + level).ToString();
            }
            else
            {
                level = 2;
                while (true)
                {
                    var asset_form_data = list_form_data.Where(x => x.asset_id == location).FirstOrDefault();
                    get_asset_ = _UoW.WorkOrderRepository.GetAsssetByInternalID(asset_form_data.location);
                    if (!String.IsNullOrEmpty(get_asset_.levels))
                    {
                        return (int.Parse(get_asset_.levels) + level).ToString();
                    }
                    location = asset_form_data.location;
                    level = level + 1;
                    if (level == list_form_data.Count + 2)
                    {
                        return level.ToString();
                    }
                }
            }
        }*/
        public string GetLevel(List<asset_form_data> list_form_data, string location)
        {
            int level = 1;
            Asset get_asset_ = null;
            get_asset_ = _UoW.WorkOrderRepository.GetAssetByLocation(location);
            if (!String.IsNullOrEmpty(get_asset_.levels))
            {
                return (int.Parse(get_asset_.levels) + level).ToString();
            }
            else
            {
                level = 2;
                while (true)
                {
                    var asset_form_data = list_form_data.Where(x => x.identification == location).FirstOrDefault();
                    get_asset_ = _UoW.WorkOrderRepository.GetAssetByLocation(asset_form_data.location);
                    if (!String.IsNullOrEmpty(get_asset_.levels))
                    {
                        return (int.Parse(get_asset_.levels) + level).ToString();
                    }
                    location = asset_form_data.location;
                    level = level + 1;
                    if (level == list_form_data.Count + 2)
                    {
                        return level.ToString();
                    }
                }
            }
        }
        public class asset_form_data
        {
            public string location { get; set; }
            public string identification { get; set; }
            public string asset_id { get; set; }
        }

        public async Task<int> DeleteWOCategory(DeleteWOCategoryRequestModel request_model)
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {
                var get_wocategory = _UoW.WorkOrderRepository.GetWOcategoryID(request_model.wo_inspectionsTemplateFormIOAssignment_id);
                if (get_wocategory != null)
                {
                    get_wocategory.is_archived = true;
                    List<Guid> IssueAssetId = new List<Guid>();
                    if (get_wocategory.WOcategorytoTaskMapping != null && get_wocategory.WOcategorytoTaskMapping.Count > 0)
                    {
                        foreach (var q in get_wocategory.WOcategorytoTaskMapping.ToList())
                        {

                            q.is_archived = true;
                            q.AssetFormIO.status = (int)Status.Deactive;
                            q.AssetFormIO.modified_at = DateTime.UtcNow;
                            q.updated_at = DateTime.UtcNow;

                            if (q.AssetFormIO.AssetIssue != null && q.AssetFormIO.AssetIssue.Count > 0)
                            {
                                foreach (var x in q.AssetFormIO.AssetIssue.ToList())
                                {
                                    IssueAssetId.Add(x.asset_id.Value);
                                    x.wo_id = null;
                                    x.woonboardingassets_id = null;
                                    x.wo_id = null;
                                    x.is_issue_linked = false;
                                    x.issue_status = (int)Status.open;
                                }
                            }
                            if (q.AssetFormIO.WOLineIssue != null && q.AssetFormIO.WOLineIssue.Count > 0)
                            {
                                q.AssetFormIO.WOLineIssue.ToList().ForEach(x =>
                                {
                                    x.is_deleted = true;
                                    x.is_issue_linked_for_fix = false;
                                });
                            }
                            if (q.AssetFormIO.AssetPMs != null && q.AssetFormIO.AssetPMs.Count > 0)
                            {
                                q.AssetFormIO.AssetPMs.ToList().ForEach(x =>
                                {
                                    x.wo_id = null;
                                    x.asset_form_id = null;
                                    x.is_Asset_PM_fixed = false;
                                    if (x.status != (int)Status.Completed)
                                    {
                                        x.status = (int)Status.Active; //Update Asset_PM_Status
                                    }
                                    x.modified_at = DateTime.UtcNow;
                                    x.modified_by = GenericRequestModel.requested_by.ToString();

                                });
                            }

                        }

                    }
                    get_wocategory.updated_at = DateTime.UtcNow;
                    var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(get_wocategory);


                    if (IssueAssetId.Count > 0)
                    {
                        IssueAssetId = IssueAssetId.Distinct().ToList();
                        foreach (var x in IssueAssetId) // update asset condition based on issues
                        {

                            await UpdateAssetconditionbasedonIssue(x);

                        }
                    }

                    /// update wo status 
                    /// 
                    await updateWOStatusforStatusmanage(get_wocategory.wo_id);

                    response = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    response = (int)ResponseStatusNumber.NotFound;
                }
            }
            catch (Exception ex)
            {

            }
            return response;
        }

        public async Task<int> DeleteWOCategoryTask(DeleteWOCategoryTaskRequestModel request_model)
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {
                var get_wocategoryTask = _UoW.WorkOrderRepository.GetWOcategoryTaskByTaskID(request_model.wOcategorytoTaskMapping_id);
                if (get_wocategoryTask != null)
                {
                    if (!get_wocategoryTask.is_parent_task)
                    {
                        get_wocategoryTask.is_archived = true;
                        get_wocategoryTask.updated_at = DateTime.UtcNow;
                        get_wocategoryTask.AssetFormIO.status = (int)Status.Deactive;
                        get_wocategoryTask.AssetFormIO.modified_at = DateTime.UtcNow;
                        var all_task = get_wocategoryTask.WOInspectionsTemplateFormIOAssignment.WOcategorytoTaskMapping.Where(x => !x.is_archived).ToList();

                        if (all_task.All(x => !x.is_archived && x.AssetFormIO.status == (int)Status.Completed))
                        {
                            get_wocategoryTask.WOInspectionsTemplateFormIOAssignment.status_id = (int)Status.Completed;
                            get_wocategoryTask.WOInspectionsTemplateFormIOAssignment.updated_at = DateTime.UtcNow;
                        }
                        // updtae serial number for tasks
                        var updating_tasks = all_task.Where(q => q.serial_number > get_wocategoryTask.serial_number).ToList();
                        updating_tasks.ForEach(q =>
                        {
                            q.serial_number = q.serial_number - 1;
                            q.updated_at = DateTime.UtcNow;
                        });

                        var update = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Update(get_wocategoryTask);
                        response = (int)ResponseStatusNumber.Success;

                        await updateWOCategoryStatusforStatusmanage(get_wocategoryTask.wo_inspectionsTemplateFormIOAssignment_id);

                    }
                    else
                    {
                        response = (int)ResponseStatusNumber.can_not_delete_parent_task;
                    }

                }
                else
                {
                    response = (int)ResponseStatusNumber.NotFound;
                }
            }
            catch (Exception ex)
            {

            }
            return response;
        }

        public List<GetWOCalenderEventsResponseModel> GetWOCalenderEvents(GetWOCalenderEventsRequestModel requestModel)
        {
            List<GetWOCalenderEventsResponseModel> response = new List<GetWOCalenderEventsResponseModel>();

            NewFlowWorkorderListRequestModel NewFlowWorkorderListRequestModel = new NewFlowWorkorderListRequestModel();
            NewFlowWorkorderListRequestModel.from_date = requestModel.from_date;
            NewFlowWorkorderListRequestModel.to_date = requestModel.to_date;
            NewFlowWorkorderListRequestModel.technician_user_id = requestModel.technician_user_id;
            var WO_list = GetAllWorkOrdersNewflow(NewFlowWorkorderListRequestModel);

            for (DateTime from_date = requestModel.from_date.Date; from_date <= requestModel.to_date.Date; from_date = from_date.AddDays(1))
            {
                GetWOCalenderEventsResponseModel GetWOCalenderEventsResponseModel = new GetWOCalenderEventsResponseModel();
                GetWOCalenderEventsResponseModel.WO_Start_Date = from_date;
                var date_wise_WO = WO_list.list.Where(q => (DateTime.Compare(q.start_date.Date, from_date.Date) == 0 ? true : false)).ToList();
                if (date_wise_WO != null && date_wise_WO.Count > 0)
                {
                    GetWOCalenderEventsResponseModel.wo_list = date_wise_WO;
                }
                response.Add(GetWOCalenderEventsResponseModel);
            }
            return response;
        }

        public async Task<createassetresponse> CreateAssetAndTasks(Guid wo_id, List<AssetFormIO> asset_form_io, List<WOInspectionsTemplateFormIOAssignment> wocategories, List<WOcategorytoTaskMapping> wocategoryTask, bool is_from_ATWO)
        {
            NotificationService notificationService = new NotificationService(_mapper);
            createassetresponse response = new createassetresponse();
            response.success = (int)ResponseStatusNumber.Success;
            response.formandassetmappig = new List<formandassetmappig>();
            var get_wo = _UoW.WorkOrderRepository.GetWorkOrderByIdForComplete(wo_id);
            try
            {



                long failed_task_code = (int)ResponseStatusNumber.Error;
                //  var categories = get_wo.WOInspectionsTemplateFormIOAssignment.ToList().Where(q => !q.is_archived).ToList();
                int last_internal_id = _UoW.WorkOrderRepository.GetAssetscountBySite(get_wo.site_id.ToString());

                //int last_internal_id = get_assets_site_wise.Count();

                var master_form_ids = wocategories.Select(x => x.form_id).Distinct().ToList();
                var master_forms = _UoW.WorkOrderRepository.GetMasterFormExcluded(master_form_ids);
                foreach (var w in asset_form_io)
                {
                    if ((w.status == (int)Status.Completed || w.status == (int)Status.Submitted) && !w.is_main_asset_created)
                    {

                        var created_asset = await CreateATAssetAsync(wocategoryTask, wocategories, get_wo, w, last_internal_id, master_forms);
                        if (created_asset != null && created_asset.success == (int)ResponseStatusNumber.Error)
                        {
                            response.success = (int)ResponseStatusNumber.Error;
                            break;
                        }
                        response.formandassetmappig.AddRange(created_asset.formandassetmappig);
                        last_internal_id++;
                    }
                }

                if (response.success == (int)ResponseStatusNumber.Success)
                {
                    var updtae_asstes = await CreateAssetsForAT(asset_form_io, get_wo, response);

                    if (is_from_ATWO)   /// update WO status to complete if Wo is AT 
                    {
                        get_wo.status = (int)Status.Completed;
                        get_wo.modified_at = DateTime.UtcNow;
                        get_wo.completed_date = DateTime.UtcNow;
                        get_wo.complete_wo_thread_status = (int)CompleteWOThreadStatus.Completed;

                        var update_wo = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);

                        // Send Notifications to all Back-Office Users of that Site
                        var get_ref_wo_id = new List<string> { wo_id.ToString() };
                        await notificationService.SendNotificationGenericNewFlow((int)NotificationType_Version_2.WorkOrder_is_Completed_With_Issue_Created, get_ref_wo_id, null);

                        // mark delete for WO line which are in open status
                        var get_open_wo_line = _UoW.WorkOrderRepository.GetOpenAssetformio(get_wo.wo_id);
                        get_open_wo_line.ForEach(x => x.status = (int)Status.Deactive);
                        get_open_wo_line.ForEach(x => x.WOcategorytoTaskMapping.is_archived = true);

                        var updatewoline = _UoW.BaseGenericRepository<AssetFormIO>().UpdateList(get_open_wo_line);

                        /*
                        #region updateIssue/PM
                        UpdateWOStatusRequestModel model = new UpdateWOStatusRequestModel();
                        model.wo_id = get_wo.wo_id;
                        await UpdateIssueAndPMAsync(model);
                        #endregion updateIssue/PM
                        */
                    }
                }
                else
                {
                    _logger.LogError("in else function after adding asset  : ");

                    get_wo.complete_wo_thread_status = (int)CompleteWOThreadStatus.Failed;
                    var updatewo = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);

                    response.success = (int)ResponseStatusNumber.Error;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("Exception in CreateAssetAndTasks  : " + ex.Message);
                _UoW.RollbackTransaction();
                get_wo.complete_wo_thread_status = (int)CompleteWOThreadStatus.Failed;
                var updatewo = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);

                response.success = (int)ResponseStatusNumber.Error;
                return response;
            }
            return response;
        }

        public async Task<createassetresponse> CreateATAssetAsync(List<WOcategorytoTaskMapping> wocategoryTask, List<WOInspectionsTemplateFormIOAssignment> wocategories, WorkOrders get_wo, AssetFormIO w, int last_internal_id, List<InspectionTemplateFormIoExclude> master_forms)
        {
            var wo_category_task = wocategoryTask.Where(x => x.WOcategorytoTaskMapping_id == w.WOcategorytoTaskMapping_id).FirstOrDefault();
            var wo_category = wocategories.Where(x => x.wo_inspectionsTemplateFormIOAssignment_id == wo_category_task.wo_inspectionsTemplateFormIOAssignment_id).FirstOrDefault();
            createassetresponse response = new createassetresponse();
            response.success = (int)ResponseStatusNumber.Success;
            response.formandassetmappig = new List<formandassetmappig>();
            FormIOBuildings FormIOBuildings = null;
            FormIOFloors FormIOFloors = null;
            FormIORooms FormIORooms = null;
            FormIOSections FormIOSections = null;
            try
            {
                var form_obj = JsonSerializer.Deserialize<FormIOObject.Root>(w.asset_form_data);
                //var dynamic_form_obj = JsonSerializer.Deserialize<FormioDynamicobj.Root>(w.asset_form_data);
                dynamic dynamic_form_obj = new ExpandoObject();
                dynamic_form_obj = Newtonsoft.Json.JsonConvert.DeserializeObject(w.asset_form_data);
                if (form_obj != null && form_obj.data != null)
                {
                    // if (!String.IsNullOrEmpty(form_obj.data.header.parent))
                    // { 
                    // inserting buildings data if not present then add default

                    if (String.IsNullOrEmpty(form_obj.data.header.building))
                    {
                        form_obj.data.header.building = "Default";
                    }
                    if (String.IsNullOrEmpty(form_obj.data.header.floor))
                    {
                        form_obj.data.header.floor = "Default";
                    }
                    if (String.IsNullOrEmpty(form_obj.data.header.room))
                    {
                        form_obj.data.header.room = "Default";
                    }
                    if (String.IsNullOrEmpty(form_obj.data.header.section))
                    {
                        form_obj.data.header.section = "Default";
                    }
                    FormIOBuildings = _UoW.WorkOrderRepository.GetFormIOBuildingByName(form_obj.data.header.building);
                    if (FormIOBuildings == null)
                    {
                        FormIOBuildings = new FormIOBuildings();
                        FormIOBuildings.formio_building_name = form_obj.data.header.building;
                        FormIOBuildings.created_at = DateTime.UtcNow;
                        FormIOBuildings.site_id = get_wo.site_id;
                        FormIOBuildings.company_id = get_wo.Sites.company_id;

                        var insertbuilding = await _UoW.BaseGenericRepository<FormIOBuildings>().Insert(FormIOBuildings);
                        _UoW.SaveChanges();
                    }


                    FormIOFloors = _UoW.WorkOrderRepository.GetFormIOFloorByName(form_obj.data.header.floor, FormIOBuildings.formiobuilding_id);
                    if (FormIOFloors == null)
                    {
                        FormIOFloors = new FormIOFloors();
                        FormIOFloors.formio_floor_name = form_obj.data.header.floor;
                        FormIOFloors.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                        FormIOFloors.created_at = DateTime.UtcNow;
                        FormIOFloors.site_id = get_wo.site_id;
                        FormIOFloors.company_id = get_wo.Sites.company_id;

                        var insertfloor = await _UoW.BaseGenericRepository<FormIOFloors>().Insert(FormIOFloors);
                        _UoW.SaveChanges();
                    }


                    FormIORooms = _UoW.WorkOrderRepository.GetFormIORoomByName(form_obj.data.header.room, FormIOFloors.formiofloor_id);
                    if (FormIORooms == null)
                    {
                        FormIORooms = new FormIORooms();
                        FormIORooms.formio_room_name = form_obj.data.header.room;
                        FormIORooms.formiofloor_id = FormIOFloors.formiofloor_id;
                        FormIORooms.created_at = DateTime.UtcNow;
                        FormIORooms.site_id = get_wo.site_id;
                        FormIORooms.company_id = get_wo.Sites.company_id;

                        var insertroom = await _UoW.BaseGenericRepository<FormIORooms>().Insert(FormIORooms);
                        _UoW.SaveChanges();
                    }


                    FormIOSections = _UoW.WorkOrderRepository.GetFormIOSectionByName(form_obj.data.header.section, FormIORooms.formioroom_id);
                    if (FormIOSections == null)
                    {
                        FormIOSections = new FormIOSections();
                        FormIOSections.formio_section_name = form_obj.data.header.section;
                        FormIOSections.formioroom_id = FormIORooms.formioroom_id;
                        FormIOSections.created_at = DateTime.UtcNow;
                        FormIOSections.site_id = get_wo.site_id;
                        FormIOSections.company_id = get_wo.Sites.company_id;

                        var insertroom = await _UoW.BaseGenericRepository<FormIOSections>().Insert(FormIOSections);
                        _UoW.SaveChanges();
                    }

                    if (!String.IsNullOrEmpty(form_obj.data.header.note))
                    {
                        FormIOLocationNotes FormIOLocationNotes = null;
                        if (FormIOSections != null)
                        {
                            FormIOLocationNotes = _UoW.WorkOrderRepository.GetFormIONotesBySection(FormIOSections.formiosection_id);
                            if (FormIOLocationNotes == null)
                            {
                                FormIOLocationNotes = new FormIOLocationNotes();
                                FormIOLocationNotes.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                                FormIOLocationNotes.formiofloor_id = FormIOFloors.formiofloor_id;
                                FormIOLocationNotes.formioroom_id = FormIORooms.formioroom_id;
                                FormIOLocationNotes.formiosection_id = FormIOSections.formiosection_id;
                                FormIOLocationNotes.notes = form_obj.data.header.note;

                                var insertnotes = await _UoW.BaseGenericRepository<FormIOLocationNotes>().Insert(FormIOLocationNotes);
                                _UoW.SaveChanges();
                            }
                        }
                    }




                    // if (form_obj.data.nameplateInformation != null)
                    // {
                    Asset Asset = new Asset();
                    //  var nameplate = form_obj.data.nameplateInformation;

                    //    var dynaicnameplate = dynamic_form_obj.data.nameplateInformation;
                    ///    Asset.form_retrived_nameplate_info = JsonSerializer.Serialize(dynaicnameplate);

                    if (!String.IsNullOrEmpty(form_obj.data.header.identification))
                    {
                        Asset.name = form_obj.data.header.identification;

                    }
                    else
                    {
                        int asset_count = _UoW.WorkOrderRepository.GetAssetscountBySite(get_wo.site_id.ToString());
                        Asset.name = UpdatedGenericRequestmodel.CurrentUser.domain_name + (asset_count + 1).ToString();
                        dynamic_form_obj.data.header.identification = Asset.name; /// setting asset_name in form for temperary

                    }
                    //   Asset.asset_serial_number = nameplate.serialNumber;
                    //   Asset.asset_type = nameplate.type;
                    //   Asset.model_name = nameplate.model;
                    Asset.company_id = get_wo.Sites.company_id.ToString();
                    Asset.site_id = get_wo.site_id;
                    Asset.site_location = get_wo.Sites.location;
                    Asset.status = (int)Status.AssetActive;
                    // Asset.inspectionform_id = q.Parent_Asset.inspectionform_id;
                    Asset.created_at = DateTime.UtcNow;
                    Asset.last_inspected_formio_date = DateTime.UtcNow;
                    Asset.form_type_id = master_forms.Where(t => t.form_id == w.form_id).FirstOrDefault().form_type_id;
                    Asset.form_id = w.form_id;
                    Asset.asset_hierarchy_id = (int)AssetHierarchyType.By_level;
                    Asset.criticality_index_type = null;
                    Asset.condition_index_type = null;
                    Asset.criticality_index = 0;
                    Asset.condition_index = 0;
                    Asset.inspectiontemplate_asset_class_id = wo_category.inspectiontemplate_asset_class_id;
                    InspectionTemplateAssetClass inspectionTemplateAssetClass = null;
                    if (wo_category.inspectiontemplate_asset_class_id != null)
                    {
                        inspectionTemplateAssetClass = _UoW.WorkOrderRepository.GetInspectionTemplateAssetClass(wo_category.inspectiontemplate_asset_class_id.Value);
                        if (inspectionTemplateAssetClass != null)
                            Asset.asset_expected_usefull_life = inspectionTemplateAssetClass.asset_expected_usefull_life;
                    }

                    if (!String.IsNullOrEmpty(form_obj.data.header.assetId))
                    {
                        Asset.internal_asset_id = form_obj.data.header.assetId;
                    }
                    else
                    {
                        int asset_count = _UoW.WorkOrderRepository.GetAssetscountBySite(get_wo.site_id.ToString());
                        Asset.internal_asset_id = get_wo.Sites.site_code + (asset_count + 1).ToString();
                        dynamic_form_obj.data.header.assetId = Asset.internal_asset_id; /// setting internal_asset_id in form for temperary

                    }
                    Asset.QR_code = Asset.internal_asset_id;

                    if (form_obj.data.nameplateInformation != null)
                    {
                        var nameplate = form_obj.data.nameplateInformation;
                        dynamic dynaicnameplate = new ExpandoObject();
                        dynaicnameplate = dynamic_form_obj.data.nameplateInformation;
                        Asset.form_retrived_nameplate_info = Newtonsoft.Json.JsonConvert.SerializeObject(dynaicnameplate);
                        Asset.asset_serial_number = nameplate.serialNumber;
                        Asset.asset_type = nameplate.type;
                        Asset.model_name = nameplate.model;
                    }
                    else
                    {
                        Asset.form_retrived_nameplate_info = "{}";
                    }
                    Asset.inspection_verdict = w.inspection_verdict;
                    if (Asset.inspection_verdict != null) // update asset operating condition based on verdict
                    {
                        if (Asset.inspection_verdict == (int)inspectionVerdictnumber.acceptable)
                        {
                            Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Operating_Normally;
                            Asset.inspection_verdict = (int)AssetOperatingConduitionState.Operating_Normally;
                        }
                        else if (Asset.inspection_verdict == (int)inspectionVerdictnumber.alert)
                        {
                            Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Repair_Needed;
                            Asset.inspection_verdict = (int)AssetOperatingConduitionState.Repair_Needed;
                        }
                        else if (Asset.inspection_verdict == (int)inspectionVerdictnumber.danger)
                        {
                            Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Replacement_Needed;
                            Asset.inspection_verdict = (int)AssetOperatingConduitionState.Replacement_Needed;
                        }
                        else if (Asset.inspection_verdict == (int)inspectionVerdictnumber.defective)
                        {
                            Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Defective;
                            Asset.inspection_verdict = (int)AssetOperatingConduitionState.Defective;
                        }
                    }
                    if (String.IsNullOrEmpty(form_obj.data.header.parent))
                    {
                        Asset.levels = "1";
                    }
                    w.asset_form_data = Newtonsoft.Json.JsonConvert.SerializeObject(dynamic_form_obj);
                    var insert_asset = await _UoW.BaseGenericRepository<Asset>().Insert(Asset);
                    _UoW.SaveChanges();

                    if (insert_asset)
                    {
                        _UoW.SaveChanges();

                        AssetFormIOBuildingMappings AssetFormIOBuildingMappings = new AssetFormIOBuildingMappings();
                        AssetFormIOBuildingMappings.asset_id = Asset.asset_id;

                        if (FormIOBuildings != null)
                            AssetFormIOBuildingMappings.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                        if (FormIOFloors != null)
                            AssetFormIOBuildingMappings.formiofloor_id = FormIOFloors.formiofloor_id;
                        if (FormIORooms != null)
                            AssetFormIOBuildingMappings.formioroom_id = FormIORooms.formioroom_id;
                        if (FormIOSections != null)
                            AssetFormIOBuildingMappings.formiosection_id = FormIOSections.formiosection_id;

                        var insert_asset_building_mapping = await _UoW.BaseGenericRepository<AssetFormIOBuildingMappings>().Insert(AssetFormIOBuildingMappings);
                        _UoW.SaveChanges();

                        /// insert comments in notes section 
                        /// 
                        try
                        {
                            if (form_obj.data.footer != null)
                            {
                                string form_comment = form_obj.data.footer.comments;
                                if (!String.IsNullOrEmpty(form_comment))
                                {
                                    AssetNotes AssetNotes = new AssetNotes();
                                    AssetNotes.asset_id = Asset.asset_id;
                                    AssetNotes.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                    AssetNotes.asset_note = form_comment;
                                    AssetNotes.asset_note_added_by_userid = Asset.asset_id;
                                    AssetNotes.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                                    AssetNotes.created_at = DateTime.UtcNow;
                                    AssetNotes.asset_note_added_by_userid = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                                    AssetNotes.asset_form_id = w.asset_form_id;

                                    var get_user = _UoW.AssetRepository.Getuserbyid(UpdatedGenericRequestmodel.CurrentUser.requested_by);
                                    if (get_user != null)
                                    {
                                        AssetNotes.asset_note_added_by_user = get_user.firstname + get_user.lastname;
                                    }
                                    var insert_asset_notes = await _UoW.BaseGenericRepository<AssetNotes>().Insert(AssetNotes);
                                    _UoW.SaveChanges();
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError("Exception in AssetNotes  : " + w.form_retrived_asset_name + " : " + ex.Message);
                        }


                        // insert Issues in main table from temp table
                        if (w.WOLineIssue != null && w.WOLineIssue.Count > 0)
                        {

                            foreach (var wo_line_issues in w.WOLineIssue.Where(x => !x.is_deleted).ToList())
                            {
                                var AssetIssueMapper = _mapper.Map<AssetIssue>(wo_line_issues);
                                AssetIssueMapper.asset_id = Asset.asset_id;
                                AssetIssueMapper.issue_status = (int)Status.open;

                                var totalIssues = _UoW.WorkOrderRepository.GetTotalNumberOfIssues(
                                        Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id));
                                var siteCode = _UoW.WorkOrderRepository.GetSiteCodeById(
                                        Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id));

                                AssetIssueMapper.issue_number = siteCode + " Issue-" + (++totalIssues);

                                if (!wo_line_issues.is_issue_linked_for_fix) /// if issue is added to fix then do not do null for below values 
                                {
                                    AssetIssueMapper.wo_id = null;
                                    AssetIssueMapper.asset_form_id = null;
                                    AssetIssueMapper.woonboardingassets_id = null;
                                }
                                var insert_asset_Issues = await _UoW.BaseGenericRepository<AssetIssue>().Insert(AssetIssueMapper);

                                // add first coomment in Issue if issue is not NEC/OSHA
                                if (wo_line_issues.issue_caused_id != (int)WOLine_Temp_Issue_Caused.OSha_Violation && wo_line_issues.issue_caused_id != (int)WOLine_Temp_Issue_Caused.NEC_Violation)
                                {
                                    AssetIssueMapper.AssetIssueComments = new List<AssetIssueComments>();
                                    AssetIssueComments AssetIssueComments = new AssetIssueComments();
                                    AssetIssueComments.asset_issue_id = AssetIssueMapper.asset_issue_id;
                                    AssetIssueComments.comment = wo_line_issues.atmw_first_comment;
                                    AssetIssueComments.comment_user_id = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                                    AssetIssueComments.comment_user_role_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.role_id);
                                    AssetIssueComments.created_at = DateTime.UtcNow;
                                    AssetIssueComments.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                    AssetIssueMapper.AssetIssueComments.Add(AssetIssueComments);
                                }
                                /// add activity logs 
                                /// 
                                try
                                {
                                    AssetActivityLogs assetActivityLogs = new AssetActivityLogs();
                                    assetActivityLogs.created_at = DateTime.UtcNow;
                                    assetActivityLogs.activity_header = "Issue - " + AssetIssueMapper.issue_title + " is Created for Asset - " + Asset.name + " in Workorder - " + get_wo.manual_wo_number;
                                    assetActivityLogs.activity_message = "Issue - " + AssetIssueMapper.issue_title + " is Created for Asset - " + Asset.name + " in Workorder - " + get_wo.manual_wo_number;
                                    assetActivityLogs.activity_type = (int)ActivityTypes.NewIssueCreated;
                                    assetActivityLogs.status = (int)Status.Active;
                                    assetActivityLogs.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                    assetActivityLogs.asset_id = Asset.asset_id;

                                    var insert_activity_log = await _UoW.BaseGenericRepository<AssetActivityLogs>().Insert(assetActivityLogs);
                                }
                                catch (Exception ex)
                                {

                                }
                            }

                            w.WOLineIssue.ToList().Where(x => !x.is_deleted).ToList().ForEach(x => x.is_main_issue_created = true); // mark is_main_issue_created for temp table
                        }

                        // attach default PM to asset
                        if (inspectionTemplateAssetClass != null
                            && inspectionTemplateAssetClass.PMCategory != null
                            && inspectionTemplateAssetClass.PMCategory.PMPlans != null
                            && inspectionTemplateAssetClass.PMCategory.PMPlans.Count > 0)
                        {
                            var get_default_pm_plan = inspectionTemplateAssetClass.PMCategory.PMPlans.Where(x => x.is_default_pm_plan).FirstOrDefault();
                            if (get_default_pm_plan != null)
                            {
                                AssignPMToAsset AssignPMToAsset = new AssignPMToAsset();
                                AssignPMToAsset.asset_id = Asset.asset_id;
                                AssignPMToAsset.pm_plan_id = get_default_pm_plan.pm_plan_id;

                                AssetPMService assetpm = new AssetPMService(_mapper);
                                await assetpm.AddAssetPM(AssignPMToAsset);
                            }
                        }
                        w.is_main_asset_created = true;
                        var update_form = await _UoW.BaseGenericRepository<AssetFormIO>().Update(w);
                        _UoW.SaveChanges();

                        response.success = (int)ResponseStatusNumber.Success;
                        formandassetmappig formandassetmappig = new formandassetmappig();
                        formandassetmappig.asset_form_id = w.asset_form_id;
                        formandassetmappig.asset_id = Asset.asset_id;
                        response.formandassetmappig.Add(formandassetmappig);
                    }
                    else
                    {
                        _logger.LogError("insert asset is failed " + w.form_retrived_asset_name);
                        _UoW.RollbackTransaction();
                        response.success = (int)ResponseStatusNumber.Error;
                        response.task_number = 1;
                        return response;
                    }
                    //}
                    //}
                }
            }
            catch (Exception ex)
            {
                _UoW.RollbackTransaction();
                _logger.LogError("Exception in CreateATAssetAsync while adding asset  : " + w.form_retrived_asset_name + " : " + ex.Message);
                response.success = (int)ResponseStatusNumber.Error;
                response.task_number = 1;
                return response;
            }

            return response;
        }

        public string AssetNetaNPJsonMearge(string asset_np_json , string neta_inspection_json)
        {
            string output_json = asset_np_json;
            try
            {
                string json1 = asset_np_json;
                string json2 = neta_inspection_json;

                // Parse JSON strings to JObject
                JObject jsonObject1 = JObject.Parse(json1);
                JObject jsonObject2 = JObject.Parse(json2);

                // Merge json2 into json1
                foreach (var property in jsonObject2)
                {
                    // If key exists in json1, update its value; if not, add it
                    jsonObject1[property.Key] = property.Value;
                }
                output_json =  jsonObject1.ToString();
            }
            catch(Exception ex)
            {

            }
            return output_json;
        }

        public class createassetresponse
        {
            public long success { get; set; }
            public long task_number { get; set; }
            public List<formandassetmappig> formandassetmappig { get; set; }
        }
        public class formandassetmappig
        {
            public Guid asset_id { get; set; }
            public Guid asset_form_id { get; set; }
        }
        public List<GetWOcategoryTaskByCategoryIDListResponsemodel> GetAllWOCategoryTaskByWOid(string wo_id, int status)
        {
            List<GetWOcategoryTaskByCategoryIDListResponsemodel> response = new List<GetWOcategoryTaskByCategoryIDListResponsemodel>();
            try
            {
                var task_lists = _UoW.WorkOrderRepository.GetAllWOCategoryTaskByWOidForTask(Guid.Parse(wo_id), status);

                if (task_lists != null && task_lists.Count > 0)
                {
                    /* var get_asset_form = _UoW.WorkOrderRepository.GetAllAssetFormByWOIDOffline(new List<Guid>() { Guid.Parse(wo_id) });
                     List<AssetFormIO> WO_Assetformios = _mapper.Map<List<AssetFormIO>>(get_asset_form);
                     task_lists.ForEach(s =>
                     {
                         s.AssetFormIO = WO_Assetformios.Where(q => q.WOcategorytoTaskMapping_id == s.WOcategorytoTaskMapping_id).FirstOrDefault();
                     });
                    */
                    //int serial_no = 0;

                    var form_ids = task_lists.Select(x => x.WOInspectionsTemplateFormIOAssignment.form_id).Distinct().ToList();
                    var get_forms = _UoW.WorkOrderRepository.GetExcludedFormIOFormsByIds(form_ids);


                    response = _mapper.Map<List<GetWOcategoryTaskByCategoryIDListResponsemodel>>(task_lists);
                    response.ForEach(x =>
                    {

                        if (x.woonboardingassets_id != null)
                        {
                            var wo_line = _UoW.WorkOrderRepository.GetAssetFromWOline(x.woonboardingassets_id);
                            if (wo_line != null)
                            {
                                x.assigned_asset_name = wo_line.asset_name;
                            }
                        }

                        var form = get_forms.Where(q => q.form_id == x.form_id).FirstOrDefault();
                        x.WP = form.work_procedure;
                        // serial_no++;
                        // x.serial_number = serial_no;
                        if (x.technician_id != null && x.technician_id != Guid.Empty)
                        {
                            var technician_user = _UoW.WorkOrderRepository.GetUserByID(x.technician_id.Value);
                            x.technician_name = technician_user.firstname + " " + technician_user.lastname;
                        }

                    });
                }
            }
            catch (Exception ex)
            {

            }
            return response;
        }
        public GetWOBacklogCardListResponsemodel GetWOBacklogCardList(string search_string, List<string>? site_id)
        {
            GetWOBacklogCardListResponsemodel response = new GetWOBacklogCardListResponsemodel();
            NewFlowWorkorderListRequestModel NewFlowWorkorderListRequestModel = new NewFlowWorkorderListRequestModel();
            NewFlowWorkorderListRequestModel.search_string = search_string;
            NewFlowWorkorderListRequestModel.site_id = site_id;

            NewFlowWorkorderListRequestModel.wo_status = new List<int> { (int)Status.PlannedWO };
            NewFlowWorkorderListRequestModel.is_request_for_backlogcards = true;
            var planned_wo = GetAllWorkOrdersNewflow(NewFlowWorkorderListRequestModel);

            NewFlowWorkorderListRequestModel.wo_status = new List<int> { (int)Status.open, (int)Status.ReleasedOpenWO };
            NewFlowWorkorderListRequestModel.is_request_for_backlogcards = true;
            var open_wo = GetAllWorkOrdersNewflow(NewFlowWorkorderListRequestModel);

            NewFlowWorkorderListRequestModel.wo_status = new List<int> { (int)Status.InProgress };
            NewFlowWorkorderListRequestModel.is_request_for_backlogcards = true;
            var in_progress_wo = GetAllWorkOrdersNewflow(NewFlowWorkorderListRequestModel);

            NewFlowWorkorderListRequestModel.wo_status = new List<int> { (int)Status.Hold };
            NewFlowWorkorderListRequestModel.is_request_for_backlogcards = true;
            var Hold_wo = GetAllWorkOrdersNewflow(NewFlowWorkorderListRequestModel);

            NewFlowWorkorderListRequestModel.wo_status = new List<int> { (int)Status.Completed };
            NewFlowWorkorderListRequestModel.is_request_for_backlogcards = true;
            var completed_wo = GetAllWorkOrdersNewflow(NewFlowWorkorderListRequestModel);
                
            response.planned = planned_wo.list;
            response.released_open = open_wo.list;
            response.in_progress = in_progress_wo.list;
            response.on_hold = Hold_wo.list;
            response.complete = completed_wo.list;


            return response;
        }

        public async Task<UploadQuoteResponsemodel> UploadQuote(UploadQuoteRequestmodel requestmodel)
        {
            UploadQuoteResponsemodel response = new UploadQuoteResponsemodel();
            if (requestmodel.category_list != null && requestmodel.category_list.Count > 0)
            {
                bool insert = false;
                //  int insertint = 0;
                try
                {
                    int gc_count = 1;


                    List<AssetFormIO> asset_form_list = new List<AssetFormIO>();
                    List<WOcategorytoTaskMapping> WOcategorytoTaskMapping_list = new List<WOcategorytoTaskMapping>();
                    _UoW.BeginTransaction();
                    var get_wo = _UoW.WorkOrderRepository.GetWOByidforUpdate(requestmodel.wo_id);
                    foreach (var category in requestmodel.category_list)
                    {
                        int serial_no = 1;
                        //  var get_form = _UoW.WorkOrderRepository.GetFormIOByName(category.form_name);
                        string asset_class_code = category.asset_class_code.ToLower();
                        var get_asset_class = _UoW.WorkOrderRepository.GetAssetclassByCode(asset_class_code);
                        if (get_asset_class != null)
                        {
                            var get_AT_form = get_asset_class.AssetClassFormIOMapping.Where(x => x.wo_type == (int)Status.Acceptance_Test_WO && x.form_id != null).FirstOrDefault();

                            if (get_AT_form != null)
                            {
                                var get_form = _UoW.WorkOrderRepository.GetFormIOByName(get_AT_form.form_id.Value);
                                if (get_form.status == (int)Status.Active)
                                {
                                    WOInspectionsTemplateFormIOAssignment WOInspectionsTemplateFormIOAssignment = new WOInspectionsTemplateFormIOAssignment();
                                    WOInspectionsTemplateFormIOAssignment.wo_id = get_wo.wo_id;
                                    WOInspectionsTemplateFormIOAssignment.form_id = get_form.form_id;
                                    // var task = get_form.Tasks.FirstOrDefault();


                                    //  WOInspectionsTemplateFormIOAssignment.task_id = get_form.Tasks.FirstOrDefault().task_id;
                                    WOInspectionsTemplateFormIOAssignment.created_at = DateTime.UtcNow;
                                    WOInspectionsTemplateFormIOAssignment.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                                    WOInspectionsTemplateFormIOAssignment.status_id = (int)Status.open;
                                    WOInspectionsTemplateFormIOAssignment.inspectiontemplate_asset_class_id = get_asset_class.inspectiontemplate_asset_class_id;
                                    WOInspectionsTemplateFormIOAssignment.group_string = category.group_string;
                                    insert = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Insert(WOInspectionsTemplateFormIOAssignment);

                                    bool is_parent_task_assigned = false;


                                    var asset_names = category.category_task_list.Where(x => !String.IsNullOrEmpty(x.identification)).Select(x => x.identification.ToLower().Trim()).ToList();
                                    Asset get_asset_ = _UoW.WorkOrderRepository.GetAssetByAssetnames(asset_names);
                                    if (get_asset_ != null)
                                    {
                                        _UoW.RollbackTransaction();
                                        response.success = (int)ResponseStatusNumber.internal_asset_id_must_be_unique;
                                        response.form_name = get_asset_.name;
                                        return response;
                                    }
                                    //FormioDynamicobj.Root dynamic_form_obj = null;
                                    dynamic dynamic_form_obj = new System.Dynamic.ExpandoObject();
                                    dynamic_form_obj.data = new System.Dynamic.ExpandoObject() as dynamic;
                                    dynamic_form_obj.data.header = new System.Dynamic.ExpandoObject() as dynamic;

                                    foreach (var category_task in category.category_task_list)
                                    {
                                        if (get_asset_ == null)
                                        {
                                            WOcategorytoTaskMapping WOcategorytoTaskMapping = new WOcategorytoTaskMapping();
                                            // WOcategorytoTaskMapping.WOcategorytoTaskMapping_id = Guid.NewGuid();
                                            WOcategorytoTaskMapping.wo_inspectionsTemplateFormIOAssignment_id = WOInspectionsTemplateFormIOAssignment.wo_inspectionsTemplateFormIOAssignment_id;
                                            // WOcategorytoTaskMapping.task_id = get_form.Tasks.FirstOrDefault().task_id;
                                            WOcategorytoTaskMapping.wo_id = get_wo.wo_id;
                                            WOcategorytoTaskMapping.created_at = DateTime.UtcNow;
                                            WOcategorytoTaskMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                                            WOcategorytoTaskMapping.serial_number = serial_no;
                                            serial_no = serial_no + 1;
                                            if (!is_parent_task_assigned)
                                            {
                                                WOcategorytoTaskMapping.is_parent_task = true;
                                                is_parent_task_assigned = true;
                                            }
                                            WOcategorytoTaskMapping_list.Add(WOcategorytoTaskMapping);
                                            insert = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Insert(WOcategorytoTaskMapping);

                                            /// insert asset form IO
                                            /// 
                                            AssetFormIO AssetFormIO = new AssetFormIO();
                                            // AssetFormIO.asset_form_id = Guid.NewGuid();
                                            AssetFormIO.site_id = get_wo.site_id; // Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                            AssetFormIO.form_id = get_form.form_id;
                                            AssetFormIO.asset_form_name = get_form.form_name;
                                            AssetFormIO.asset_form_type = get_form.FormIOType.form_type_name;
                                            AssetFormIO.asset_form_description = get_form.form_description;
                                            //AssetFormIO.asset_form_data = get_form.form_data;
                                            AssetFormIO.created_at = DateTime.UtcNow;
                                            AssetFormIO.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                            AssetFormIO.status = (int)Status.open;
                                            AssetFormIO.wo_id = get_wo.wo_id;
                                            AssetFormIO.WOcategorytoTaskMapping_id = WOcategorytoTaskMapping.WOcategorytoTaskMapping_id;
                                            AssetFormIO.form_retrived_asset_name = category_task.identification;
                                            AssetFormIO.form_retrived_location = category_task.location;


                                            dynamic_form_obj.data.header.parent = category_task.location;
                                            dynamic_form_obj.data.header.identification = category_task.identification;
                                            if (get_wo.wo_type == (int)Status.Acceptance_Test_WO)
                                            {
                                                dynamic_form_obj.data.header.workOrder = get_wo.manual_wo_number;
                                            }
                                            else if (get_wo.wo_type == (int)Status.Maintenance_WO)
                                            {
                                                dynamic_form_obj.data.header.workOrder = get_wo.manual_wo_number;
                                            }
                                            dynamic_form_obj.data.header.customer = get_wo.Sites.customer;
                                            dynamic_form_obj.data.header.customerAddress = get_wo.Sites.customer_address;
                                            dynamic_form_obj.data.header.owner = get_wo.Sites.ClientCompany.owner;
                                            dynamic_form_obj.data.header.ownerAddress = get_wo.Sites.ClientCompany.owner_address;
                                            dynamic_form_obj.data.header.building = category_task.building;
                                            dynamic_form_obj.data.header.floor = category_task.floor;
                                            dynamic_form_obj.data.header.room = category_task.room;
                                            dynamic_form_obj.data.header.section = category_task.section;
                                            dynamic_form_obj.data.header.note = category_task.note;

                                            string str = Newtonsoft.Json.JsonConvert.SerializeObject(dynamic_form_obj);
                                            AssetFormIO.asset_form_data = str;

                                            asset_form_list.Add(AssetFormIO);

                                            insert = await _UoW.BaseGenericRepository<AssetFormIO>().Insert(AssetFormIO);
                                            // _UoW.SaveChanges();
                                            // _UoW.CommitTransaction();
                                            // insertint = await _UoW.AssetFormIORepository.Insert(AssetFormIO);
                                            Dispose();
                                            //   gc_count++;
                                            //  if(gc_count == 20)
                                            //   {
                                            //       GC.Collect();
                                            //       gc_count = 1;

                                            //    }

                                        }
                                        else
                                        {
                                            _UoW.RollbackTransaction();
                                            response.success = (int)ResponseStatusNumber.internal_asset_id_must_be_unique;
                                            response.form_name = category_task.identification;
                                            return response;
                                        }
                                    }


                                }
                                else
                                {
                                    _UoW.RollbackTransaction();
                                    response.success = (int)ResponseStatusNumber.draft_form;
                                    response.form_name = get_form.form_name;//category.form_name;
                                    return response;
                                }
                            }
                            else
                            {
                                _UoW.RollbackTransaction();
                                response.success = (int)ResponseStatusNumber.no_form_available;
                                response.form_name = category.form_name;
                                return response;
                            }
                        }
                        else
                        {
                            _UoW.RollbackTransaction();
                            response.success = (int)ResponseStatusNumber.asset_class_not_found;
                            response.form_name = category.asset_class_code;
                            return response;

                        }
                    }
                    // insert = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().InsertList(WOcategorytoTaskMapping_list);
                    //  insert = await _UoW.BaseGenericRepository<AssetFormIO>().InsertList(asset_form_list);
                    _UoW.SaveChanges();
                    _UoW.CommitTransaction();
                    response.success = (int)ResponseStatusNumber.Success;
                    response.form_name = null;
                    return response;
                }
                catch (Exception ex)
                {
                    _UoW.RollbackTransaction();
                    response.success = (int)ResponseStatusNumber.Error;
                    response.form_name = null;
                    return response;

                }
            }
            return response;
        }

        public async Task<GetWOsForOfflineResponsemodel> GetWOsForOffline(string userid, bool want_to_remove_nfpa_issue)
        {
            string  guid_form_logs = Guid.NewGuid().ToString();
            GetWOsForOfflineResponsemodel response = new GetWOsForOfflineResponsemodel();

            if (UpdatedGenericRequestmodel.CurrentUser.device_uuid != null && UpdatedGenericRequestmodel.CurrentUser.device_uuid != Guid.Empty)
            {
                bool force_to_reset = false;
                bool force_to_reset_master_forms = false;
                DateTime? sync_time = null;
                DateTime? old_sync_time = null;
                DateTime? master_form_sync_time = null;
                var device_info = _UoW.DeviceRepository.GetDeviceInfoByUUId(UpdatedGenericRequestmodel.CurrentUser.device_uuid);

                var user_site_id = await _UoW.UserRepository.GetUserByID(UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString());
                old_sync_time = device_info.last_sync_time;

                if (device_info.last_sync_time == null)
                {
                    force_to_reset_master_forms = true;
                }

                if (device_info.last_sync_time != null)
                {
                    master_form_sync_time = old_sync_time;
                }
                if (user_site_id.ac_active_site == device_info.last_sync_site_id)
                {
                    force_to_reset = false;
                    sync_time = device_info.last_sync_time;
                }
                else
                {
                    force_to_reset = true;
                }
                device_info.last_sync_site_id = user_site_id.ac_active_site;
                device_info.last_sync_time = DateTime.UtcNow;
                device_info.modified_at = DateTime.UtcNow;
                device_info.modified_by = userid;
                if (!string.IsNullOrEmpty(UpdatedGenericRequestmodel.CurrentUser.app_version))
                {
                    device_info.app_version = UpdatedGenericRequestmodel.CurrentUser.app_version;
                }
                bool update_device_info = await _UoW.BaseGenericRepository<DeviceInfo>().Update(device_info);

                #region WO_data
                var wos = _UoW.WorkOrderRepository.GetWOsForOffline(userid, sync_time);
                var womapper = _mapper.Map<List<NewFlowWorkorderListResponseModel>>(wos.Item1);
                womapper.ForEach(s =>
                {
                    if (s.wo_type == (int)Status.Acceptance_Test_WO)
                    {
                        s.wo_number = "AT" + s.wo_number;
                    }
                    else if (s.wo_type == (int)Status.Maintenance_WO)
                    {
                        s.wo_number = "WO" + s.wo_number;
                    }
                });
                response.workorders = womapper;
                #endregion WO_data
               
                _logger.LogInformation( guid_form_logs + " completed wo " + DateTime.UtcNow.ToString());
                
                var wos_attchments = _UoW.WorkOrderRepository.GetWOsAttachmentsForOffline(sync_time);
                var woattchmentmapper = _mapper.Map<List<WorkOrderAttachmentsResponseModel>>(wos_attchments);
                response.WorkOrderAttachments = woattchmentmapper;
                /*  #region hierarcy_data
                  var hierarchy_data = _UoW.AssetRepository.GetAllRawHierarchyAssetsForOffline(sync_time);
                  response.asset_hierarchy = _mapper.Map<List<GetAllHierarchyAssetsResponseModel>>(hierarchy_data);
                  response.asset_hierarchy.ForEach(x =>
                  {
                      if (!String.IsNullOrEmpty(x.children))
                      {
                          x.is_child_available = true;
                      }
                  });
                  #endregion hierarcy_data
                  */
                #region MasterFormData  // master formio data
                ListViewModel<FormIOResponseModel> response1 = new ListViewModel<FormIOResponseModel>();
                var formios = _UoW.formIORepository.GetAllFormsforOffline(master_form_sync_time);
                response1.list = _mapper.Map<List<FormIOResponseModel>>(formios.Item1);
                response.formio_master_forms = response1.list;
                #endregion MasterFormData

                _logger.LogInformation(guid_form_logs + " completed master forms " + DateTime.UtcNow.ToString());

                var wo_ids = wos.Item1.Select(x => x.wo_id).ToList();

                #region WOTaskstoFormMappingData // Task forms
                List<GetFormByWOTaskIDResponsemodel> formresponse = null;
                var get_asset_form = _UoW.WorkOrderRepository.GetAllAssetFormByWOIDOffline(new List<Guid>(), sync_time);
                if (get_asset_form != null)
                {
                    formresponse = _mapper.Map<List<GetFormByWOTaskIDResponsemodel>>(get_asset_form);
                    var techician_ids = formresponse.Where(q => !String.IsNullOrEmpty(q.requested_by)).Select(x => Guid.Parse(x.requested_by)).Distinct().ToList();
                    var technician_user = _UoW.WorkOrderRepository.GetUsersByIDs(techician_ids);
                    formresponse.ForEach(x =>
                    {
                        x.asset_form_data = get_asset_form.Where(q => q.asset_form_id == x.asset_form_id).Select(q => q.asset_form_data).FirstOrDefault();
                        if (!String.IsNullOrEmpty(x.requested_by))
                        {
                            var user = technician_user.Where(z => z.uuid == Guid.Parse(x.requested_by)).FirstOrDefault();
                            if (user != null)
                            {
                                x.requested_technician_name = user.firstname + " " + user.lastname;
                            }
                        }
                        /*if (x.asset_form_data != null)
                        {
                            var dynamic_form_obj = JsonSerializer.Deserialize<FormioDynamicDataobj.Root>(x.asset_form_data);
                            x.asset_form_data = JsonSerializer.Serialize(dynamic_form_obj.data);
                        }*/
                    });
                }
                response.wo_task_forms_list = formresponse;
                #endregion WOTaskstoFormMappingData

                List<AssetFormIO> WO_Assetformios = _mapper.Map<List<AssetFormIO>>(get_asset_form);
                var categories = _UoW.WorkOrderRepository.GetAllCatagoryForWOOffline(sync_time);

                #region WOCategoriestoTasksMappingData // Tasks

                List<GetWOcategoryTaskByCategoryIDListResponsemodel> task_mapping = new List<GetWOcategoryTaskByCategoryIDListResponsemodel>();
                var task_lists = _UoW.WorkOrderRepository.GetAllWOCategoryTaskByWOidOffline(sync_time);
                try
                {
                    //if sync time is not null then get asset form data based on WOcategorytoTaskMapping_id
                    List<db.ExcludePropertiesfromDBHelper.AssetFormIOExclude> asset_form_io_by_task_id = new List<db.ExcludePropertiesfromDBHelper.AssetFormIOExclude>();
                    if (sync_time != null)
                    {
                        asset_form_io_by_task_id = _UoW.WorkOrderRepository.GetAssetFormBycategorytaskid(task_lists.Select(x => x.WOcategorytoTaskMapping_id).ToList(), sync_time);
                        var task_categories = _UoW.WorkOrderRepository.GetCatagoryForWOOfflineByCategoryids(task_lists.Select(x => x.wo_inspectionsTemplateFormIOAssignment_id).ToList());
                        categories.AddRange(task_categories);
                        WO_Assetformios = _mapper.Map<List<AssetFormIO>>(asset_form_io_by_task_id);
                    }
                    else
                    {
                        asset_form_io_by_task_id = get_asset_form; // if first time then all data will be mapped
                        WO_Assetformios = _mapper.Map<List<AssetFormIO>>(asset_form_io_by_task_id);
                    }
                    task_lists.ForEach(x =>
                    {
                        x.AssetFormIO = WO_Assetformios.Where(q => q.WOcategorytoTaskMapping_id == x.WOcategorytoTaskMapping_id).FirstOrDefault();
                        x.WOInspectionsTemplateFormIOAssignment = categories.Where(q => q.wo_inspectionsTemplateFormIOAssignment_id == x.wo_inspectionsTemplateFormIOAssignment_id).FirstOrDefault();
                    });
                    if (task_lists != null && task_lists.Count > 0)
                    {
                        // int serial_no = 0;
                        task_mapping = _mapper.Map<List<GetWOcategoryTaskByCategoryIDListResponsemodel>>(task_lists);
                        var technician_ids = task_mapping.Where(x => x.technician_id != null).Select(x => x.technician_id.Value).Distinct().ToList();
                        var technicians = _UoW.WorkOrderRepository.GetUserByIDs(technician_ids);
                        task_mapping.ForEach(x =>
                        {
                            // serial_no++;ne s
                            //  x.serial_number = serial_no;
                            if (x.technician_id != null && x.technician_id != Guid.Empty)
                            {
                                var technician_user = technicians.Where(e => e.uuid == x.technician_id).FirstOrDefault();
                                if (technician_user != null)
                                {
                                    x.technician_name = technician_user.firstname + " " + technician_user.lastname;
                                }
                            }
                            var form = asset_form_io_by_task_id.Where(q => q.WOcategorytoTaskMapping_id == x.WOcategorytoTaskMapping_id).FirstOrDefault();
                            if (form != null)
                            {
                                x.status_name = form.status_name;
                            }

                        });
                    }
                    response.wo_category_task_list = task_mapping;
                }
                catch (Exception ex)
                {

                }
                #endregion WOCategoriestoTasksMappingData

                // distinct cateories
                categories = categories
                                    .GroupBy(p => p.wo_inspectionsTemplateFormIOAssignment_id)
                                    .Select(g => g.First())
                                    .ToList();

                _logger.LogInformation(guid_form_logs + " completed categories " + DateTime.UtcNow.ToString());

                #region WOCategoriesMappingData  // categories

                response.form_category_list = new List<form_categoty_list>();
                //if sync time is not null then get categorytaskmapping by categoryids based on WOcategorytoTaskMapping_id
                List<WOcategorytoTaskMapping> wocategorytaskbycategoryids = new List<WOcategorytoTaskMapping>();
                // if (sync_time != null)
                // {

                wocategorytaskbycategoryids = _UoW.WorkOrderRepository.Getcategorytaskbycategoryids(categories.Select(x => x.wo_inspectionsTemplateFormIOAssignment_id).ToList(), sync_time);
                // asset form io
                var asset_form_io_by_task_id1 = _UoW.WorkOrderRepository.GetAssetFormBycategorytaskid(wocategorytaskbycategoryids.Select(x => x.WOcategorytoTaskMapping_id).ToList(), sync_time);
                WO_Assetformios = _mapper.Map<List<AssetFormIO>>(asset_form_io_by_task_id1);

                wocategorytaskbycategoryids.ForEach(x =>
                {
                    x.AssetFormIO = WO_Assetformios.Where(q => q.WOcategorytoTaskMapping_id == x.WOcategorytoTaskMapping_id).FirstOrDefault();
                    x.WOInspectionsTemplateFormIOAssignment = categories.Where(q => q.wo_inspectionsTemplateFormIOAssignment_id == x.wo_inspectionsTemplateFormIOAssignment_id).FirstOrDefault();
                });
                //}

                categories.ForEach(q =>
                {
                    q.WOcategorytoTaskMapping = wocategorytaskbycategoryids.Where(w => w.wo_inspectionsTemplateFormIOAssignment_id == q.wo_inspectionsTemplateFormIOAssignment_id).ToList();
                    form_categoty_list form_categoty_list = new form_categoty_list();
                    form_categoty_list.wo_inspectionsTemplateFormIOAssignment_id = q.wo_inspectionsTemplateFormIOAssignment_id;
                    form_categoty_list.form_category_name = q.InspectionsTemplateFormIO.FormIOType.form_type_name;
                    form_categoty_list.form_name = q.InspectionsTemplateFormIO.form_name;
                    ///form_categoty_list.form_data = q.InspectionsTemplateFormIO.form_data;
                    form_categoty_list.form_description = q.Tasks != null ? q.Tasks.description : null;
                    form_categoty_list.WP = q.InspectionsTemplateFormIO.work_procedure;
                    form_categoty_list.wo_id = q.wo_id;
                    form_categoty_list.is_archived = q.is_archived;
                    form_categoty_list.group_string = q.group_string;
                    if (q.InspectionTemplateAssetClass != null)
                    {
                        form_categoty_list.asset_class_name = q.InspectionTemplateAssetClass.asset_class_name;
                    }
                    if (q.Parent_Asset != null)
                    {
                        form_categoty_list.parent_asset_name = q.Parent_Asset.name;
                        form_categoty_list.parent_asset_id = q.asset_id;
                    }
                    if (q.User != null)
                    {
                        //  form_categoty_list.technician_name = q.User.firstname + q.User.lastname;
                        //    form_categoty_list.technician_id = q.User.uuid;
                        form_categoty_list.parent_asset_id = q.asset_id;
                    }
                    form_categoty_list.status_id = q.status_id;
                    form_categoty_list.status_name = q.StatusMaster.status_name;
                    if (q.WOcategorytoTaskMapping != null && q.WOcategorytoTaskMapping.Count > 0)
                    {
                        form_categoty_list.progress_total = q.WOcategorytoTaskMapping.Where(t => !t.is_archived).Count(); // total task in category
                        var category_to_tasks = q.WOcategorytoTaskMapping.Where(t => !t.is_archived).Select(x => x.WOcategorytoTaskMapping_id).ToList();
                        var asset_form_io = asset_form_io_by_task_id1.Where(q => q.WOcategorytoTaskMapping_id != null && category_to_tasks.Contains(q.WOcategorytoTaskMapping_id.Value)).ToList();
                        if (asset_form_io != null && asset_form_io.Count > 0)
                        {
                            form_categoty_list.progress_completed = asset_form_io.Where(x => x.status == (int)Status.Completed).Count();
                        }
                        //form_categoty_list.progress_completed = q.WOcategorytoTaskMapping.Where(t => !t.is_archived).Select(x => x.AssetFormIO.status == (int)Status.Completed).Count();
                    }
                    response.form_category_list.Add(form_categoty_list);
                });
                #endregion WOCategoriesMappingData

                _logger.LogInformation(guid_form_logs + " completed categories " + DateTime.UtcNow.ToString());

                #region AssetData
                //FilterAssetsRequestModel requestModel = new FilterAssetsRequestModel();
                ListViewModel<AssetsResponseModel> responseModel = new ListViewModel<AssetsResponseModel>();
                //requestModel.status = (int)Status.Active;
                var assetes = _UoW.WorkOrderRepository.OfflineAssetData(sync_time);
                if (assetes?.list?.Count > 0)
                {
                    responseModel.list = _mapper.Map<List<AssetsResponseModel>>(assetes.list);
                    responseModel.list.ForEach(x =>
                    {
                        if (!String.IsNullOrEmpty(x.children))
                        {
                            x.is_child_available = true;
                        }
                    });
                }
                response.asset_list = responseModel.list;
                #endregion AssetData

                #region formIOassetClassMapping
                /*   var getformioassetclass = _UoW.WorkOrderRepository.GetAssetClassFormIOMappingOffline(sync_time);
                   if (getformioassetclass.Count > 0)
                   {
                       response.form_io_asset_class_list = _mapper.Map<List<mobile_asset_class_form_io_mapping>>(getformioassetclass);
                   }
                */
                #endregion formIOassetClassMapping

                #region asset_profile_image
                List<AssetProfileImageList> asset_image_list = new List<AssetProfileImageList>();
                //requestModel.status = (int)Status.Active;
                var asset_images = _UoW.WorkOrderRepository.GetAssetProfileImagesForoffline(sync_time);
                response.asset_profile_image_list = _mapper.Map<List<AssetProfileImageList>>(asset_images);
                //= responseModel.list;

                #endregion asset_profile_image

                _logger.LogInformation(guid_form_logs + " completed till images " + DateTime.UtcNow.ToString());

                /// uncomment this when impletemtn starts
                #region MasterTasks
                ListViewModel<TaskResponseModel> taskResponse = new ListViewModel<TaskResponseModel>();
                var taskDetails = _UoW.TaskRepository.GetAllTasksForWOOffline(master_form_sync_time);
                if (taskDetails?.Count > 0)
                {
                    taskResponse.listsize = taskDetails.Count;
                    taskDetails = taskDetails.ToList();
                    taskDetails.ForEach(x =>
                    {
                        x.AssetTasks = x.AssetTasks.Where(q => !q.is_archive).ToList();
                    });
                    taskResponse.list = _mapper.Map<List<TaskResponseModel>>(taskDetails);
                    //var assetresponse = _mapper.Map<AssetsResponseModel>(asset);
                    response.MasterTasks = taskResponse.list;
                }

                #endregion MasterTasks

                #region MasterClass

                var get_master_class = _UoW.WorkOrderRepository.GetMasterClassForOffline(sync_time);
                response.MasterAssetClass = _mapper.Map<List<MobileAssetClassResponsemodel>>(get_master_class);
                #endregion MasterClass
                _logger.LogInformation(guid_form_logs + " completed till class " + DateTime.UtcNow.ToString());
                #region AssetclassFormMapping

                var get_class_form_mapping = _UoW.WorkOrderRepository.GetMasterClassFormMappingForOffline(sync_time);
                response.AssetClassFormMapping = _mapper.Map<List<MobileAssetClassFormMappingResponsemodel>>(get_class_form_mapping);

                #endregion AssetclassFormMapping

                #region OBWOAssetDetails
                var get_ob_assets = _UoW.WorkOrderRepository.GetOBAssetdetailsOffline(sync_time);
                response.OBWOAssetList = _mapper.Map<List<MobileOBWOAssetListResponsemodel>>(get_ob_assets);
                if (response.OBWOAssetList != null && response.OBWOAssetList.Count > 0)
                {
                    var techician_ids = response.OBWOAssetList.Where(q => q.technician_user_id != null).Select(x => x.technician_user_id.Value).Distinct().ToList();
                    var technician_user = _UoW.WorkOrderRepository.GetUsersByIDs(techician_ids);
                    foreach (var OBAsset in response.OBWOAssetList)
                    {
                        if (OBAsset.technician_user_id != null)
                        {
                            var user = technician_user.Where(x => x.uuid == OBAsset.technician_user_id).FirstOrDefault();
                            if (user != null)
                            {
                                OBAsset.technician_name = user.firstname + " " + user.lastname;
                            }
                        }

                    }

                }
                #endregion OBWOAssetDetails
                _logger.LogInformation(guid_form_logs + " completed till obwoassetdetails " + DateTime.UtcNow.ToString());

                #region OBWOlineBuildingMapping
                var get_WOline_Building_mapping = _UoW.WorkOrderRepository.GetWOLineBuildingMappingOffline(sync_time);
                response.WOLineBuildingMappingOffline = _mapper.Map<List<WOLineBuildingMappingOffline>>(get_WOline_Building_mapping);
                #endregion OBWOlineBuildingMapping

                #region OBWOFedByAssetMapping
                var get_ob_fed_by_assets = _UoW.WorkOrderRepository.GetOBFedByAssetMappingOffline(sync_time);
                response.OBWOAssetFedByMapping = _mapper.Map<List<mobile_fed_by_asset_mapping>>(get_ob_fed_by_assets);
                response.OBWOAssetFedByMapping.ForEach(x =>
                {
                    if (!x.is_parent_from_ob_wo)
                    {
                        var asset = _UoW.WorkOrderRepository.GetAssetByFedBy(x.parent_asset_id);
                        if (asset != null)
                        {
                            x.parent_asset_name = asset.name;
                        }
                    }
                    else
                    {
                        var asset = _UoW.WorkOrderRepository.GetFedByOBAssetByID(x.parent_asset_id);
                        if (asset != null)
                        {
                            x.parent_asset_name = asset.asset_name;
                        }
                    }
                });
                #endregion OBWOFedByAssetMapping
                _logger.LogInformation(guid_form_logs + " completed till obwofedbyassetmapping " + DateTime.UtcNow.ToString());

                #region OBWOAssetDetailsImages
                var get_ob_assets_images = _UoW.WorkOrderRepository.GetOBAssetdetailsImagesOffline(sync_time);
                response.OBWOAssetImagesList = _mapper.Map<List<MobileOBWOAssetImagesResponsemodel>>(get_ob_assets_images);
                #endregion OBWOAssetDetailsImages

                #region OBWOAssetImageLabelmapping
                var get_ob_assets_images_labels = _UoW.WorkOrderRepository.GetOBAssetdetailsImagesLabelsOffline(sync_time);
                response.OBWOAssetImagesLabelMapping = _mapper.Map<List<wo_ob_asset_image_label>>(get_ob_assets_images_labels);
                #endregion OBWOAssetImageLabelmapping

                _logger.LogInformation(guid_form_logs + " completed till obwoassetimagelabelmapping " + DateTime.UtcNow.ToString());

                #region AssetParentMapping
                var get_assets_asset_parents = _UoW.WorkOrderRepository.GetAssetParentMappingOffline(sync_time);
                response.asset_parent_mapping_list = _mapper.Map<List<MobileAssetParentsMapping>>(get_assets_asset_parents);
                if (response.asset_parent_mapping_list != null && response.asset_parent_mapping_list.Count > 0)
                {
                    List<Guid> asset_parents = response.asset_parent_mapping_list.Where(x => x.parent_asset_id != null).Select(x => x.parent_asset_id.Value).ToList();
                    var db_asset_parents = _UoW.WorkOrderRepository.GetAssetsByFedByIDs(asset_parents);
                    response.asset_parent_mapping_list.ForEach(parent =>
                    {
                        parent.parent_asset_name = db_asset_parents.Where(x => x.asset_id == parent.parent_asset_id).FirstOrDefault() != null ? db_asset_parents.Where(x => x.asset_id == parent.parent_asset_id).FirstOrDefault().name : null;

                    });
                }
                #endregion AssetParentMapping

                #region Master Building Data
                var master_buildings = _UoW.WorkOrderRepository.GetFormIOBuildingsOffline(sync_time);
                response.formio_master_buildings = _mapper.Map<List<MobileFormIOMasterBuildings>>(master_buildings);

                var master_floors = _UoW.WorkOrderRepository.GetFormIOFloorsOffline(sync_time);
                response.formio_master_floors = _mapper.Map<List<MobileFormIOMasterFloors>>(master_floors);

                var master_rooms = _UoW.WorkOrderRepository.GetFormIORoomsOffline(sync_time);
                response.formio_master_rooms = _mapper.Map<List<MobileFormIOMasterRooms>>(master_rooms);

                var master_sections = _UoW.WorkOrderRepository.GetFormIOSectionOffline(sync_time);
                response.formio_master_section = _mapper.Map<List<MobileFormIOMasterSection>>(master_sections);
                #endregion Master Building Data

                _logger.LogInformation(guid_form_logs + " completed till MasterBuildingData  " + DateTime.UtcNow.ToString());

                #region Asset PM mapping
                var assetpms = _UoW.WorkOrderRepository.GetAssetPmsForOffline(sync_time);
                response.asset_pms_mapping = _mapper.Map<List<AssetPmsOffline>>(assetpms);
                #endregion Asset PM mapping

                #region Asset Main Issue 

                var asset_issues = _UoW.WorkOrderRepository.GetAssetMainIssueForOffline(sync_time);
                response.asset_issue_mapping = _mapper.Map<List<AssetIssueListOffline>>(asset_issues);

                #endregion Asset Main Issue 

                _logger.LogInformation(guid_form_logs + " completed till asset main issue " + DateTime.UtcNow.ToString());

                #region Asset WOline Issue 

                var asset_woline_issues = _UoW.WorkOrderRepository.GetAssetWoloineIssueForOffline(sync_time);
                if (want_to_remove_nfpa_issue) //  remove NFPA issue for backward compatible
                {
                    asset_woline_issues = asset_woline_issues.Where(x => x.issue_caused_id != (int)WOLine_Temp_Issue_Caused.NFPA_70B_Violation).ToList();
                }
                response.asset_woline_issue_mapping = _mapper.Map<List<AssetWOlineIssueListOffline>>(asset_woline_issues);

                #endregion Asset WOline Issue 

                #region Asset Main Issue Images 

                var asset_main_issues_images = _UoW.WorkOrderRepository.GetAssetIssueImagesForOffline(sync_time);
                response.asset_issue_image_mapping = _mapper.Map<List<AssetIssueImageMapping>>(asset_main_issues_images);

                #endregion Asset Main Issue Images 

                _logger.LogInformation(guid_form_logs + " completed till asset main issue images " + DateTime.UtcNow.ToString());


                #region Asset IR Visual Image Mapping

                var asset_ir_img_mapping = _UoW.WorkOrderRepository.GetAssetIRVisualImageMappingOffline(sync_time);
                response.asset_ir_visual_image_list = _mapper.Map<List<AssetIRVisualImageMappingList>>(asset_ir_img_mapping);
                #endregion Asset IR Visual Image Mapping

                #region AssetAttachments
                var asset_attachments = _UoW.WorkOrderRepository.GetAssetAttachmentsMappingOffline(sync_time);
                response.asset_attachment_mapping = _mapper.Map<List<AssetAttachmentsOffline>>(asset_attachments);
                #endregion AssetAttachments
                _logger.LogInformation(guid_form_logs + " completed till asset attachment" + DateTime.UtcNow.ToString());

                #region WolineToplevelAssets
                var woline_toplevel_assets = _UoW.WorkOrderRepository.GetWolineToplevelAssetMappingOffline(sync_time);
                response.woline_toplevel_asset_mapping = _mapper.Map<List<WolineToplevelAssetOffline>>(woline_toplevel_assets);
                #endregion WolineToplevelAssets

                #region WolineSublevelAssets
                var woline_sublevel_assets = _UoW.WorkOrderRepository.GetWolineSublevelAssetMappingOffline(sync_time);
                response.woline_sublevel_asset_mapping = _mapper.Map<List<WolineSublevelAssetOffline>>(woline_sublevel_assets);
                #endregion WolineSublevelAssets
                _logger.LogInformation(guid_form_logs + " completed till woline sublevel " + DateTime.UtcNow.ToString());

                #region AssetsToplevelAssets
                var asset_toplevel_assets = _UoW.WorkOrderRepository.GetAssetToplevelAssetMappingOffline(sync_time);
                response.asset_toplevel_asset_mapping = _mapper.Map<List<AssetToplevelAssetOffline>>(asset_toplevel_assets);
                #endregion AssetsToplevelAssets

                #region AssetsSublevelAssets
                var asset_sublevel_assets = _UoW.WorkOrderRepository.GetAssetSublevelAssetMappingOffline(sync_time);
                response.asset_sublevel_asset_mapping = _mapper.Map<List<AssetSublevelAssetOffline>>(asset_sublevel_assets);
                #endregion AssetsSublevelAssets

                _logger.LogInformation(guid_form_logs + " completed till asset sublevel " + DateTime.UtcNow.ToString());

                #region AssetsFormioEquipments
                var formio_equipments = _UoW.WorkOrderRepository.GetFormIOEquipmentOffline(sync_time);
                response.formio_master_equipments = _mapper.Map<List<FormEquipmentsOffline>>(formio_equipments);
                #endregion AssetsFormioEquipments

                #region PMMasterFormData  // master formio data
                var PMMasterForm = _UoW.WorkOrderRepository.GetPMMasterFormForOffline(master_form_sync_time);
                response.pm_master_forms = _mapper.Map<List<GetPMMasterFormsOffline>>(PMMasterForm);
                #endregion PMMasterFormData

                _logger.LogInformation(guid_form_logs + " completed till pm master form data " + DateTime.UtcNow.ToString());

                #region PMMasterData
                var PMMasterData = _UoW.WorkOrderRepository.GetPMMasterForOffline(master_form_sync_time);
                response.pm_masters_list = _mapper.Map<List<PMmasterOffline>>(PMMasterData);
                #endregion PMMasterData

                #region PMPlanMasterData
                var PMPlanMasterData = _UoW.WorkOrderRepository.GetPMPlanMasterForOffline(master_form_sync_time);
                response.pm_plan_master_list = _mapper.Map<List<PMPlanMasterOfffline>>(PMPlanMasterData);
                #endregion PMPlanMasterData

                _logger.LogInformation(guid_form_logs + " completed till pm plan master data " + DateTime.UtcNow.ToString());

                #region PMMasterData
                var PMCategoryMasterData = _UoW.WorkOrderRepository.GetPMCategoryMasterForOffline(master_form_sync_time);
                response.pm_category_master_list = _mapper.Map<List<PMCategoryMasterOffline>>(PMCategoryMasterData);
                #endregion PMMasterData

                #region PMSubmittedData
                var PMSubmittedData = _UoW.WorkOrderRepository.GetPMSubmittedData(sync_time);
                response.pm_submitted_form_data = _mapper.Map<List<GetPMSubmittedDataOffline>>(PMSubmittedData);
                #endregion PMSubmittedData

                _logger.LogInformation(guid_form_logs + " completed till pm submitted data " + DateTime.UtcNow.ToString());

                #region AssetPMtriggerConditionMapping
                var get_asset_triiger = _UoW.WorkOrderRepository.GetAssetPMTriggerConditionMappingOffline(sync_time);
                response.asset_pms_trigger_condition_mapping = _mapper.Map<List<AssetPMTriggerConditionmappingoffline>>(get_asset_triiger);
                #endregion AssetPMtriggerConditionMapping


                #region TempLocationdata
                // temp building 
                var get_temp_building = _UoW.WorkOrderRepository.GetTempBuildingforOffline(sync_time);
                response.temp_formio_building = _mapper.Map<List<TempLocationBuildingOffline>>(get_temp_building);

                // temp Floor 
                var get_temp_floor = _UoW.WorkOrderRepository.GetTempFloorforOffline(sync_time);
                response.temp_formio_floor = _mapper.Map<List<TempLocationFloorOffline>>(get_temp_floor);

                // temp Room 
                var get_temp_room = _UoW.WorkOrderRepository.GetTempRoomforOffline(sync_time);
                response.temp_formio_room = _mapper.Map<List<TempLocationRoomOffline>>(get_temp_room);

                // temp Section 
                var get_temp_section = _UoW.WorkOrderRepository.GetTempSectionforOffline(sync_time);
                response.temp_formio_section = _mapper.Map<List<TempLocationSectionOffline>>(get_temp_section);
                #endregion TempLocationdata
                _logger.LogInformation(guid_form_logs + " completed till temp location data " + DateTime.UtcNow.ToString());


                #region Templocationwolinemapping
                var get_temp_location_wolinemapping = _UoW.WorkOrderRepository.GetTemplocationwolineMappingoffline(sync_time);
                response.temp_location_woline_mapping = _mapper.Map<List<TempLocationWolineMappingOffline>>(get_temp_location_wolinemapping);
                #endregion Templocationwolinemapping

                #region TempAssetpmsMappings
                var get_temp_assetpms = _UoW.WorkOrderRepository.GetTempassetpmsoffline(sync_time);
                response.temp_assetpm_mapping = _mapper.Map<List<TempAssetPMsMappingOffline>>(get_temp_assetpms);
                #endregion TempAssetpmsMappings

                #region TempActiveAssetpmsMappings
                var get_temp_active_assetpms = _UoW.WorkOrderRepository.GetTempActiveassetpmsoffline(sync_time);
                response.temp_active_assetpm_woline_mapping = _mapper.Map<List<TempActiveAssetPMWOlineMappingOffline>>(get_temp_active_assetpms);
                #endregion TempActiveAssetpmsMappings

                #region TempAssetMappings
                var get_temp_assets = _UoW.WorkOrderRepository.GetTempassetoffline(sync_time);
                response.temp_assetwoline_mapping = _mapper.Map<List<TempAssetWOlineMappingOffline>>(get_temp_assets);
                #endregion TempAssetMappings

                #region TempIssue_Images
                var get_temp_issue_images = _UoW.WorkOrderRepository.TempIssueImagesMappingOffline(sync_time);
                response.asset_woline_issue_images_mapping = _mapper.Map<List<asset_woline_issue_images>>(get_temp_issue_images);
                #endregion TempIssue_Images

                #region TempMaster Locations tables

                // temp master building 
                var get_tempmaster_building = _UoW.WorkOrderRepository.GetTempMasterBuildingforOffline(sync_time);
                response.temp_master_building = _mapper.Map<List<TempMasterBuildingMappingOffline>>(get_tempmaster_building);

                // temp master floor 
                var get_tempmaster_floor = _UoW.WorkOrderRepository.GetTempMasterFloorforOffline(sync_time);
                response.temp_master_floor = _mapper.Map<List<TempMasterFloorMappingOffline>>(get_tempmaster_floor);

                // temp master room 
                var get_tempmaster_room = _UoW.WorkOrderRepository.GetTempMasterRoomforOffline(sync_time);
                response.temp_master_room = _mapper.Map<List<TempMasterRoomMappingOffline>>(get_tempmaster_room);

                //temp master building wo mapping
                var get_tempMasterBuildingWOMappings = _UoW.WorkOrderRepository.GetTempMasterBuildingWOMappingforOffline(sync_time);
                response.temp_master_building_wo_mapping = _mapper.Map<List<TempMasterBuildingWOMappingOffline>>(get_tempMasterBuildingWOMappings);
                //temp master floor wo mapping
                var get_tempMasterFloorWOMappings = _UoW.WorkOrderRepository.GetTempMasterFloorWOMappingforOffline(sync_time);
                response.temp_master_floor_wo_mapping = _mapper.Map<List<TempMasterFloorWOMappingOffline>>(get_tempMasterFloorWOMappings);
                //temp master room wo mapping
                var get_tempMasterRoomWOMappings = _UoW.WorkOrderRepository.GetTempMasterRoomWOMappingforOffline(sync_time);
                response.temp_master_room_wo_mapping = _mapper.Map<List<TempMasterRoomWOMappingOffline>>(get_tempMasterRoomWOMappings);

                #endregion TempMaster Locations tables

                #region Workorder Technician Mappings
                var get_wo_tech_mapping = _UoW.WorkOrderRepository.GetWOTechnicanMappingForOffline(sync_time);
                response.workorder_technician_mapping = _mapper.Map<List<workorder_technician_mapping_class>>(get_wo_tech_mapping);
                #endregion Workorder Technician Mappings

                #region SiteWalkThroughTempPmEstimation
                var get_sitewalkthrough_temp_pm_estimation = _UoW.WorkOrderRepository.GetSiteWalkthroughTempPMEstimationOffline(sync_time);
                response.sitewalkthrough_temp_pm_estimation = _mapper.Map<List<SitewalkthroughTempPmEstimationOffline>>(get_sitewalkthrough_temp_pm_estimation);
                #endregion SiteWalkThroughTempPmEstimation

                response.force_to_reset = force_to_reset;
            }
            return response;
        }
        public WorkOrderDetailsByIdForExportPDFResponsemodel WorkOrderDetailsByIdForExportPDF(string wo_id)
        {
            WorkOrderDetailsByIdForExportPDFResponsemodel response = new WorkOrderDetailsByIdForExportPDFResponsemodel();
            var wo_details = _UoW.WorkOrderRepository.ViewWorkOrderDetailsById(Guid.Parse(wo_id));
            if (wo_details != null)
            {
                response = _mapper.Map<WorkOrderDetailsByIdForExportPDFResponsemodel>(wo_details);
                if (response.wo_type == (int)Status.Acceptance_Test_WO)
                {
                    response.wo_number = "AT" + response.wo_number;
                }
                else if (response.wo_type == (int)Status.Maintenance_WO)
                {
                    response.wo_number = "WO" + response.wo_number;
                }

                var get_wo_form_mapping = _UoW.WorkOrderRepository.GetWOFormiomapping(Guid.Parse(wo_id));
                response.form_category_list = new List<form_categoty_list_export>();
                List<Guid> master_form_ids = new List<Guid>();
                if (get_wo_form_mapping != null && get_wo_form_mapping.Count > 0)
                {
                    response.form_category_list = new List<form_categoty_list_export>();
                    get_wo_form_mapping.ForEach(q =>
                    {
                        form_categoty_list_export form_categoty_list = new form_categoty_list_export();
                        form_categoty_list.wo_inspectionsTemplateFormIOAssignment_id = q.wo_inspectionsTemplateFormIOAssignment_id;
                        form_categoty_list.form_category_name = q.InspectionsTemplateFormIO.FormIOType.form_type_name;
                        form_categoty_list.form_name = q.InspectionsTemplateFormIO.form_name;
                        //form_categoty_list.form_data = q.InspectionsTemplateFormIO.form_data;
                        form_categoty_list.form_id = q.form_id;
                        form_categoty_list.form_description = q.InspectionsTemplateFormIO.form_description;// q.Tasks != null ? q.Tasks.description : null;
                        form_categoty_list.WP = q.InspectionsTemplateFormIO.work_procedure;
                        if (q.Parent_Asset != null)
                        {
                            form_categoty_list.parent_asset_name = q.Parent_Asset.name;
                            form_categoty_list.parent_asset_id = q.asset_id;
                        }
                        if (q.User != null)
                        {
                            //  form_categoty_list.technician_name = q.User.firstname + q.User.lastname;
                            //    form_categoty_list.technician_id = q.User.uuid;
                            form_categoty_list.parent_asset_id = q.asset_id;
                        }
                        form_categoty_list.status_id = q.status_id;
                        form_categoty_list.status_name = q.StatusMaster.status_name;
                        if (q.WOcategorytoTaskMapping != null && q.WOcategorytoTaskMapping.Count > 0)
                        {
                            form_categoty_list.progress_total = q.WOcategorytoTaskMapping.Where(t => !t.is_archived).Count(); // total task in category
                            var test = q.WOcategorytoTaskMapping.Where(t => !t.is_archived).Select(q => q.AssetFormIO).ToList();
                            if (test != null && test.Count > 0)
                            {
                                form_categoty_list.progress_completed = test.Where(x => x.status == (int)Status.Completed).Count();
                            }
                            //form_categoty_list.progress_completed = q.WOcategorytoTaskMapping.Where(t => !t.is_archived).Select(x => x.AssetFormIO.status == (int)Status.Completed).Count();

                        }

                        // categery to task mapping
                        var competed_task = _UoW.WorkOrderRepository.GetWOcompletedTask(form_categoty_list.wo_inspectionsTemplateFormIOAssignment_id);
                        competed_task = competed_task.OrderBy(x => x.serial_number).ToList();
                        form_categoty_list.task_list = new List<GetWOcategoryTaskByCategoryIDListResponsemodelExport>();
                        form_categoty_list.task_list = _mapper.Map<List<GetWOcategoryTaskByCategoryIDListResponsemodelExport>>(competed_task);
                        form_categoty_list.task_list.ForEach(x =>
                        {
                            var get_form = _UoW.WorkOrderRepository.GetFormByTaskID(x.WOcategorytoTaskMapping_id);

                            if (get_form != null)
                            {
                                var form = _mapper.Map<GetFormByWOTaskIDResponsemodelExport>(get_form);
                                if (get_form != null)
                                {
                                    form.asset_form_description = q.InspectionsTemplateFormIO.form_description;
                                }
                                x.task_form = form;
                            }
                        });
                        response.form_category_list.Add(form_categoty_list);
                        master_form_ids.Add(q.form_id);
                    });

                    /// map master forms 
                    /// 
                    if (master_form_ids.Count > 0)
                    {
                        master_form_ids = master_form_ids.Distinct().ToList();
                        response.master_forms = new List<FormIOMasterForms>();

                        var get_master_forms = _UoW.WorkOrderRepository.GetMasterFormsByFormIDs(master_form_ids);
                        get_master_forms.ForEach(x =>
                        {
                            FormIOMasterForms FormIOMasterForms = new FormIOMasterForms();
                            FormIOMasterForms.form_id = x.form_id;
                            FormIOMasterForms.form_data = x.form_data;
                            response.master_forms.Add(FormIOMasterForms);
                        });
                    }

                }
            }
            else
            {
                /// not found
                response = null;
            }
            return response;
        }

        public GetAssetFormDataForBulkImportResponsemodel GetAssetFormDataForBulkImport(string wo_id)
        {
            GetAssetFormDataForBulkImportResponsemodel response = new GetAssetFormDataForBulkImportResponsemodel();


            var get_wo_form_mapping = _UoW.WorkOrderRepository.GetWOFormiomappingForBulkImport(Guid.Parse(wo_id));
            response.form_category_list = new List<form_categoty_list_bulk_impoer>();
            List<Guid> master_form_ids = new List<Guid>();
            if (get_wo_form_mapping != null && get_wo_form_mapping.Count > 0)
            {
                response.form_category_list = new List<form_categoty_list_bulk_impoer>();
                get_wo_form_mapping.ForEach(q =>
                {
                    form_categoty_list_bulk_impoer form_categoty_list = new form_categoty_list_bulk_impoer();
                    form_categoty_list.wo_inspectionsTemplateFormIOAssignment_id = q.wo_inspectionsTemplateFormIOAssignment_id;

                    // categery to task mapping
                    var competed_task = _UoW.WorkOrderRepository.GetWOcompletedTaskForBulkImport(form_categoty_list.wo_inspectionsTemplateFormIOAssignment_id);
                    competed_task = competed_task.OrderBy(x => x.serial_number).ToList();
                    form_categoty_list.task_list = new List<GetWOcategoryTaskByCategoryIDListBulkImport>();
                    form_categoty_list.task_list = _mapper.Map<List<GetWOcategoryTaskByCategoryIDListBulkImport>>(competed_task);
                    form_categoty_list.task_list.ForEach(x =>
                    {
                        var get_form = _UoW.WorkOrderRepository.GetFormByTaskIDForBulkImport(x.WOcategorytoTaskMapping_id);

                        if (get_form != null)
                        {
                            var form = _mapper.Map<GetFormByWOTaskIDBulkImpoert>(get_form);
                            x.task_form = form;
                        }
                    });
                    response.form_category_list.Add(form_categoty_list);
                    master_form_ids.Add(q.form_id);
                });


                /// map master forms 
                /// 
                if (master_form_ids.Count > 0)
                {
                    master_form_ids = master_form_ids.Distinct().ToList();
                    response.master_forms = new List<FormIOMasterFormsBulkimport>();

                    var get_master_forms = _UoW.WorkOrderRepository.GetMasterFormsByFormIDs(master_form_ids);
                    get_master_forms.ForEach(x =>
                    {
                        FormIOMasterFormsBulkimport FormIOMasterForms = new FormIOMasterFormsBulkimport();
                        FormIOMasterForms.form_id = x.form_id;
                        FormIOMasterForms.form_data = x.form_data;
                        response.master_forms.Add(FormIOMasterForms);
                    });
                }
            }

            return response;
        }
        public async Task<int> CopyFieldsFromForm(CopyFieldsFromFormRequestmodel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {
                var get_copy_from_task = _UoW.WorkOrderRepository.GetWOcategoryTaskByTaskIDforCopyfields(new List<Guid> { requestmodel.copy_from_wOcategorytoTaskMapping_id });
                var get_copy_to_task_list = _UoW.WorkOrderRepository.GetWOcategoryTaskByTaskIDforCopyfields(requestmodel.copy_to_wOcategorytoTaskMapping_id);
                var dynamic__nameplate_fields = get_copy_from_task.FirstOrDefault().WOInspectionsTemplateFormIOAssignment.InspectionsTemplateFormIO.dynamic_nameplate_fields;

                /*  dynamic copy_from_form_data1 = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(get_copy_from_task.FirstOrDefault().AssetFormIO.asset_form_data, new Newtonsoft.Json.Converters.ExpandoObjectConverter());

                foreach (var get_copy_to_task in get_copy_to_task_list)
                {
                    dynamic copy_to_form_data = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(get_copy_to_task.AssetFormIO.asset_form_data, new Newtonsoft.Json.Converters.ExpandoObjectConverter());

                    /// for lvcb form if nameplate info is null then we need check box for trip test and it is in nameplate info so we are copying nameplate from parent form and doing every value as Null
                    /// 
                   // if (copy_to_form_data.data["nameplateInformation"] == null)
                    //{
                      //  copy_to_form_data.data.nameplateInformation = copy_from_form_data.data.nameplateInformation;
                        foreach (Newtonsoft.Json.Linq.JProperty property in copyf.data.header) /// marking every properties as null 
                        {
                           if( copy_to_form_data.data.header[property.Name] == null)
                            {
                                copy_to_form_data.data.header[property.Name] = copy_from_form_data1.data.header[property.Name];
                            }
                        }
                    string str1 = Newtonsoft.Json.JsonConvert.SerializeObject(copy_to_form_data);
                    // }
                }

                #region uncomment this code if copy is based on properties
               if (!String.IsNullOrEmpty(dynamic__nameplate_fields))
                {

                    CopyFieldsFromForm_dynamic contaner_list = JsonSerializer.Deserialize<CopyFieldsFromForm_dynamic>(dynamic__nameplate_fields);
                    //List<string> list = JsonSerializer.Deserialize<List<string>>(dynamic__nameplate_fields);
                    // if (contaner_list.Nameplate != null && contaner_list.Nameplate.Count > 0)
                    //  {
                    dynamic copy_from_form_data = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(get_copy_from_task.FirstOrDefault().AssetFormIO.asset_form_data, new Newtonsoft.Json.Converters.ExpandoObjectConverter());




                    foreach (var get_copy_to_task in get_copy_to_task_list)
                    {
                        dynamic copy_to_form_data = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(get_copy_to_task.AssetFormIO.asset_form_data, new Newtonsoft.Json.Converters.ExpandoObjectConverter());

                        /// for lvcb form if nameplate info is null then we need check box for trip test and it is in nameplate info so we are copying nameplate from parent form and doing every value as Null
                        /// 
                        if (copy_to_form_data.data["nameplateInformation"] == null)
                        {
                            copy_to_form_data.data.nameplateInformation = copy_from_form_data.data.nameplateInformation;
                            foreach (Newtonsoft.Json.Linq.JProperty property in copy_from_form_data.data.nameplateInformation) /// marking every properties as null 
                            {
                                copy_to_form_data.data.nameplateInformation[property.Name] = null;
                            }
                        }

                        if (contaner_list.nameplateInformation != null && contaner_list.nameplateInformation.Count > 0)
                        {
                            if (copy_from_form_data.data["nameplateInformation"] != null)
                            {
                                if (copy_to_form_data.data["nameplateInformation"] == null)
                                {
                                    copy_to_form_data.data.nameplateInformation = copy_from_form_data.data.nameplateInformation;
                                    foreach (Newtonsoft.Json.Linq.JProperty property in copy_from_form_data.data.nameplateInformation)
                                    {
                                        copy_to_form_data.data.nameplateInformation[property.Name] = null;
                                    }
                                }
                                foreach (var field in contaner_list.nameplateInformation)
                                {
                                    copy_to_form_data.data.nameplateInformation[field] = copy_from_form_data.data.nameplateInformation[field];
                                }
                            }
                        }
                        trip_test_checkbox trip_test_checkbox = new trip_test_checkbox();

                        if (contaner_list.longtimeElements != null && contaner_list.longtimeElements.Count > 0)
                        {
                            trip_test_checkbox.longTimeElements = true;


                            if (copy_from_form_data.data["longtimeElements"] != null)
                            {
                                if (copy_to_form_data.data["longtimeElements"] == null)
                                {
                                    copy_to_form_data.data.longtimeElements = copy_from_form_data.data.longtimeElements;
                                    foreach (Newtonsoft.Json.Linq.JProperty property in copy_from_form_data.data.longtimeElements)
                                    {
                                        copy_to_form_data.data.longtimeElements[property.Name] = null;
                                    }
                                }
                                foreach (var field in contaner_list.longtimeElements)
                                {
                                    copy_to_form_data.data.longtimeElements[field] = copy_from_form_data.data.longtimeElements[field];
                                }
                            }
                        }
                        if (contaner_list.shorttimeElements != null && contaner_list.shorttimeElements.Count > 0)
                        {
                            trip_test_checkbox.shortTimeElements = true;

                            if (copy_from_form_data.data["shorttimeElements"] != null)
                            {
                                if (copy_to_form_data.data["shorttimeElements"] == null)
                                {
                                    copy_to_form_data.data.shorttimeElements = copy_from_form_data.data.shorttimeElements;
                                    foreach (Newtonsoft.Json.Linq.JProperty property in copy_from_form_data.data.shorttimeElements)
                                    {
                                        copy_to_form_data.data.shorttimeElements[property.Name] = null;
                                    }
                                }
                                foreach (var field in contaner_list.shorttimeElements)
                                {
                                    copy_to_form_data.data.shorttimeElements[field] = copy_from_form_data.data.shorttimeElements[field];
                                }
                            }
                        }
                        if (contaner_list.groundFaultElements1 != null && contaner_list.groundFaultElements1.Count > 0)
                        {
                            trip_test_checkbox.groundFaultElements = true;
                            if (copy_from_form_data.data["groundFaultElements1"] != null)
                            {
                                if (copy_to_form_data.data["groundFaultElements1"] == null)
                                {
                                    copy_to_form_data.data.groundFaultElements1 = copy_from_form_data.data.groundFaultElements1;
                                    foreach (Newtonsoft.Json.Linq.JProperty property in copy_from_form_data.data.groundFaultElements1)
                                    {
                                        copy_to_form_data.data.groundFaultElements1[property.Name] = null;
                                    }
                                }
                                foreach (var field in contaner_list.groundFaultElements1)
                                {
                                    copy_to_form_data.data.groundFaultElements1[field] = copy_from_form_data.data.groundFaultElements1[field];
                                }
                            }
                        }
                        if (contaner_list.instantaneousElements1 != null && contaner_list.instantaneousElements1.Count > 0)
                        {
                            trip_test_checkbox.instantaneousElements = true;
                            if (copy_from_form_data.data["instantaneousElements1"] != null)
                            {
                                if (copy_to_form_data.data["instantaneousElements1"] == null)
                                {
                                    copy_to_form_data.data.instantaneousElements1 = copy_from_form_data.data.instantaneousElements1;
                                    foreach (Newtonsoft.Json.Linq.JProperty property in copy_from_form_data.data.instantaneousElements1)
                                    {
                                        copy_to_form_data.data.instantaneousElements1[property.Name] = null;
                                    }
                                }
                                foreach (var field in contaner_list.instantaneousElements1)
                                {
                                    copy_to_form_data.data.instantaneousElements1[field] = copy_from_form_data.data.instantaneousElements1[field];
                                }
                            }
                        }
                        else
                        {
                            // if there is no nameplate info available to copy then send success
                            response = (int)ResponseStatusNumber.Success;
                        }
                        //  copy_to_form_data.data.nameplateInformation.pleaseSelectTests = new object();
                        string trip_test_checkbox_str = Newtonsoft.Json.JsonConvert.SerializeObject(trip_test_checkbox);
                        dynamic trip_test_checkbox_obj = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(trip_test_checkbox_str, new Newtonsoft.Json.Converters.ExpandoObjectConverter());
                        copy_to_form_data.data.nameplateInformation["pleaseSelectTests"] = trip_test_checkbox_obj; // new ExpandoObject() as dynamic;
                        object obj = copy_to_form_data;
                        string str = Newtonsoft.Json.JsonConvert.SerializeObject(copy_to_form_data);
                        get_copy_to_task.AssetFormIO.asset_form_data = str;
                        get_copy_to_task.AssetFormIO.modified_at = DateTime.UtcNow;
                        get_copy_to_task.updated_at = DateTime.UtcNow;
                        var update = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Update(get_copy_to_task);
                        if (update)
                        {
                            response = (int)ResponseStatusNumber.Success;
                        }
                    }
                }
                else
                {
                    response = (int)ResponseStatusNumber.nameplate_info_not_found;
                }
                #endregion uncomment this code if copy is based on properties*/

                dynamic copy_from_form_data = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(get_copy_from_task.FirstOrDefault().AssetFormIO.asset_form_data, new Newtonsoft.Json.Converters.ExpandoObjectConverter());

                foreach (var get_copy_to_task in get_copy_to_task_list)
                {
                    dynamic pleaseSelectTestsOld = new ExpandoObject();
                    dynamic pleaseSelectTestsNew = new ExpandoObject();
                    IDictionary<string, object> pleaseSelectTestsDictionaryOld = pleaseSelectTestsOld as IDictionary<string, object>;
                    IDictionary<string, object> pleaseSelectTestsDictionaryNew = pleaseSelectTestsNew as IDictionary<string, object>;

                    dynamic copy_to_form_data = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(get_copy_to_task.AssetFormIO.asset_form_data, new Newtonsoft.Json.Converters.ExpandoObjectConverter());

                    if (requestmodel.containers != null)
                    {
                        if (requestmodel.containers.Count() > 0)
                        {
                            pleaseSelectTestsOld = copy_from_form_data.data.pleaseSelectTests;
                            Dictionary<string, object> dictionary = new Dictionary<string, object>();

                            if (pleaseSelectTestsOld != null)
                            {
                                dictionary = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string, object>>(Newtonsoft.Json.JsonConvert.SerializeObject(pleaseSelectTestsOld));
                            }

                            foreach (var exapndObject in dictionary)
                            {
                                pleaseSelectTestsDictionaryOld.Add(exapndObject.Key, exapndObject.Value);
                            }

                            foreach (var item in requestmodel.containers)
                            {
                                copy_to_form_data.data[item] = copy_from_form_data.data[item];

                                if (item != "header" && item != "nameplateInformation" && item != "footer")
                                {
                                    pleaseSelectTestsDictionaryNew.Add(item, true);
                                }

                                if (item == "header")
                                {
                                    get_copy_to_task.AssetFormIO.form_retrived_asset_name = get_copy_from_task.FirstOrDefault().AssetFormIO.form_retrived_asset_name;
                                    get_copy_to_task.AssetFormIO.form_retrived_location = get_copy_from_task.FirstOrDefault().AssetFormIO.form_retrived_location;
                                    get_copy_to_task.AssetFormIO.form_retrived_asset_id = get_copy_from_task.FirstOrDefault().AssetFormIO.form_retrived_asset_id;
                                }

                            }

                            foreach (var kvp in pleaseSelectTestsDictionaryNew)
                            {
                                string key = kvp.Key;
                                object value = kvp.Value;

                                if (!dictionary.ContainsKey(key))
                                {
                                    dictionary.Add(key, value);
                                }
                                else
                                {
                                    dictionary[key] = true;
                                }
                            }

                            var pleaseSelectTestsJSON = Newtonsoft.Json.JsonConvert.SerializeObject(dictionary);
                            dynamic pleaseSelectTestsFinal = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(pleaseSelectTestsJSON, new Newtonsoft.Json.Converters.ExpandoObjectConverter());
                            if (pleaseSelectTestsFinal != null)
                            {
                                copy_to_form_data.data["pleaseSelectTests"] = pleaseSelectTestsFinal;
                            }

                            get_copy_to_task.AssetFormIO.asset_form_data = Newtonsoft.Json.JsonConvert.SerializeObject(copy_to_form_data);
                        }
                    }
                    else
                    {
                        dynamic old_copy_to_header = copy_to_form_data.data.header;
                        get_copy_to_task.AssetFormIO.asset_form_data = get_copy_from_task.FirstOrDefault().AssetFormIO.asset_form_data;
                        get_copy_to_task.AssetFormIO.form_retrived_data = get_copy_from_task.FirstOrDefault().AssetFormIO.asset_form_data;



                        // keep identification null
                        copy_to_form_data = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(get_copy_to_task.AssetFormIO.asset_form_data, new Newtonsoft.Json.Converters.ExpandoObjectConverter());
                        copy_to_form_data.data.header = old_copy_to_header;
                    }


                    /*  if(get_copy_to_task.AssetFormIO.status == (int)Status.open) /// if status is open then copy whole data 
                      {
                          get_copy_to_task.AssetFormIO.asset_form_data = get_copy_from_task.FirstOrDefault().AssetFormIO.asset_form_data;
                          get_copy_to_task.AssetFormIO.form_retrived_data = get_copy_from_task.FirstOrDefault().AssetFormIO.asset_form_data;
                          dynamic copy_to_form_data = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(get_copy_to_task.AssetFormIO.asset_form_data, new Newtonsoft.Json.Converters.ExpandoObjectConverter());
                          // keep identification null
                          copy_to_form_data.data.header.identification = null;
                          copy_to_form_data.data.header.assetId = null;
                          get_copy_to_task.AssetFormIO.asset_form_data = Newtonsoft.Json.JsonConvert.SerializeObject(copy_to_form_data);
                          get_copy_to_task.AssetFormIO.form_retrived_location = copy_from_form_data.data.header.parent;
                          var update = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Update(get_copy_to_task);
                          if (update)
                          {
                              response = (int)ResponseStatusNumber.Success;
                          }
                      }
                      else /// if its not open then copy only data in header which are blank
                      {*/


                    /* foreach (Newtonsoft.Json.Linq.JProperty property in old_copy_to_header) 
                      {
                         if(property.Name != "identification" && property.Name != "assetId")
                          {
                              string property_value = old_copy_to_header[property.Name].ToString();
                              //if (old_copy_to_header[property.Name] != null && old_copy_to_header[property.Name]!= "")
                              if (!String.IsNullOrEmpty(property_value))
                              {
                                  copy_to_form_data.data.header[property.Name] = old_copy_to_header[property.Name];
                              }
                          }
                          else //// keep asset name and id same as old do not update that
                          {
                              string property_value = old_copy_to_header[property.Name].ToString();
                              copy_to_form_data.data.header[property.Name] = old_copy_to_header[property.Name];
                        //  }
                      }*/
                    /*if (get_copy_to_task.AssetFormIO.form_retrived_location == null)
                    {
                        get_copy_to_task.AssetFormIO.form_retrived_location = copy_from_form_data.data.header.parent;
                    }*/
                    get_copy_to_task.AssetFormIO.asset_form_data = Newtonsoft.Json.JsonConvert.SerializeObject(copy_to_form_data);
                    var update = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Update(get_copy_to_task);
                    if (update)
                    {
                        response = (int)ResponseStatusNumber.Success;
                    }
                    // }
                }
            }
            catch (Exception ex)
            {
                response = (int)ResponseStatusNumber.Error;
            }

            return response;
        }
        public class trip_test_checkbox
        {
            public bool longTimeElements { get; set; }
            public bool shortTimeElements { get; set; }
            public bool groundFaultElements { get; set; }
            public bool instantaneousElements { get; set; }
        }
        public class CopyFieldsFromForm_dynamic
        {
            public List<string> nameplateInformation { get; set; }
            public List<string> longtimeElements { get; set; }
            public List<string> shorttimeElements { get; set; }
            public List<string> groundFaultElements1 { get; set; }
            public List<string> instantaneousElements1 { get; set; }
        }
        public void Dispose()
        {

        }
        public async Task<UpdateWOOfflineResponsemodel> UpdateWOOffline(UpdateWOOfflineRequestModel requestmodel, string sqs_aws_access_key, string sqs_aws_secret_key , string offline_sync_bucket, string S3_aws_access_key, string S3_aws_secret_key)
        {
            int response = (int)ResponseStatusNumber.Error;
            UpdateWOOfflineResponsemodel UpdateWOOfflineResponsemodel = new UpdateWOOfflineResponsemodel();
            Guid logger_guid = Guid.NewGuid();
            var is_lambda_enable = ConfigurationManager.AppSettings["IsLambdaEnableForSync"]; // now we are using requested bool to chekc 
            //if(is_lambda_enable.ToLower() == "true")
           
            // get device info by device uuid
            var get_device_info = _UoW.WorkOrderRepository.GetdeviceInfoById(UpdatedGenericRequestmodel.CurrentUser.device_uuid);

            // add record in track table
            TrackMobileSyncOffline TrackMobileSyncOffline = new TrackMobileSyncOffline();
            TrackMobileSyncOffline.device_uuid = get_device_info.device_uuid;
            TrackMobileSyncOffline.device_code = get_device_info.device_code;
            TrackMobileSyncOffline.sync_time = DateTime.UtcNow;
            TrackMobileSyncOffline.user_id = UpdatedGenericRequestmodel.CurrentUser.requested_by;
            TrackMobileSyncOffline.status = 2;
                        
            var insert_track = await _UoW.BaseGenericRepository<TrackMobileSyncOffline>().Insert(TrackMobileSyncOffline);
            _UoW.SaveChanges();

            TrackMobileSyncOffline.s3_file_name = TrackMobileSyncOffline.trackmobilesyncoffline_id + "-" + get_device_info.device_code + ".txt";
            var update_track = await _UoW.BaseGenericRepository<TrackMobileSyncOffline>().Update(TrackMobileSyncOffline);

            requestmodel.trackmobilesyncoffline_id = TrackMobileSyncOffline.trackmobilesyncoffline_id;

            if (requestmodel.IRWOImageLabelMappingList != null && requestmodel.IRWOImageLabelMappingList.Count > 0)
            {
                foreach(var item in requestmodel.IRWOImageLabelMappingList.Where(x=> x.site_id == null || x.site_id == Guid.Empty))
                {
                    item.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                }
            }
            
            // upload file to S3 bucket
            PrepareModelForOfflineLambda PrepareModelForOfflineLambda = new PrepareModelForOfflineLambda();
            PrepareModelForOfflineLambda.data = requestmodel;
            PrepareModelForOfflineLambda.requested_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

            string json = Newtonsoft.Json.JsonConvert.SerializeObject(PrepareModelForOfflineLambda);

            byte[] byteArray = System.Text.Encoding.UTF8.GetBytes(json);
            using (var stream = new System.IO.MemoryStream(byteArray))
            {
                var upload_file = await s3BucketService.UploadJsonfileAsStrem(stream, S3_aws_access_key, S3_aws_secret_key, offline_sync_bucket, TrackMobileSyncOffline.s3_file_name);
            }
            if (requestmodel.is_lambda_enable)
            {
                // call SQS for lambda execution
                UpdateWOOfflineSQSRequestmodel sqs_request = new UpdateWOOfflineSQSRequestmodel();
                //sqs_request.data = requestmodel;
                sqs_request.requested_by = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                sqs_request.file_key = TrackMobileSyncOffline.s3_file_name;
                sqs_request.trackmobilesyncoffline_id = TrackMobileSyncOffline.trackmobilesyncoffline_id;

                string jsonString = JsonSerializer.Serialize(sqs_request);
                await AssetFornioInspectionReport.UpdateWOOffline(sqs_aws_access_key, sqs_aws_secret_key, jsonString, _logger);

                UpdateWOOfflineResponsemodel.success = (int)ResponseStatusNumber.Success;
                UpdateWOOfflineResponsemodel.trackmobilesyncoffline_id = TrackMobileSyncOffline.trackmobilesyncoffline_id;
                UpdateWOOfflineResponsemodel.is_lambda_execution_enable = true;
            }
            else
            {
                try
                {
                    _logger.LogInformation(logger_guid.ToString()  + " : " +   " UpdateWOOffline in Else function : " + UpdatedGenericRequestmodel.CurrentUser.device_uuid.ToString());
                    /*if (UpdatedGenericRequestmodel.CurrentUser.device_uuid == Guid.Parse("b4701297-201a-4190-b9d2-a7d6b83177d3"))
                    {
                        UpdateWOOfflineResponsemodel.success = 1;
                        _logger.LogInformation(logger_guid.ToString() + " : " + " UpdateWOOffline in If function : " + UpdatedGenericRequestmodel.CurrentUser.device_uuid.ToString().ToString());
                        return UpdateWOOfflineResponsemodel;
                    }*/

                    _UoW.BeginTransaction();

                    if (requestmodel.Workorders != null && requestmodel.Workorders.Count > 0)
                    {
                        foreach (var wo in requestmodel.Workorders)
                        {
                            var get_wo = _UoW.WorkOrderRepository.GetWOByidforUpdateOffline(wo.wo_id);
                            get_wo.status = wo.wo_status_id;
                            get_wo.modified_at = DateTime.UtcNow;
                            get_wo.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                            var update = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);
                        }
                    }

                    if (requestmodel.WO_category != null && requestmodel.WO_category.Count > 0)
                    {
                        foreach (var category in requestmodel.WO_category)
                        {

                            WOInspectionsTemplateFormIOAssignment WOInspectionsTemplateFormIOAssignment = null;
                            WOInspectionsTemplateFormIOAssignment = _UoW.WorkOrderRepository.GetWOcategoryIDFormobile(category.wo_inspectionsTemplateFormIOAssignment_id);
                            if (WOInspectionsTemplateFormIOAssignment != null)
                            {
                                WOInspectionsTemplateFormIOAssignment.technician_user_id = category.technician_user_id;
                                WOInspectionsTemplateFormIOAssignment.asset_id = category.asset_id;
                                WOInspectionsTemplateFormIOAssignment.is_archived = category.is_archived;
                                WOInspectionsTemplateFormIOAssignment.status_id = category.status_id;
                                WOInspectionsTemplateFormIOAssignment.group_string = category.group_string;
                                WOInspectionsTemplateFormIOAssignment.updated_at = DateTime.UtcNow;
                                var update = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Update(WOInspectionsTemplateFormIOAssignment);
                            }
                            else
                            {
                                WOInspectionsTemplateFormIOAssignment = _mapper.Map<WOInspectionsTemplateFormIOAssignment>(category);
                                WOInspectionsTemplateFormIOAssignment.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().Insert(WOInspectionsTemplateFormIOAssignment);
                            }
                        }
                    }
                    if (requestmodel.WOCategoryTaskMapping != null && requestmodel.WOCategoryTaskMapping.Count > 0)
                    {
                        foreach (var category_task in requestmodel.WOCategoryTaskMapping)
                        {
                            WOcategorytoTaskMapping WOcategorytoTaskMapping = null;
                            WOcategorytoTaskMapping = _UoW.WorkOrderRepository.GetWOcategoryTaskByTaskIDMobile(category_task.WOcategorytoTaskMapping_id);
                            if (WOcategorytoTaskMapping != null)
                            {
                                WOcategorytoTaskMapping.is_archived = category_task.is_archived;
                                WOcategorytoTaskMapping.serial_number = category_task.serial_number;
                                WOcategorytoTaskMapping.assigned_asset = category_task.assigned_asset;
                                WOcategorytoTaskMapping.updated_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Update(WOcategorytoTaskMapping);
                            }
                            else
                            {
                                WOcategorytoTaskMapping = _mapper.Map<WOcategorytoTaskMapping>(category_task);
                                WOcategorytoTaskMapping.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<WOcategorytoTaskMapping>().Insert(WOcategorytoTaskMapping);
                            }
                            // AssetFormIO AssetFormIO = new AssetFormIO();
                            //  AssetFormIO = _mapper.Map<AssetFormIO>(category_task.AssetFormio);
                            //  WOcategorytoTaskMapping.AssetFormIO = AssetFormIO;

                            //insert = await _UoW.BaseGenericRepository<AssetFormIO>().Insert(AssetFormIO);
                            //response = (int)ResponseStatusNumber.Success;
                        }
                    }
                    if (requestmodel.AssetFormio != null && requestmodel.AssetFormio.Count > 0)
                    {
                        foreach (var asset_form_io in requestmodel.AssetFormio)
                        {
                            string building = null;
                            string floor = null;
                            string room = null;
                            string section = null;
                            try
                            {
                                if (!String.IsNullOrEmpty(asset_form_io.asset_form_data))
                                {
                                    dynamic dynamicform = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(asset_form_io.asset_form_data, new Newtonsoft.Json.JsonSerializerSettings
                                    {
                                        DateParseHandling = Newtonsoft.Json.DateParseHandling.None
                                    });
                                    if (dynamicform != null && dynamicform.data != null && dynamicform.data.header != null)
                                    {
                                        building = dynamicform.data.header.building;
                                        floor = dynamicform.data.header.floor;
                                        room = dynamicform.data.header.room;
                                        section = dynamicform.data.header.section;
                                    }
                                }
                            }
                            catch (Exception ex)
                            {

                            }
                            AssetFormIO AssetFormIO = null;
                            AssetFormIO = _UoW.AssetFormIORepository.GetAssetFormIOByIdMobile(asset_form_io.asset_form_id);
                            if (AssetFormIO != null)
                            {
                                AssetFormIO.asset_id = asset_form_io.asset_id;
                                AssetFormIO.asset_form_data = asset_form_io.asset_form_data;
                                AssetFormIO.requested_by = asset_form_io.requested_by;
                                AssetFormIO.status = asset_form_io.status;
                                AssetFormIO.modified_at = DateTime.UtcNow;
                                AssetFormIO.building = building;
                                AssetFormIO.floor = floor;
                                AssetFormIO.room = room;
                                AssetFormIO.section = section;
                                var insert = await _UoW.BaseGenericRepository<AssetFormIO>().Update(AssetFormIO);
                            }
                            else
                            {
                                AssetFormIO = _mapper.Map<AssetFormIO>(asset_form_io);
                                AssetFormIO.building = building;
                                AssetFormIO.floor = floor;
                                AssetFormIO.room = room;
                                AssetFormIO.section = section;
                                AssetFormIO.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<AssetFormIO>().Insert(AssetFormIO);
                            }
                            //response = (int)ResponseStatusNumber.Success;
                        }
                    }
                    if (requestmodel.delete_asset_images != null && requestmodel.delete_asset_images.Count > 0)
                    {
                        var asset_image_list = requestmodel.delete_asset_images.Select(x => x.asset_profile_images_id).ToList();
                        var get_asset_images = _UoW.AssetRepository.GetAssetImages(asset_image_list);
                        foreach (var img in get_asset_images)
                        {
                            img.is_deleted = true;
                            img.modified_at = DateTime.UtcNow;

                            var update_asset_img = await _UoW.BaseGenericRepository<AssetProfileImages>().Update(img);
                        }

                    }

                    if (requestmodel.delete_OB_asset_images != null && requestmodel.delete_OB_asset_images.Count > 0)
                    {
                        var asset_image_list = requestmodel.delete_OB_asset_images.Select(x => x.woonboardingassetsimagesmapping_id).ToList();
                        var get_asset_images = _UoW.AssetRepository.GetOBAssetImages(asset_image_list);
                        foreach (var img in get_asset_images)
                        {
                            img.is_deleted = true;
                            img.modified_at = DateTime.UtcNow;

                            var update_asset_img = await _UoW.BaseGenericRepository<WOOnboardingAssetsImagesMapping>().Update(img);
                        }

                    }
                    #region Templocation
                    if (requestmodel.temp_formio_building != null && requestmodel.temp_formio_building.Count > 0)
                    {
                        foreach (var temp_building_data in requestmodel.temp_formio_building)
                        {
                            TempFormIOBuildings TempFormIOBuildings = null;
                            TempFormIOBuildings = _UoW.WorkOrderRepository.GetTempBuildingforOfflineUpdate(temp_building_data.temp_formiobuilding_id);
                            if (TempFormIOBuildings != null)
                            {
                                TempFormIOBuildings.temp_formio_building_name = temp_building_data.temp_formio_building_name;
                                TempFormIOBuildings.is_deleted = temp_building_data.is_deleted;
                                TempFormIOBuildings.created_at = DateTime.UtcNow;
                                var update = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Update(TempFormIOBuildings);
                            }
                            else
                            {
                                TempFormIOBuildings = _mapper.Map<TempFormIOBuildings>(temp_building_data);
                                TempFormIOBuildings.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Insert(TempFormIOBuildings);
                            }
                        }
                    }
                    if (requestmodel.temp_formio_floor != null && requestmodel.temp_formio_floor.Count > 0)
                    {
                        foreach (var temp_floor_data in requestmodel.temp_formio_floor)
                        {
                            TempFormIOFloors TempFormIOFloors = null;
                            TempFormIOFloors = _UoW.WorkOrderRepository.GetTempFloorforOfflineUpdate(temp_floor_data.temp_formiofloor_id);
                            if (TempFormIOFloors != null)
                            {
                                TempFormIOFloors.temp_formio_floor_name = temp_floor_data.temp_formio_floor_name;
                                TempFormIOFloors.is_deleted = temp_floor_data.is_deleted;
                                TempFormIOFloors.created_at = DateTime.UtcNow;
                                var update = await _UoW.BaseGenericRepository<TempFormIOFloors>().Update(TempFormIOFloors);
                            }
                            else
                            {
                                TempFormIOFloors = _mapper.Map<TempFormIOFloors>(temp_floor_data);
                                TempFormIOFloors.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<TempFormIOFloors>().Insert(TempFormIOFloors);
                            }
                        }
                    }
                    if (requestmodel.temp_formio_room != null && requestmodel.temp_formio_room.Count > 0)
                    {
                        foreach (var temp_room_data in requestmodel.temp_formio_room)
                        {
                            TempFormIORooms TempFormIORooms = null;
                            TempFormIORooms = _UoW.WorkOrderRepository.GetTempRoomforOfflineUpdate(temp_room_data.temp_formioroom_id);
                            if (TempFormIORooms != null)
                            {
                                TempFormIORooms.temp_formio_room_name = temp_room_data.temp_formio_room_name;
                                TempFormIORooms.is_deleted = temp_room_data.is_deleted;
                                TempFormIORooms.created_at = DateTime.UtcNow;
                                var update = await _UoW.BaseGenericRepository<TempFormIORooms>().Update(TempFormIORooms);
                            }
                            else
                            {
                                TempFormIORooms = _mapper.Map<TempFormIORooms>(temp_room_data);
                                TempFormIORooms.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<TempFormIORooms>().Insert(TempFormIORooms);
                            }
                        }
                    }
                    #endregion Templocation
                    if (requestmodel.temp_asset_woline_mapping != null && requestmodel.temp_asset_woline_mapping.Count > 0)
                    {
                        foreach (var tempassetwoline in requestmodel.temp_asset_woline_mapping)
                        {
                            var get_temp_asset_woline = _UoW.WorkOrderRepository.GetTempAssetbyId(tempassetwoline.tempasset_id);
                            if (get_temp_asset_woline != null)
                            {
                                get_temp_asset_woline.modified_at = DateTime.UtcNow;
                                get_temp_asset_woline.is_deleted = tempassetwoline.is_deleted;
                                get_temp_asset_woline.asset_name = tempassetwoline.asset_name;
                                get_temp_asset_woline.QR_code = tempassetwoline.QR_code;
                                get_temp_asset_woline.condition_index_type = tempassetwoline.condition_index_type;
                                get_temp_asset_woline.criticality_index_type = tempassetwoline.criticality_index_type;
                                get_temp_asset_woline.commisiion_date = tempassetwoline.commisiion_date;
                                get_temp_asset_woline.form_nameplate_info = tempassetwoline.form_nameplate_info;
                                get_temp_asset_woline.component_level_type_id = tempassetwoline.component_level_type_id;
                                get_temp_asset_woline.asset_operating_condition_state = tempassetwoline.asset_operating_condition_state;
                                get_temp_asset_woline.code_compliance = tempassetwoline.code_compliance;
                                get_temp_asset_woline.inspectiontemplate_asset_class_id = tempassetwoline.inspectiontemplate_asset_class_id;
                                get_temp_asset_woline.temp_formiobuilding_id = tempassetwoline.temp_formiobuilding_id;
                                get_temp_asset_woline.temp_formiofloor_id = tempassetwoline.temp_formiofloor_id;
                                get_temp_asset_woline.temp_formioroom_id = tempassetwoline.temp_formioroom_id;
                                get_temp_asset_woline.temp_formiosection_id = tempassetwoline.temp_formiosection_id;

                                var update = await _UoW.BaseGenericRepository<TempAsset>().Update(get_temp_asset_woline);
                            }
                            else
                            {
                                get_temp_asset_woline = _mapper.Map<TempAsset>(tempassetwoline);
                                get_temp_asset_woline.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<TempAsset>().Insert(get_temp_asset_woline);
                            }
                        }
                    }
                    if (requestmodel.OBWOAssetDetails != null && requestmodel.OBWOAssetDetails.Count > 0)
                    {
                        // getting distinct from list as there was a not reproduced bug from mobile so duplicate woline was getting in request 
                        requestmodel.OBWOAssetDetails = requestmodel.OBWOAssetDetails.GroupBy(p => p.woonboardingassets_id)
                                                                             .Select(group => group.First())
                                                                             .ToList();
                        foreach (var OBWOAsset in requestmodel.OBWOAssetDetails)
                        {
                            WOOnboardingAssets WOOnboardingAssets = null;
                            WOOnboardingAssets = _UoW.WorkOrderRepository.GetOBWOAssetDetailsById(OBWOAsset.woonboardingassets_id);
                            if (WOOnboardingAssets != null)
                            {
                                //     WOOnboardingAssets = _mapper.Map<WOOnboardingAssets>(OBWOAsset);

                                WOOnboardingAssets.modified_at = DateTime.UtcNow;
                                WOOnboardingAssets.asset_name = OBWOAsset.asset_name;
                                WOOnboardingAssets.asset_class_code = OBWOAsset.asset_class_code;
                                WOOnboardingAssets.asset_class_name = OBWOAsset.asset_class_name;
                                WOOnboardingAssets.back_office_note = OBWOAsset.back_office_note;
                                WOOnboardingAssets.building = OBWOAsset.building;
                                WOOnboardingAssets.floor = OBWOAsset.floor;
                                WOOnboardingAssets.room = OBWOAsset.room;
                                WOOnboardingAssets.section = OBWOAsset.section;

                                // do not store Default if its blank as we are using temp location 
                                /*if (String.IsNullOrEmpty(WOOnboardingAssets.building))
                                {
                                    WOOnboardingAssets.building = "Default";
                                }
                                if (String.IsNullOrEmpty(WOOnboardingAssets.floor))
                                {
                                    WOOnboardingAssets.floor = "Default";
                                }

                                if (String.IsNullOrEmpty(WOOnboardingAssets.room))
                                {
                                    WOOnboardingAssets.room = "Default";
                                }

                                if (String.IsNullOrEmpty(WOOnboardingAssets.section))
                                {
                                    WOOnboardingAssets.section = "Default";
                                }*/
                                WOOnboardingAssets.QR_code = OBWOAsset.QR_code;
                                WOOnboardingAssets.field_note = OBWOAsset.field_note;
                                WOOnboardingAssets.is_deleted = OBWOAsset.is_deleted;
                                WOOnboardingAssets.task_rejected_notes = OBWOAsset.task_rejected_notes;
                                WOOnboardingAssets.condition_index_type = OBWOAsset.condition_index_type;
                                WOOnboardingAssets.criticality_index_type = OBWOAsset.criticality_index_type;
                                WOOnboardingAssets.commisiion_date = OBWOAsset.commisiion_date;
                                WOOnboardingAssets.thermal_classification_id = OBWOAsset.thermal_classification_id;
                                WOOnboardingAssets.status = OBWOAsset.status;

                                WOOnboardingAssets.inspection_type = OBWOAsset.inspection_type;
                                WOOnboardingAssets.mwo_date = OBWOAsset.mwo_date;
                                WOOnboardingAssets.mwo_inspection_type_status = OBWOAsset.mwo_inspection_type_status;
                                WOOnboardingAssets.problem_description = OBWOAsset.problem_description;
                                WOOnboardingAssets.solution_description = OBWOAsset.solution_description;
                                WOOnboardingAssets.inspection_further_details = OBWOAsset.inspection_further_details;
                                WOOnboardingAssets.comments = OBWOAsset.comments;
                                WOOnboardingAssets.repair_resolution = OBWOAsset.repair_resolution;
                                WOOnboardingAssets.replacement_resolution = OBWOAsset.replacement_resolution;
                                WOOnboardingAssets.recommended_action = OBWOAsset.recommended_action;
                                WOOnboardingAssets.recommended_action_schedule = OBWOAsset.recommended_action_schedule;
                                WOOnboardingAssets.asset_id = OBWOAsset.asset_id;
                                WOOnboardingAssets.technician_user_id = OBWOAsset.technician_user_id;
                                WOOnboardingAssets.voltage = OBWOAsset.voltage;
                                WOOnboardingAssets.rated_amps = OBWOAsset.rated_amps;
                                WOOnboardingAssets.manufacturer = OBWOAsset.manufacturer;
                                WOOnboardingAssets.model = OBWOAsset.model;
                                WOOnboardingAssets.location = OBWOAsset.location;
                                WOOnboardingAssets.thermal_anomaly_sub_componant = OBWOAsset.thermal_anomaly_sub_componant;
                                WOOnboardingAssets.thermal_anomaly_measured_amps = OBWOAsset.thermal_anomaly_measured_amps;
                                WOOnboardingAssets.thermal_anomaly_refrence_temps = OBWOAsset.thermal_anomaly_refrence_temps;
                                WOOnboardingAssets.thermal_anomaly_measured_temps = OBWOAsset.thermal_anomaly_measured_temps;
                                WOOnboardingAssets.thermal_anomaly_location = OBWOAsset.thermal_anomaly_location;
                                WOOnboardingAssets.thermal_anomaly_additional_ir_photo = OBWOAsset.thermal_anomaly_additional_ir_photo;
                                WOOnboardingAssets.thermal_anomaly_probable_cause = OBWOAsset.thermal_anomaly_probable_cause;
                                WOOnboardingAssets.thermal_anomaly_recommendation = OBWOAsset.thermal_anomaly_recommendation;
                                WOOnboardingAssets.nec_violation = OBWOAsset.nec_violation;
                                WOOnboardingAssets.osha_violation = OBWOAsset.osha_violation;
                                WOOnboardingAssets.flag_issue_thermal_anamoly_detected = OBWOAsset.flag_issue_thermal_anamoly_detected;
                                WOOnboardingAssets.flag_issue_nec_violation = OBWOAsset.flag_issue_nec_violation;
                                WOOnboardingAssets.flag_issue_osha_violation = OBWOAsset.flag_issue_osha_violation;
                                WOOnboardingAssets.is_nec_violation_resolved = OBWOAsset.is_nec_violation_resolved;
                                WOOnboardingAssets.is_osha_violation_resolved = OBWOAsset.is_osha_violation_resolved;
                                WOOnboardingAssets.is_thermal_anomaly_resolved = OBWOAsset.is_thermal_anomaly_resolved;
                                WOOnboardingAssets.asset_operating_condition_state = OBWOAsset.asset_operating_condition_state;
                                WOOnboardingAssets.code_compliance = OBWOAsset.code_compliance;
                                WOOnboardingAssets.other_notes = OBWOAsset.other_notes;
                                WOOnboardingAssets.replaced_asset_id = OBWOAsset.replaced_asset_id;
                                WOOnboardingAssets.general_issue_resolution = OBWOAsset.general_issue_resolution;
                                WOOnboardingAssets.form_nameplate_info = OBWOAsset.form_nameplate_info;

                                if (OBWOAsset.issues_temp_asset_id != null) // for backward compatibility
                                    WOOnboardingAssets.issues_temp_asset_id = OBWOAsset.issues_temp_asset_id;
                                if (OBWOAsset.new_issue_asset_type > 0) // for backward compatibility
                                {
                                    WOOnboardingAssets.new_issue_asset_type = OBWOAsset.new_issue_asset_type;
                                }
                                if (OBWOAsset.is_woline_from_other_inspection) // if this key is true then only update for backward compatibility.
                                    WOOnboardingAssets.is_woline_from_other_inspection = OBWOAsset.is_woline_from_other_inspection;
                                if (OBWOAsset.tempasset_id != null) // for backward compatibilty in old app tempasset_id wont so if request has temp asset id then only update in db
                                    WOOnboardingAssets.tempasset_id = OBWOAsset.tempasset_id;

                                if (WOOnboardingAssets.initial_inspected_at == null)
                                {
                                    WOOnboardingAssets.initial_inspected_at = OBWOAsset.initial_inspected_at;
                                    WOOnboardingAssets.initial_inspected_by = OBWOAsset.initial_inspected_by;
                                }

                                var update = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(WOOnboardingAssets);
                            }
                            else
                            {
                                // WOOnboardingAssets = new WOOnboardingAssets();
                                WOOnboardingAssets = _mapper.Map<WOOnboardingAssets>(OBWOAsset);
                                WOOnboardingAssets.woonboardingassets_id = OBWOAsset.woonboardingassets_id;
                                WOOnboardingAssets.modified_at = DateTime.UtcNow;
                                WOOnboardingAssets.created_at = DateTime.UtcNow;

                                var insert = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Insert(WOOnboardingAssets);
                            }


                        }
                    }
                    if (requestmodel.temp_location_woline_mapping != null && requestmodel.temp_location_woline_mapping.Count > 0)
                    {
                        foreach (var temp_location_woline_data in requestmodel.temp_location_woline_mapping)
                        {
                            WOOBAssetTempFormIOBuildingMapping WOOBAssetTempFormIOBuildingMapping = null;
                            WOOBAssetTempFormIOBuildingMapping = _UoW.WorkOrderRepository.GetTemplocationwolinemappingforOfflineUpdate(temp_location_woline_data.wo_ob_asset_temp_formiobuilding_id);
                            if (WOOBAssetTempFormIOBuildingMapping != null)
                            {
                                WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id = temp_location_woline_data.temp_formiobuilding_id;
                                WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id = temp_location_woline_data.temp_formiofloor_id;
                                WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id = temp_location_woline_data.temp_formioroom_id;
                                WOOBAssetTempFormIOBuildingMapping.created_at = DateTime.UtcNow;
                                var update = await _UoW.BaseGenericRepository<WOOBAssetTempFormIOBuildingMapping>().Update(WOOBAssetTempFormIOBuildingMapping);
                            }
                            else
                            {
                                WOOBAssetTempFormIOBuildingMapping = _mapper.Map<WOOBAssetTempFormIOBuildingMapping>(temp_location_woline_data);
                                WOOBAssetTempFormIOBuildingMapping.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<WOOBAssetTempFormIOBuildingMapping>().Insert(WOOBAssetTempFormIOBuildingMapping);
                            }
                        }
                    }
                    if (requestmodel.asset_images != null && requestmodel.asset_images.Count > 0)
                    {
                        foreach (var img in requestmodel.asset_images)
                        {
                            AssetProfileImages get_asset_image = null;
                            get_asset_image = _UoW.AssetRepository.GetAssetImagebyID(img.asset_profile_images_id);
                            if (get_asset_image != null)
                            {
                                get_asset_image.modified_at = DateTime.UtcNow;
                                get_asset_image.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                get_asset_image.is_deleted = img.is_deleted;
                                var update = await _UoW.BaseGenericRepository<AssetProfileImages>().Update(get_asset_image);
                            }
                            else
                            {
                                get_asset_image = new AssetProfileImages();
                                get_asset_image.asset_photo = img.asset_photo;
                                get_asset_image.asset_thumbnail_photo = img.asset_thumbnail_photo;
                                get_asset_image.asset_id = img.asset_id;
                                get_asset_image.is_deleted = img.is_deleted;
                                get_asset_image.asset_photo_type = img.asset_photo_type;
                                get_asset_image.created_at = DateTime.UtcNow;
                                get_asset_image.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                get_asset_image.asset_profile_images_id = img.asset_profile_images_id;

                                var insert = await _UoW.BaseGenericRepository<AssetProfileImages>().Insert(get_asset_image);
                            }
                        }
                    }
                    if (requestmodel.OB_asset_images != null && requestmodel.OB_asset_images.Count > 0)
                    {

                        var list_of_ids = requestmodel.OB_asset_images.GroupBy(x => x.woonboardingassetsimagesmapping_id);

                        foreach (var group in list_of_ids)
                        {
                            var img = requestmodel.OB_asset_images.Where(x => x.woonboardingassetsimagesmapping_id == group.Key).FirstOrDefault();

                            WOOnboardingAssetsImagesMapping get_asset_image = null;
                            get_asset_image = _UoW.AssetRepository.GetOBAssetImagebyID(img.woonboardingassetsimagesmapping_id);
                            if (get_asset_image != null)
                            {
                                get_asset_image.modified_at = DateTime.UtcNow;
                                get_asset_image.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                get_asset_image.is_deleted = img.is_deleted;
                                var update = await _UoW.BaseGenericRepository<WOOnboardingAssetsImagesMapping>().Update(get_asset_image);
                            }
                            else
                            {
                                get_asset_image = new WOOnboardingAssetsImagesMapping();
                                get_asset_image.asset_photo = img.asset_photo;
                                get_asset_image.woonboardingassetsimagesmapping_id = img.woonboardingassetsimagesmapping_id;
                                get_asset_image.asset_thumbnail_photo = img.asset_thumbnail_photo;
                                get_asset_image.woonboardingassets_id = img.woonboardingassets_id;
                                get_asset_image.image_duration_type_id = img.image_duration_type_id;
                                get_asset_image.is_deleted = img.is_deleted;
                                get_asset_image.asset_photo_type = img.asset_photo_type;
                                get_asset_image.created_at = DateTime.UtcNow;
                                get_asset_image.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                var insert = await _UoW.BaseGenericRepository<WOOnboardingAssetsImagesMapping>().Insert(get_asset_image);
                            }
                        }

                        /*foreach (var img in requestmodel.OB_asset_images)
                        {
                            WOOnboardingAssetsImagesMapping get_asset_image = null;
                            get_asset_image = _UoW.AssetRepository.GetOBAssetImagebyID(img.woonboardingassetsimagesmapping_id);
                            if (get_asset_image != null)
                            {
                                get_asset_image.modified_at = DateTime.UtcNow;
                                get_asset_image.modified_by = GenericRequestModel.requested_by.ToString();
                                get_asset_image.is_deleted = img.is_deleted;
                                var update = await _UoW.BaseGenericRepository<WOOnboardingAssetsImagesMapping>().Update(get_asset_image);
                            }
                            else
                            {
                                get_asset_image = new WOOnboardingAssetsImagesMapping();
                                get_asset_image.asset_photo = img.asset_photo;
                                get_asset_image.woonboardingassetsimagesmapping_id = img.woonboardingassetsimagesmapping_id;
                                get_asset_image.asset_thumbnail_photo = img.asset_thumbnail_photo;
                                get_asset_image.woonboardingassets_id = img.woonboardingassets_id;
                                get_asset_image.image_duration_type_id = img.image_duration_type_id;
                                get_asset_image.is_deleted = img.is_deleted;
                                get_asset_image.asset_photo_type = img.asset_photo_type;
                                get_asset_image.created_at = DateTime.UtcNow;
                                get_asset_image.created_by = GenericRequestModel.requested_by.ToString();

                                var insert = await _UoW.BaseGenericRepository<WOOnboardingAssetsImagesMapping>().Insert(get_asset_image);
                            }
                        }*/
                    }
                    if (requestmodel.OBWOFedByAssetMapping != null && requestmodel.OBWOFedByAssetMapping.Count > 0)
                    {
                        foreach (var fed_by in requestmodel.OBWOFedByAssetMapping)
                        {
                            WOOBAssetFedByMapping get_asset_fed_by = null;
                            get_asset_fed_by = _UoW.AssetRepository.GetOBAssetFedByID(fed_by.wo_ob_asset_fed_by_id);
                            if (get_asset_fed_by != null)
                            {
                                get_asset_fed_by.updated_at = DateTime.UtcNow;
                                get_asset_fed_by.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                get_asset_fed_by.is_deleted = fed_by.is_deleted;
                                get_asset_fed_by.fed_by_usage_type_id = fed_by.fed_by_usage_type_id;
                                get_asset_fed_by.length = fed_by.length;
                                get_asset_fed_by.style = fed_by.style;
                                get_asset_fed_by.number_of_conductor = fed_by.number_of_conductor;
                                get_asset_fed_by.conductor_type_id = fed_by.conductor_type_id;
                                get_asset_fed_by.raceway_type_id = fed_by.raceway_type_id;
                                get_asset_fed_by.fed_by_via_subcomponant_asset_id = fed_by.fed_by_via_subcomponant_asset_id;
                                get_asset_fed_by.is_fed_by_via_subcomponant_asset_from_ob_wo = fed_by.is_fed_by_via_subcomponant_asset_from_ob_wo;
                                get_asset_fed_by.via_subcomponant_asset_id = fed_by.via_subcomponant_asset_id;
                                get_asset_fed_by.is_via_subcomponant_asset_from_ob_wo = fed_by.is_via_subcomponant_asset_from_ob_wo;
                                var update = await _UoW.BaseGenericRepository<WOOBAssetFedByMapping>().Update(get_asset_fed_by);
                            }
                            else
                            {
                                get_asset_fed_by = new WOOBAssetFedByMapping();
                                get_asset_fed_by.woonboardingassets_id = fed_by.woonboardingassets_id;
                                get_asset_fed_by.parent_asset_id = fed_by.parent_asset_id;
                                get_asset_fed_by.is_parent_from_ob_wo = fed_by.is_parent_from_ob_wo;
                                get_asset_fed_by.is_deleted = fed_by.is_deleted;
                                get_asset_fed_by.fed_by_usage_type_id = fed_by.fed_by_usage_type_id;
                                get_asset_fed_by.created_at = DateTime.UtcNow;
                                get_asset_fed_by.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                get_asset_fed_by.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                get_asset_fed_by.length = fed_by.length;
                                get_asset_fed_by.style = fed_by.style;
                                get_asset_fed_by.number_of_conductor = fed_by.number_of_conductor;
                                get_asset_fed_by.conductor_type_id = fed_by.conductor_type_id;
                                get_asset_fed_by.raceway_type_id = fed_by.raceway_type_id;
                                get_asset_fed_by.fed_by_via_subcomponant_asset_id = fed_by.fed_by_via_subcomponant_asset_id;
                                get_asset_fed_by.is_fed_by_via_subcomponant_asset_from_ob_wo = fed_by.is_fed_by_via_subcomponant_asset_from_ob_wo;
                                get_asset_fed_by.via_subcomponant_asset_id = fed_by.via_subcomponant_asset_id;
                                get_asset_fed_by.is_via_subcomponant_asset_from_ob_wo = fed_by.is_via_subcomponant_asset_from_ob_wo;
                                var insert = await _UoW.BaseGenericRepository<WOOBAssetFedByMapping>().Insert(get_asset_fed_by);
                            }
                        }
                    }

                    if (requestmodel.IRWOImageLabelMappingList != null && requestmodel.IRWOImageLabelMappingList.Count > 0)
                    {
                        foreach (var fed_by in requestmodel.IRWOImageLabelMappingList)
                        {
                            IRWOImagesLabelMapping get_img_label_mapping = null;
                            get_img_label_mapping = _UoW.AssetRepository.GetIRImageLabelMappingByID(fed_by.irwoimagelabelmapping_id);
                            if (get_img_label_mapping != null)
                            {
                                get_img_label_mapping.updated_at = DateTime.UtcNow;
                                get_img_label_mapping.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                get_img_label_mapping.is_deleted = fed_by.is_deleted;
                                get_img_label_mapping.ir_image_label = fed_by.ir_image_label;
                                get_img_label_mapping.visual_image_label = fed_by.visual_image_label;
                                var update = await _UoW.BaseGenericRepository<IRWOImagesLabelMapping>().Update(get_img_label_mapping);
                            }
                            else
                            {
                                get_img_label_mapping = new IRWOImagesLabelMapping();
                                get_img_label_mapping.woonboardingassets_id = fed_by.woonboardingassets_id;
                                get_img_label_mapping.irwoimagelabelmapping_id = fed_by.irwoimagelabelmapping_id;
                                get_img_label_mapping.ir_image_label = fed_by.ir_image_label;
                                get_img_label_mapping.visual_image_label = fed_by.visual_image_label;
                                get_img_label_mapping.is_deleted = fed_by.is_deleted;
                                get_img_label_mapping.s3_image_folder_name = fed_by.s3_image_folder_name;
                                get_img_label_mapping.created_at = DateTime.UtcNow;
                                get_img_label_mapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                get_img_label_mapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                                var insert = await _UoW.BaseGenericRepository<IRWOImagesLabelMapping>().Insert(get_img_label_mapping);
                            }
                        }
                    }

                    if (requestmodel.asset_pms != null && requestmodel.asset_pms.Count > 0)
                    {
                        foreach (var pm in requestmodel.asset_pms)
                        {
                            var get_pm = _UoW.WorkOrderRepository.GetAssetPMtoUpdateOffline(pm.asset_pm_id);
                            if (get_pm != null)
                            {
                                get_pm.is_Asset_PM_fixed = pm.is_Asset_PM_fixed;
                                get_pm.status = pm.status;
                                get_pm.modified_at = DateTime.UtcNow;
                                get_pm.pm_form_output_data = pm.pm_form_output_data;
                                get_pm.wo_id = pm.wo_id;
                                get_pm.woonboardingassets_id = pm.woonboardingassets_id;
                                get_pm.is_archive = pm.is_archive;

                                var update = await _UoW.BaseGenericRepository<AssetPMs>().Update(get_pm);
                            }
                            else
                            {
                                get_pm = _mapper.Map<AssetPMs>(pm);
                                get_pm.woonboardingassets_id = pm.woonboardingassets_id;
                                get_pm.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<AssetPMs>().Insert(get_pm);
                            }

                        }
                    }

                    if (requestmodel.asset_issue != null && requestmodel.asset_issue.Count > 0)
                    {
                        var totalIssues = _UoW.WorkOrderRepository.GetTotalNumberOfIssues(
                                    Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id));
                        var siteCode = _UoW.WorkOrderRepository.GetSiteCodeById(
                            Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id));
                        foreach (var asset_issue in requestmodel.asset_issue)
                        {
                            AssetIssue assetissue = null;
                            assetissue = _UoW.WorkOrderRepository.GetAssetIssuebyIdforOffline(asset_issue.asset_issue_id);
                            if (assetissue != null)
                            {
                                assetissue.issue_title = asset_issue.issue_title;
                                assetissue.issue_description = asset_issue.issue_description;
                                assetissue.resolve_issue_reason = asset_issue.resolve_issue_reason;
                                assetissue.issue_status = asset_issue.issue_status;
                                assetissue.is_deleted = asset_issue.is_deleted;
                                assetissue.modified_at = DateTime.UtcNow;
                                assetissue.priority = asset_issue.priority;
                                assetissue.issue_type = asset_issue.issue_type;
                                assetissue.wo_id = asset_issue.wo_id;
                                assetissue.woonboardingassets_id = asset_issue.woonboardingassets_id;
                                var insert = await _UoW.BaseGenericRepository<AssetIssue>().Update(assetissue);
                            }
                            else
                            {
                                assetissue = _mapper.Map<AssetIssue>(asset_issue);
                                assetissue.issue_number = siteCode + " Issue-" + (++totalIssues);
                                var insert = await _UoW.BaseGenericRepository<AssetIssue>().Insert(assetissue);
                            }


                        }
                    }

                    if (requestmodel.asset_issue_image_mapping != null && requestmodel.asset_issue_image_mapping.Count > 0)
                    {
                        foreach (var img in requestmodel.asset_issue_image_mapping)
                        {
                            AssetIssueImagesMapping get_asset_issue_image = null;
                            get_asset_issue_image = _UoW.AssetRepository.GetOBAssetIssueImagebyID(img.asset_issue_image_mapping_id);
                            if (get_asset_issue_image != null)
                            {
                                get_asset_issue_image.modified_at = DateTime.UtcNow;
                                get_asset_issue_image.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                get_asset_issue_image.is_deleted = img.is_deleted;
                                var update = await _UoW.BaseGenericRepository<AssetIssueImagesMapping>().Update(get_asset_issue_image);
                            }
                            else
                            {
                                get_asset_issue_image = new AssetIssueImagesMapping();
                                get_asset_issue_image.asset_issue_image_mapping_id = img.asset_issue_image_mapping_id;
                                get_asset_issue_image.site_id = img.site_id;
                                get_asset_issue_image.image_file_name = img.image_file_name;
                                get_asset_issue_image.image_thumbnail_file_name = img.image_thumbnail_file_name;
                                get_asset_issue_image.image_duration_type_id = img.image_duration_type_id;
                                get_asset_issue_image.is_deleted = img.is_deleted;
                                get_asset_issue_image.asset_issue_id = img.asset_issue_id;
                                get_asset_issue_image.created_at = DateTime.UtcNow;
                                get_asset_issue_image.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                var insert = await _UoW.BaseGenericRepository<AssetIssueImagesMapping>().Insert(get_asset_issue_image);
                            }
                        }
                    }

                    if (requestmodel.woline_toplevel_asset_mapping != null && requestmodel.woline_toplevel_asset_mapping.Count > 0)
                    {
                        foreach (var toplevel in requestmodel.woline_toplevel_asset_mapping)
                        {
                            WOlineTopLevelcomponentMapping get_wolinetop_level_mapping = null;
                            get_wolinetop_level_mapping = _UoW.WorkOrderRepository.GetWolinetoplevelforOfflineupdate(toplevel.woline_toplevelcomponent_mapping_id);
                            if (get_wolinetop_level_mapping != null)
                            {
                                get_wolinetop_level_mapping.updated_at = DateTime.UtcNow;
                                get_wolinetop_level_mapping.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                get_wolinetop_level_mapping.is_deleted = toplevel.is_deleted;
                                var update = await _UoW.BaseGenericRepository<WOlineTopLevelcomponentMapping>().Update(get_wolinetop_level_mapping);
                            }
                            else
                            {
                                get_wolinetop_level_mapping = _mapper.Map<WOlineTopLevelcomponentMapping>(toplevel);
                                get_wolinetop_level_mapping.woonboardingassets_id = toplevel.woonboardingassets_id;
                                get_wolinetop_level_mapping.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<WOlineTopLevelcomponentMapping>().Insert(get_wolinetop_level_mapping);
                            }
                        }
                    }
                    if (requestmodel.woline_sublevel_asset_mapping != null && requestmodel.woline_sublevel_asset_mapping.Count > 0)
                    {
                        foreach (var sublevel in requestmodel.woline_sublevel_asset_mapping)
                        {
                            WOlineSubLevelcomponentMapping get_wolinesub_level_mapping = null;
                            get_wolinesub_level_mapping = _UoW.WorkOrderRepository.GetWolinesublevelforOfflineupdate(sublevel.woline_sublevelcomponent_mapping_id);
                            if (get_wolinesub_level_mapping != null)
                            {
                                get_wolinesub_level_mapping.updated_at = DateTime.UtcNow;
                                get_wolinesub_level_mapping.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                get_wolinesub_level_mapping.is_deleted = sublevel.is_deleted;
                                get_wolinesub_level_mapping.circuit = sublevel.circuit;
                                get_wolinesub_level_mapping.image_name = sublevel.image_name;
                                var update = await _UoW.BaseGenericRepository<WOlineSubLevelcomponentMapping>().Update(get_wolinesub_level_mapping);
                            }
                            else
                            {
                                get_wolinesub_level_mapping = _mapper.Map<WOlineSubLevelcomponentMapping>(sublevel);
                                get_wolinesub_level_mapping.woonboardingassets_id = sublevel.woonboardingassets_id;
                                get_wolinesub_level_mapping.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<WOlineSubLevelcomponentMapping>().Insert(get_wolinesub_level_mapping);
                            }
                        }
                    }

                    if (requestmodel.asset_toplevel_asset_mapping != null && requestmodel.asset_toplevel_asset_mapping.Count > 0)
                    {
                        foreach (var toplevel in requestmodel.asset_toplevel_asset_mapping)
                        {
                            AssetTopLevelcomponentMapping get_assettop_level_mapping = null;
                            get_assettop_level_mapping = _UoW.WorkOrderRepository.GetAssettoplevelforOfflineupdate(toplevel.asset_toplevelcomponent_mapping_id);
                            if (get_assettop_level_mapping != null)
                            {
                                get_assettop_level_mapping.updated_at = DateTime.UtcNow;
                                get_assettop_level_mapping.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                get_assettop_level_mapping.is_deleted = toplevel.is_deleted;
                                var update = await _UoW.BaseGenericRepository<AssetTopLevelcomponentMapping>().Update(get_assettop_level_mapping);
                            }
                            else
                            {
                                get_assettop_level_mapping = _mapper.Map<AssetTopLevelcomponentMapping>(toplevel);
                                get_assettop_level_mapping.asset_id = toplevel.asset_id;
                                get_assettop_level_mapping.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<AssetTopLevelcomponentMapping>().Insert(get_assettop_level_mapping);
                            }
                        }
                    }
                    if (requestmodel.asset_sublevel_asset_mapping != null && requestmodel.asset_sublevel_asset_mapping.Count > 0)
                    {
                        foreach (var sublevel in requestmodel.asset_sublevel_asset_mapping)
                        {
                            AssetSubLevelcomponentMapping get_assetsub_level_mapping = null;
                            get_assetsub_level_mapping = _UoW.WorkOrderRepository.GetAssetsublevelforOfflineupdate(sublevel.asset_sublevelcomponent_mapping_id);
                            if (get_assetsub_level_mapping != null)
                            {
                                get_assetsub_level_mapping.updated_at = DateTime.UtcNow;
                                get_assetsub_level_mapping.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                get_assetsub_level_mapping.is_deleted = sublevel.is_deleted;
                                get_assetsub_level_mapping.circuit = sublevel.circuit;
                                get_assetsub_level_mapping.image_name = sublevel.image_name;
                                var update = await _UoW.BaseGenericRepository<AssetSubLevelcomponentMapping>().Update(get_assetsub_level_mapping);
                            }
                            else
                            {
                                get_assetsub_level_mapping = _mapper.Map<AssetSubLevelcomponentMapping>(sublevel);
                                get_assetsub_level_mapping.asset_id = sublevel.asset_id;
                                get_assetsub_level_mapping.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<AssetSubLevelcomponentMapping>().Insert(get_assetsub_level_mapping);
                            }
                        }
                    }
                    if (requestmodel.pm_submitted_form_data != null && requestmodel.pm_submitted_form_data.Count > 0)
                    {
                        foreach (var pm_submitted_data in requestmodel.pm_submitted_form_data)
                        {
                            // if pm form is for thermography then update bucket name
                            if (!String.IsNullOrEmpty(pm_submitted_data.pm_form_output_data))
                            {
                                pm_submitted_data.pm_form_output_data = pm_submitted_data.pm_form_output_data.Replace("conduit-prod-obwoirphotos", "conduit-prod.obwoirphotos");
                            }
                            ActiveAssetPMWOlineMapping get_active_asset_pm_woline_mapping = null;
                            get_active_asset_pm_woline_mapping = _UoW.WorkOrderRepository.GetPMSubmittedDataForOffline(pm_submitted_data.active_asset_pm_woline_mapping_id);
                            if (get_active_asset_pm_woline_mapping != null)
                            {
                                get_active_asset_pm_woline_mapping.modified_at = DateTime.UtcNow;
                                get_active_asset_pm_woline_mapping.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                get_active_asset_pm_woline_mapping.is_active = pm_submitted_data.is_active;
                                get_active_asset_pm_woline_mapping.is_deleted = pm_submitted_data.is_deleted;
                                get_active_asset_pm_woline_mapping.pm_form_output_data = pm_submitted_data.pm_form_output_data;
                                var update = await _UoW.BaseGenericRepository<ActiveAssetPMWOlineMapping>().Update(get_active_asset_pm_woline_mapping);
                            }
                            else
                            {
                                get_active_asset_pm_woline_mapping = _mapper.Map<ActiveAssetPMWOlineMapping>(pm_submitted_data);
                                get_active_asset_pm_woline_mapping.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<ActiveAssetPMWOlineMapping>().Insert(get_active_asset_pm_woline_mapping);
                            }
                        }
                    }

                    if (requestmodel.temp_assetpm_mapping != null && requestmodel.temp_assetpm_mapping.Count > 0)
                    {
                        foreach (var tempassetpm in requestmodel.temp_assetpm_mapping)
                        {
                            var get_temppm = _UoW.WorkOrderRepository.GetTempAssetPMsbyIdOfflineUpdate(tempassetpm.temp_asset_pm_id);
                            if (get_temppm != null)
                            {
                                get_temppm.is_Asset_PM_fixed = tempassetpm.is_Asset_PM_fixed;
                                get_temppm.status = tempassetpm.status;
                                get_temppm.modified_at = DateTime.UtcNow;
                                get_temppm.woonboardingassets_id = tempassetpm.woonboardingassets_id;
                                get_temppm.is_archive = tempassetpm.is_archive;

                                var update = await _UoW.BaseGenericRepository<TempAssetPMs>().Update(get_temppm);
                            }
                            else
                            {
                                get_temppm = _mapper.Map<TempAssetPMs>(tempassetpm);
                                get_temppm.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<TempAssetPMs>().Insert(get_temppm);
                            }
                        }
                    }
                    if (requestmodel.temp_active_assetpm_woline_mapping != null && requestmodel.temp_active_assetpm_woline_mapping.Count > 0)
                    {
                        foreach (var tempactiveassetpmwoline in requestmodel.temp_active_assetpm_woline_mapping)
                        {
                            var get_actie_temppm_woline = _UoW.WorkOrderRepository.GetTempActiveAssetPMwolinemappingbyIdOfflineUpdate(tempactiveassetpmwoline.temp_active_asset_pm_woline_mapping_id);
                            if (get_actie_temppm_woline != null)
                            {
                                get_actie_temppm_woline.is_active = tempactiveassetpmwoline.is_active;
                                get_actie_temppm_woline.modified_at = DateTime.UtcNow;
                                get_actie_temppm_woline.is_deleted = tempactiveassetpmwoline.is_deleted;
                                get_actie_temppm_woline.pm_form_output_data = tempactiveassetpmwoline.pm_form_output_data;

                                var update = await _UoW.BaseGenericRepository<TempActiveAssetPMWOlineMapping>().Update(get_actie_temppm_woline);
                            }
                            else
                            {
                                get_actie_temppm_woline = _mapper.Map<TempActiveAssetPMWOlineMapping>(tempactiveassetpmwoline);
                                get_actie_temppm_woline.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<TempActiveAssetPMWOlineMapping>().Insert(get_actie_temppm_woline);
                            }
                        }
                    }


                    if (requestmodel.woline_temp_issue_mapping != null && requestmodel.woline_temp_issue_mapping.Count > 0)
                    {
                        foreach (var tempissue in requestmodel.woline_temp_issue_mapping)
                        {
                            var get_temp_issue = _UoW.WorkOrderRepository.GetTempIssueforOfflineUpdate(tempissue.wo_line_issue_id);
                            if (get_temp_issue != null)
                            {
                                get_temp_issue.modified_at = DateTime.UtcNow;
                                get_temp_issue.wo_line_issue_id = tempissue.wo_line_issue_id;
                                get_temp_issue.issue_type = tempissue.issue_type;
                                get_temp_issue.issue_status = tempissue.issue_status;
                                get_temp_issue.issue_caused_id = tempissue.issue_caused_id;
                                get_temp_issue.asset_form_id = tempissue.asset_form_id;
                                get_temp_issue.woonboardingassets_id = tempissue.woonboardingassets_id;
                                get_temp_issue.original_asset_form_id = tempissue.original_asset_form_id;
                                get_temp_issue.original_woonboardingassets_id = tempissue.original_woonboardingassets_id;
                                get_temp_issue.original_wo_id = tempissue.original_wo_id;
                                get_temp_issue.original_asset_id = tempissue.original_asset_id;
                                get_temp_issue.issue_title = tempissue.issue_title;
                                get_temp_issue.issue_description = tempissue.issue_description;
                                get_temp_issue.atmw_first_comment = tempissue.atmw_first_comment;
                                get_temp_issue.field_note = tempissue.field_note;
                                get_temp_issue.back_office_note = tempissue.back_office_note;
                                get_temp_issue.is_issue_linked_for_fix = tempissue.is_issue_linked_for_fix;
                                var update = await _UoW.BaseGenericRepository<WOLineIssue>().Update(get_temp_issue);
                            }
                            else
                            {
                                get_temp_issue = _mapper.Map<WOLineIssue>(tempissue);
                                get_temp_issue.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<WOLineIssue>().Insert(get_temp_issue);
                            }
                        }
                    }

                    if (requestmodel.woline_temp_issue_image_mapping != null && requestmodel.woline_temp_issue_image_mapping.Count > 0)
                    {
                        foreach (var tempissue_img in requestmodel.woline_temp_issue_image_mapping)
                        {
                            var get_temp_issue_img = _UoW.WorkOrderRepository.GetTempIssueImageforOfflineUpdate(tempissue_img.woline_issue_image_mapping_id);
                            if (get_temp_issue_img != null)
                            {
                                get_temp_issue_img.modified_at = DateTime.UtcNow;
                                get_temp_issue_img.is_deleted = get_temp_issue_img.is_deleted;

                                var update = await _UoW.BaseGenericRepository<WOlineIssueImagesMapping>().Update(get_temp_issue_img);
                            }
                            else
                            {
                                get_temp_issue_img = _mapper.Map<WOlineIssueImagesMapping>(tempissue_img);
                                get_temp_issue_img.created_at = DateTime.UtcNow;
                                var insert = await _UoW.BaseGenericRepository<WOlineIssueImagesMapping>().Insert(get_temp_issue_img);
                            }
                        }
                    }


                    response = (int)ResponseStatusNumber.Success;
                    UpdateWOOfflineResponsemodel.success = (int)ResponseStatusNumber.Success;
                    _UoW.SaveChanges();
                    _UoW.CommitTransaction();

                    #region change asset condition based on issue
                    if (requestmodel.asset_issue != null && requestmodel.asset_issue.Count > 0)
                    {
                        foreach (var asset_issue in requestmodel.asset_issue)
                        {
                            try
                            {
                                await ChangeAssetConditionBasedOnIssue(asset_issue.asset_issue_id);
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                    }
                    #endregion change asset condition based on issue

                    #region Add section data in temp 

                    // insert  section data explicitly
                    if (requestmodel.OBWOAssetDetails != null && requestmodel.OBWOAssetDetails.Count > 0)
                    {
                        foreach (var OBWOAsset in requestmodel.OBWOAssetDetails)
                        {
                            WOOnboardingAssets WOOnboardingAssets = null;
                            WOOnboardingAssets = _UoW.WorkOrderRepository.GetOBWOAssetDetailsById(OBWOAsset.woonboardingassets_id);
                            if (!String.IsNullOrEmpty(WOOnboardingAssets.section))
                            {
                                // check section data 
                                if (WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping != null && WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id != null)
                                {
                                    TempFormIOSections TempFormIOSections = null;
                                    TempFormIOSections = _UoW.WorkOrderRepository.GetTempSectionformOfflineUpdate(WOOnboardingAssets.section, WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id.Value);
                                    if (TempFormIOSections == null) // insert temp section 
                                    {
                                        TempFormIOSections = new TempFormIOSections();
                                        TempFormIOSections.temp_formio_section_name = OBWOAsset.section;
                                        TempFormIOSections.wo_id = WOOnboardingAssets.wo_id;
                                        TempFormIOSections.site_id = WOOnboardingAssets.site_id;
                                        TempFormIOSections.is_deleted = false;
                                        TempFormIOSections.created_at = DateTime.UtcNow;
                                        TempFormIOSections.company_id = WOOnboardingAssets.Sites.company_id;

                                        var insert_temp_section = await _UoW.BaseGenericRepository<TempFormIOSections>().Insert(TempFormIOSections);
                                        _UoW.SaveChanges();
                                    }

                                    // update in woline mapping
                                    WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id = TempFormIOSections.temp_formiosection_id;

                                    var update_woline = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(WOOnboardingAssets);
                                }
                            }

                        }
                    }
                    #endregion Add section data in temp 

                    // commenting these as now temp location will be there not main location
                    #region add building mapping
                    // add building and mapping
                    /* if (requestmodel.form_io_buildings != null && requestmodel.form_io_buildings.Count > 0)
                     {
                         foreach (var building in requestmodel.form_io_buildings)
                         {
                             if (!String.IsNullOrEmpty(building.formio_building_name))
                             {
                                 var is_building_exist = _UoW.WorkOrderRepository.GetFormIOBuildingByName(building.formio_building_name);
                                 if (is_building_exist == null)
                                 {
                                     FormIOBuildings FormIOBuildings = new FormIOBuildings();
                                     FormIOBuildings.formio_building_name = building.formio_building_name;
                                     FormIOBuildings.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                     FormIOBuildings.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                                     FormIOBuildings.created_at = DateTime.UtcNow;

                                     var insert = await _UoW.BaseGenericRepository<FormIOBuildings>().Insert(FormIOBuildings);
                                     _UoW.SaveChanges();
                                 }
                             }
                         }
                     }
                     if (requestmodel.form_io_floors != null && requestmodel.form_io_floors.Count > 0)
                     {
                         foreach (var floor in requestmodel.form_io_floors)
                         {
                             if (!String.IsNullOrEmpty(floor.formio_floor_name))
                             {

                                 var is_building_exist = _UoW.WorkOrderRepository.GetFormIOBuildingByName(floor.formio_building_name);
                                 if (is_building_exist != null)
                                 {
                                     var is_floor_exist = _UoW.WorkOrderRepository.GetFormIOFloorByName(floor.formio_floor_name, is_building_exist.formiobuilding_id);
                                     if (is_floor_exist == null)
                                     {
                                         FormIOFloors FormIOFloors = new FormIOFloors();
                                         FormIOFloors.formio_floor_name = floor.formio_floor_name;
                                         FormIOFloors.formiobuilding_id = is_building_exist.formiobuilding_id;
                                         FormIOFloors.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                         FormIOFloors.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                                         FormIOFloors.created_at = DateTime.UtcNow;

                                         var insert = await _UoW.BaseGenericRepository<FormIOFloors>().Insert(FormIOFloors);
                                         _UoW.SaveChanges();
                                     }

                                 }
                             }
                         }
                     }
                     if (requestmodel.form_io_rooms != null && requestmodel.form_io_rooms.Count > 0)
                     {
                         foreach (var room in requestmodel.form_io_rooms)
                         {
                             if (!String.IsNullOrEmpty(room.formio_room_name))
                             {
                                 var is_building_exist = _UoW.WorkOrderRepository.GetFormIOBuildingByName(room.formio_building_name);
                                 if (is_building_exist != null)
                                 {
                                     var is_floor_exist = _UoW.WorkOrderRepository.GetFormIOFloorByName(room.formio_floor_name, is_building_exist.formiobuilding_id);
                                     if (is_floor_exist != null)
                                     {
                                         var is_room_exist = _UoW.WorkOrderRepository.GetFormIORoomByName(room.formio_room_name, is_floor_exist.formiofloor_id);
                                         if (is_room_exist == null)
                                         {
                                             FormIORooms FormIORooms = new FormIORooms();
                                             FormIORooms.formio_room_name = room.formio_room_name;
                                             FormIORooms.formiofloor_id = is_floor_exist.formiofloor_id;
                                             FormIORooms.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                             FormIORooms.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                                             FormIORooms.created_at = DateTime.UtcNow;

                                             var insert = await _UoW.BaseGenericRepository<FormIORooms>().Insert(FormIORooms);
                                             _UoW.SaveChanges();
                                         }
                                     }
                                 }
                             }
                         }
                     }
                     if (requestmodel.OBWOAssetDetails != null && requestmodel.OBWOAssetDetails.Count > 0)
                     {
                         foreach (var OBWOAsset in requestmodel.OBWOAssetDetails)
                         {
                             WOOnboardingAssets WOOnboardingAssets = null;
                             WOOnboardingAssets = _UoW.WorkOrderRepository.GetOBWOAssetDetailsById(OBWOAsset.woonboardingassets_id);

                             //commenting this bcoz now temp location will be used
                             // insert section in master table
                             // check if section already exist or not 
                             #region add section to main table
                             /* var building = _UoW.WorkOrderRepository.GetFormIOBuildingByName(WOOnboardingAssets.building);
                              if (building != null)
                              {
                                  var floor = _UoW.WorkOrderRepository.GetFormIOFloorByName(WOOnboardingAssets.floor, building.formiobuilding_id);
                                  if (floor != null)
                                  {
                                      var room = _UoW.WorkOrderRepository.GetFormIORoomByName(WOOnboardingAssets.room, floor.formiofloor_id);
                                      if (room != null)
                                      {
                                          FormIOSections FormIOSections = null;
                                          FormIOSections = _UoW.WorkOrderRepository.GetFormIOSectionByName(WOOnboardingAssets.section, room.formioroom_id);
                                          if (FormIOSections == null)
                                          {
                                              FormIOSections = new FormIOSections();
                                              FormIOSections.formio_section_name = WOOnboardingAssets.section;
                                              FormIOSections.formioroom_id = room.formioroom_id;
                                              FormIOSections.created_at = DateTime.UtcNow;
                                              FormIOSections.site_id = WOOnboardingAssets.site_id;
                                              FormIOSections.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                              var insertsection = await _UoW.BaseGenericRepository<FormIOSections>().Insert(FormIOSections);
                                              _UoW.SaveChanges();

                                          }
                                          //// insert location mapping 
                                          ///
                                          if (WOOnboardingAssets.WOLineBuildingMapping != null) // update 
                                          {
                                              WOOnboardingAssets.WOLineBuildingMapping.formiosection_id = FormIOSections.formiosection_id;
                                              WOOnboardingAssets.WOLineBuildingMapping.created_at = DateTime.UtcNow;
                                              var update_location_mapping = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(WOOnboardingAssets);
                                              _UoW.SaveChanges();
                                          }
                                          else // insert
                                          {
                                              WOLineBuildingMapping WOLineBuildingMapping = new WOLineBuildingMapping();
                                              WOLineBuildingMapping.formiobuilding_id = building.formiobuilding_id;
                                              WOLineBuildingMapping.formiofloor_id = floor.formiofloor_id;
                                              WOLineBuildingMapping.formioroom_id = room.formioroom_id;
                                              WOLineBuildingMapping.formiosection_id = FormIOSections.formiosection_id;
                                              WOLineBuildingMapping.woonboardingassets_id = WOOnboardingAssets.woonboardingassets_id;
                                              WOLineBuildingMapping.created_at = DateTime.UtcNow;

                                              var insert_location_mapping = await _UoW.BaseGenericRepository<WOLineBuildingMapping>().Insert(WOLineBuildingMapping);
                                              _UoW.SaveChanges();
                                          }


                                      }
                                  }

                              }
                        */
                    #endregion add section to main table

                    #region add issue from pm woline
                    if (requestmodel.pm_submitted_form_data != null && requestmodel.pm_submitted_form_data.Count > 0)
                    {
                        foreach (var pm in requestmodel.pm_submitted_form_data)
                        {
                            if (!String.IsNullOrEmpty(pm.pm_form_output_data))
                            {
                                // if pm form is for thermography then update bucket name
                                pm.pm_form_output_data = pm.pm_form_output_data.Replace("conduit-prod-obwoirphotos", "conduit-prod.obwoirphotos");

                                var get_pm = _UoW.WorkOrderRepository.GetAssetPMtoUpdateOffline(pm.asset_pm_id);
                                AddUpdateTempIssueFromWORequestmodel tempIssueRequest = null;
                                // create/update issue based on pm 
                                tempIssueRequest = OBWOMakeRequestmodelforWOlineIssue(pm.woonboardingassets_id);
                                if (tempIssueRequest.list_temp_issue != null && tempIssueRequest.list_temp_issue.Count > 0)
                                {
                                    await AddUpdateTempIssueFromWO(tempIssueRequest);
                                }

                                if (tempIssueRequest != null)
                                {
                                    if (tempIssueRequest.is_pm_clear)
                                        get_pm.is_Asset_PM_fixed = true;
                                    else
                                        get_pm.is_Asset_PM_fixed = false;
                                }

                                // store ir visual images if any
                                if (tempIssueRequest.list_pm_ir_scan_images != null && tempIssueRequest.list_pm_ir_scan_images.Count > 0)
                                {
                                    // delete all image mapping and insert new 
                                    if (get_pm.WOOnboardingAssets.IRWOImagesLabelMapping != null && get_pm.WOOnboardingAssets.IRWOImagesLabelMapping.Count > 0)
                                    {
                                        get_pm.WOOnboardingAssets.IRWOImagesLabelMapping.Where(x => !x.is_deleted).ToList().ForEach(x => {
                                            x.updated_at = DateTime.UtcNow;
                                            x.is_deleted = true;
                                        });
                                    }
                                    foreach (var image in tempIssueRequest.list_pm_ir_scan_images)
                                    {
                                        IRWOImagesLabelMapping IRWOImagesLabelMapping = new IRWOImagesLabelMapping();
                                        IRWOImagesLabelMapping.ir_image_label = image.ir_image_label;
                                        IRWOImagesLabelMapping.visual_image_label = image.visual_image_label;
                                        IRWOImagesLabelMapping.created_at = DateTime.UtcNow;
                                        IRWOImagesLabelMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                        IRWOImagesLabelMapping.visual_image_label = image.visual_image_label;
                                        IRWOImagesLabelMapping.site_id = get_pm.WorkOrders.site_id;
                                        IRWOImagesLabelMapping.s3_image_folder_name = get_pm.WorkOrders.site_id.ToString() + "/" + get_pm.WorkOrders.manual_wo_number;

                                        get_pm.WOOnboardingAssets.IRWOImagesLabelMapping.Add(IRWOImagesLabelMapping);
                                    }
                                }

                                var update = await _UoW.BaseGenericRepository<AssetPMs>().Update(get_pm);
                            }
                        }
                    }
                    #endregion add issue from pm woline

                    #region add ssue from temp assetpm woline
                    if (requestmodel.temp_active_assetpm_woline_mapping != null && requestmodel.temp_active_assetpm_woline_mapping.Count > 0)
                    {
                        foreach (var item in requestmodel.temp_active_assetpm_woline_mapping)
                        {
                            if (item.temp_asset_pm_id != null) // this is for temp asset pms
                            {
                                SubmitPMFormJsonRequestmodel temppmrequestmodel = new SubmitPMFormJsonRequestmodel();
                                temppmrequestmodel.temp_asset_pm_id = item.temp_asset_pm_id;
                                temppmrequestmodel.pm_form_output_data = item.pm_form_output_data;
                                temppmrequestmodel.status = (int)Status.InProgress;
                                temppmrequestmodel.woonboardingassets_id = item.woonboardingassets_id;
                                response = await SubmitTempPMFormJson(temppmrequestmodel);
                            }
                        }
                    }
                    #endregion add ssue from temp assetpm woline

                    #region add issue from ob/ir woline
                    if (requestmodel.OBWOAssetDetails != null && requestmodel.OBWOAssetDetails.Count > 0)
                    {
                        foreach (var OBWOAsset in requestmodel.OBWOAssetDetails)
                        {
                            #region Create/Update temp Issues
                            AddUpdateTempIssueFromWORequestmodel tempIssueRequest = OBWOMakeRequestmodelforWOlineIssue(OBWOAsset.woonboardingassets_id);
                            if (tempIssueRequest.list_temp_issue != null && tempIssueRequest.list_temp_issue.Count > 0)
                            {
                                await AddUpdateTempIssueFromWO(tempIssueRequest);
                            }
                            #endregion Create/Update temp Issues


                            // if WO is IR and in woline if there is no issue marked and if woline status is Ready for review then mark woline status as completed
                            var get_woline = _UoW.WorkOrderRepository.GetWOlineForcompletestatus(OBWOAsset.woonboardingassets_id);
                            if (get_woline != null &&  (get_woline.WOLineIssue.Count() == 0 || get_woline.WOLineIssue.All(x=>x.is_deleted)))
                            {
                                get_woline.status = (int)Status.Completed;
                                await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_woline);
                            } 
                        }
                    }
                    #endregion add issue from ob/ir woline

                    #region Addupdate TempAsset from woline for backward compatibility
                    if (requestmodel.OBWOAssetDetails != null && requestmodel.OBWOAssetDetails.Count > 0)
                    {
                        // getting distinct from list as there was a not reproduced bug from mobile so duplicate woline was getting in request 
                        requestmodel.OBWOAssetDetails = requestmodel.OBWOAssetDetails.GroupBy(p => p.woonboardingassets_id)
                                                                                .Select(group => group.First())
                                                                                .ToList();
                        foreach (var OBWOAsset in requestmodel.OBWOAssetDetails)
                        {
                            WOOnboardingAssets WOOnboardingAssets = null;
                            WOOnboardingAssets = _UoW.WorkOrderRepository.GetOBWOAssetDetailsById(OBWOAsset.woonboardingassets_id);
                            if (WOOnboardingAssets != null && WOOnboardingAssets.tempasset_id == null && WOOnboardingAssets.inspection_type == (int)MWO_inspection_wo_type.OnBoarding)// if inspection type in ob and tempasset id is null in db then create new temp asset id
                            {
                                var tempasset_request = new UpdateOBWOAssetDetailsRequestmodel();
                                tempasset_request.asset_name = OBWOAsset.asset_name;
                                tempasset_request.QR_code = OBWOAsset.QR_code;
                                tempasset_request.condition_index_type = OBWOAsset.condition_index_type;
                                tempasset_request.criticality_index_type = OBWOAsset.criticality_index_type;
                                tempasset_request.commisiion_date = OBWOAsset.commisiion_date;
                                tempasset_request.form_nameplate_info = OBWOAsset.form_nameplate_info;
                                tempasset_request.component_level_type_id = OBWOAsset.component_level_type_id;
                                tempasset_request.asset_operating_condition_state = OBWOAsset.asset_operating_condition_state;
                                tempasset_request.code_compliance = OBWOAsset.code_compliance;
                                tempasset_request.asset_id = OBWOAsset.asset_id;
                                tempasset_request.building = OBWOAsset.building;
                                tempasset_request.floor = OBWOAsset.floor;
                                tempasset_request.room = OBWOAsset.room;
                                tempasset_request.wo_id = OBWOAsset.wo_id;
                                tempasset_request.site_id = OBWOAsset.site_id;
                                tempasset_request.section = OBWOAsset.section;
                                tempasset_request.asset_class_code = OBWOAsset.asset_class_code;
                                tempasset_request.asset_class_name = OBWOAsset.asset_class_name;
                                if (WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping != null)
                                {
                                    tempasset_request.temp_formiobuilding_id = WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id;
                                    tempasset_request.temp_formiofloor_id = WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id;
                                    tempasset_request.temp_formioroom_id = WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id;
                                }
                                if (WOOnboardingAssets.TempAsset != null)
                                {
                                    await AddTempAssetData(tempasset_request, WOOnboardingAssets.TempAsset);
                                }
                                else
                                {
                                    var added_tempassset_id = await AddTempAssetData(tempasset_request, new TempAsset());
                                    WOOnboardingAssets.tempasset_id = added_tempassset_id;

                                    // update temp asset id in woline table
                                    var upadate_woline = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(WOOnboardingAssets);
                                }
                            }
                        }
                    }
                    #endregion Addupdate TempAsset from woline

                    #region Update is_link_for_fix flag as mobile didnt implemented 
                    if (requestmodel.OBWOAssetDetails != null && requestmodel.OBWOAssetDetails.Count > 0)
                    {
                        // getting distinct from list as there was a not reproduced bug from mobile so duplicate woline was getting in request 
                        requestmodel.OBWOAssetDetails = requestmodel.OBWOAssetDetails.GroupBy(p => p.woonboardingassets_id)
                                                                                .Select(group => group.First())
                                                                                .ToList();
                        foreach (var OBWOAsset in requestmodel.OBWOAssetDetails)
                        {
                            if (OBWOAsset.inspection_type == (int)MWO_inspection_wo_type.Repair)
                            {
                                // get temp issue by woline id 
                                var temp_issue = _UoW.WorkOrderRepository.GetTempIssueByWOline(OBWOAsset.woonboardingassets_id);
                                if (temp_issue != null)
                                {
                                    // check repair resolution 
                                    if (OBWOAsset.repair_resolution == (int)MWO_inspection_Repair_resolution.Repair_completed_successfully)
                                    {
                                        temp_issue.is_issue_linked_for_fix = true;
                                        temp_issue.modified_at = DateTime.UtcNow;
                                    }
                                    else
                                    {
                                        temp_issue.is_issue_linked_for_fix = false;
                                        temp_issue.modified_at = DateTime.UtcNow;
                                    }
                                    var update = await _UoW.BaseGenericRepository<WOLineIssue>().Update(temp_issue);
                                    _UoW.SaveChanges();
                                }


                            }
                            if (OBWOAsset.inspection_type == (int)MWO_inspection_wo_type.Replace)
                            {
                                // get temp issue by woline id 
                                var temp_issue = _UoW.WorkOrderRepository.GetTempIssueByWOline(OBWOAsset.woonboardingassets_id);
                                if (temp_issue != null)
                                {
                                    // check repair resolution 
                                    if (OBWOAsset.replacement_resolution == (int)MWO_inspection_replacement_resolution.Replacement_completed_successfully)
                                    {
                                        temp_issue.is_issue_linked_for_fix = true;
                                        temp_issue.modified_at = DateTime.UtcNow;
                                    }
                                    else
                                    {
                                        temp_issue.is_issue_linked_for_fix = false;
                                        temp_issue.modified_at = DateTime.UtcNow;
                                    }
                                    var update = await _UoW.BaseGenericRepository<WOLineIssue>().Update(temp_issue);
                                    _UoW.SaveChanges();
                                }


                            }
                            if (OBWOAsset.inspection_type == (int)MWO_inspection_wo_type.Trouble_Call_Check)
                            {
                                // get temp issue by woline id 
                                var temp_issue = _UoW.WorkOrderRepository.GetTempIssueByWOline(OBWOAsset.woonboardingassets_id);
                                if (temp_issue != null)
                                {
                                    // check repair resolution 
                                    if (OBWOAsset.general_issue_resolution == (int)MWO_inspection_general_issue_resolution.Issue_completed_successfully)
                                    {
                                        temp_issue.is_issue_linked_for_fix = true;
                                        temp_issue.modified_at = DateTime.UtcNow;
                                    }
                                    else
                                    {
                                        temp_issue.is_issue_linked_for_fix = false;
                                        temp_issue.modified_at = DateTime.UtcNow;
                                    }
                                    var update = await _UoW.BaseGenericRepository<WOLineIssue>().Update(temp_issue);
                                    _UoW.SaveChanges();
                                }


                            }
                        }
                    }

                    #endregion Update is_link_for_fix flag as mobile didnt implemented 

                    #region add update SiteWalkThrough Temp PM Estimation

                    if (requestmodel.sitewalkthrough_temp_pm_estimation != null && requestmodel.sitewalkthrough_temp_pm_estimation.Count > 0)
                    {
                        foreach (var tempPMestimation in requestmodel.sitewalkthrough_temp_pm_estimation)
                        {
                            SitewalkthroughTempPmEstimation sitewalkthroughTempPmEstimation = null;
                            sitewalkthroughTempPmEstimation = _UoW.WorkOrderRepository.GetSiteWalkThroughTempPMEstimationByID(tempPMestimation.sitewalkthrough_temp_pm_estimation_id);

                            if (sitewalkthroughTempPmEstimation != null)
                            {
                                sitewalkthroughTempPmEstimation.tempasset_id = tempPMestimation.tempasset_id;
                                sitewalkthroughTempPmEstimation.pm_plan_id = tempPMestimation.pm_plan_id;
                                sitewalkthroughTempPmEstimation.woonboardingassets_id = tempPMestimation.woonboardingassets_id;
                                sitewalkthroughTempPmEstimation.inspectiontemplate_asset_class_id = tempPMestimation.inspectiontemplate_asset_class_id;
                                sitewalkthroughTempPmEstimation.pm_id = tempPMestimation.pm_id;
                                sitewalkthroughTempPmEstimation.estimation_time = tempPMestimation.estimation_time;
                                sitewalkthroughTempPmEstimation.modified_at = DateTime.UtcNow;
                                sitewalkthroughTempPmEstimation.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                sitewalkthroughTempPmEstimation.is_deleted = tempPMestimation.is_deleted;
                                var update = await _UoW.BaseGenericRepository<SitewalkthroughTempPmEstimation>().Update(sitewalkthroughTempPmEstimation);
                            }
                            else
                            {
                                sitewalkthroughTempPmEstimation = new SitewalkthroughTempPmEstimation();
                                sitewalkthroughTempPmEstimation.pm_plan_id = tempPMestimation.pm_plan_id;
                                sitewalkthroughTempPmEstimation.woonboardingassets_id = tempPMestimation.woonboardingassets_id;
                                sitewalkthroughTempPmEstimation.inspectiontemplate_asset_class_id = tempPMestimation.inspectiontemplate_asset_class_id;
                                sitewalkthroughTempPmEstimation.pm_id = tempPMestimation.pm_id;
                                sitewalkthroughTempPmEstimation.estimation_time = tempPMestimation.estimation_time;
                                sitewalkthroughTempPmEstimation.created_at = DateTime.UtcNow;
                                sitewalkthroughTempPmEstimation.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                sitewalkthroughTempPmEstimation.is_deleted = tempPMestimation.is_deleted;
                                var insert = await _UoW.BaseGenericRepository<SitewalkthroughTempPmEstimation>().Insert(sitewalkthroughTempPmEstimation);
                            }
                        }
                    }

                    #endregion add update SiteWalkThrough Temp PM Estimation


                }
                catch (Exception ex)
                {
                    _UoW.RollbackTransaction();
                    response = (int)ResponseStatusNumber.Error;
                    UpdateWOOfflineResponsemodel.success = (int)ResponseStatusNumber.Error;
                    _logger.LogInformation(logger_guid.ToString() + " : " + " Exception in offline sync : " + ex.Message);
                    return UpdateWOOfflineResponsemodel;
                }
            }
            _logger.LogInformation(logger_guid.ToString() + " : " + " UpdateWOOffline return statement: " + Newtonsoft.Json.JsonConvert.SerializeObject(UpdateWOOfflineResponsemodel));
            return UpdateWOOfflineResponsemodel;
        }

        public GetOfflineSyncLambdaStatusResponsemodel GetOfflineSyncLambdaStatus(GetOfflineSyncLambdaStatusRequestmodel requestmodel)
        {
            GetOfflineSyncLambdaStatusResponsemodel response = new GetOfflineSyncLambdaStatusResponsemodel();

            var get_request_track_data = _UoW.WorkOrderRepository.GetOfflineRequestTrackData(requestmodel.trackmobilesyncoffline_id);
            response.trackmobilesyncoffline_id = get_request_track_data.trackmobilesyncoffline_id;
            response.status = get_request_track_data.status;

            return response;
        }
        public async Task<int> UpdateWOOfflineAfterLambdaExecution(UpdateWOOfflineRequestModel requestmodel, string sqs_aws_access_key, string sqs_aws_secret_key)
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {
                #region change asset condition based on issue
                if (requestmodel.asset_issue != null && requestmodel.asset_issue.Count > 0)
                {
                    foreach (var asset_issue in requestmodel.asset_issue)
                    {
                        try
                        {
                            await ChangeAssetConditionBasedOnIssue(asset_issue.asset_issue_id);
                        }
                        catch (Exception ex)
                        {

                        }
                    }
                }
                #endregion change asset condition based on issue

                #region Add section data in temp 

                // insert  section data explicitly
                if (requestmodel.OBWOAssetDetails != null && requestmodel.OBWOAssetDetails.Count > 0)
                {
                    foreach (var OBWOAsset in requestmodel.OBWOAssetDetails)
                    {
                        WOOnboardingAssets WOOnboardingAssets = null;
                        WOOnboardingAssets = _UoW.WorkOrderRepository.GetOBWOAssetDetailsById(OBWOAsset.woonboardingassets_id);
                        if (!String.IsNullOrEmpty(WOOnboardingAssets.section))
                        {
                            // check section data 
                            if (WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping != null && WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id != null)
                            {
                                TempFormIOSections TempFormIOSections = null;
                                TempFormIOSections = _UoW.WorkOrderRepository.GetTempSectionformOfflineUpdate(WOOnboardingAssets.section, WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id.Value);
                                if (TempFormIOSections == null) // insert temp section 
                                {
                                    TempFormIOSections = new TempFormIOSections();
                                    TempFormIOSections.temp_formio_section_name = OBWOAsset.section;
                                    TempFormIOSections.wo_id = WOOnboardingAssets.wo_id;
                                    TempFormIOSections.site_id = WOOnboardingAssets.site_id;
                                    TempFormIOSections.is_deleted = false;
                                    TempFormIOSections.created_at = DateTime.UtcNow;
                                    TempFormIOSections.company_id = WOOnboardingAssets.Sites.company_id;

                                    var insert_temp_section = await _UoW.BaseGenericRepository<TempFormIOSections>().Insert(TempFormIOSections);
                                    _UoW.SaveChanges();
                                }

                                // update in woline mapping
                                WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id = TempFormIOSections.temp_formiosection_id;

                                var update_woline = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(WOOnboardingAssets);
                            }
                        }

                    }
                }
                #endregion Add section data in temp 

                #region add issue from pm woline
                if (requestmodel.pm_submitted_form_data != null && requestmodel.pm_submitted_form_data.Count > 0)
                {
                    foreach (var pm in requestmodel.pm_submitted_form_data)
                    {
                        if (!String.IsNullOrEmpty(pm.pm_form_output_data))
                        {
                            // if pm form is for thermography then update bucket name
                            pm.pm_form_output_data = pm.pm_form_output_data.Replace("conduit-prod-obwoirphotos", "conduit-prod.obwoirphotos");

                            var get_pm = _UoW.WorkOrderRepository.GetAssetPMtoUpdateOffline(pm.asset_pm_id);
                            AddUpdateTempIssueFromWORequestmodel tempIssueRequest = null;
                            // create/update issue based on pm 
                            tempIssueRequest = OBWOMakeRequestmodelforWOlineIssue(pm.woonboardingassets_id);
                            if (tempIssueRequest.list_temp_issue != null && tempIssueRequest.list_temp_issue.Count > 0)
                            {
                                await AddUpdateTempIssueFromWO(tempIssueRequest);
                            }

                            if (tempIssueRequest != null)
                            {
                                if (tempIssueRequest.is_pm_clear)
                                    get_pm.is_Asset_PM_fixed = true;
                                else
                                    get_pm.is_Asset_PM_fixed = false;
                            }

                            // store ir visual images if any
                            if (tempIssueRequest.list_pm_ir_scan_images != null && tempIssueRequest.list_pm_ir_scan_images.Count > 0)
                            {
                                // delete all image mapping and insert new 
                                if (get_pm.WOOnboardingAssets.IRWOImagesLabelMapping != null && get_pm.WOOnboardingAssets.IRWOImagesLabelMapping.Count > 0)
                                {
                                    get_pm.WOOnboardingAssets.IRWOImagesLabelMapping.Where(x => !x.is_deleted).ToList().ForEach(x => {
                                        x.updated_at = DateTime.UtcNow;
                                        x.is_deleted = true;
                                    });
                                }
                                foreach (var image in tempIssueRequest.list_pm_ir_scan_images)
                                {
                                    IRWOImagesLabelMapping IRWOImagesLabelMapping = new IRWOImagesLabelMapping();
                                    IRWOImagesLabelMapping.ir_image_label = image.ir_image_label;
                                    IRWOImagesLabelMapping.visual_image_label = image.visual_image_label;
                                    IRWOImagesLabelMapping.created_at = DateTime.UtcNow;
                                   // IRWOImagesLabelMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                    IRWOImagesLabelMapping.visual_image_label = image.visual_image_label;
                                    IRWOImagesLabelMapping.site_id = get_pm.WorkOrders.site_id;
                                    IRWOImagesLabelMapping.s3_image_folder_name = get_pm.WorkOrders.site_id.ToString() + "/" + get_pm.WorkOrders.manual_wo_number;

                                    get_pm.WOOnboardingAssets.IRWOImagesLabelMapping.Add(IRWOImagesLabelMapping);
                                }
                            }

                            var update = await _UoW.BaseGenericRepository<AssetPMs>().Update(get_pm);
                        }
                    }
                }
                #endregion add issue from pm woline

                #region add ssue from temp assetpm woline
                if (requestmodel.temp_active_assetpm_woline_mapping != null && requestmodel.temp_active_assetpm_woline_mapping.Count > 0)
                {
                    foreach (var item in requestmodel.temp_active_assetpm_woline_mapping)
                    {
                        if (item.temp_asset_pm_id != null) // this is for temp asset pms
                        {
                            SubmitPMFormJsonRequestmodel temppmrequestmodel = new SubmitPMFormJsonRequestmodel();
                            temppmrequestmodel.temp_asset_pm_id = item.temp_asset_pm_id;
                            temppmrequestmodel.pm_form_output_data = item.pm_form_output_data;
                            temppmrequestmodel.status = (int)Status.InProgress;
                            temppmrequestmodel.woonboardingassets_id = item.woonboardingassets_id;
                            response = await SubmitTempPMFormJson(temppmrequestmodel);
                        }
                    }
                }
                #endregion add ssue from temp assetpm woline

                #region add issue from ob/ir woline
                if (requestmodel.OBWOAssetDetails != null && requestmodel.OBWOAssetDetails.Count > 0)
                {
                    foreach (var OBWOAsset in requestmodel.OBWOAssetDetails)
                    {
                        #region Create/Update temp Issues
                        if (!OBWOAsset.is_request_from_new_issue_flow)
                        {
                            AddUpdateTempIssueFromWORequestmodel tempIssueRequest = OBWOMakeRequestmodelforWOlineIssue(OBWOAsset.woonboardingassets_id);
                            if (tempIssueRequest.list_temp_issue != null && tempIssueRequest.list_temp_issue.Count > 0)
                            {
                                await AddUpdateTempIssueFromWO(tempIssueRequest);
                            }
                        }
                        #endregion Create/Update temp Issues
                    }
                }
                #endregion add issue from ob/ir woline

                #region Addupdate TempAsset from woline for backward compatibility
                if (requestmodel.OBWOAssetDetails != null && requestmodel.OBWOAssetDetails.Count > 0)
                {
                    // getting distinct from list as there was a not reproduced bug from mobile so duplicate woline was getting in request 
                    requestmodel.OBWOAssetDetails = requestmodel.OBWOAssetDetails.GroupBy(p => p.woonboardingassets_id)
                                                                            .Select(group => group.First())
                                                                            .ToList();
                    foreach (var OBWOAsset in requestmodel.OBWOAssetDetails)
                    {
                        WOOnboardingAssets WOOnboardingAssets = null;
                        WOOnboardingAssets = _UoW.WorkOrderRepository.GetOBWOAssetDetailsById(OBWOAsset.woonboardingassets_id);
                        if (WOOnboardingAssets != null && WOOnboardingAssets.tempasset_id == null && WOOnboardingAssets.inspection_type == (int)MWO_inspection_wo_type.OnBoarding)// if inspection type in ob and tempasset id is null in db then create new temp asset id
                        {
                            var tempasset_request = new UpdateOBWOAssetDetailsRequestmodel();
                            tempasset_request.asset_name = OBWOAsset.asset_name;
                            tempasset_request.QR_code = OBWOAsset.QR_code;
                            tempasset_request.condition_index_type = OBWOAsset.condition_index_type;
                            tempasset_request.criticality_index_type = OBWOAsset.criticality_index_type;
                            tempasset_request.commisiion_date = OBWOAsset.commisiion_date;
                            tempasset_request.form_nameplate_info = OBWOAsset.form_nameplate_info;
                            tempasset_request.component_level_type_id = OBWOAsset.component_level_type_id;
                            tempasset_request.asset_operating_condition_state = OBWOAsset.asset_operating_condition_state;
                            tempasset_request.code_compliance = OBWOAsset.code_compliance;
                            tempasset_request.asset_id = OBWOAsset.asset_id;
                            tempasset_request.building = OBWOAsset.building;
                            tempasset_request.floor = OBWOAsset.floor;
                            tempasset_request.room = OBWOAsset.room;
                            tempasset_request.wo_id = OBWOAsset.wo_id;
                            tempasset_request.site_id = OBWOAsset.site_id;
                            tempasset_request.section = OBWOAsset.section;
                            tempasset_request.asset_class_code = OBWOAsset.asset_class_code;
                            tempasset_request.asset_class_name = OBWOAsset.asset_class_name;
                            //tempasset_request.panel_schedule = OBWOAsset.panel_schedule;
                            //tempasset_request.arc_flash_label_valid = OBWOAsset.arc_flash_label_valid;
                            if (WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping != null)
                            {
                                tempasset_request.temp_formiobuilding_id = WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id;
                                tempasset_request.temp_formiofloor_id = WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id;
                                tempasset_request.temp_formioroom_id = WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id;
                            }
                            if (WOOnboardingAssets.TempAsset != null)
                            {
                                await AddTempAssetData(tempasset_request, WOOnboardingAssets.TempAsset);
                            }
                            else
                            {
                                var added_tempassset_id = await AddTempAssetData(tempasset_request, new TempAsset());
                                WOOnboardingAssets.tempasset_id = added_tempassset_id;

                                // update temp asset id in woline table
                                var upadate_woline = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(WOOnboardingAssets);
                            }
                        }
                    }
                }
                #endregion Addupdate TempAsset from woline

                // update sync reqest progress
                if(requestmodel.trackmobilesyncoffline_id != Guid.Empty)
                {
                    var get_request_track_data = _UoW.WorkOrderRepository.GetOfflineRequestTrackData(requestmodel.trackmobilesyncoffline_id);
                    get_request_track_data.status = 1;

                    await _UoW.BaseGenericRepository<TrackMobileSyncOffline>().Update(get_request_track_data);
                    _UoW.SaveChanges();
                }
                response = (int)ResponseStatusNumber.Success;
            }
            catch (Exception ex)
            {
                _UoW.RollbackTransaction();
                response = (int)ResponseStatusNumber.Error;
                return response;
            }

            // response = (int)ResponseStatusNumber.Success;

            return response;
        }


        public GetAssetBuildingHierarchyResponsemodel GetAssetBuildingHierarchy()
        {
            GetAssetBuildingHierarchyResponsemodel response = new GetAssetBuildingHierarchyResponsemodel();

            var get_hierarchy_data = _UoW.WorkOrderRepository.GetAssetBuildingHierarchy();
            if (get_hierarchy_data != null && get_hierarchy_data.Count > 0)
            {
                // response.building = new List<Building>();
                response.building = _mapper.Map<List<Building>>(get_hierarchy_data);
            }
            return response;
        }

        public GetAssetBuildingHierarchyResponsemodel GetAssetBuildingHierarchyByWorkorder(string wo_id)
        {
            GetAssetBuildingHierarchyResponsemodel response = new GetAssetBuildingHierarchyResponsemodel();

            var get_forms = _UoW.WorkOrderRepository.getallformsbywos(Guid.Parse(wo_id));
            dynamic dynamicform;
            List<AssetBuildingHierarchy> list = new List<AssetBuildingHierarchy>();

            get_forms.ForEach(x =>
            {
                try
                {
                    AssetBuildingHierarchy AssetBuildingHierarchy = new AssetBuildingHierarchy();
                    dynamicform = Newtonsoft.Json.JsonConvert.DeserializeObject(x.asset_form_data);
                    AssetBuildingHierarchy.building_name = dynamicform.data.header.building;
                    AssetBuildingHierarchy.floor_name = dynamicform.data.header.floor;
                    AssetBuildingHierarchy.room_name = dynamicform.data.header.room;
                    AssetBuildingHierarchy.section_name = dynamicform.data.header.section;
                    AssetBuildingHierarchy.asset_name = dynamicform.data.header.identification;
                    AssetBuildingHierarchy.asset_id = dynamicform.data.header.assetId;

                    list.Add(AssetBuildingHierarchy);
                }
                catch (Exception ex)
                {

                }
            });
            response.building = new List<Building>();
            var buildings = list.Select(x => x.building_name).Distinct().ToList();
            buildings.ForEach(x =>
            {
                Building Building = new Building();
                Building.formio_building_name = x;
                response.building.Add(Building);
            });
            response.building.ForEach(x =>
            {
                var floors = list.Where(q => q.building_name == x.formio_building_name).Select(q => q.floor_name).Distinct().ToList();
                x.floor = new List<floor>();
                floors.ForEach(q =>
                {
                    floor floor = new floor();
                    floor.formio_floor_name = q;
                    // rooms 
                    floor.rooms = new List<rooms>();
                    var rooms = list.Where(y => y.building_name == x.formio_building_name && y.floor_name == q).Select(q => q.room_name).Distinct().ToList();
                    rooms.ForEach(a =>
                    {
                        rooms room = new rooms();
                        room.formio_room_name = a;

                        // section
                        room.section = new List<section>();
                        var sections = list.Where(y => y.building_name == x.formio_building_name && y.floor_name == q && y.room_name == a).Select(q => q.section_name).Distinct().ToList();
                        sections.ForEach(w =>
                        {
                            section section = new section();
                            section.formio_section_name = w;
                            section.asset_detail = new List<asset_detail>();
                            // assets 
                            var assets = list.Where(y => y.building_name == x.formio_building_name && y.floor_name == q && y.room_name == a && y.section_name == w).ToList();
                            assets.ForEach(r =>
                            {
                                asset_detail asset_detail = new asset_detail();
                                asset_detail.asset_name = r.asset_name;
                                asset_detail.asset_internal_id = r.asset_id;
                                section.asset_detail.Add(asset_detail);
                            });
                            room.section.Add(section);
                        });
                        floor.rooms.Add(room);
                    });
                    x.floor.Add(floor);
                });
            });
            return response;
        }

        public async Task<int> DeleteWO(DeleteWORequestModel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;
            UserService userService = new UserService(_mapper);
            foreach (var WO in requestmodel.wo_id)
            {
                try
                {
                    List<Guid> IssueAssetId = new List<Guid>();
                    var get_wo = _UoW.WorkOrderRepository.GetWOByidforDelete(WO);
                    get_wo.is_archive = true;
                    get_wo.modified_at = DateTime.UtcNow;
                    get_wo.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                    if (get_wo.wo_type == (int)Status.IR_Scan_WO || get_wo.wo_type == (int)Status.Onboarding_WO)
                    {
                        var asset_ids = get_wo.WOOnboardingAssets.Where(x => !x.is_deleted && x.is_wo_line_for_exisiting_asset
                        && x.asset_id != null).Select(x => x.asset_id.Value).Distinct().ToList();

                        var get_schedule_pms = _UoW.WorkOrderRepository.GetSchedulePMsByWOIdAssetIds(asset_ids,WO);
                        foreach (var assetpm in get_schedule_pms)
                        {
                            var is_asset_assigned_to_wo = _UoW.WorkOrderRepository.IsAssetisAssignedToOtherWOs(assetpm.asset_id, get_wo.wo_id);
                            if (!is_asset_assigned_to_wo)
                            {
                                assetpm.status = (int)Status.Active;
                                assetpm.wo_id = null;
                                assetpm.modified_at = DateTime.UtcNow;
                                assetpm.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                var update_pm = await _UoW.BaseGenericRepository<AssetPMs>().Update(assetpm);
                                _UoW.SaveChanges();
                            }
                        }
                    }

                    get_wo.WOInspectionsTemplateFormIOAssignment.ToList().ForEach(c =>
                    {
                        c.is_archived = true;
                        c.updated_at = DateTime.UtcNow;
                        c.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                    });
                    get_wo.WOcategorytoTaskMapping.ToList().ForEach(x =>
                    {
                        x.is_archived = true;
                        x.updated_at = DateTime.UtcNow;
                        x.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                    });
                    get_wo.AssetFormIO.ToList().ForEach(x =>
                    {
                        x.status = (int)Status.Deactive;
                        x.modified_at = DateTime.UtcNow;
                        x.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                    });

                    foreach(var x in get_wo.WOOnboardingAssets.ToList())
                    {
                        x.is_deleted = true;
                        x.modified_at = DateTime.UtcNow;
                        x.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                        await AddUpdateWOOnboardingAssetsDateTimeTracking(x.woonboardingassets_id, (int)WOLineActionsTypes.Delete, 0);
                    }
                    get_wo.AssetPMs.ToList().ForEach(x =>
                    {
                        if (x.ActiveAssetPMWOlineMapping != null && x.ActiveAssetPMWOlineMapping.Count > 0)
                        {
                            x.ActiveAssetPMWOlineMapping.ForEach(x => x.is_active = false);
                            x.ActiveAssetPMWOlineMapping.ForEach(x => x.modified_at = DateTime.UtcNow);
                        }
                        x.wo_id = null;
                        x.asset_form_id = null;
                        x.woonboardingassets_id = null;
                        x.is_Asset_PM_fixed = false;
                        x.status = (int)Status.Active;
                        x.modified_by = GenericRequestModel.requested_by.ToString();
                        x.modified_at = DateTime.UtcNow;
                        //var is_asset_assigned_to_wo = _UoW.WorkOrderRepository.IsAssetisAssignedToOtherWOs(x.asset_id, get_wo.wo_id);
                        //if (!is_asset_assigned_to_wo)
                        //{
                        //}
                    });
                    foreach (var x in get_wo.AssetIssue.ToList())
                    {
                        IssueAssetId.Add(x.asset_id.Value);
                        x.wo_id = null;
                        x.asset_form_id = null;
                        x.woonboardingassets_id = null;
                        x.is_issue_linked = false;
                        x.issue_status = (int)Status.open;
                        x.modified_by = GenericRequestModel.requested_by.ToString();

                    }

                    var update = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);
                    if (update)
                    {
                        if (IssueAssetId.Count > 0)
                        {
                            IssueAssetId = IssueAssetId.Distinct().ToList();
                            foreach (var x in IssueAssetId) // update asset condition based on issues
                            {

                                await UpdateAssetconditionbasedonIssue(x);

                            }
                        }

                        response = (int)ResponseStatusNumber.Success;
                    }
                    if (!String.IsNullOrEmpty(get_wo.calendarId))
                    {
                        CreateGoogleCalendarEventRequestModel createGoogleCalendarEventRequestModel = new CreateGoogleCalendarEventRequestModel();
                        createGoogleCalendarEventRequestModel.is_requested_for_add = false;
                        createGoogleCalendarEventRequestModel.is_deleted = true;
                        createGoogleCalendarEventRequestModel.event_id = get_wo.calendarId;

                        userService.CreateGoogleCalendarEvent(createGoogleCalendarEventRequestModel);
                    }
                }
                catch (Exception e)
                {
                }
            }
            return response;
        }
        public List<GetAssetsToAssignResponsemodel> GetAssetsToAssign(Guid form_id)
        {
            List<GetAssetsToAssignResponsemodel> response = null;
            var get_asset_class_by_form = _UoW.WorkOrderRepository.GetAssetClassByForm(form_id);
            if (get_asset_class_by_form.Count > 0)
            {
                var get_assets_by_asset_class = _UoW.WorkOrderRepository.GetAssetsByAssetClass(get_asset_class_by_form);
                response = _mapper.Map<List<GetAssetsToAssignResponsemodel>>(get_assets_by_asset_class);
            }
            return response;
        }
        public List<GetAssetsToAssignResponsemodel> GetAssetsToAssigninWO(int wo_type_id)
        {
            List<GetAssetsToAssignResponsemodel> response = null;
            var get_asset_class_by_wo_type = _UoW.WorkOrderRepository.GetAssetClassBywotype(wo_type_id);
            if (get_asset_class_by_wo_type.Count > 0)
            {
                var get_assets_by_asset_class = _UoW.WorkOrderRepository.GetAssetsByAssetClass(get_asset_class_by_wo_type);
                if (get_assets_by_asset_class != null && get_assets_by_asset_class.Count > 0)
                {
                    var form_ids = get_assets_by_asset_class.Select(x =>
                      (x.InspectionTemplateAssetClass != null && x.InspectionTemplateAssetClass.AssetClassFormIOMapping != null)
                      ? x.InspectionTemplateAssetClass.AssetClassFormIOMapping.Where(q => q.wo_type == wo_type_id && q.form_id != null).Select(w => w.form_id).FirstOrDefault() : null).ToList();

                    var form_ids_value = form_ids.Where(x => x != null).Select(x => x.Value).Distinct().ToList();

                    var get_forms = _UoW.formIORepository.GetFormsExcludedByIds(form_ids_value);
                    response = new List<GetAssetsToAssignResponsemodel>();
                    get_assets_by_asset_class.ForEach(x =>
                    {
                        GetAssetsToAssignResponsemodel GetAssetsToAssignResponsemodel = new GetAssetsToAssignResponsemodel();
                        GetAssetsToAssignResponsemodel.name = x.name;
                        GetAssetsToAssignResponsemodel.asset_id = x.asset_id;
                        GetAssetsToAssignResponsemodel.asset_class_name = x.InspectionTemplateAssetClass.asset_class_name;
                        GetAssetsToAssignResponsemodel.inspectiontemplate_asset_class_id = x.inspectiontemplate_asset_class_id.Value;

                        var class_form_id = x.InspectionTemplateAssetClass.AssetClassFormIOMapping.Where(q => q.wo_type == wo_type_id).FirstOrDefault().form_id;
                        var class_form = get_forms.Where(q => q.form_id == class_form_id).FirstOrDefault();
                        GetAssetsToAssignResponsemodel.form_id = class_form_id.Value;
                        GetAssetsToAssignResponsemodel.form_name = class_form.form_name;

                        response.Add(GetAssetsToAssignResponsemodel);
                    });
                }

            }
            return response;
        }
        public GetAssetsToAssigninMWOInspectionResponsemodel GetAssetsToAssigninMWOInspection(GetAssetsToAssigninMWOInspectionRequestmodel requestmodel)
        {
            GetAssetsToAssigninMWOInspectionResponsemodel response = null;
            var get_asset_class_by_wo_type = _UoW.WorkOrderRepository.GetAssetClassBywotype(requestmodel.wo_type);
            if (get_asset_class_by_wo_type.Count > 0)
            {
                var get_assets_by_asset_class = _UoW.WorkOrderRepository.GetAssetsByAssetClass(get_asset_class_by_wo_type);
                if (get_assets_by_asset_class != null && get_assets_by_asset_class.Count > 0)
                {
                    var form_ids = get_assets_by_asset_class.Select(x =>
                      (x.InspectionTemplateAssetClass != null && x.InspectionTemplateAssetClass.AssetClassFormIOMapping != null)
                      ? x.InspectionTemplateAssetClass.AssetClassFormIOMapping.Where(q => q.wo_type == requestmodel.wo_type && q.form_id != null).Select(w => w.form_id).FirstOrDefault() : null).ToList();

                    var form_ids_value = form_ids.Where(x => x != null).Select(x => x.Value).Distinct().ToList();

                    var get_forms = _UoW.formIORepository.GetFormsExcludedByIds(form_ids_value);
                    response = new GetAssetsToAssigninMWOInspectionResponsemodel();
                    response.main_asset_list = new List<GetAssetsToAssignResponsemodel>();
                    get_assets_by_asset_class.ForEach(x =>
                    {
                        GetAssetsToAssignResponsemodel GetAssetsToAssignResponsemodel = new GetAssetsToAssignResponsemodel();
                        GetAssetsToAssignResponsemodel.name = x.name;
                        GetAssetsToAssignResponsemodel.asset_id = x.asset_id;
                        GetAssetsToAssignResponsemodel.asset_class_name = x.InspectionTemplateAssetClass.asset_class_name;
                        GetAssetsToAssignResponsemodel.inspectiontemplate_asset_class_id = x.inspectiontemplate_asset_class_id.Value;

                        var class_form_id = x.InspectionTemplateAssetClass.AssetClassFormIOMapping.Where(q => q.wo_type == requestmodel.wo_type).FirstOrDefault().form_id;
                        var class_form = get_forms.Where(q => q.form_id == class_form_id).FirstOrDefault();
                        GetAssetsToAssignResponsemodel.form_id = class_form_id.Value;
                        GetAssetsToAssignResponsemodel.form_name = class_form.form_name;

                        response.main_asset_list.Add(GetAssetsToAssignResponsemodel);
                    });
                }

            }

            var db_ob_wo_assets = _UoW.WorkOrderRepository.GetOBWOAssetsByWOidForMWO(requestmodel);
            if (db_ob_wo_assets.Count > 0)
            {
                response.ob_wo_asset_list = _mapper.Map<List<OBWOAssetDetails>>(db_ob_wo_assets);
                /*response.ob_wo_asset_list.ForEach(x =>
                {
                    if (!String.IsNullOrEmpty(x.asset_class_code))
                    {
                        var class_code = x.asset_class_code.ToLower().Trim();
                        var asset_class = _UoW.WorkOrderRepository.GetAssetclassByCode(class_code);
                        if (asset_class != null)
                        {
                            x.inspectiontemplate_asset_class_id = asset_class.inspectiontemplate_asset_class_id;
                        }
                    }
                });*/
            }
            return response;
        }

        public async Task<UploadAssettoOBWOResponsemodel> UploadAssettoOBWO(UploadAssettoOBWORequestModel requestmodel)
        {
            UploadAssettoOBWOResponsemodel response = new UploadAssettoOBWOResponsemodel();
            response.respose = (int)ResponseStatusNumber.Error;
            string wo_id = null;
            try
            {
                _UoW.BeginTransaction();

                var classlist1 = requestmodel.Asset_data.Where(x=>x.asset_id==null).Select(x => x.asset_class_code).Distinct().ToList();
                var classlist2 = requestmodel.asset_subcomponents_mappings.Select(x => x.subcomponent_asset_class_code).Distinct().ToList();
                var class_code_list = classlist1.Concat(classlist2).Distinct().ToList();
                var isAny = _UoW.WorkOrderRepository.CheckIsClassAvailableOrNot(class_code_list);

                if (requestmodel.Asset_data==null || requestmodel.Asset_data.Count == 0)
                {
                    response.respose = (int)ResponseStatusNumber.InvalidData;
                    return response;
                }
                else if (isAny)
                {
                    response.respose = (int)ResponseStatusNumber.asset_class_not_found;
                    return response;
                }
                
                #region new requiremnt do not check duplicate on asset name 
                /*  List<string> assets = requestmodel.Asset_data.Where(x=>!String.IsNullOrEmpty(x.asset_name)).Select(x =>  x.asset_name.ToLower().Trim()).ToList();

                  var duplicateKeys = assets.GroupBy(x => x)
                          .Where(group => group.Count() > 1)
                          .Select(group => group.Key).ToList();
                  string exist_asset_names = "";
                  if (duplicateKeys.Count > 0)
                  {
                      response.respose = (int)ResponseStatusNumber.AlreadyExists;
                      string combinedString = string.Join(",", duplicateKeys);
                      response.asset_name = combinedString;
                      return response;
                  }
                  /// get created assets from DB if duplictaes
                  /// 
                  var get_assets = _UoW.AssetRepository.GetAssetByAssetNames(assets);
                  if (get_assets.Count > 0)
                  {
                      response.respose = (int)ResponseStatusNumber.AlreadyExists;
                      var asset_list = get_assets.Select(x => x.name).ToList();
                      string combinedString = string.Join(",", asset_list);
                      response.asset_name = combinedString;
                      return response;
                  }
                  /// get assets from WO but not created yet in asset table
                  /// 
                  var get_wo_assets = _UoW.AssetRepository.GetOBWOAssetByAssetNames(assets , null);
                  if (get_wo_assets.Count > 0)
                  {
                      response.respose = (int)ResponseStatusNumber.AlreadyExists;
                      var asset_list = get_wo_assets.Select(x => x.asset_name).ToList();
                      string combinedString = string.Join(",", asset_list);
                      response.asset_name = combinedString;
                      return response;
                  }*/
                #endregion new requiremnt do not check duplicate on asset name

                var existing_map_asset = requestmodel.Asset_data.Where(x=>x.asset_id != null).Select(x=>x.asset_id.Value).ToList();

                var new_map_assets = _mapper.Map<List<WOOnboardingAssets>>(requestmodel.Asset_data.Where(x=>x.asset_id == null));
                if (requestmodel.Asset_data != null&& requestmodel.Asset_data.Count>0)
                {
                    wo_id = requestmodel.Asset_data.FirstOrDefault().wo_id.ToString();
                }
                // For Adding Existing Assets in IR / OB WO
                if (existing_map_asset != null && existing_map_asset.Count > 0)
                {
                    AssignExistingAssettoOBWORequestmodel assignExistingAssettoOBWORequestmodel = new AssignExistingAssettoOBWORequestmodel();
                    assignExistingAssettoOBWORequestmodel.asset_id = existing_map_asset;
                    assignExistingAssettoOBWORequestmodel.wo_id = requestmodel.Asset_data.FirstOrDefault().wo_id;

                    await AssignExistingAssettoOBWO(assignExistingAssettoOBWORequestmodel);
                }

                // For Adding New Assets in IR / OB WO
                foreach (var asset in new_map_assets)
                {

                    if (asset.component_level_type_id == null)
                    {
                        asset.component_level_type_id = (int)ComponentLevelTypes.ToplevelComponent;
                    }


                    if (!String.IsNullOrEmpty(asset.asset_class_code))
                    {
                        var get_assetclass = _UoW.WorkOrderRepository.GetAssetclassByCode(asset.asset_class_code.ToLower().Trim());
                        if (get_assetclass != null)
                        {
                            asset.asset_class_name = get_assetclass.asset_class_name;
                            if (!String.IsNullOrEmpty(get_assetclass.form_nameplate_info))
                            {
                                asset.form_nameplate_info = AddNamePlateListData(get_assetclass.form_nameplate_info);
                            }
                        }
                    }

                    #region location_hierarchy

                    if (String.IsNullOrEmpty(asset.building))
                    {
                        asset.building = "Default";
                    }
                    if (String.IsNullOrEmpty(asset.floor))
                    {
                        asset.floor = "Default";
                    }
                    if (String.IsNullOrEmpty(asset.room))
                    {
                        asset.room = "Default";
                    }
                    if (String.IsNullOrEmpty(asset.section))
                    {
                        asset.section = "Default";
                    }

                    // do not insert location data in main table now as new requirment we will store in temp first.
                    /*FormIOBuildings FormIOBuildings = null;
                    FormIOFloors FormIOFloors = null;
                    FormIORooms FormIORooms = null;
                    FormIOSections FormIOSections = null;
                    if (!String.IsNullOrEmpty(asset.building))
                    {
                        FormIOBuildings = _UoW.WorkOrderRepository.GetFormIOBuildingByName(asset.building);
                        if (FormIOBuildings == null)
                        {
                            FormIOBuildings = new FormIOBuildings();
                            FormIOBuildings.formio_building_name = asset.building;
                            FormIOBuildings.created_at = DateTime.UtcNow;
                            FormIOBuildings.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            FormIOBuildings.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var insertbuilding = await _UoW.BaseGenericRepository<FormIOBuildings>().Insert(FormIOBuildings);
                            _UoW.SaveChanges();
                        }
                    }
                    if (!String.IsNullOrEmpty(asset.floor))
                    {
                        FormIOFloors = _UoW.WorkOrderRepository.GetFormIOFloorByName(asset.floor, FormIOBuildings.formiobuilding_id);
                        if (FormIOFloors == null)
                        {
                            FormIOFloors = new FormIOFloors();
                            FormIOFloors.formio_floor_name = asset.floor;
                            FormIOFloors.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                            FormIOFloors.created_at = DateTime.UtcNow;
                            FormIOFloors.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            FormIOFloors.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var insertfloor = await _UoW.BaseGenericRepository<FormIOFloors>().Insert(FormIOFloors);
                            _UoW.SaveChanges();
                        }
                    }
                    if (!String.IsNullOrEmpty(asset.room))
                    {
                        FormIORooms = _UoW.WorkOrderRepository.GetFormIORoomByName(asset.room, FormIOFloors.formiofloor_id);
                        if (FormIORooms == null)
                        {
                            FormIORooms = new FormIORooms();
                            FormIORooms.formio_room_name = asset.room;
                            FormIORooms.formiofloor_id = FormIOFloors.formiofloor_id;
                            FormIORooms.created_at = DateTime.UtcNow;
                            FormIORooms.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            FormIORooms.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var insertroom = await _UoW.BaseGenericRepository<FormIORooms>().Insert(FormIORooms);
                            _UoW.SaveChanges();
                        }
                    }
                    if (!String.IsNullOrEmpty(asset.section))
                    {
                        FormIOSections = _UoW.WorkOrderRepository.GetFormIOSectionByName(asset.section, FormIORooms.formioroom_id);
                        if (FormIOSections == null)
                        {
                            FormIOSections = new FormIOSections();
                            FormIOSections.formio_section_name = asset.section;
                            FormIOSections.formioroom_id = FormIORooms.formioroom_id;
                            FormIOSections.created_at = DateTime.UtcNow;
                            FormIOSections.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            FormIOSections.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var insertroom = await _UoW.BaseGenericRepository<FormIOSections>().Insert(FormIOSections);
                            _UoW.SaveChanges();
                        }
                    }

                    asset.WOLineBuildingMapping = new WOLineBuildingMapping();
                    asset.WOLineBuildingMapping.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                    asset.WOLineBuildingMapping.formiofloor_id = FormIOFloors.formiofloor_id;
                    asset.WOLineBuildingMapping.formioroom_id = FormIORooms.formioroom_id;
                    asset.WOLineBuildingMapping.formiosection_id = FormIOSections.formiosection_id;
                    asset.WOLineBuildingMapping.created_at = DateTime.UtcNow;
                    */

                    /// new flow for building location hierarchy
                    TempFormIOBuildings get_building = null;
                    get_building = _UoW.WorkOrderRepository.GetTempFormIOBuildingByName(asset.building, asset.wo_id);
                    if (get_building == null)
                    {
                        get_building = new TempFormIOBuildings();
                        get_building.temp_formio_building_name = asset.building;
                        get_building.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        get_building.wo_id = asset.wo_id;
                        get_building.created_at = DateTime.UtcNow;
                        get_building.is_deleted = false;
                        get_building.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                        var insert_building = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Insert(get_building);
                        _UoW.SaveChanges();
                    }

                    TempFormIOFloors get_floor = null;
                    get_floor = _UoW.WorkOrderRepository.GetTempFormIOFloorByName(asset.floor, get_building.temp_formiobuilding_id, asset.wo_id);
                    if (get_floor == null)
                    {
                        get_floor = new TempFormIOFloors();
                        get_floor.temp_formio_floor_name = asset.floor;
                        get_floor.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        get_floor.wo_id = asset.wo_id;
                        get_floor.created_at = DateTime.UtcNow;
                        get_floor.is_deleted = false;
                        get_floor.temp_formiobuilding_id = get_building.temp_formiobuilding_id;
                        get_floor.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                        var insert_floors = await _UoW.BaseGenericRepository<TempFormIOFloors>().Insert(get_floor);
                        _UoW.SaveChanges();
                    }

                    TempFormIORooms get_room = null;
                    get_room = _UoW.WorkOrderRepository.GetTempFormIORoomByName(asset.room, get_floor.temp_formiofloor_id, asset.wo_id);
                    if (get_room == null)
                    {
                        get_room = new TempFormIORooms();
                        get_room.temp_formio_room_name = asset.room;
                        get_room.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        get_room.wo_id = asset.wo_id;
                        get_room.created_at = DateTime.UtcNow;
                        get_room.is_deleted = false;
                        get_room.temp_formiofloor_id = get_floor.temp_formiofloor_id;
                        get_room.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                        var insert_rooms = await _UoW.BaseGenericRepository<TempFormIORooms>().Insert(get_room);
                        _UoW.SaveChanges();
                    }

                    TempFormIOSections get_section = null;
                    get_section = _UoW.WorkOrderRepository.GetTempFormIOSectionByName(asset.section, get_room.temp_formioroom_id, asset.wo_id);
                    if (get_section == null)
                    {
                        get_section = new TempFormIOSections();
                        get_section.temp_formio_section_name = asset.section;
                        get_section.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        get_section.wo_id = asset.wo_id;
                        get_section.created_at = DateTime.UtcNow;
                        get_section.is_deleted = false;
                        get_section.temp_formioroom_id = get_room.temp_formioroom_id;
                        get_section.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                        var insert_section = await _UoW.BaseGenericRepository<TempFormIOSections>().Insert(get_section);
                        _UoW.SaveChanges();
                    }
                    asset.WOOBAssetTempFormIOBuildingMapping = new WOOBAssetTempFormIOBuildingMapping();
                    asset.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id = get_building.temp_formiobuilding_id;
                    asset.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id = get_floor.temp_formiofloor_id;
                    asset.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id = get_room.temp_formioroom_id;
                    asset.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id = get_section.temp_formiosection_id;
                    asset.WOOBAssetTempFormIOBuildingMapping.created_at = DateTime.UtcNow;

                    AddTempMasterLocationDataMainFunctionRequestModel req2 = new AddTempMasterLocationDataMainFunctionRequestModel();
                    req2.temp_building = asset.building; 
                    req2.temp_floor = asset.floor; 
                    req2.temp_room = asset.room;
                    req2.wo_id = Guid.Parse(wo_id);

                    var res_location = await AddTempMasterLocationDataMainFunction(req2);

                    #endregion location_hierarchy

                    asset.created_at = DateTime.UtcNow;
                    asset.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                    #region insert temp asset data
                    // add temp asset data
                    var tempasset_request = new UpdateOBWOAssetDetailsRequestmodel();
                    tempasset_request.asset_name = asset.asset_name;
                    tempasset_request.QR_code = asset.QR_code;
                    tempasset_request.condition_index_type = asset.condition_index_type;
                    tempasset_request.criticality_index_type = asset.criticality_index_type;
                    tempasset_request.commisiion_date = asset.commisiion_date;
                    tempasset_request.form_nameplate_info = asset.form_nameplate_info;
                    tempasset_request.component_level_type_id = asset.component_level_type_id;
                    tempasset_request.asset_operating_condition_state = asset.asset_operating_condition_state;
                    tempasset_request.code_compliance = asset.code_compliance;
                    tempasset_request.asset_id = asset.asset_id;
                    tempasset_request.building = asset.building;
                    tempasset_request.floor = asset.floor;
                    tempasset_request.room = asset.room;
                    tempasset_request.wo_id = asset.wo_id;
                    tempasset_request.site_id = asset.site_id;
                    tempasset_request.section = asset.section;
                    tempasset_request.asset_class_code = asset.asset_class_code;
                    tempasset_request.asset_class_name = asset.asset_class_name;

                    tempasset_request.temp_master_building_id = res_location.temp_master_building_id;
                    tempasset_request.temp_master_floor_id = res_location.temp_master_floor_id;
                    tempasset_request.temp_master_room_id = res_location.temp_master_room_id;

                    if (asset.WOOBAssetTempFormIOBuildingMapping != null)
                    {
                        tempasset_request.temp_formiobuilding_id = asset.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id;
                        tempasset_request.temp_formiofloor_id = asset.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id;
                        tempasset_request.temp_formioroom_id = asset.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id;
                    }

                    var insert_temp_asset = await AddTempAssetData(tempasset_request, new TempAsset());
                    #endregion insert temp asset data

                    asset.tempasset_id = insert_temp_asset;
                    var insert = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Insert(asset);
                    //_UoW.SaveChanges();
                    await AddUpdateWOOnboardingAssetsDateTimeTracking(asset.woonboardingassets_id,(int)WOLineActionsTypes.WorkStartDate,0);
                }


                //Add Top-Sub Mappings for TopLevel 
                if (requestmodel.asset_subcomponents_mappings != null && requestmodel.asset_subcomponents_mappings.Count > 0)
                {
                    foreach (var subcomponent in requestmodel.asset_subcomponents_mappings)
                    {
                        var get_toplevel = new_map_assets.Where(x => x.asset_name == subcomponent.toplevel_asset_name).FirstOrDefault();

                        if (get_toplevel != null && !String.IsNullOrEmpty(subcomponent.subcomponent_asset_name))
                        {
                            AddSublevelComponentWolineRequest AddSublevelComponentWolineRequest = new AddSublevelComponentWolineRequest();
                            AddSublevelComponentWolineRequest.wo_id = Guid.Parse(wo_id);
                            AddSublevelComponentWolineRequest.woonboardingassets_id = get_toplevel.woonboardingassets_id; //toplevel_component's id
                            AddSublevelComponentWolineRequest.sublevelcomponent_asset_name = subcomponent.subcomponent_asset_name;
                            var asset_class = _UoW.WorkOrderRepository.GetAssetClassByClasscode(subcomponent.subcomponent_asset_class_code);
                            AddSublevelComponentWolineRequest.inspectiontemplate_asset_class_id = asset_class != null ? asset_class.inspectiontemplate_asset_class_id : Guid.Empty;

                            AddSublevelComponentWolineRequest.building = get_toplevel.building;
                            AddSublevelComponentWolineRequest.floor = get_toplevel.floor;
                            AddSublevelComponentWolineRequest.room = get_toplevel.room;
                            AddSublevelComponentWolineRequest.section = get_toplevel.section;
                            if (get_toplevel.WOLineBuildingMapping != null)
                            {
                                AddSublevelComponentWolineRequest.formiobuilding_id = get_toplevel.WOLineBuildingMapping.formiobuilding_id;
                                AddSublevelComponentWolineRequest.formiofloor_id = get_toplevel.WOLineBuildingMapping.formiofloor_id;
                                AddSublevelComponentWolineRequest.formioroom_id = get_toplevel.WOLineBuildingMapping.formioroom_id;
                                AddSublevelComponentWolineRequest.formiosection_id = get_toplevel.WOLineBuildingMapping.formiosection_id;
                            }
                            if (get_toplevel.WOOBAssetTempFormIOBuildingMapping != null)
                            {
                                AddSublevelComponentWolineRequest.temp_formiobuilding_id = get_toplevel.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id;
                                AddSublevelComponentWolineRequest.temp_formiofloor_id = get_toplevel.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id;
                                AddSublevelComponentWolineRequest.temp_formioroom_id = get_toplevel.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id;
                                AddSublevelComponentWolineRequest.temp_formiosection_id = get_toplevel.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id;
                            }

                            var subcomp_woobid = await AddSublevelComponentWoline(AddSublevelComponentWolineRequest);
                            subcomponent.subcomponents_woonboardingassets_id = subcomp_woobid;

                            WOlineSubLevelcomponentMapping WOlinesublevelcomponentMapping1 = new WOlineSubLevelcomponentMapping();
                            WOlinesublevelcomponentMapping1.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            WOlinesublevelcomponentMapping1.created_at = DateTime.UtcNow;
                            WOlinesublevelcomponentMapping1.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                            WOlinesublevelcomponentMapping1.is_deleted = false;
                            WOlinesublevelcomponentMapping1.woonboardingassets_id = get_toplevel.woonboardingassets_id;
                            WOlinesublevelcomponentMapping1.sublevelcomponent_asset_id = subcomp_woobid;
                            WOlinesublevelcomponentMapping1.is_sublevelcomponent_from_ob_wo = true;

                            var insert2 = await _UoW.BaseGenericRepository<WOlineSubLevelcomponentMapping>().Insert(WOlinesublevelcomponentMapping1);
                            _UoW.SaveChanges();
                        }
                    }
                }

                // Add FedBy Mappings 
                if (requestmodel.assets_fedby_mappings != null && requestmodel.assets_fedby_mappings.Count > 0)
                {
                    foreach (var this_asset in requestmodel.assets_fedby_mappings)
                    {
                        var get_fedby_asset = new_map_assets.Where(x => x.asset_name == this_asset.fedby_asset_name).FirstOrDefault();//_UoW.WorkOrderRepository.GetOBWOAssetByName(wo_id,this_asset.fedby_asset_name);
                        var get_asset = new_map_assets.Where(x => x.asset_name == this_asset.asset_name).FirstOrDefault();// _UoW.WorkOrderRepository.GetOBWOAssetByName(wo_id,this_asset.asset_name);
                        var get_ocp_asset = requestmodel.asset_subcomponents_mappings.Where(x => x.subcomponent_asset_name == this_asset.ocp_asset_name).FirstOrDefault();//_UoW.WorkOrderRepository.GetOBWOAssetByName(wo_id,this_asset.ocp_asset_name);
                        var get_fedby_ocp_asset = requestmodel.asset_subcomponents_mappings.Where(x => x.subcomponent_asset_name == this_asset.fedby_ocp_asset_name).FirstOrDefault();//_UoW.WorkOrderRepository.GetOBWOAssetByName(wo_id,this_asset.ocp_asset_name);


                        if (get_asset != null && get_fedby_asset != null)
                        {
                            WOOBAssetFedByMapping WOOBAssetFedByMapping = new WOOBAssetFedByMapping();
                            WOOBAssetFedByMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            WOOBAssetFedByMapping.created_at = DateTime.UtcNow;
                            WOOBAssetFedByMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                            WOOBAssetFedByMapping.is_deleted = false;
                            WOOBAssetFedByMapping.woonboardingassets_id = get_asset.woonboardingassets_id;
                            WOOBAssetFedByMapping.parent_asset_id = get_fedby_asset.woonboardingassets_id;
                            WOOBAssetFedByMapping.is_parent_from_ob_wo = true;
                            WOOBAssetFedByMapping.is_via_subcomponant_asset_from_ob_wo = get_ocp_asset != null ? true : false;
                            WOOBAssetFedByMapping.via_subcomponant_asset_id = get_ocp_asset != null ? get_ocp_asset.subcomponents_woonboardingassets_id : null;
                            WOOBAssetFedByMapping.is_fed_by_via_subcomponant_asset_from_ob_wo = get_fedby_ocp_asset != null ? true : false;
                            WOOBAssetFedByMapping.fed_by_via_subcomponant_asset_id = get_fedby_ocp_asset != null ? get_fedby_ocp_asset.subcomponents_woonboardingassets_id : null;
                            WOOBAssetFedByMapping.fed_by_usage_type_id = this_asset.fed_by_usage_type_id;
                            WOOBAssetFedByMapping.style = this_asset.style;
                            WOOBAssetFedByMapping.length = this_asset.length;
                            WOOBAssetFedByMapping.conductor_type_id = this_asset.conductor_type_id;
                            WOOBAssetFedByMapping.raceway_type_id = this_asset.raceway_type_id;
                            WOOBAssetFedByMapping.number_of_conductor = this_asset.number_of_conductor;

                            var insert_fedby_mapping = await _UoW.BaseGenericRepository<WOOBAssetFedByMapping>().Insert(WOOBAssetFedByMapping);
                            
                        }
                    }
                }
                

                _UoW.SaveChanges();
                _UoW.CommitTransaction();
                
                await updateOBWOStatusForStatusManagement(requestmodel.Asset_data.FirstOrDefault().wo_id);
                response.respose = (int)ResponseStatusNumber.Success;
            }
            catch (Exception ex)
            {
                _UoW.RollbackTransaction();
                return response;
            }

            return response;
        }


        public async Task<AddTempMasterLocationDataMainFunctionRequestModel> AddTempMasterLocationDataMainFunction(AddTempMasterLocationDataMainFunctionRequestModel requestmodel)
        {
            AddTempMasterLocationDataMainFunctionRequestModel response = new AddTempMasterLocationDataMainFunctionRequestModel();
            try
            {
                if (requestmodel.temp_master_building_id != null && requestmodel.temp_master_building_id != Guid.Empty)
                {
                    await AddTempMasterLocationWOMappings(requestmodel.wo_id, requestmodel.temp_master_building_id.Value, (int)AddLocationType.Building);
                }
                else
                {
                    AddTempMasterLocationByNameRequestModel _AddTempMasterLocationByNameRequestModel = new AddTempMasterLocationByNameRequestModel();
                    _AddTempMasterLocationByNameRequestModel.wo_id = requestmodel.wo_id;
                    _AddTempMasterLocationByNameRequestModel.location_name = requestmodel.temp_building;
                    _AddTempMasterLocationByNameRequestModel.location_type = (int)AddLocationType.Building;

                    var temp_master_building_id = await AddTempMasterLocationByName(_AddTempMasterLocationByNameRequestModel);
                    response.temp_master_building_id = Guid.Parse(temp_master_building_id.Item1);
                    requestmodel.temp_master_building_id = Guid.Parse(temp_master_building_id.Item1);
                }

                if (requestmodel.temp_master_floor_id != null && requestmodel.temp_master_floor_id != Guid.Empty)
                {
                    await AddTempMasterLocationWOMappings(requestmodel.wo_id, requestmodel.temp_master_floor_id.Value, (int)AddLocationType.Floor);
                }
                else
                {
                    AddTempMasterLocationByNameRequestModel _AddTempMasterLocationByNameRequestModel = new AddTempMasterLocationByNameRequestModel();
                    _AddTempMasterLocationByNameRequestModel.wo_id = requestmodel.wo_id;
                    _AddTempMasterLocationByNameRequestModel.temp_master_building_id = requestmodel.temp_master_building_id;
                    _AddTempMasterLocationByNameRequestModel.building_name = requestmodel.temp_building;
                    _AddTempMasterLocationByNameRequestModel.location_name = requestmodel.temp_floor;
                    _AddTempMasterLocationByNameRequestModel.location_type = (int)AddLocationType.Floor;

                    var temp_master_floor_id = await AddTempMasterLocationByName(_AddTempMasterLocationByNameRequestModel);
                    response.temp_master_floor_id = Guid.Parse(temp_master_floor_id.Item1);
                    requestmodel.temp_master_floor_id = Guid.Parse(temp_master_floor_id.Item1);
                }


                if (requestmodel.temp_master_room_id != null && requestmodel.temp_master_room_id != Guid.Empty)
                {
                    await AddTempMasterLocationWOMappings(requestmodel.wo_id, requestmodel.temp_master_room_id.Value, (int)AddLocationType.Room);
                }
                else
                {
                    AddTempMasterLocationByNameRequestModel _AddTempMasterLocationByNameRequestModel = new AddTempMasterLocationByNameRequestModel();
                    _AddTempMasterLocationByNameRequestModel.wo_id = requestmodel.wo_id;
                    _AddTempMasterLocationByNameRequestModel.temp_master_floor_id = requestmodel.temp_master_floor_id;
                    _AddTempMasterLocationByNameRequestModel.building_name = requestmodel.temp_building;
                    _AddTempMasterLocationByNameRequestModel.floor_name = requestmodel.temp_floor;
                    _AddTempMasterLocationByNameRequestModel.location_name = requestmodel.temp_room;
                    _AddTempMasterLocationByNameRequestModel.location_type = (int)AddLocationType.Room;

                    var temp_master_room_id = await AddTempMasterLocationByName(_AddTempMasterLocationByNameRequestModel);
                    response.temp_master_room_id = Guid.Parse(temp_master_room_id.Item1);
                }

            }
            catch(Exception e)
            {
            }
            return response;
        }
        public async Task<AddTempMasterLocationDataMainFunctionRequestModel> AddTempMasterLocationDataMainFunction_V2Script(AddTempMasterLocationDataMainFunctionRequestModel requestmodel,Guid site_id)
        {
            AddTempMasterLocationDataMainFunctionRequestModel response = new AddTempMasterLocationDataMainFunctionRequestModel();
            try
            {
                if (requestmodel.temp_master_building_id != null && requestmodel.temp_master_building_id != Guid.Empty)
                {
                    await AddTempMasterLocationWOMappings(requestmodel.wo_id, requestmodel.temp_master_building_id.Value, (int)AddLocationType.Building);
                }
                else
                {
                    AddTempMasterLocationByNameRequestModel _AddTempMasterLocationByNameRequestModel = new AddTempMasterLocationByNameRequestModel();
                    _AddTempMasterLocationByNameRequestModel.wo_id = requestmodel.wo_id;
                    _AddTempMasterLocationByNameRequestModel.location_name = requestmodel.temp_building;
                    _AddTempMasterLocationByNameRequestModel.location_type = (int)AddLocationType.Building;

                    var temp_master_building_id = await AddTempMasterLocationByName_V2Script(_AddTempMasterLocationByNameRequestModel,site_id);
                    response.temp_master_building_id = Guid.Parse(temp_master_building_id);
                    requestmodel.temp_master_building_id = Guid.Parse(temp_master_building_id);
                }

                if (requestmodel.temp_master_floor_id != null && requestmodel.temp_master_floor_id != Guid.Empty)
                {
                    await AddTempMasterLocationWOMappings(requestmodel.wo_id, requestmodel.temp_master_floor_id.Value, (int)AddLocationType.Floor);
                }
                else
                {
                    AddTempMasterLocationByNameRequestModel _AddTempMasterLocationByNameRequestModel = new AddTempMasterLocationByNameRequestModel();
                    _AddTempMasterLocationByNameRequestModel.wo_id = requestmodel.wo_id;
                    _AddTempMasterLocationByNameRequestModel.temp_master_building_id = requestmodel.temp_master_building_id;
                    _AddTempMasterLocationByNameRequestModel.building_name = requestmodel.temp_building;
                    _AddTempMasterLocationByNameRequestModel.location_name = requestmodel.temp_floor;
                    _AddTempMasterLocationByNameRequestModel.location_type = (int)AddLocationType.Floor;

                    var temp_master_floor_id = await AddTempMasterLocationByName_V2Script(_AddTempMasterLocationByNameRequestModel, site_id);
                    response.temp_master_floor_id = Guid.Parse(temp_master_floor_id);
                    requestmodel.temp_master_floor_id = Guid.Parse(temp_master_floor_id);
                }


                if (requestmodel.temp_master_room_id != null && requestmodel.temp_master_room_id != Guid.Empty)
                {
                    await AddTempMasterLocationWOMappings(requestmodel.wo_id, requestmodel.temp_master_room_id.Value, (int)AddLocationType.Room);
                }
                else
                {
                    AddTempMasterLocationByNameRequestModel _AddTempMasterLocationByNameRequestModel = new AddTempMasterLocationByNameRequestModel();
                    _AddTempMasterLocationByNameRequestModel.wo_id = requestmodel.wo_id;
                    _AddTempMasterLocationByNameRequestModel.temp_master_floor_id = requestmodel.temp_master_floor_id;
                    _AddTempMasterLocationByNameRequestModel.building_name = requestmodel.temp_building;
                    _AddTempMasterLocationByNameRequestModel.floor_name = requestmodel.temp_floor;
                    _AddTempMasterLocationByNameRequestModel.location_name = requestmodel.temp_room;
                    _AddTempMasterLocationByNameRequestModel.location_type = (int)AddLocationType.Room;

                    var temp_master_room_id = await AddTempMasterLocationByName_V2Script(_AddTempMasterLocationByNameRequestModel, site_id);
                    response.temp_master_room_id = Guid.Parse(temp_master_room_id);
                }

            }
            catch (Exception e)
            {
            }
            return response;
        }

        public async Task<UploadAssettoOBWOResponsemodel> UpdateOBWOAssetDetails(UpdateOBWOAssetDetailsRequestmodel requestmodel)
        {
            WOOnboardingAssets get_asset = null;
            Guid? old_woline_class_id = null;
            UploadAssettoOBWOResponsemodel response = new UploadAssettoOBWOResponsemodel();
            NotificationService notificationService = new NotificationService(_mapper);

            // for bakcward compatibility of issue from one to many issue chnages
            // for nec issue
            if (requestmodel.woline_issue_list != null && requestmodel.woline_issue_list.Count > 0)
            {
                var get_nec_issue = requestmodel.woline_issue_list.Where(x => x.issue_type == (int)WOLine_Temp_Issue_Type.Compliance && x.issue_caused_id == (int)WOLine_Temp_Issue_Caused.NEC_Violation && !x.is_deleted).FirstOrDefault();
                if (get_nec_issue != null)
                {
                    requestmodel.nec_violation = get_nec_issue.nec_violation;
                    requestmodel.flag_issue_nec_violation = true;
                    requestmodel.is_nec_violation_resolved = get_nec_issue.is_issue_linked_for_fix;
                }
                var get_osha_issue = requestmodel.woline_issue_list.Where(x => x.issue_type == (int)WOLine_Temp_Issue_Type.Osha_Violation && x.issue_caused_id == (int)WOLine_Temp_Issue_Caused.OSha_Violation && !x.is_deleted).FirstOrDefault();
                if (get_osha_issue != null)
                {
                    requestmodel.osha_violation = get_osha_issue.osha_violation;
                    requestmodel.flag_issue_osha_violation = true;
                    requestmodel.is_osha_violation_resolved = get_osha_issue.is_issue_linked_for_fix;
                }
                var get_thermal_issue = requestmodel.woline_issue_list.Where(x => x.issue_type == (int)WOLine_Temp_Issue_Type.Thermal_Anamoly && !x.is_deleted).FirstOrDefault();
                if (get_thermal_issue != null)
                {
                    requestmodel.thermal_anomaly_sub_componant = get_thermal_issue.thermal_anomaly_sub_componant;
                    requestmodel.thermal_anomaly_measured_amps = get_thermal_issue.thermal_anomaly_measured_amps;
                    requestmodel.thermal_anomaly_refrence_temps = get_thermal_issue.thermal_anomaly_refrence_temps;
                    requestmodel.thermal_anomaly_measured_temps = get_thermal_issue.thermal_anomaly_measured_temps;
                    requestmodel.thermal_anomaly_additional_ir_photo = get_thermal_issue.thermal_anomaly_additional_ir_photo;
                    requestmodel.thermal_anomaly_location = get_thermal_issue.thermal_anomaly_location;
                    requestmodel.thermal_anomaly_probable_cause = get_thermal_issue.thermal_anomaly_probable_cause;
                    requestmodel.thermal_anomaly_recommendation = get_thermal_issue.thermal_anomaly_recommendation;
                    requestmodel.thermal_classification_id = get_thermal_issue.thermal_classification_id;
                    requestmodel.flag_issue_thermal_anamoly_detected = true;
                    requestmodel.is_osha_violation_resolved = get_thermal_issue.is_issue_linked_for_fix;
                    //requestmodel.dynamic_field_json = get_thermal_issue.dynamic_field_json;
                }
            }

            #region new requiremnt do not check duplicate on asset name 
            /* 
            List<string> assets = new List<string>();
            if (!String.IsNullOrEmpty(requestmodel.asset_name))
            {
                assets.Add(requestmodel.asset_name.ToLower().Trim());
            }

             if (!String.IsNullOrEmpty(requestmodel.asset_name))
             { 
                 var duplicateKeys = assets.GroupBy(x => x)
                         .Where(group => group.Count() > 1)
                         .Select(group => group.Key).ToList();
                 if (duplicateKeys.Count > 0)
                 {
                     response.respose = (int)ResponseStatusNumber.AlreadyExists;
                     response.asset_name = duplicateKeys.First();
                     return response;
                 }
                 /// get created assets from DB if duplictaes
                 /// 
                 var get_assets = _UoW.AssetRepository.GetAssetByAssetNames(assets);
                 if (get_assets.Count > 0)
                 {

                     response.respose = (int)ResponseStatusNumber.AlreadyExists;
                     response.asset_name = get_assets.FirstOrDefault().name;
                     return response;
                 }
                 /// get assets from WO but not created yet in asset table
                 /// 
                 var get_wo_assets = _UoW.AssetRepository.GetOBWOAssetByAssetNames(assets, requestmodel.woonboardingassets_id);
                 if (get_wo_assets.Count > 0)
                 {
                     response.respose = (int)ResponseStatusNumber.AlreadyExists;
                     response.asset_name = get_wo_assets.FirstOrDefault().asset_name;
                     return response;
                 }
             }*/
            #endregion  new requiremnt do not check duplicate on asset name 

            if (requestmodel.woonboardingassets_id != null)
            {
                get_asset = _UoW.WorkOrderRepository.GetOBWOAssetDetailsById(requestmodel.woonboardingassets_id.Value);
                old_woline_class_id = get_asset.TempAsset.inspectiontemplate_asset_class_id;
            }
            else
            {
                get_asset = new WOOnboardingAssets();
            }
            try
            {
                if (get_asset != null)
                {
                    // assign explicilty location details to old keys 
                    /*if (!String.IsNullOrEmpty(requestmodel.temp_building))
                        requestmodel.building = requestmodel.temp_building;
                    if (!String.IsNullOrEmpty(requestmodel.temp_floor))
                        requestmodel.floor = requestmodel.temp_floor;
                    if (!String.IsNullOrEmpty(requestmodel.temp_room))
                        requestmodel.room = requestmodel.temp_room;
                    */

                    if (!requestmodel.is_request_from_issue_service)
                    {
                        if (get_asset.is_wo_line_for_exisiting_asset && get_asset.asset_id != null)//get_asset.woonboardingassets_id != null && 
                        {
                            if (!String.IsNullOrEmpty(requestmodel.QR_code))
                            {
                                var get_asset_by_qr = _UoW.WorkOrderRepository.GetAssetByQRCodeExist(new List<string> { requestmodel.QR_code }, new List<Guid> { get_asset.asset_id.Value });
                                if (get_asset_by_qr != null)
                                {
                                    response.respose = (int)ResponseStatusNumber.qr_code_must_be_unique;
                                    response.asset_name = @$"QR Code ({requestmodel.QR_code}) must be unique for asset ({requestmodel.asset_name}).";
                                    return response;
                                }
                            }
                        }
                        else // check db assets
                        {
                            if (requestmodel.inspection_type == (int)MWO_inspection_wo_type.OnBoarding && !String.IsNullOrEmpty(requestmodel.QR_code))
                            {
                                var woob_id = requestmodel.woonboardingassets_id != null ? requestmodel.woonboardingassets_id.Value : Guid.Empty;
                                //var asset_id_qr = requestmodel.asset_id != null ? requestmodel.asset_id.Value : Guid.Empty;
                                var get_ob_asset_same_qr = _UoW.WorkOrderRepository.GetWOLineByQRcode(requestmodel.QR_code.ToLower().Trim(), woob_id);
                                var get_asset_by_internal_id = _UoW.WorkOrderRepository.GetAssetByQRCodeForOBWO(requestmodel.QR_code.ToLower().Trim(), requestmodel.asset_id);
                                if (get_ob_asset_same_qr != null || get_asset_by_internal_id != null)
                                {
                                    response.respose = (int)ResponseStatusNumber.qr_code_must_be_unique;
                                    response.asset_name = @$"QR Code ({requestmodel.QR_code}) must be unique for asset ({requestmodel.asset_name}).";
                                    return response;
                                }
                            }
                        }
                    }

                    // check sublevel fed by must not be as a fed by
                    if (requestmodel.wo_ob_asset_fed_by_mapping != null && requestmodel.wo_ob_asset_fed_by_mapping.Count > 0)
                    {
                        foreach (var asset_fed_by in requestmodel.wo_ob_asset_fed_by_mapping)
                        {
                            if (asset_fed_by.parent_asset_id != null)
                            {
                                if (asset_fed_by.is_parent_from_ob_wo == true)
                                {
                                    var get_fedby_ob = _UoW.WorkOrderRepository.GetWOlineByOBAssetId(asset_fed_by.parent_asset_id);
                                    if (get_fedby_ob != null && get_fedby_ob.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent)
                                    {
                                        response.respose = (int)ResponseStatusNumber.SubLevel_Fedby_is_NotAllowed;
                                        return response;
                                    }
                                }
                                else
                                {
                                    var get_fedby_main = _UoW.WorkOrderRepository.GetAssetByID(asset_fed_by.parent_asset_id);
                                    if (get_fedby_main != null && get_fedby_main.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent)
                                    {
                                        response.respose = (int)ResponseStatusNumber.SubLevel_Fedby_is_NotAllowed;
                                        return response;
                                    }
                                }
                            }
                        }
                    }

                    // check if requested woline was top level in db and request is for sublevel and toplevel have subcomponent then return error
                    if (get_asset.TempAsset != null && get_asset.TempAsset.component_level_type_id == (int)ComponentLevelTypes.ToplevelComponent && requestmodel.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent)
                    {
                        // check in request model if any sublevel mapping is not deleted then return error directly
                        if (requestmodel.wo_ob_asset_sublevelcomponent_mapping != null && requestmodel.wo_ob_asset_sublevelcomponent_mapping.Count() > 0)
                        {
                            var requested_sublevel_mapping = requestmodel.wo_ob_asset_sublevelcomponent_mapping.Where(x => !x.is_deleted).FirstOrDefault();
                            if (requested_sublevel_mapping != null)
                            {
                                response.respose = (int)ResponseStatusNumber.can_not_change_top_to_sub;
                                return response;
                            }
                        }
                        else // if there is no sublevel maaping in request then check in db 
                        {
                            if (get_asset.WOlineSubLevelcomponentMapping != null && get_asset.WOlineSubLevelcomponentMapping.Count() > 0)
                            {
                                var db_sublevel = get_asset.WOlineSubLevelcomponentMapping.Where(x => !x.is_deleted).FirstOrDefault();
                                if (db_sublevel != null)
                                {
                                    response.respose = (int)ResponseStatusNumber.can_not_change_top_to_sub;
                                    return response;
                                }
                            }
                        }
                    }


                    // add temp loaction if selected location is from main
                    if(requestmodel.temp_formiobuilding_id == Guid.Empty)
                    {
                        var tempFormIOBuildings = new TempFormIOBuildings();
                        tempFormIOBuildings.temp_formio_building_name = requestmodel.building;
                        tempFormIOBuildings.wo_id = requestmodel.wo_id;
                        tempFormIOBuildings.created_at = DateTime.UtcNow;
                        tempFormIOBuildings.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        tempFormIOBuildings.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                        var insertbuilding = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Insert(tempFormIOBuildings);
                        _UoW.SaveChanges();

                        requestmodel.temp_formiobuilding_id = tempFormIOBuildings.temp_formiobuilding_id;
                    }
                    if (requestmodel.temp_formiofloor_id == Guid.Empty)
                    {
                        var tempFormIOFloors = new TempFormIOFloors();
                        tempFormIOFloors.temp_formio_floor_name = requestmodel.floor;
                        tempFormIOFloors.temp_formiobuilding_id = requestmodel.temp_formiobuilding_id;
                        tempFormIOFloors.wo_id = requestmodel.wo_id;
                        tempFormIOFloors.created_at = DateTime.UtcNow;
                        tempFormIOFloors.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        tempFormIOFloors.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                        var insertfloor = await _UoW.BaseGenericRepository<TempFormIOFloors>().Insert(tempFormIOFloors);
                        _UoW.SaveChanges();

                        requestmodel.temp_formiofloor_id = tempFormIOFloors.temp_formiofloor_id;
                    }
                    if (requestmodel.temp_formioroom_id == Guid.Empty)
                    {
                        var tempFormIORooms = new TempFormIORooms();
                        tempFormIORooms.temp_formio_room_name = requestmodel.room;
                        tempFormIORooms.temp_formiofloor_id = requestmodel.temp_formiofloor_id;
                        tempFormIORooms.wo_id = requestmodel.wo_id;
                        tempFormIORooms.created_at = DateTime.UtcNow;
                        tempFormIORooms.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        tempFormIORooms.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                        var insertroom = await _UoW.BaseGenericRepository<TempFormIORooms>().Insert(tempFormIORooms);
                        _UoW.SaveChanges();

                        requestmodel.temp_formioroom_id = tempFormIORooms.temp_formioroom_id;
                    }

                    /* add TempMasterLocation same thing we are doing in below function 
                     * 
                    if (requestmodel.temp_master_building_id != null && requestmodel.temp_master_building_id != Guid.Empty)
                    {
                        await AddTempMasterLocationWOMappings(requestmodel.wo_id,requestmodel.temp_master_building_id.Value,(int)AddLocationType.Building);
                    }
                    else
                    {
                        AddTempMasterLocationDataRequestModel _AddTempMasterLocationDataRequestModel = new AddTempMasterLocationDataRequestModel();
                        _AddTempMasterLocationDataRequestModel.wo_id = requestmodel.wo_id;
                        _AddTempMasterLocationDataRequestModel.location_name = requestmodel.temp_building;
                        _AddTempMasterLocationDataRequestModel.location_type = (int)AddLocationType.Building;

                        var temp_master_building_id = await AddTempMasterLocationByName(_AddTempMasterLocationDataRequestModel);
                        requestmodel.temp_master_building_id = Guid.Parse(temp_master_building_id);
                    }
                    if (requestmodel.temp_master_floor_id != null && requestmodel.temp_master_floor_id != Guid.Empty)
                    {
                        await AddTempMasterLocationWOMappings(requestmodel.wo_id, requestmodel.temp_master_floor_id.Value, (int)AddLocationType.Floor);
                    }
                    else
                    {
                        AddTempMasterLocationDataRequestModel _AddTempMasterLocationDataRequestModel = new AddTempMasterLocationDataRequestModel();
                        _AddTempMasterLocationDataRequestModel.wo_id = requestmodel.wo_id;
                        _AddTempMasterLocationDataRequestModel.building_name = requestmodel.temp_building;
                        _AddTempMasterLocationDataRequestModel.location_name = requestmodel.temp_floor;
                        _AddTempMasterLocationDataRequestModel.location_type = (int)AddLocationType.Floor;

                        var temp_master_floor_id = await AddTempMasterLocationByName(_AddTempMasterLocationDataRequestModel);
                        requestmodel.temp_master_floor_id = Guid.Parse(temp_master_floor_id);
                    }
                    if (requestmodel.temp_master_room_id != null && requestmodel.temp_master_room_id != Guid.Empty)
                    {
                        await AddTempMasterLocationWOMappings(requestmodel.wo_id, requestmodel.temp_master_room_id.Value, (int)AddLocationType.Room);
                    }
                    else
                    {
                        AddTempMasterLocationDataRequestModel _AddTempMasterLocationDataRequestModel = new AddTempMasterLocationDataRequestModel();
                        _AddTempMasterLocationDataRequestModel.wo_id = requestmodel.wo_id;
                        _AddTempMasterLocationDataRequestModel.building_name = requestmodel.temp_building;
                        _AddTempMasterLocationDataRequestModel.floor_name = requestmodel.temp_floor;
                        _AddTempMasterLocationDataRequestModel.location_name = requestmodel.temp_room;
                        _AddTempMasterLocationDataRequestModel.location_type = (int)AddLocationType.Room;

                        var temp_master_room_id = await AddTempMasterLocationByName(_AddTempMasterLocationDataRequestModel);
                        requestmodel.temp_master_room_id = Guid.Parse(temp_master_room_id);
                    }
                    */
                    
                    AddTempMasterLocationDataMainFunctionRequestModel req2 = new AddTempMasterLocationDataMainFunctionRequestModel();
                    req2.temp_building = requestmodel.temp_building;
                    req2.temp_floor = requestmodel.temp_floor;
                    req2.temp_room = requestmodel.temp_room;
                    req2.temp_master_building_id = requestmodel.temp_master_building_id;
                    req2.temp_master_floor_id = requestmodel.temp_master_floor_id;
                    req2.temp_master_room_id = requestmodel.temp_master_room_id;
                    req2.wo_id = requestmodel.wo_id;

                    var res_location = await AddTempMasterLocationDataMainFunction(req2);

                    if (requestmodel.temp_master_building_id == null || requestmodel.temp_master_building_id == Guid.Empty)
                        requestmodel.temp_master_building_id = res_location.temp_master_building_id;
                    if (requestmodel.temp_master_floor_id == null || requestmodel.temp_master_floor_id == Guid.Empty)
                        requestmodel.temp_master_floor_id = res_location.temp_master_floor_id;
                    if (requestmodel.temp_master_room_id == null || requestmodel.temp_master_room_id == Guid.Empty)
                        requestmodel.temp_master_room_id = res_location.temp_master_room_id;


                    get_asset.asset_name = requestmodel.asset_name;
                    //get_asset.ob_existing_asset_id = requestmodel.ob_existing_asset_id;
                    get_asset.asset_class_code = requestmodel.asset_class_code;
                    if (!String.IsNullOrEmpty(requestmodel.asset_class_code))
                    {
                        var get_assetclass = _UoW.WorkOrderRepository.GetAssetclassByCode(requestmodel.asset_class_code.ToLower().Trim());
                        if (get_assetclass != null)
                        {
                            get_asset.asset_class_name = get_assetclass.asset_class_name;
                            requestmodel.inspectiontemplate_asset_class_id = get_assetclass.inspectiontemplate_asset_class_id;
                        }
                    }
                    get_asset.back_office_note = requestmodel.back_office_note;
                    get_asset.building = requestmodel.building;
                    get_asset.floor = requestmodel.floor;
                    get_asset.room = requestmodel.room;
                    get_asset.section = requestmodel.section;

                    if (String.IsNullOrEmpty(get_asset.section))
                    {
                        get_asset.section = "Default";
                    }
                    if (requestmodel.QR_code == "N/A") // if QRcode is N/A then keep it as null 
                    {
                        requestmodel.QR_code = null;
                    }
                    get_asset.QR_code = requestmodel.QR_code;
                    get_asset.field_note = requestmodel.field_note;
                    get_asset.status = requestmodel.status;

                    if (requestmodel.status == (int)Status.Completed && requestmodel.woonboardingassets_id != null)
                    {
                        get_asset.completed_at = DateTime.UtcNow;
                        get_asset.inspected_at = DateTime.UtcNow;
                        get_asset.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                    }
                    if ((requestmodel.status == (int)Status.InProgress || requestmodel.status == (int)Status.Ready_for_review) && get_asset.initial_inspected_at == null) // if initial data is null and new requested status is either inprogress or RFR then update date
                    {
                        get_asset.initial_inspected_at = DateTime.UtcNow;
                        get_asset.initial_inspected_by = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                    }

                    // we are checking it at last oprating condition code
                    //// if WO line is IR and  there are no issues then mark WO line as completed
                    //if (!requestmodel.flag_issue_nec_violation && !requestmodel.flag_issue_osha_violation && !requestmodel.flag_issue_thermal_anamoly_detected && get_asset.WorkOrders != null && get_asset.WorkOrders.wo_type == (int)Status.IR_Scan_WO && requestmodel.status == (int)Status.Ready_for_review)
                    //{
                    //    get_asset.status = (int)Status.Completed;
                    //    get_asset.completed_at = DateTime.UtcNow;
                    //    get_asset.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                    //}


                    get_asset.condition_index_type = requestmodel.condition_index_type;
                    get_asset.criticality_index_type = requestmodel.criticality_index_type;
                    get_asset.thermal_classification_id = requestmodel.thermal_classification_id;
                    get_asset.commisiion_date = requestmodel.commisiion_date;

                    get_asset.inspection_type = requestmodel.inspection_type;
                    get_asset.mwo_date = requestmodel.mwo_date;
                    get_asset.mwo_inspection_type_status = requestmodel.mwo_inspection_type_status;
                    get_asset.problem_description = requestmodel.problem_description;
                    get_asset.solution_description = requestmodel.solution_description;
                    get_asset.inspection_further_details = requestmodel.inspection_further_details;
                    get_asset.comments = requestmodel.comments;
                    get_asset.repair_resolution = requestmodel.repair_resolution;
                    get_asset.replacement_resolution = requestmodel.replacement_resolution;
                    get_asset.recommended_action = requestmodel.recommended_action;
                    get_asset.recommended_action_schedule = requestmodel.recommended_action_schedule;
                    get_asset.asset_id = requestmodel.asset_id;
                    get_asset.other_notes = requestmodel.other_notes;
                    get_asset.fed_by_ob_asset_id = requestmodel.fed_by_ob_asset_id;
                    get_asset.is_fed_by_ob_asset = requestmodel.is_fed_by_ob_asset;
                    get_asset.is_wo_line_for_exisiting_asset = false;
                    get_asset.form_nameplate_info = requestmodel.form_nameplate_info;
                    get_asset.dynmic_fields_json = requestmodel.dynmic_fields_json;
                    //get_asset.work_time_spend = requestmodel.work_time_spend;

                    if (requestmodel.is_request_from_issue_service) //if request is from isseu service then update issue title and priority
                    {
                        get_asset.issue_title = requestmodel.issue_title;
                        get_asset.issue_priority = requestmodel.issue_priority;
                        get_asset.new_issue_asset_type = requestmodel.new_issue_asset_type;
                        if (requestmodel.tempasset_id != null)
                        {
                            get_asset.tempasset_id = requestmodel.tempasset_id;
                        }

                    }
                    if (requestmodel.woonboardingassets_id == null) // change is_woline_from_other_inspection if request is to add woline if its for update then do not change it
                        get_asset.is_woline_from_other_inspection = requestmodel.is_woline_from_other_inspection; // if install woline is from issue/PM then this will be true and do not show this in wo datails screen
                    Asset requested_asset = null;
                    if (requestmodel.asset_id != null)
                    {
                        requested_asset = _UoW.WorkOrderRepository.GetAssetByID(requestmodel.asset_id.Value);
                        get_asset.is_wo_line_for_exisiting_asset = true;
                        if (requested_asset.InspectionTemplateAssetClass != null)           
                        {
                            get_asset.asset_class_code = requested_asset.InspectionTemplateAssetClass.asset_class_code;
                            get_asset.asset_class_name = requested_asset.InspectionTemplateAssetClass.asset_class_name;
                        }

                    }
                    WorkOrders requested_WO = _UoW.WorkOrderRepository.GetWOByidforUpdateOffline(requestmodel.wo_id);

                    // IR WO new fields
                    get_asset.fed_by = requestmodel.fed_by;
                    get_asset.voltage = requestmodel.voltage;
                    get_asset.rated_amps = requestmodel.rated_amps;
                    get_asset.manufacturer = requestmodel.manufacturer;
                    get_asset.model = requestmodel.model;
                    get_asset.location = requestmodel.location;
                    if (!requestmodel.is_request_from_issue_service) // change flag issue only if request is not from issue service
                    {
                        get_asset.thermal_anomaly_sub_componant = requestmodel.thermal_anomaly_sub_componant;
                        get_asset.thermal_anomaly_location = requestmodel.thermal_anomaly_location;
                        get_asset.thermal_anomaly_probable_cause = requestmodel.thermal_anomaly_probable_cause;
                        get_asset.thermal_anomaly_recommendation = requestmodel.thermal_anomaly_recommendation;

                        get_asset.thermal_anomaly_measured_amps = requestmodel.thermal_anomaly_measured_amps;
                        get_asset.thermal_anomaly_measured_temps = requestmodel.thermal_anomaly_measured_temps;
                        get_asset.thermal_anomaly_refrence_temps = requestmodel.thermal_anomaly_refrence_temps;
                        get_asset.thermal_anomaly_additional_ir_photo = requestmodel.thermal_anomaly_additional_ir_photo;
                        get_asset.nec_violation = requestmodel.nec_violation;
                        get_asset.osha_violation = requestmodel.osha_violation;
                        get_asset.flag_issue_thermal_anamoly_detected = requestmodel.flag_issue_thermal_anamoly_detected;
                        get_asset.flag_issue_nec_violation = requestmodel.flag_issue_nec_violation;
                        get_asset.flag_issue_osha_violation = requestmodel.flag_issue_osha_violation;
                    }
                    get_asset.asset_operating_condition_state = requestmodel.asset_operating_condition_state;
                    get_asset.code_compliance = requestmodel.code_compliance;  // compliant  , non-compliant 
                    get_asset.replaced_asset_id = requestmodel.replaced_asset_id;  // replaced assetid
                    get_asset.is_replaced_asset_id_is_main = requestmodel.is_replaced_asset_id_is_main; 
                    get_asset.general_issue_resolution = requestmodel.general_issue_resolution;  // general issue resolution
                    get_asset.component_level_type_id = requestmodel.component_level_type_id;  // 1 for top_level , 2- subcomponant

                    get_asset.is_nec_violation_resolved = requestmodel.is_nec_violation_resolved;
                    get_asset.is_osha_violation_resolved = requestmodel.is_osha_violation_resolved;
                    get_asset.is_thermal_anomaly_resolved = requestmodel.is_thermal_anomaly_resolved;

                    //get_asset.maintenance_index_type = requestmodel.maintenance_index_type;
                   

                    if (requestmodel.status != (int)Status.Completed)
                    {
                        get_asset.inspected_at = DateTime.UtcNow;
                        get_asset.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                    }

                    if (requestmodel.status != (int)Status.open)
                    {
                        get_asset.technician_user_id = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                    }


                    if (get_asset.woonboardingassets_id != null && get_asset.woonboardingassets_id != Guid.Empty)
                    {
                        get_asset.modified_at = DateTime.UtcNow;
                        get_asset.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                        // if inspection is for issue then update woline details like class/location/asset names from selected asset based on asset selection location is pending..
                        if(get_asset.inspection_type == (int)MWO_inspection_wo_type.Repair || get_asset.inspection_type == (int)MWO_inspection_wo_type.Replace || get_asset.inspection_type == (int)MWO_inspection_wo_type.Trouble_Call_Check )
                        {
                            // update name and main asset id if woline is for repair/replace/general resolution
                            if (requestmodel.issues_temp_asset_id != null)
                            {
                                //get main woline
                                var get_main_woline = _UoW.WorkOrderRepository.GetWOlineByIdForissueupdate(requestmodel.issues_temp_asset_id.Value);
                                get_asset.asset_name = get_main_woline.asset_name;
                                get_asset.asset_class_code = get_main_woline.asset_class_code;
                                get_asset.asset_class_name = get_main_woline.asset_class_name;
                                get_asset.asset_id = null; // make main asset id null
                                get_asset.issues_temp_asset_id = requestmodel.issues_temp_asset_id;

                                // moved this to LinkIssueToWOLine function
                                /*get_asset.WOLineIssue.ToList().ForEach(x =>
                                {
                                    if (!x.is_deleted)
                                    {
                                        x.original_woonboardingassets_id = requestmodel.issues_temp_asset_id;
                                        x.original_asset_id = null;
                                        x.form_retrived_asset_name = get_main_woline.asset_name;
                                    }
                                });*/
                            }
                            if (requestmodel.asset_id != null)
                            {
                                var get_main_asset = _UoW.WorkOrderRepository.GetMainAssetByIdForissueupdate(requestmodel.asset_id.Value);
                                get_asset.asset_name = get_main_asset.name;
                                get_asset.asset_class_code = get_main_asset.InspectionTemplateAssetClass.asset_class_code;
                                get_asset.asset_class_name = get_main_asset.InspectionTemplateAssetClass.asset_class_name;
                                get_asset.asset_id = requestmodel.asset_id; // make main asset id null
                                get_asset.issues_temp_asset_id = null;

                                // moved this to LinkIssueToWOLine function
                                /*get_asset.WOLineIssue.ToList().ForEach(x =>
                                {
                                    if (!x.is_deleted)
                                    {
                                        x.original_woonboardingassets_id = null;
                                        x.original_asset_id = get_asset.asset_id;
                                        x.form_retrived_asset_name = get_main_asset.name;
                                    }
                                });*/
                            }

                        }
                          
                        // update pm woline's name also
                        if(get_asset.TempAssetPMs != null && get_asset.TempAssetPMs.Count > 0)
                        {
                            get_asset.TempAssetPMs.ToList().ForEach(x =>
                            {
                                if(x.TempActiveAssetPMWOlineMapping.FirstOrDefault()!=null && x.TempActiveAssetPMWOlineMapping.FirstOrDefault().WOOnboardingAssets != null)
                                {
                                    x.TempActiveAssetPMWOlineMapping.FirstOrDefault().WOOnboardingAssets.asset_name = get_asset.asset_name;
                                    x.TempActiveAssetPMWOlineMapping.FirstOrDefault().WOOnboardingAssets.modified_at = DateTime.UtcNow;
                                }
                                
                            });
                        }

                        // update pm estimation
                        var update = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_asset);

                        
                    }
                    else
                    {
                        get_asset.wo_id = requestmodel.wo_id;
                        get_asset.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        get_asset.created_at = DateTime.UtcNow;
                        get_asset.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                        #region now we are changing asset condition based on issue
                        /* if (requested_asset != null)
                         {
                             if (requestmodel.inspection_type == (int)MWO_inspection_wo_type.Repair)
                             {
                                 AssetActivityLogs assetActivityLogs = new AssetActivityLogs();
                                 assetActivityLogs.created_at = DateTime.UtcNow;
                                 assetActivityLogs.activity_header = "Repair for " + requested_asset.name + " is requested in WO#" + requested_WO.manual_wo_number;
                                 assetActivityLogs.activity_message = "Repair for " + requested_asset.name + " is requested in WO#" + requested_WO.manual_wo_number;
                                 assetActivityLogs.activity_type = (int)ActivityTypes.AssetRepairRequestCreated;
                                 assetActivityLogs.status = (int)Status.Active;
                                 assetActivityLogs.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                 assetActivityLogs.asset_id = requestmodel.asset_id.Value;

                                 requested_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Repair_Scheduled; //
                                 requested_asset.modified_at = DateTime.UtcNow;

                                 var insert_activity_log = await _UoW.BaseGenericRepository<AssetActivityLogs>().Insert(assetActivityLogs);
                             }
                             if (requestmodel.inspection_type == (int)MWO_inspection_wo_type.Replace)
                             {
                                 AssetActivityLogs assetActivityLogs = new AssetActivityLogs();
                                 assetActivityLogs.created_at = DateTime.UtcNow;
                                 assetActivityLogs.activity_header = "Replace for " + requested_asset.name + " is requested in WO#" + requested_WO.manual_wo_number;
                                 assetActivityLogs.activity_message = "Replace for " + requested_asset.name + " is requested in WO#" + requested_WO.manual_wo_number;
                                 assetActivityLogs.activity_type = (int)ActivityTypes.AssetReplaceRequestCreated;
                                 assetActivityLogs.status = (int)Status.Active;
                                 assetActivityLogs.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                 assetActivityLogs.asset_id = requestmodel.asset_id.Value;

                                 requested_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Replacement_Scheduled; //
                                 requested_asset.modified_at = DateTime.UtcNow;
                             }
                             if (requested_asset != null)
                             {
                                 var update_requested_assset = await _UoW.BaseGenericRepository<Asset>().Update(requested_asset);
                             }
                         }*/
                        #endregion now we are changing asset condition based on issue

                        // if woline is repair and selected asset is from obwoline then get data from selected asset and update it here
                        if (requestmodel.issues_temp_asset_id != null)
                        {
                            //get main woline
                            var get_main_woline = _UoW.WorkOrderRepository.GetWOlineByIdForissueupdate(requestmodel.issues_temp_asset_id.Value);
                            get_asset.asset_name = get_main_woline.asset_name;
                            get_asset.asset_class_code = get_main_woline.asset_class_code;
                            get_asset.asset_class_name = get_main_woline.asset_class_name;
                            get_asset.asset_id = null; // make main asset id null
                            get_asset.issues_temp_asset_id = requestmodel.issues_temp_asset_id;

                        }

                      var insert = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Insert(get_asset);

                    }
                    #region now we are changing asset condition based on issue
                    /*if (requested_asset != null)  /// insert activity logs based on repair condition like inprogress or completed etc.
                      {
                          if (requestmodel.inspection_type == (int)MWO_inspection_wo_type.Repair && requestmodel.mwo_inspection_type_status != (int)MWO_inspection_status.Open)
                          {
                              if (requestmodel.mwo_inspection_type_status == (int)MWO_inspection_status.Inprogress)
                              {
                                  AssetActivityLogs assetActivityLogs = new AssetActivityLogs();
                                  assetActivityLogs.created_at = DateTime.UtcNow;
                                  assetActivityLogs.activity_header = "Repair for " + requested_asset.name + " is In-Progress in WO# " + requested_WO.manual_wo_number;
                                  assetActivityLogs.activity_message = "Repair for " + requested_asset.name + " is In-Progress in WO# " + requested_WO.manual_wo_number;
                                  assetActivityLogs.activity_type = (int)ActivityTypes.AssetRepairRequestInprogress;
                                  assetActivityLogs.status = (int)Status.Active;
                                  assetActivityLogs.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                  assetActivityLogs.asset_id = requestmodel.asset_id.Value;

                                  var insert_activity_log = await _UoW.BaseGenericRepository<AssetActivityLogs>().Insert(assetActivityLogs);
                              }

                              if (requestmodel.mwo_inspection_type_status == (int)MWO_inspection_status.Done)
                              {
                                  AssetActivityLogs assetActivityLogs = new AssetActivityLogs();
                                  assetActivityLogs.created_at = DateTime.UtcNow;
                                  assetActivityLogs.activity_header = "Repair for " + requested_asset.name + " is Completed in WO# " + requested_WO.manual_wo_number;
                                  assetActivityLogs.activity_message = "Repair for " + requested_asset.name + " is Completed in WO# " + requested_WO.manual_wo_number;
                                  assetActivityLogs.activity_type = (int)ActivityTypes.AssetRepairRequestCompleted;
                                  assetActivityLogs.status = (int)Status.Active;
                                  assetActivityLogs.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                  assetActivityLogs.asset_id = requestmodel.asset_id.Value;

                                  var insert_activity_log = await _UoW.BaseGenericRepository<AssetActivityLogs>().Insert(assetActivityLogs);
                              }
                          }
                      }*/
                    #endregion now we are changing asset condition based on issue

                    _UoW.SaveChanges();
                    
                    if(requestmodel.woonboardingassets_id == null || requestmodel.woonboardingassets_id == Guid.Empty)
                    {
                        await AddUpdateWOOnboardingAssetsDateTimeTracking(get_asset.woonboardingassets_id, (int)WOLineActionsTypes.WorkStartDate, requestmodel.work_time_spend);
                    }
                    else
                    {
                        // Update start_date & work_time_spend in WOOnboardingAssetsDateTimeTracking
                        if (requestmodel.status == (int)Status.InProgress)
                            await AddUpdateWOOnboardingAssetsDateTimeTracking(requestmodel.woonboardingassets_id.Value, (int)WOLineActionsTypes.Save, requestmodel.work_time_spend);
                        else if (requestmodel.status == (int)Status.Ready_for_review || (requestmodel.status == (int)Status.Completed))
                            await AddUpdateWOOnboardingAssetsDateTimeTracking(requestmodel.woonboardingassets_id.Value, (int)WOLineActionsTypes.Submit, requestmodel.work_time_spend);
                    }

                    response.woonboardingassets_id = get_asset.woonboardingassets_id;
                    
                    // --- If we Click on Save/Submit check for Send Notification 
                    if(requestmodel.woonboardingassets_id != null && requestmodel.woonboardingassets_id != Guid.Empty)
                    {
                        // Send Notifications to All Back-Office Users when All WOLines are Completed/ReadyForReview
                        var ref_wo_id = new List<string> { requestmodel.wo_id.ToString() };
                        await notificationService.SendNotificationGenericNewFlow((int)NotificationType_Version_2.AllWOLinesCompletedORReadyForReviewOfWO, ref_wo_id, null);
                    }


                    if (requestmodel.ob_ir_Image_label_list != null && requestmodel.ob_ir_Image_label_list.Count > 0)
                    {
                        var get_image_file_mappigs = _UoW.WorkOrderRepository.GetImageNameMappingByID(requestmodel.wo_id);
                        List<IRWOImagesLabelMapping> db_images = new List<IRWOImagesLabelMapping>();
                        if (get_asset.IRWOImagesLabelMapping != null)
                        {
                            db_images = get_asset.IRWOImagesLabelMapping.ToList();
                        }

                        var added_images = requestmodel.ob_ir_Image_label_list.Where(x => x.irwoimagelabelmapping_id == null).ToList();  // insert images 
                        if (added_images.Count > 0)   // insert images 
                        {
                            foreach (var image in added_images)   // insert images 
                            {
                                IRWOImagesLabelMapping IRWOImagesLabelMapping = new IRWOImagesLabelMapping();
                                IRWOImagesLabelMapping.ir_image_label = image.ir_image_label;
                                IRWOImagesLabelMapping.visual_image_label = image.visual_image_label;
                                IRWOImagesLabelMapping.s3_image_folder_name = get_asset.site_id.ToString() + "/" + requestmodel.wo_id;
                                IRWOImagesLabelMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                IRWOImagesLabelMapping.created_at = DateTime.UtcNow;
                                IRWOImagesLabelMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                IRWOImagesLabelMapping.is_deleted = false;
                                IRWOImagesLabelMapping.woonboardingassets_id = get_asset.woonboardingassets_id;

                                var insert = await _UoW.BaseGenericRepository<IRWOImagesLabelMapping>().Insert(IRWOImagesLabelMapping);
                                _UoW.SaveChanges();

                                var update_img_file_mappings = get_image_file_mappigs.Where(x => x.img_file_name == IRWOImagesLabelMapping.ir_image_label ||
                                                                                           x.img_file_name == IRWOImagesLabelMapping.visual_image_label).ToList();

                                if (update_img_file_mappings != null && update_img_file_mappings.Count > 0)
                                {
                                    foreach (var update_img_file_mapping in update_img_file_mappings)
                                    {
                                        update_img_file_mapping.is_img_attached = true;
                                        update_img_file_mapping.updated_at = DateTime.UtcNow;
                                        update_img_file_mapping.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                        var updtae_img_file = await _UoW.BaseGenericRepository<IRScanWOImageFileMapping>().Update(update_img_file_mapping);
                                        _UoW.SaveChanges();
                                    }

                                }
                            }
                        }
                        var update_images = requestmodel.ob_ir_Image_label_list.Where(x => x.irwoimagelabelmapping_id != null).ToList();  // update images which is deleted
                        if (update_images != null && update_images.Count > 0)
                        {
                            foreach (var image in update_images)
                            {
                                var db_image = db_images.Where(q => q.irwoimagelabelmapping_id == image.irwoimagelabelmapping_id).FirstOrDefault();

                                // check image extension if request is lowercase and in db it is upper case then keep uppercase  
                                if (!String.IsNullOrEmpty(image.ir_image_label))
                                    db_image.ir_image_label = ChangeImageFileextension(image.ir_image_label, db_image.ir_image_label);
                                else
                                    db_image.ir_image_label = image.ir_image_label;
                                if (!String.IsNullOrEmpty(image.visual_image_label))
                                    db_image.visual_image_label = ChangeImageFileextension(image.visual_image_label, db_image.ir_image_label != null ? db_image.ir_image_label : db_image.visual_image_label);
                                else
                                    db_image.visual_image_label = image.visual_image_label;
                                db_image.is_deleted = image.is_deleted;
                                db_image.updated_at = DateTime.UtcNow;
                                db_image.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                var update_img = await _UoW.BaseGenericRepository<IRWOImagesLabelMapping>().Update(db_image);
                                _UoW.SaveChanges();

                                var update_img_file_mappings = get_image_file_mappigs.Where(x => x.img_file_name == db_image.ir_image_label ||
                                                                                          x.img_file_name == db_image.visual_image_label).ToList();

                                if (update_img_file_mappings != null && update_img_file_mappings.Count > 0)
                                {
                                    foreach (var update_img_file_mapping in update_img_file_mappings)
                                    {
                                        update_img_file_mapping.is_img_attached = true;
                                        update_img_file_mapping.updated_at = DateTime.UtcNow;
                                        update_img_file_mapping.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                        var updtae_img_file = await _UoW.BaseGenericRepository<IRScanWOImageFileMapping>().Update(update_img_file_mapping);
                                        _UoW.SaveChanges();
                                    }

                                }
                                if (image.is_deleted)
                                {
                                    var get_issue_imgs = _UoW.WorkOrderRepository.GetIssueImagesByIRVisualId(image.irwoimagelabelmapping_id.Value);
                                    foreach (var issue_img in get_issue_imgs)
                                    {
                                        issue_img.is_deleted = true;
                                        issue_img.modified_at = DateTime.UtcNow;
                                        issue_img.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                        var update_issue_img = await _UoW.BaseGenericRepository<WOlineIssueImagesMapping>().Update(issue_img);
                                        _UoW.SaveChanges();
                                    }
                                }
                            }
                        }
                    }

                    // In Install/Add Woline flag-issue -repair needed and -replacement needed
                    if (requestmodel.woline_issue_list != null && requestmodel.woline_issue_list.Count>0)
                    {
                        foreach(var woline_issue in requestmodel.woline_issue_list)
                        {

                            WOLineIssue get_woline_issue = null;

                            if (woline_issue.wo_line_issue_id != null)
                            {
                                get_woline_issue = _UoW.WorkOrderRepository.GetWOLineIssueById(woline_issue.wo_line_issue_id.Value);
                            }
                            else
                            {
                                get_woline_issue = new WOLineIssue();
                            }


                            //Add/update to Wolineissue table 
                            if (woline_issue.wo_line_issue_id != null)
                            {
                                get_woline_issue.issue_title = woline_issue.issue_title;
                                get_woline_issue.issue_description = woline_issue.issue_description;
                                get_woline_issue.issue_type = woline_issue.issue_type;
                                get_woline_issue.issue_caused_id = woline_issue.issue_caused_id;
                                get_woline_issue.is_deleted = woline_issue.is_deleted;
                                get_woline_issue.modified_at = DateTime.UtcNow;
                                get_woline_issue.is_issue_linked_for_fix = woline_issue.is_issue_linked_for_fix;
                                get_woline_issue.thermal_anomaly_sub_componant = woline_issue.thermal_anomaly_sub_componant;
                                get_woline_issue.thermal_anomaly_measured_amps = woline_issue.thermal_anomaly_measured_amps;
                                get_woline_issue.thermal_anomaly_refrence_temps = woline_issue.thermal_anomaly_refrence_temps;
                                get_woline_issue.thermal_anomaly_measured_temps = woline_issue.thermal_anomaly_measured_temps;
                                get_woline_issue.thermal_anomaly_additional_ir_photo = woline_issue.thermal_anomaly_additional_ir_photo;
                                get_woline_issue.thermal_anomaly_location = woline_issue.thermal_anomaly_location;
                                get_woline_issue.thermal_anomaly_probable_cause = woline_issue.thermal_anomaly_probable_cause;
                                get_woline_issue.thermal_anomaly_problem_description = woline_issue.thermal_anomaly_problem_description;
                                get_woline_issue.thermal_anomaly_corrective_action = woline_issue.thermal_anomaly_corrective_action;
                                get_woline_issue.is_abc_phase_required_for_report = woline_issue.is_abc_phase_required_for_report;
                                get_woline_issue.nfpa_70b_violation = woline_issue.nfpa_70b_violation;


                                if (!String.IsNullOrEmpty(woline_issue.thermal_anomaly_problem_description))
                                {
                                    if(woline_issue.thermal_anomaly_problem_description.ToLower().Replace(" ","") == "internalflaw")
                                        get_woline_issue.thermal_anomaly_probable_cause = (int)Thermal_Anomaly_Probable_Cause.Internal_Flaw;
                                    else if(woline_issue.thermal_anomaly_problem_description.ToLower().Replace(" ", "") == "poorconnection")
                                        get_woline_issue.thermal_anomaly_probable_cause = (int)Thermal_Anomaly_Probable_Cause.Poor_Connection;
                                    else if (woline_issue.thermal_anomaly_problem_description.ToLower().Replace(" ", "") == "overload")
                                        get_woline_issue.thermal_anomaly_probable_cause = (int)Thermal_Anomaly_Probable_Cause.Overload;
                                    else
                                        get_woline_issue.thermal_anomaly_probable_cause = null;
                                }
                                if (!String.IsNullOrEmpty(woline_issue.thermal_anomaly_corrective_action))
                                {
                                    if (woline_issue.thermal_anomaly_corrective_action.ToLower().Replace(" ", "") == "continuetomonitor")
                                        get_woline_issue.thermal_anomaly_recommendation = (int)Thermal_Anomaly_Recommendation.Continue_to_Monitor;
                                    else if (woline_issue.thermal_anomaly_corrective_action.ToLower().Replace(" ", "") == "replacecomponent")
                                        get_woline_issue.thermal_anomaly_recommendation = (int)Thermal_Anomaly_Recommendation.Replace_Component;
                                    else if (woline_issue.thermal_anomaly_corrective_action.ToLower().Replace(" ", "") == "verifycleanandtighten")
                                        get_woline_issue.thermal_anomaly_recommendation = (int)Thermal_Anomaly_Recommendation.Verify_Clea_and_Tighten;
                                    else
                                        get_woline_issue.thermal_anomaly_recommendation = null;
                                }

                                if (woline_issue.thermal_anomaly_probable_cause != null && woline_issue.thermal_anomaly_probable_cause > 0 && String.IsNullOrEmpty(woline_issue.thermal_anomaly_problem_description))
                                {
                                    if (woline_issue.thermal_anomaly_probable_cause == (int)Thermal_Anomaly_Probable_Cause.Internal_Flaw)
                                        get_woline_issue.thermal_anomaly_problem_description = "Internal Flaw";
                                    else if(woline_issue.thermal_anomaly_probable_cause == (int)Thermal_Anomaly_Probable_Cause.Overload)
                                        get_woline_issue.thermal_anomaly_problem_description = "Overload";
                                    else if (woline_issue.thermal_anomaly_probable_cause == (int)Thermal_Anomaly_Probable_Cause.Poor_Connection)
                                        get_woline_issue.thermal_anomaly_problem_description = "Poor Connection";
                                }
                                if (woline_issue.thermal_anomaly_recommendation != null && woline_issue.thermal_anomaly_recommendation > 0 && String.IsNullOrEmpty(woline_issue.thermal_anomaly_corrective_action))
                                {
                                    if (woline_issue.thermal_anomaly_recommendation == (int)Thermal_Anomaly_Recommendation.Continue_to_Monitor)
                                        get_woline_issue.thermal_anomaly_corrective_action = "Continue to Monitor";
                                    else if (woline_issue.thermal_anomaly_recommendation == (int)Thermal_Anomaly_Recommendation.Replace_Component)
                                        get_woline_issue.thermal_anomaly_corrective_action = "Replace Component";
                                    else if (woline_issue.thermal_anomaly_recommendation == (int)Thermal_Anomaly_Recommendation.Verify_Clea_and_Tighten)
                                        get_woline_issue.thermal_anomaly_corrective_action = "Verify,Clean and Tighten";
                                }

                                get_woline_issue.thermal_anomaly_recommendation = woline_issue.thermal_anomaly_recommendation;
                                get_woline_issue.thermal_classification_id = woline_issue.thermal_classification_id;
                                get_woline_issue.nec_violation = woline_issue.nec_violation;
                                get_woline_issue.osha_violation = woline_issue.osha_violation;
                                get_woline_issue.dynamic_field_json = woline_issue.dynamic_field_json;
                                get_woline_issue.thermal_anomaly_severity_criteria = woline_issue.thermal_anomaly_severity_criteria;

                                get_woline_issue.type_of_ultrasonic_anamoly = woline_issue.type_of_ultrasonic_anamoly;
                                get_woline_issue.size_of_ultrasonic_anamoly = woline_issue.size_of_ultrasonic_anamoly;
                                get_woline_issue.location_of_ultrasonic_anamoly = woline_issue.location_of_ultrasonic_anamoly;

                                // change issue title / description and issue type
                                if (get_woline_issue.nec_violation>0)
                                {
                                    get_woline_issue.issue_title = Issue_Title.NEC_Violation;
                                    get_woline_issue.issue_description = GlobalConstants.NECViolationDropdown(get_woline_issue.nec_violation.Value);
                                    get_woline_issue.issue_caused_id = (int)WOLine_Temp_Issue_Caused.NEC_Violation;
                                    get_woline_issue.issue_type = (int)WOLine_Temp_Issue_Type.Compliance;
                                }
                                if (get_woline_issue.osha_violation > 0)
                                {
                                    get_woline_issue.issue_title = Issue_Title.Osha_Violation;
                                    get_woline_issue.issue_description = GlobalConstants.OSHAViolationDropdown(get_woline_issue.osha_violation.Value);
                                    get_woline_issue.issue_caused_id = (int)WOLine_Temp_Issue_Caused.OSha_Violation;
                                    get_woline_issue.issue_type = (int)WOLine_Temp_Issue_Type.Compliance;
                                }
                                if (get_woline_issue.nfpa_70b_violation > 0)
                                {
                                    get_woline_issue.issue_title = Issue_Title.NFPA_70B_Violation;
                                    get_woline_issue.issue_description = GlobalConstants.NFPA70BViolation(get_woline_issue.nfpa_70b_violation.Value);
                                    get_woline_issue.issue_caused_id = (int)WOLine_Temp_Issue_Caused.NFPA_70B_Violation;
                                    get_woline_issue.issue_type = (int)WOLine_Temp_Issue_Type.Compliance;
                                }
                                if (get_woline_issue.issue_type == (int)WOLine_Temp_Issue_Type.Thermal_Anamoly)
                                {
                                    get_woline_issue.issue_title = Issue_Title.Thermal_Anamoly;
                                    get_woline_issue.issue_description = Enum.GetName(typeof(thermal_classification), get_woline_issue.thermal_classification_id);
                                    if (!String.IsNullOrEmpty(get_woline_issue.thermal_anomaly_problem_description))
                                    {
                                        get_woline_issue.issue_description = Enum.GetName(typeof(thermal_classification), get_woline_issue.thermal_classification_id) + ", " + get_woline_issue.thermal_anomaly_problem_description;// GlobalConstants.ThermalProbableCauseDropdown(get_woline_issue.thermal_anomaly_probable_cause.Value);
                                    }
                                    get_woline_issue.issue_caused_id = (int)WOLine_Temp_Issue_Caused.Thermal_Anamoly_Violation;
                                    get_woline_issue.issue_type = (int)WOLine_Temp_Issue_Type.Thermal_Anamoly;
                                }
                                if (get_woline_issue.issue_type == (int)WOLine_Temp_Issue_Type.ultrasonic_anamoly)
                                {
                                    get_woline_issue.issue_title = Issue_Title.Ultrasonic_Anamoly;
                                    get_woline_issue.issue_description = Enum.GetName(typeof(Ultrasonic_Anamoly_type), get_woline_issue.type_of_ultrasonic_anamoly);
                                    get_woline_issue.issue_caused_id = (int)WOLine_Temp_Issue_Caused.Ultrasonic_Anamoly;
                                    get_woline_issue.issue_type = (int)WOLine_Temp_Issue_Type.ultrasonic_anamoly;
                                }


                                if (get_asset.TempAsset != null)
                                {
                                    get_woline_issue.form_retrived_asset_name = get_asset.TempAsset.asset_name;
                                }
                                else
                                {
                                    get_woline_issue.form_retrived_asset_name = get_asset.asset_name;
                                }
                                var update_woline_issue = await _UoW.BaseGenericRepository<WOLineIssue>().Update(get_woline_issue);
                                _UoW.SaveChanges();
                            }
                            else
                            {
                                get_woline_issue.woonboardingassets_id = get_asset.woonboardingassets_id;
                                get_woline_issue.wo_id = get_asset.wo_id;
                                get_woline_issue.issue_status = (int)Status.open;
                                get_woline_issue.form_retrived_asset_name = get_asset.asset_name;
                                get_woline_issue.original_woonboardingassets_id = get_asset.woonboardingassets_id;
                                get_woline_issue.issue_type = woline_issue.issue_type;
                                get_woline_issue.original_wo_id = get_asset.wo_id;
                                get_woline_issue.original_woonboardingassets_id = get_asset.woonboardingassets_id;
                                get_woline_issue.issue_title = woline_issue.issue_title;
                                get_woline_issue.issue_description = woline_issue.issue_description;
                                get_woline_issue.is_issue_linked_for_fix = woline_issue.is_issue_linked_for_fix;
                                get_woline_issue.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                get_woline_issue.created_at = DateTime.UtcNow;
                                get_woline_issue.created_by = UpdatedGenericRequestmodel.CurrentUser.request_id;
                                get_woline_issue.thermal_anomaly_sub_componant = woline_issue.thermal_anomaly_sub_componant;
                                get_woline_issue.thermal_anomaly_measured_amps = woline_issue.thermal_anomaly_measured_amps;
                                get_woline_issue.thermal_anomaly_refrence_temps = woline_issue.thermal_anomaly_refrence_temps;
                                get_woline_issue.thermal_anomaly_measured_temps = woline_issue.thermal_anomaly_measured_temps;
                                get_woline_issue.thermal_anomaly_additional_ir_photo = woline_issue.thermal_anomaly_additional_ir_photo;
                                get_woline_issue.thermal_anomaly_location = woline_issue.thermal_anomaly_location;
                                get_woline_issue.thermal_anomaly_probable_cause = woline_issue.thermal_anomaly_probable_cause;
                                get_woline_issue.thermal_anomaly_recommendation = woline_issue.thermal_anomaly_recommendation;
                                get_woline_issue.thermal_classification_id = woline_issue.thermal_classification_id;
                                get_woline_issue.nec_violation = woline_issue.nec_violation;
                                get_woline_issue.nfpa_70b_violation = woline_issue.nfpa_70b_violation;
                                get_woline_issue.osha_violation = woline_issue.osha_violation;
                                get_woline_issue.dynamic_field_json = woline_issue.dynamic_field_json;
                                get_woline_issue.type_of_ultrasonic_anamoly = woline_issue.type_of_ultrasonic_anamoly;
                                get_woline_issue.size_of_ultrasonic_anamoly = woline_issue.size_of_ultrasonic_anamoly;
                                get_woline_issue.location_of_ultrasonic_anamoly = woline_issue.location_of_ultrasonic_anamoly;
                                get_woline_issue.thermal_anomaly_corrective_action = woline_issue.thermal_anomaly_corrective_action;
                                get_woline_issue.thermal_anomaly_problem_description = woline_issue.thermal_anomaly_problem_description;
                                get_woline_issue.thermal_anomaly_severity_criteria = woline_issue.thermal_anomaly_severity_criteria;
                                get_woline_issue.is_abc_phase_required_for_report = woline_issue.is_abc_phase_required_for_report;

                                if (!String.IsNullOrEmpty(woline_issue.thermal_anomaly_problem_description))
                                {
                                    if (woline_issue.thermal_anomaly_problem_description.ToLower().Replace(" ", "") == "internalflaw")
                                        get_woline_issue.thermal_anomaly_probable_cause = (int)Thermal_Anomaly_Probable_Cause.Internal_Flaw;
                                    else if (woline_issue.thermal_anomaly_problem_description.ToLower().Replace(" ", "") == "poorconnection")
                                        get_woline_issue.thermal_anomaly_probable_cause = (int)Thermal_Anomaly_Probable_Cause.Poor_Connection;
                                    else if (woline_issue.thermal_anomaly_problem_description.ToLower().Replace(" ", "") == "overload")
                                        get_woline_issue.thermal_anomaly_probable_cause = (int)Thermal_Anomaly_Probable_Cause.Overload;
                                    else
                                        get_woline_issue.thermal_anomaly_probable_cause = null;
                                }
                                if (!String.IsNullOrEmpty(woline_issue.thermal_anomaly_corrective_action))
                                {
                                    if (woline_issue.thermal_anomaly_corrective_action.ToLower().Replace(" ", "") == "continuetomonitor")
                                        get_woline_issue.thermal_anomaly_recommendation = (int)Thermal_Anomaly_Recommendation.Continue_to_Monitor;
                                    else if (woline_issue.thermal_anomaly_corrective_action.ToLower().Replace(" ", "") == "replacecomponent")
                                        get_woline_issue.thermal_anomaly_recommendation = (int)Thermal_Anomaly_Recommendation.Replace_Component;
                                    else if (woline_issue.thermal_anomaly_corrective_action.ToLower().Replace(" ", "") == "verifycleanandtighten")
                                        get_woline_issue.thermal_anomaly_recommendation = (int)Thermal_Anomaly_Recommendation.Verify_Clea_and_Tighten;
                                    else
                                        get_woline_issue.thermal_anomaly_recommendation = null;
                                }

                                if (get_woline_issue.thermal_anomaly_probable_cause != null && get_woline_issue.thermal_anomaly_probable_cause > 0 && String.IsNullOrEmpty(woline_issue.thermal_anomaly_problem_description))
                                {
                                    if (get_woline_issue.thermal_anomaly_probable_cause == (int)Thermal_Anomaly_Probable_Cause.Internal_Flaw)
                                        get_woline_issue.thermal_anomaly_problem_description = "Internal Flaw";
                                    else if (get_woline_issue.thermal_anomaly_probable_cause == (int)Thermal_Anomaly_Probable_Cause.Overload)
                                        get_woline_issue.thermal_anomaly_problem_description = "Overload";
                                    else if (get_woline_issue.thermal_anomaly_probable_cause == (int)Thermal_Anomaly_Probable_Cause.Poor_Connection)
                                        get_woline_issue.thermal_anomaly_problem_description = "Poor Connection";
                                }

                                if (get_woline_issue.thermal_anomaly_recommendation != null && get_woline_issue.thermal_anomaly_recommendation > 0 && String.IsNullOrEmpty(woline_issue.thermal_anomaly_corrective_action))
                                {
                                    if (get_woline_issue.thermal_anomaly_probable_cause == (int)Thermal_Anomaly_Recommendation.Continue_to_Monitor)
                                        get_woline_issue.thermal_anomaly_corrective_action = "Continue to Monitor";
                                    else if (get_woline_issue.thermal_anomaly_probable_cause == (int)Thermal_Anomaly_Recommendation.Replace_Component)
                                        get_woline_issue.thermal_anomaly_corrective_action = "Replace Component";
                                    else if (get_woline_issue.thermal_anomaly_probable_cause == (int)Thermal_Anomaly_Recommendation.Verify_Clea_and_Tighten)
                                        get_woline_issue.thermal_anomaly_corrective_action = "Verify,Clean and Tighten";
                                }

                                // change issue title / description and issue type
                                if (get_woline_issue.nec_violation > 0)
                                {
                                    get_woline_issue.issue_title = Issue_Title.NEC_Violation;
                                    get_woline_issue.issue_description = GlobalConstants.NECViolationDropdown(get_woline_issue.nec_violation.Value);
                                    get_woline_issue.issue_caused_id = (int)WOLine_Temp_Issue_Caused.NEC_Violation;
                                    get_woline_issue.issue_type = (int)WOLine_Temp_Issue_Type.Compliance;
                                }
                                if (get_woline_issue.osha_violation > 0)
                                {
                                    get_woline_issue.issue_title = Issue_Title.Osha_Violation;
                                    get_woline_issue.issue_description = GlobalConstants.OSHAViolationDropdown(get_woline_issue.osha_violation.Value);
                                    get_woline_issue.issue_caused_id = (int)WOLine_Temp_Issue_Caused.OSha_Violation;
                                    get_woline_issue.issue_type = (int)WOLine_Temp_Issue_Type.Compliance;
                                }
                                if (get_woline_issue.nfpa_70b_violation > 0)
                                {
                                    get_woline_issue.issue_title = Issue_Title.NFPA_70B_Violation;
                                    get_woline_issue.issue_description = GlobalConstants.NFPA70BViolation(get_woline_issue.nfpa_70b_violation.Value);
                                    get_woline_issue.issue_caused_id = (int)WOLine_Temp_Issue_Caused.NFPA_70B_Violation;
                                    get_woline_issue.issue_type = (int)WOLine_Temp_Issue_Type.Compliance;
                                }
                                if (get_woline_issue.issue_type == (int)WOLine_Temp_Issue_Type.Thermal_Anamoly)
                                {
                                    get_woline_issue.issue_title = Issue_Title.Thermal_Anamoly;
                                    get_woline_issue.issue_description = Enum.GetName(typeof(thermal_classification), get_woline_issue.thermal_classification_id);
                                    if (!String.IsNullOrEmpty(get_woline_issue.thermal_anomaly_problem_description))
                                    {
                                        get_woline_issue.issue_description = Enum.GetName(typeof(thermal_classification), get_woline_issue.thermal_classification_id) + ", " + get_woline_issue.thermal_anomaly_problem_description;// GlobalConstants.ThermalProbableCauseDropdown(get_woline_issue.thermal_anomaly_probable_cause.Value);
                                    }
                                    get_woline_issue.issue_caused_id = (int)WOLine_Temp_Issue_Caused.Thermal_Anamoly_Violation;
                                    get_woline_issue.issue_type = (int)WOLine_Temp_Issue_Type.Thermal_Anamoly;
                                }
                                if (get_woline_issue.issue_type == (int)WOLine_Temp_Issue_Type.Thermal_Anamoly)
                                {
                                    get_woline_issue.issue_title = Issue_Title.Thermal_Anamoly;
                                    get_woline_issue.issue_description = Enum.GetName(typeof(thermal_classification), get_woline_issue.thermal_classification_id);
                                    if (!String.IsNullOrEmpty(get_woline_issue.thermal_anomaly_problem_description))
                                    {
                                        get_woline_issue.issue_description = Enum.GetName(typeof(thermal_classification), get_woline_issue.thermal_classification_id) + ", " + get_woline_issue.thermal_anomaly_problem_description;// GlobalConstants.ThermalProbableCauseDropdown(get_woline_issue.thermal_anomaly_probable_cause.Value);
                                    }
                                    get_woline_issue.issue_caused_id = (int)WOLine_Temp_Issue_Caused.Thermal_Anamoly_Violation;
                                    get_woline_issue.issue_type = (int)WOLine_Temp_Issue_Type.Thermal_Anamoly;
                                }
                                if (get_woline_issue.issue_type == (int)WOLine_Temp_Issue_Type.ultrasonic_anamoly)
                                {
                                    get_woline_issue.issue_title = Issue_Title.Ultrasonic_Anamoly;
                                    get_woline_issue.issue_description = Enum.GetName(typeof(Ultrasonic_Anamoly_type), get_woline_issue.type_of_ultrasonic_anamoly);
                                    get_woline_issue.issue_caused_id = (int)WOLine_Temp_Issue_Caused.Ultrasonic_Anamoly;
                                    get_woline_issue.issue_type = (int)WOLine_Temp_Issue_Type.ultrasonic_anamoly;
                                }
                                if (get_asset.TempAsset != null)
                                {
                                    get_woline_issue.form_retrived_asset_name = get_asset.TempAsset.asset_name;
                                }
                                else
                                {
                                    get_woline_issue.form_retrived_asset_name = get_asset.asset_name;
                                }
                                var insert_woline_issue = await _UoW.BaseGenericRepository<WOLineIssue>().Insert(get_woline_issue);
                                _UoW.SaveChanges();
                            }


                            //Add/Delete before/after images in WOlineIssueImagesMapping table 
                            if (requestmodel.asset_image_list != null && requestmodel.asset_image_list.Count > 0 && (woline_issue.issue_image_list==null || woline_issue.issue_image_list.Count == 0)//for backward comaptibility woline_issue.issue_image_list.Count == 0
                                                                                                                                                            )
                            {
                                int asset_photo_type = 0;
                                if(woline_issue.issue_type == (int)WOLine_Temp_Issue_Type.Repair)
                                {
                                    asset_photo_type = (int)AssetPhotoType.Repair_Woline_Issue_Photo;
                                }
                                else if(woline_issue.issue_type == (int)WOLine_Temp_Issue_Type.Replace)
                                {
                                    asset_photo_type = (int)AssetPhotoType.Replace_Woline_Issue_photo;
                                }
                                else if (woline_issue.issue_type == (int)WOLine_Temp_Issue_Type.Other)
                                {
                                    asset_photo_type = (int)AssetPhotoType.Other_Woline_Issue_photo;
                                }

                                // we are using same list for woline_issue_images for FE convnience 
                                var woline_issue_image_list = requestmodel.asset_image_list.Where(x => x.asset_photo_type == asset_photo_type).ToList();

                                var new_imge_list = woline_issue_image_list.Where(x => x.woline_issue_image_mapping_id == null).ToList();
                                var requested_deleted_image_list = woline_issue_image_list.Where(x => x.woline_issue_image_mapping_id != null && x.is_deleted == true).ToList();

                                //add before/after images
                                if (new_imge_list.Count > 0)
                                {
                                    foreach (var new_imge in new_imge_list)
                                    {
                                        WOlineIssueImagesMapping WOlineIssueImagesMapping = new WOlineIssueImagesMapping();

                                        WOlineIssueImagesMapping.wo_line_issue_id = get_woline_issue.wo_line_issue_id;
                                        WOlineIssueImagesMapping.image_duration_type_id = new_imge.image_duration_type_id;
                                        WOlineIssueImagesMapping.image_file_name = new_imge.asset_photo;
                                        WOlineIssueImagesMapping.image_thumbnail_file_name = new_imge.asset_thumbnail_photo;
                                        WOlineIssueImagesMapping.created_at = DateTime.UtcNow;
                                        WOlineIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                        WOlineIssueImagesMapping.is_deleted = false;
                                        WOlineIssueImagesMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                                        var insert = await _UoW.BaseGenericRepository<WOlineIssueImagesMapping>().Insert(WOlineIssueImagesMapping);
                                        _UoW.SaveChanges();
                                    }
                                }
                                //remove before/after images
                                if (requested_deleted_image_list.Count > 0)
                                {
                                    var requested_deleted_image_mapping_ids = requested_deleted_image_list.Select(x => x.woline_issue_image_mapping_id.Value).ToList();

                                    var get_requested_deleted_image = _UoW.WorkOrderRepository.GetWOlineIssueImages(requested_deleted_image_mapping_ids);

                                    foreach (var img in get_requested_deleted_image)
                                    {
                                        img.is_deleted = true;
                                        img.modified_at = DateTime.UtcNow;
                                        img.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                        var update = await _UoW.BaseGenericRepository<WOlineIssueImagesMapping>().Update(img);
                                        _UoW.SaveChanges();
                                    }
                                }
                            }

                            // for new flow for multiple issue images in ob ir woline
                            if(woline_issue.issue_image_list != null && woline_issue.issue_image_list.Count > 0)
                            {
                                int asset_photo_type = 0;
                                if (woline_issue.issue_type == (int)WOLine_Temp_Issue_Type.Repair)
                                {
                                    asset_photo_type = (int)AssetPhotoType.Repair_Woline_Issue_Photo;
                                }
                                else if (woline_issue.issue_type == (int)WOLine_Temp_Issue_Type.Replace)
                                {
                                    asset_photo_type = (int)AssetPhotoType.Replace_Woline_Issue_photo;
                                }
                                else if (woline_issue.issue_type == (int)WOLine_Temp_Issue_Type.Other)
                                {
                                    asset_photo_type = (int)AssetPhotoType.Other_Woline_Issue_photo;
                                }
                                else if (woline_issue.issue_type == (int)WOLine_Temp_Issue_Type.Thermal_Anamoly)
                                {
                                    asset_photo_type = (int)AssetPhotoType.Thermal_Anomly_Photo;
                                }
                                else if (woline_issue.issue_type == (int)WOLine_Temp_Issue_Type.Compliance && woline_issue.issue_caused_id == (int)WOLine_Temp_Issue_Caused.NEC_Violation)
                                {
                                    asset_photo_type = (int)AssetPhotoType.NEC_Violation_Photo;
                                }
                                else if (woline_issue.issue_type == (int)WOLine_Temp_Issue_Type.Compliance && woline_issue.issue_caused_id == (int)WOLine_Temp_Issue_Caused.OSha_Violation)
                                {
                                    asset_photo_type = (int)AssetPhotoType.OSHA_Violation_Photo;
                                }
                                else if (woline_issue.issue_type == (int)WOLine_Temp_Issue_Type.Compliance && woline_issue.issue_caused_id == (int)WOLine_Temp_Issue_Caused.NFPA_70B_Violation)
                                {
                                    asset_photo_type = (int)AssetPhotoType.NFPA_70B_Violation_Photo;
                                }
                                else if (woline_issue.issue_type == (int)WOLine_Temp_Issue_Type.ultrasonic_anamoly)
                                {
                                    asset_photo_type = (int)AssetPhotoType.Ultrasonic_anamoly_photo;
                                }

                                // we are using same list for woline_issue_images for FE convnience 
                                var woline_issue_image_list = woline_issue.issue_image_list.Where(x => x.asset_photo_type == asset_photo_type).ToList();

                                var new_imge_list = woline_issue_image_list.Where(x => x.woline_issue_image_mapping_id == null).ToList();
                                var requested_deleted_image_list = woline_issue_image_list.Where(x => x.woline_issue_image_mapping_id != null && x.is_deleted == true).ToList();

                                //add before/after images
                                if (new_imge_list.Count > 0)
                                {
                                    foreach (var new_imge in new_imge_list)
                                    {
                                        WOlineIssueImagesMapping WOlineIssueImagesMapping = new WOlineIssueImagesMapping();

                                        WOlineIssueImagesMapping.wo_line_issue_id = get_woline_issue.wo_line_issue_id;
                                        WOlineIssueImagesMapping.image_duration_type_id = new_imge.image_duration_type_id;
                                        WOlineIssueImagesMapping.image_file_name = new_imge.asset_photo; 
                                        WOlineIssueImagesMapping.image_thumbnail_file_name = new_imge.asset_thumbnail_photo;
                                        WOlineIssueImagesMapping.irwoimagelabelmapping_id = new_imge.irwoimagelabelmapping_id;
                                        
                                        if (new_imge.image_duration_type_id == (int)IssueImageDuration.ir_visual && (new_imge.irwoimagelabelmapping_id==null || new_imge.irwoimagelabelmapping_id == Guid.Empty))
                                        {   // FE passing ir_img_label in "asset_photo" and visual_label in "asset_thumbnail_photo" key
                                            var get_IRWOImg = _UoW.WorkOrderRepository.GetIRWOImageLabelMappingByName(get_asset.woonboardingassets_id, new_imge.asset_photo, new_imge.asset_thumbnail_photo);
                                            if (get_IRWOImg != null)
                                            {
                                                WOlineIssueImagesMapping.irwoimagelabelmapping_id = get_IRWOImg.irwoimagelabelmapping_id;
                                                WOlineIssueImagesMapping.image_file_name = null;
                                                WOlineIssueImagesMapping.image_thumbnail_file_name = null;
                                            }
                                        }

                                        //WOlineIssueImagesMapping.visual_imgage_name = new_imge.visual_imgage_name;
                                        //WOlineIssueImagesMapping.visual_thumbnail_imgage_name = new_imge.visual_thumbnail_imgage_name;
                                        //WOlineIssueImagesMapping.s3_image_folder_name_irvisual = UpdatedGenericRequestmodel.CurrentUser.site_id+"/"+requestmodel.wo_id;
                                        WOlineIssueImagesMapping.created_at = DateTime.UtcNow;
                                        WOlineIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                        WOlineIssueImagesMapping.is_deleted = false;
                                        WOlineIssueImagesMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                                        var insert = await _UoW.BaseGenericRepository<WOlineIssueImagesMapping>().Insert(WOlineIssueImagesMapping);
                                        _UoW.SaveChanges();
                                    }
                                }
                                //remove before/after images
                                if (requested_deleted_image_list.Count > 0)
                                {
                                    var requested_deleted_image_mapping_ids = requested_deleted_image_list.Select(x => x.woline_issue_image_mapping_id.Value).ToList();

                                    var get_requested_deleted_image = _UoW.WorkOrderRepository.GetWOlineIssueImages(requested_deleted_image_mapping_ids);

                                    foreach (var img in get_requested_deleted_image)
                                    {
                                        img.is_deleted = true;
                                        img.modified_at = DateTime.UtcNow;
                                        img.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                        var update = await _UoW.BaseGenericRepository<WOlineIssueImagesMapping>().Update(img);
                                        _UoW.SaveChanges();
                                    }
                                }
                            }

                        }
                    }

                    // new flow for location is changed as temp location is there in woline
                    if (requestmodel.component_level_type_id != (int)ComponentLevelTypes.SublevelComponent)
                    {
                        if (requestmodel.temp_formiobuilding_id != null && requestmodel.temp_formiofloor_id != null && requestmodel.temp_formioroom_id != null)
                        {
                            if (get_asset.WOOBAssetTempFormIOBuildingMapping != null)
                            {
                                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id = requestmodel.temp_formiobuilding_id;
                                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id = requestmodel.temp_formiofloor_id;
                                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id = requestmodel.temp_formioroom_id;
                                get_asset.WOOBAssetTempFormIOBuildingMapping.created_at = DateTime.UtcNow;
                            }
                            else
                            {
                                get_asset.WOOBAssetTempFormIOBuildingMapping = new WOOBAssetTempFormIOBuildingMapping();
                                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id = requestmodel.temp_formiobuilding_id;
                                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id = requestmodel.temp_formiofloor_id;
                                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id = requestmodel.temp_formioroom_id;
                                get_asset.WOOBAssetTempFormIOBuildingMapping.created_at = DateTime.UtcNow;

                            }


                            /// add section data
                            ///  
                            if (String.IsNullOrEmpty(requestmodel.section))
                            {
                                requestmodel.section = "Default";
                            }
                            if (!String.IsNullOrEmpty(requestmodel.section))
                            {
                                TempFormIOSections TempFormIOSections = _UoW.WorkOrderRepository.GetTempSectionByName(requestmodel.section, requestmodel.temp_formioroom_id.Value);
                                if (TempFormIOSections == null)
                                {
                                    TempFormIOSections = new TempFormIOSections();
                                    TempFormIOSections.temp_formio_section_name = requestmodel.section;
                                    TempFormIOSections.temp_formioroom_id = requestmodel.temp_formioroom_id;
                                    TempFormIOSections.wo_id = get_asset.wo_id;
                                    TempFormIOSections.created_at = DateTime.UtcNow;
                                    TempFormIOSections.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                    TempFormIOSections.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                    var insertsection = await _UoW.BaseGenericRepository<TempFormIOSections>().Insert(TempFormIOSections);
                                    _UoW.SaveChanges();
                                }
                                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id = TempFormIOSections.temp_formiosection_id;
                            }
                        }
                        else   /// old flow
                        {
                            // location from asset_id
                            if (requestmodel.asset_id != null && requestmodel.asset_id != Guid.Empty && requestmodel.inspection_type != (int)MWO_inspection_wo_type.Inspection
                                && requestmodel.inspection_type != (int)MWO_inspection_wo_type.OnBoarding)
                            {
                                var get_asset_location_data = _UoW.WorkOrderRepository.GetAssetLocationDataById(requestmodel.asset_id.Value);

                                get_asset.building = get_asset_location_data.FormIOBuildings.formio_building_name;
                                get_asset.floor = get_asset_location_data.FormIOFloors.formio_floor_name;
                                get_asset.room = get_asset_location_data.FormIORooms.formio_room_name;
                                get_asset.section = get_asset_location_data.FormIOSections.formio_section_name;

                                //// insert location mapping 
                                ///
                                if (get_asset.WOLineBuildingMapping != null) // update 
                                {
                                    get_asset.WOLineBuildingMapping.formiobuilding_id = get_asset_location_data.formiobuilding_id;
                                    get_asset.WOLineBuildingMapping.formiofloor_id = get_asset_location_data.formiofloor_id;
                                    get_asset.WOLineBuildingMapping.formioroom_id = get_asset_location_data.formioroom_id;
                                    get_asset.WOLineBuildingMapping.formiosection_id = get_asset_location_data.formiosection_id;
                                    get_asset.WOLineBuildingMapping.created_at = DateTime.UtcNow;
                                    var update_location_mapping = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_asset);
                                    _UoW.SaveChanges();
                                }
                                else // insert
                                {
                                    WOLineBuildingMapping WOLineBuildingMapping = new WOLineBuildingMapping();
                                    WOLineBuildingMapping.formiobuilding_id = get_asset_location_data.formiobuilding_id;
                                    WOLineBuildingMapping.formiofloor_id = get_asset_location_data.formiofloor_id;
                                    WOLineBuildingMapping.formioroom_id = get_asset_location_data.formioroom_id;
                                    WOLineBuildingMapping.formiosection_id = get_asset_location_data.formiosection_id;
                                    WOLineBuildingMapping.woonboardingassets_id = get_asset.woonboardingassets_id;
                                    WOLineBuildingMapping.created_at = DateTime.UtcNow;
                                    var insert_location_mapping = await _UoW.BaseGenericRepository<WOLineBuildingMapping>().Insert(WOLineBuildingMapping);
                                    _UoW.SaveChanges();
                                }
                            }//asset's location ^
                            else
                            {  //default location |

                                #region add building mapping
                                // insert section in master table
                                // check if section already exist or not 
                                if (requestmodel.formioroom_id != null && requestmodel.formioroom_id > 0) // request from mobile
                                {
                                    FormIOSections FormIOSections = null;
                                    FormIOSections = _UoW.WorkOrderRepository.GetFormIOSectionByName(get_asset.section, requestmodel.formioroom_id.Value);
                                    if (FormIOSections == null)
                                    {
                                        FormIOSections = new FormIOSections();
                                        FormIOSections.formio_section_name = get_asset.section;
                                        FormIOSections.formioroom_id = requestmodel.formioroom_id.Value;
                                        FormIOSections.created_at = DateTime.UtcNow;
                                        FormIOSections.site_id = get_asset.site_id;
                                        FormIOSections.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                        var insertsection = await _UoW.BaseGenericRepository<FormIOSections>().Insert(FormIOSections);
                                        _UoW.SaveChanges();
                                    }
                                    //// insert location mapping 
                                    ///
                                    if (get_asset.WOLineBuildingMapping != null) // update 
                                    {
                                        get_asset.WOLineBuildingMapping.formiosection_id = FormIOSections.formiosection_id;
                                        get_asset.WOLineBuildingMapping.created_at = DateTime.UtcNow;
                                        var update_location_mapping = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_asset);
                                        _UoW.SaveChanges();
                                    }
                                    else // insert
                                    {
                                        WOLineBuildingMapping WOLineBuildingMapping = new WOLineBuildingMapping();
                                        WOLineBuildingMapping.formiobuilding_id = requestmodel.formiobuilding_id;
                                        WOLineBuildingMapping.formiofloor_id = requestmodel.formiofloor_id;
                                        WOLineBuildingMapping.formioroom_id = requestmodel.formioroom_id;
                                        WOLineBuildingMapping.formiosection_id = FormIOSections.formiosection_id;
                                        WOLineBuildingMapping.woonboardingassets_id = get_asset.woonboardingassets_id;
                                        WOLineBuildingMapping.created_at = DateTime.UtcNow;
                                        var insert_location_mapping = await _UoW.BaseGenericRepository<WOLineBuildingMapping>().Insert(WOLineBuildingMapping);
                                        _UoW.SaveChanges();
                                    }
                                }
                                else // request froom web
                                {
                                    /// commenting this as now whatever will happen in temp table will not reflect in main tables 
                                    /// ie. we will not store these location details in main location tables
                                    #region Insert in main location details
                                    /*
                                    if (String.IsNullOrEmpty(requestmodel.building))
                                    {
                                        requestmodel.building = "Default";
                                    }
                                    if (String.IsNullOrEmpty(requestmodel.floor))
                                    {
                                        requestmodel.floor = "Default";
                                    }
                                    if (String.IsNullOrEmpty(requestmodel.room))
                                    {
                                        requestmodel.room = "Default";
                                    }
                                    if (String.IsNullOrEmpty(requestmodel.section))
                                    {
                                        requestmodel.section = "Default";
                                    }
                                    FormIOBuildings FormIOBuildings = null;
                                    FormIOFloors FormIOFloors = null;
                                    FormIORooms FormIORooms = null;
                                    FormIOSections FormIOSections = null;
                                    if (!String.IsNullOrEmpty(requestmodel.building))
                                    {
                                        FormIOBuildings = _UoW.WorkOrderRepository.GetFormIOBuildingByName(requestmodel.building);
                                        if (FormIOBuildings == null)
                                        {
                                            FormIOBuildings = new FormIOBuildings();
                                            FormIOBuildings.formio_building_name = requestmodel.building;
                                            FormIOBuildings.created_at = DateTime.UtcNow;
                                            FormIOBuildings.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                            FormIOBuildings.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                            var insertbuilding = await _UoW.BaseGenericRepository<FormIOBuildings>().Insert(FormIOBuildings);
                                            _UoW.SaveChanges();
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(requestmodel.floor))
                                    {
                                        FormIOFloors = _UoW.WorkOrderRepository.GetFormIOFloorByName(requestmodel.floor, FormIOBuildings.formiobuilding_id);
                                        if (FormIOFloors == null)
                                        {
                                            FormIOFloors = new FormIOFloors();
                                            FormIOFloors.formio_floor_name = requestmodel.floor;
                                            FormIOFloors.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                                            FormIOFloors.created_at = DateTime.UtcNow;
                                            FormIOFloors.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                            FormIOFloors.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                            var insertfloor = await _UoW.BaseGenericRepository<FormIOFloors>().Insert(FormIOFloors);
                                            _UoW.SaveChanges();
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(requestmodel.room))
                                    {
                                        FormIORooms = _UoW.WorkOrderRepository.GetFormIORoomByName(requestmodel.room, FormIOFloors.formiofloor_id);
                                        if (FormIORooms == null)
                                        {
                                            FormIORooms = new FormIORooms();
                                            FormIORooms.formio_room_name = requestmodel.room;
                                            FormIORooms.formiofloor_id = FormIOFloors.formiofloor_id;
                                            FormIORooms.created_at = DateTime.UtcNow;
                                            FormIORooms.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                            FormIORooms.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                            var insertroom = await _UoW.BaseGenericRepository<FormIORooms>().Insert(FormIORooms);
                                            _UoW.SaveChanges();
                                        }
                                    }
                                    if (!String.IsNullOrEmpty(requestmodel.section))
                                    {
                                        FormIOSections = _UoW.WorkOrderRepository.GetFormIOSectionByName(requestmodel.section, FormIORooms.formioroom_id);
                                        if (FormIOSections == null)
                                        {
                                            FormIOSections = new FormIOSections();
                                            FormIOSections.formio_section_name = requestmodel.section;
                                            FormIOSections.formioroom_id = FormIORooms.formioroom_id;
                                            FormIOSections.created_at = DateTime.UtcNow;
                                            FormIOSections.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                            FormIOSections.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                            var insertroom = await _UoW.BaseGenericRepository<FormIOSections>().Insert(FormIOSections);
                                            _UoW.SaveChanges();
                                        }
                                    }

                                    get_asset.building = requestmodel.building;
                                    get_asset.floor = requestmodel.floor;
                                    get_asset.room = requestmodel.room;
                                    get_asset.section = requestmodel.section;

                                    //// insert location mapping 
                                    ///
                                    if (get_asset.WOLineBuildingMapping != null) // update 
                                    {
                                        get_asset.WOLineBuildingMapping.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                                        get_asset.WOLineBuildingMapping.formiofloor_id = FormIOFloors.formiofloor_id;
                                        get_asset.WOLineBuildingMapping.formioroom_id = FormIORooms.formioroom_id;
                                        get_asset.WOLineBuildingMapping.formiosection_id = FormIOSections.formiosection_id;
                                        get_asset.WOLineBuildingMapping.created_at = DateTime.UtcNow;
                                        var update_location_mapping = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_asset);
                                        _UoW.SaveChanges();
                                    }
                                    else // insert
                                    {
                                        WOLineBuildingMapping WOLineBuildingMapping = new WOLineBuildingMapping();
                                        WOLineBuildingMapping.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                                        WOLineBuildingMapping.formiofloor_id = FormIOFloors.formiofloor_id;
                                        WOLineBuildingMapping.formioroom_id = FormIORooms.formioroom_id;
                                        WOLineBuildingMapping.formiosection_id = FormIOSections.formiosection_id;
                                        WOLineBuildingMapping.woonboardingassets_id = get_asset.woonboardingassets_id;
                                        WOLineBuildingMapping.created_at = DateTime.UtcNow;
                                        var insert_location_mapping = await _UoW.BaseGenericRepository<WOLineBuildingMapping>().Insert(WOLineBuildingMapping);
                                        _UoW.SaveChanges();
                                    }
                                    */
                                    #endregion Insert in main location details
                                }
                                #endregion add building mapping
                            }
                        }

                    }


                    #region Create/Update temp Issues
                    if (!requestmodel.is_request_from_issue_service) // create temp issue if request is not from isseu service 
                    {
                        // if issue is created from new flow(one to many issue creation) then do not execute to create temp issue.
                        woline_issue_request_obj any_issue_in_woline_issue_list = null;
                        if (requestmodel.woline_issue_list != null)
                        {
                            any_issue_in_woline_issue_list = requestmodel.woline_issue_list.Where(x => x.issue_type == (int)WOLine_Temp_Issue_Type.Thermal_Anamoly
                                                                                                || x.issue_type == (int)WOLine_Temp_Issue_Type.Compliance
                                                                                                ).FirstOrDefault();
                        }
                        if(any_issue_in_woline_issue_list == null)
                        {
                            AddUpdateTempIssueFromWORequestmodel tempIssueRequest = OBWOMakeRequestmodelforWOlineIssue(get_asset.woonboardingassets_id);
                            if (tempIssueRequest.list_temp_issue != null && tempIssueRequest.list_temp_issue.Count > 0)
                            {
                                await AddUpdateTempIssueFromWO(tempIssueRequest);
                            }
                        }
                    }
                    #endregion Create/Update temp Issues

                    if (requestmodel.asset_image_list != null && requestmodel.asset_image_list.Count > 0)
                    {
                        List<WOOnboardingAssetsImagesMapping> db_images = new List<WOOnboardingAssetsImagesMapping>();
                        if (get_asset.WOOnboardingAssetsImagesMapping != null)
                        {
                            db_images = get_asset.WOOnboardingAssetsImagesMapping.ToList();
                        }
                        // we are not adding woline_issue_images(repair,replace,other) in this table (WOOnboardingAssetsImagesMapping)
                        var added_images = requestmodel.asset_image_list.Where(x => x.woonboardingassetsimagesmapping_id == null &&
                        (x.asset_photo_type != (int)AssetPhotoType.Repair_Woline_Issue_Photo && x.asset_photo_type != (int)AssetPhotoType.Replace_Woline_Issue_photo
                        && x.asset_photo_type != (int)AssetPhotoType.Other_Woline_Issue_photo)).ToList();  // insert images 
                        
                        if (added_images.Count > 0)   // insert images 
                        {
                            foreach (var image in added_images)   // insert images 
                            {
                                WOOnboardingAssetsImagesMapping WOOnboardingAssetsImagesMapping = new WOOnboardingAssetsImagesMapping();
                                WOOnboardingAssetsImagesMapping.asset_photo = image.asset_photo;
                                WOOnboardingAssetsImagesMapping.image_duration_type_id = image.image_duration_type_id;
                                WOOnboardingAssetsImagesMapping.asset_thumbnail_photo = image.asset_thumbnail_photo;
                                WOOnboardingAssetsImagesMapping.asset_photo_type = image.asset_photo_type;
                                WOOnboardingAssetsImagesMapping.image_extracted_json = image.image_extracted_json;
                                WOOnboardingAssetsImagesMapping.image_actual_json = image.image_actual_json;
                                WOOnboardingAssetsImagesMapping.created_at = DateTime.UtcNow;
                                WOOnboardingAssetsImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                WOOnboardingAssetsImagesMapping.is_deleted = false;
                                WOOnboardingAssetsImagesMapping.woonboardingassets_id = get_asset.woonboardingassets_id;

                                var insert = await _UoW.BaseGenericRepository<WOOnboardingAssetsImagesMapping>().Insert(WOOnboardingAssetsImagesMapping);
                                _UoW.SaveChanges();
                            }
                        }

                        var update_images = requestmodel.asset_image_list.Where(x => x.woonboardingassetsimagesmapping_id != null &&
                         (x.asset_photo_type != (int)AssetPhotoType.Repair_Woline_Issue_Photo && x.asset_photo_type != (int)AssetPhotoType.Replace_Woline_Issue_photo
                         && x.asset_photo_type != (int)AssetPhotoType.Other_Woline_Issue_photo)).ToList();  // update images which is deleted
                       
                        if (update_images != null && update_images.Count > 0)
                        {
                            foreach (var image in update_images)
                            {
                                var db_image = db_images.Where(q => q.woonboardingassetsimagesmapping_id == image.woonboardingassetsimagesmapping_id).FirstOrDefault();
                                db_image.is_deleted = image.is_deleted;
                                db_image.image_extracted_json = image.image_extracted_json;
                                db_image.image_actual_json = image.image_actual_json;
                                db_image.modified_at = DateTime.UtcNow;
                                db_image.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                var update_img = await _UoW.BaseGenericRepository<WOOnboardingAssetsImagesMapping>().Update(db_image);
                                _UoW.SaveChanges();
                            }
                        }
                    }
                    

                    if(requestmodel.component_level_type_id == (int)ComponentLevelTypes.ToplevelComponent)
                    {
                        // delete maping
                        if (get_asset.WOlineTopLevelcomponentMapping != null && get_asset.WOlineTopLevelcomponentMapping.Count() > 0)
                        {
                            var existing_toplevel_componant = get_asset.WOlineTopLevelcomponentMapping.Where(x => !x.is_deleted).ToList();
                            if (existing_toplevel_componant.Count > 0)
                            {
                                foreach (var top_level in existing_toplevel_componant)
                                {
                                    // delete top level mapping
                                    top_level.is_deleted = true;
                                    top_level.updated_at = DateTime.UtcNow;
                                    top_level.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                    var update_img = await _UoW.BaseGenericRepository<WOlineTopLevelcomponentMapping>().Update(top_level);
                                    _UoW.SaveChanges();

                                    // delete sublevel mapping from top level asset
                                    var get_sublveel_mapping = _UoW.WorkOrderRepository.GetSublevelMappping(top_level.toplevelcomponent_asset_id, get_asset.woonboardingassets_id);
                                    if (get_sublveel_mapping != null)
                                    {
                                        get_sublveel_mapping.is_deleted = true;
                                        get_sublveel_mapping.updated_at = DateTime.UtcNow;
                                        get_sublveel_mapping.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                        var update_sublevel = await _UoW.BaseGenericRepository<WOlineSubLevelcomponentMapping>().Update(get_sublveel_mapping);
                                        _UoW.SaveChanges();
                                    }
                                }
                            }
                        }

                    }


                    if (requestmodel.wo_ob_asset_toplevelcomponent_mapping != null && requestmodel.wo_ob_asset_toplevelcomponent_mapping.Count > 0)
                    {
                        if (get_asset.WOlineSubLevelcomponentMapping != null && get_asset.WOlineSubLevelcomponentMapping.Count() > 0)
                        {
                            // delete sub level componant if any
                            //var existing_sublevel_componant = get_asset.WOlineSubLevelcomponentMapping.Where(x => !x.is_deleted).ToList();
                            var existing_sublevel_componant = get_asset.WOlineSubLevelcomponentMapping.ToList();
                            if (existing_sublevel_componant.Count > 0)
                            {
                                foreach (var sub_level in existing_sublevel_componant)
                                {
                                    sub_level.is_deleted = true;
                                    sub_level.updated_at = DateTime.UtcNow;
                                    sub_level.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                    var update_img = await _UoW.BaseGenericRepository<WOlineSubLevelcomponentMapping>().Update(sub_level);
                                    _UoW.SaveChanges();

                                    // check if sub_level is from wo line if it is then remove parent from that woline
                                    if (sub_level.is_sublevelcomponent_from_ob_wo)
                                    {
                                        //
                                        var get_woline = _UoW.WorkOrderRepository.GetWolineforUpdateComponant(sub_level.sublevelcomponent_asset_id);
                                        if (get_woline != null)
                                        {
                                            get_woline.WOlineTopLevelcomponentMapping.ToList().ForEach(x => x.is_deleted = true);
                                            get_woline.modified_at = DateTime.UtcNow;
                                            var update = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_woline);
                                            _UoW.SaveChanges();
                                        }
                                    }
                                }
                            }
                        }
                        List<WOlineTopLevelcomponentMapping> db_asset_toplevel = new List<WOlineTopLevelcomponentMapping>();
                        if (get_asset.WOlineTopLevelcomponentMapping != null)
                        {
                            db_asset_toplevel = get_asset.WOlineTopLevelcomponentMapping.ToList();
                        }

                        var added_ob_asset_toplevel = requestmodel.wo_ob_asset_toplevelcomponent_mapping.Where(x => x.woline_toplevelcomponent_mapping_id == null || x.woline_toplevelcomponent_mapping_id == Guid.Empty).ToList();  // insert images 
                        if (added_ob_asset_toplevel.Count > 0)   // insert images 
                        {
                            foreach (var asset_top_level in added_ob_asset_toplevel)   // insert images 
                            {
                                WOlineTopLevelcomponentMapping WOlinetoplevelcomponentMapping = new WOlineTopLevelcomponentMapping();
                                WOlinetoplevelcomponentMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                WOlinetoplevelcomponentMapping.created_at = DateTime.UtcNow;
                                WOlinetoplevelcomponentMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                WOlinetoplevelcomponentMapping.is_deleted = false;
                                WOlinetoplevelcomponentMapping.woonboardingassets_id = get_asset.woonboardingassets_id;
                                WOlinetoplevelcomponentMapping.toplevelcomponent_asset_id = asset_top_level.toplevelcomponent_asset_id;
                                WOlinetoplevelcomponentMapping.is_toplevelcomponent_from_ob_wo = asset_top_level.is_toplevelcomponent_from_ob_wo;

                                var insert = await _UoW.BaseGenericRepository<WOlineTopLevelcomponentMapping>().Insert(WOlinetoplevelcomponentMapping);
                                _UoW.SaveChanges();

                                if (asset_top_level.is_toplevelcomponent_from_ob_wo)
                                {
                                    WOlineSubLevelcomponentMapping WOlinesublevelcomponentMapping1 = new WOlineSubLevelcomponentMapping();
                                    WOlinesublevelcomponentMapping1.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                    WOlinesublevelcomponentMapping1.created_at = DateTime.UtcNow;
                                    WOlinesublevelcomponentMapping1.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                    WOlinesublevelcomponentMapping1.is_deleted = false;
                                    WOlinesublevelcomponentMapping1.woonboardingassets_id = asset_top_level.toplevelcomponent_asset_id;
                                    WOlinesublevelcomponentMapping1.sublevelcomponent_asset_id = get_asset.woonboardingassets_id;
                                    WOlinesublevelcomponentMapping1.is_sublevelcomponent_from_ob_wo = true;


                                    var insert_sub = await _UoW.BaseGenericRepository<WOlineSubLevelcomponentMapping>().Insert(WOlinesublevelcomponentMapping1);
                                    _UoW.SaveChanges();
                                }
                            }
                        }
                        var update_ob_asset_toplevel = requestmodel.wo_ob_asset_toplevelcomponent_mapping.Where(x => x.woline_toplevelcomponent_mapping_id != null && x.woline_toplevelcomponent_mapping_id != Guid.Empty).ToList();  // update images which is deleted
                        if (update_ob_asset_toplevel != null && update_ob_asset_toplevel.Count > 0)
                        {
                            foreach (var asset_toplevel in update_ob_asset_toplevel)
                            {
                                var db_asset_toplevel_ = db_asset_toplevel.Where(q => q.woline_toplevelcomponent_mapping_id == asset_toplevel.woline_toplevelcomponent_mapping_id).FirstOrDefault();
                                db_asset_toplevel_.is_deleted = asset_toplevel.is_deleted;
                                db_asset_toplevel_.toplevelcomponent_asset_id = asset_toplevel.toplevelcomponent_asset_id;
                                db_asset_toplevel_.is_toplevelcomponent_from_ob_wo = asset_toplevel.is_toplevelcomponent_from_ob_wo;
                                db_asset_toplevel_.updated_at = DateTime.UtcNow;
                                db_asset_toplevel_.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                var update_img = await _UoW.BaseGenericRepository<WOlineTopLevelcomponentMapping>().Update(db_asset_toplevel_);
                                _UoW.SaveChanges();

                                // delete sublevel from top level asset if request is for delete
                                // 
                                if (asset_toplevel.is_deleted)
                                {
                                    var get_sublevel = _UoW.WorkOrderRepository.GetsublevelmappingforDelete(asset_toplevel.toplevelcomponent_asset_id, db_asset_toplevel_.woonboardingassets_id);
                                    if (get_sublevel != null)
                                    {
                                        get_sublevel.is_deleted = true;
                                        get_sublevel.updated_at = DateTime.UtcNow;

                                        var update_sublevel = await _UoW.BaseGenericRepository<WOlineSubLevelcomponentMapping>().Update(get_sublevel);
                                        _UoW.SaveChanges();
                                    }
                                }
                            }
                        }
                    }

                    if (requestmodel.wo_ob_asset_sublevelcomponent_mapping != null && requestmodel.wo_ob_asset_sublevelcomponent_mapping.Count > 0)
                    {
                        // delete top level componant if any
                        if (get_asset.WOlineTopLevelcomponentMapping != null && get_asset.WOlineTopLevelcomponentMapping.Count() > 0)
                        {
                            var existing_toplevel_componant = get_asset.WOlineTopLevelcomponentMapping.Where(x => !x.is_deleted).ToList();
                            if (existing_toplevel_componant.Count > 0)
                            {
                                foreach (var top_level in existing_toplevel_componant)
                                {
                                    top_level.is_deleted = true;
                                    top_level.updated_at = DateTime.UtcNow;
                                    top_level.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                    var update_img = await _UoW.BaseGenericRepository<WOlineTopLevelcomponentMapping>().Update(top_level);
                                    _UoW.SaveChanges();
                                }
                            }
                        }
                        List<WOlineSubLevelcomponentMapping> db_asset_sublevel = new List<WOlineSubLevelcomponentMapping>();
                        if (get_asset.WOlineSubLevelcomponentMapping != null)
                        {
                            db_asset_sublevel = get_asset.WOlineSubLevelcomponentMapping.ToList();
                        }

                        var added_ob_asset_sublevel = requestmodel.wo_ob_asset_sublevelcomponent_mapping.Where(x => x.woline_sublevelcomponent_mapping_id == null || x.woline_sublevelcomponent_mapping_id == Guid.Empty).ToList();  // insert sublevel
                        if (added_ob_asset_sublevel.Count > 0) 
                        {
                            foreach (var asset_sub_level in added_ob_asset_sublevel)   // insert sublevel woline
                            {
                                Guid sublevel_asset = Guid.Empty;
                                bool is_sublevelcomponent_from_ob_wo = true;
                                if ((!requestmodel.is_request_from_issue_service || (requestmodel.is_request_from_issue_service && asset_sub_level.sublevelcomponent_asset_id == null))) // if request is not from issue service then insert new woline 
                                {
                                    AddSublevelComponentWolineRequest WOlinesublevelcomponentMapping = new AddSublevelComponentWolineRequest();
                                    WOlinesublevelcomponentMapping.wo_id = get_asset.wo_id;
                                    WOlinesublevelcomponentMapping.asset_operating_condition_state = (int)AssetOperatingConduitionState.Operating_Normally;
                                    WOlinesublevelcomponentMapping.sublevelcomponent_asset_name = asset_sub_level.sublevelcomponent_asset_name;
                                    WOlinesublevelcomponentMapping.is_deleted = false;
                                    WOlinesublevelcomponentMapping.woonboardingassets_id = get_asset.woonboardingassets_id;
                                    WOlinesublevelcomponentMapping.sublevelcomponent_asset_id = asset_sub_level.sublevelcomponent_asset_id;
                                    WOlinesublevelcomponentMapping.is_sublevelcomponent_from_ob_wo = asset_sub_level.is_sublevelcomponent_from_ob_wo;
                                    WOlinesublevelcomponentMapping.circuit = asset_sub_level.circuit;
                                    WOlinesublevelcomponentMapping.image_name = asset_sub_level.image_name;
                                    WOlinesublevelcomponentMapping.building = get_asset.building;
                                    WOlinesublevelcomponentMapping.floor = get_asset.floor;
                                    WOlinesublevelcomponentMapping.room = get_asset.room;
                                    WOlinesublevelcomponentMapping.section = get_asset.section;
                                    if (get_asset.WOLineBuildingMapping != null)
                                    {
                                        WOlinesublevelcomponentMapping.formiobuilding_id = get_asset.WOLineBuildingMapping.formiobuilding_id;
                                        WOlinesublevelcomponentMapping.formiofloor_id = get_asset.WOLineBuildingMapping.formiofloor_id;
                                        WOlinesublevelcomponentMapping.formioroom_id = get_asset.WOLineBuildingMapping.formioroom_id;
                                        WOlinesublevelcomponentMapping.formiosection_id = get_asset.WOLineBuildingMapping.formiosection_id;
                                    }
                                    if (get_asset.WOOBAssetTempFormIOBuildingMapping != null)
                                    {
                                        WOlinesublevelcomponentMapping.temp_formiobuilding_id = get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id;
                                        WOlinesublevelcomponentMapping.temp_formiofloor_id = get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id;
                                        WOlinesublevelcomponentMapping.temp_formioroom_id = get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id;
                                        WOlinesublevelcomponentMapping.temp_formiosection_id = get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id;
                                    }
                                    WOlinesublevelcomponentMapping.inspectiontemplate_asset_class_id = asset_sub_level.sublevelcomponent_asset_class_id;
                                   

                                    WOlinesublevelcomponentMapping.is_woline_from_other_inspection = requestmodel.is_woline_from_other_inspection;

                                    WOlinesublevelcomponentMapping.subcomponent_image_list = asset_sub_level.subcomponent_image_list;
                                    WOlinesublevelcomponentMapping.criticality_index_type = get_asset.criticality_index_type;
                                    WOlinesublevelcomponentMapping.condition_index_type = get_asset.condition_index_type;

                                    sublevel_asset = await AddSublevelComponentWoline(WOlinesublevelcomponentMapping);

                                    var sublevel_tempasset_id = _UoW.WorkOrderRepository.GetTempAssetIdByWoOnboardingAssetId(sublevel_asset);

                                    var get_sublevel_asset_pm_estimation = _UoW.WorkOrderRepository.GetPMEstimationByClassId(asset_sub_level.sublevelcomponent_asset_class_id);
                                  

                                    if (get_sublevel_asset_pm_estimation != null && get_sublevel_asset_pm_estimation.pm_estimation_list!=null&& get_sublevel_asset_pm_estimation.pm_estimation_list.Count>0)
                                    {
                                        foreach( var sublevel_asset_pm in get_sublevel_asset_pm_estimation.pm_estimation_list)
                                        {
                                            SitewalkthroughTempPmEstimation tempEstimation = new SitewalkthroughTempPmEstimation();

                                            tempEstimation.tempasset_id = sublevel_tempasset_id.Value; 
                                            tempEstimation.pm_plan_id = get_sublevel_asset_pm_estimation.pm_plan_id.Value;    
                                            tempEstimation.pm_id = sublevel_asset_pm.pm_id;         
                                            tempEstimation.estimation_time = sublevel_asset_pm.estimation_time; 
                                            tempEstimation.inspectiontemplate_asset_class_id = asset_sub_level.sublevelcomponent_asset_class_id;
                                            tempEstimation.woonboardingassets_id = sublevel_asset;
                                            tempEstimation.is_deleted = false;
                                            tempEstimation.created_at = DateTime.UtcNow;
                                            tempEstimation.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                            var insert2 = await _UoW.BaseGenericRepository<SitewalkthroughTempPmEstimation>().Insert(tempEstimation);
                                            _UoW.SaveChanges();
                                            
                                        }
                                    }

                                }
                                else // if request is from issue service then sublevel asset id will be from main asset
                                {
                                    sublevel_asset = asset_sub_level.sublevelcomponent_asset_id.Value;
                                    is_sublevelcomponent_from_ob_wo = false;
                                }
                                WOlineSubLevelcomponentMapping WOlinesublevelcomponentMapping1 = new WOlineSubLevelcomponentMapping();
                                WOlinesublevelcomponentMapping1.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                WOlinesublevelcomponentMapping1.created_at = DateTime.UtcNow;
                                WOlinesublevelcomponentMapping1.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                WOlinesublevelcomponentMapping1.is_deleted = false;
                                WOlinesublevelcomponentMapping1.woonboardingassets_id = get_asset.woonboardingassets_id;
                                WOlinesublevelcomponentMapping1.sublevelcomponent_asset_id = sublevel_asset;
                                WOlinesublevelcomponentMapping1.is_sublevelcomponent_from_ob_wo = is_sublevelcomponent_from_ob_wo;
                                WOlinesublevelcomponentMapping1.circuit = asset_sub_level.circuit;
                                WOlinesublevelcomponentMapping1.image_name = asset_sub_level.image_name;

                                var insert = await _UoW.BaseGenericRepository<WOlineSubLevelcomponentMapping>().Insert(WOlinesublevelcomponentMapping1);
                                _UoW.SaveChanges();



                            }
                        }


                        var update_ob_asset_sublevel = requestmodel.wo_ob_asset_sublevelcomponent_mapping.Where(x => x.woline_sublevelcomponent_mapping_id != null && x.woline_sublevelcomponent_mapping_id != Guid.Empty).ToList();  // update sublevel
                        if (update_ob_asset_sublevel != null && update_ob_asset_sublevel.Count > 0)
                        {
                            foreach (var asset_sublevel in update_ob_asset_sublevel)
                            {
                                var db_asset_sublevel_ = db_asset_sublevel.Where(q => q.woline_sublevelcomponent_mapping_id == asset_sublevel.woline_sublevelcomponent_mapping_id).FirstOrDefault();
                                db_asset_sublevel_.is_deleted = asset_sublevel.is_deleted;
                                db_asset_sublevel_.updated_at = DateTime.UtcNow;
                                db_asset_sublevel_.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                string old_image = db_asset_sublevel_.image_name;
                                string new_image = asset_sublevel.image_name;
                                db_asset_sublevel_.circuit = asset_sublevel.circuit;

                                db_asset_sublevel_.image_name = asset_sublevel.image_name;


                                var update_img = await _UoW.BaseGenericRepository<WOlineSubLevelcomponentMapping>().Update(db_asset_sublevel_);
                                _UoW.SaveChanges();

                                if(old_image != new_image) // if old image is different than new image then updaate in actual sublevel woline's nameplate image
                                {
                                    var get_sublevel_woline = _UoW.WorkOrderRepository.GetSublevelWolinefornameplateImage(db_asset_sublevel_.sublevelcomponent_asset_id);
                                    if(get_sublevel_woline != null)
                                    {
                                        if(get_sublevel_woline.WOOnboardingAssetsImagesMapping !=null && get_sublevel_woline.WOOnboardingAssetsImagesMapping.Count > 0)
                                        {
                                            if (get_sublevel_woline.WOOnboardingAssetsImagesMapping.Where(x => x.asset_photo == old_image).FirstOrDefault() != null)
                                            {
                                                get_sublevel_woline.WOOnboardingAssetsImagesMapping.Where(x => x.asset_photo == old_image).FirstOrDefault().modified_at = DateTime.UtcNow;
                                                if (!String.IsNullOrEmpty(new_image))
                                                {
                                                    get_sublevel_woline.WOOnboardingAssetsImagesMapping.Where(x => x.asset_photo == old_image).FirstOrDefault().asset_photo = new_image;
                                                }
                                                else // delete existing imae if new image is null
                                                {
                                                    get_sublevel_woline.WOOnboardingAssetsImagesMapping.Where(x => x.asset_photo == old_image).FirstOrDefault().is_deleted = true;
                                                }
                                                var update_sublevel_img = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_sublevel_woline);
                                                _UoW.SaveChanges();
                                            }
                                        }
                                    }
                                }
                                if(String.IsNullOrEmpty(old_image) && !String.IsNullOrEmpty(new_image)) // if image is added then add to its sublevel's asset
                                {
                                    WOOnboardingAssetsImagesMapping WOOnboardingAssetsImagesMapping = new WOOnboardingAssetsImagesMapping();
                                    WOOnboardingAssetsImagesMapping.asset_photo = new_image;
                                    WOOnboardingAssetsImagesMapping.asset_photo_type = (int)AssetPhotoType.Nameplate_Photo;
                                    WOOnboardingAssetsImagesMapping.created_at = DateTime.UtcNow;
                                    WOOnboardingAssetsImagesMapping.woonboardingassets_id = asset_sublevel.sublevelcomponent_asset_id.Value;

                                    await _UoW.BaseGenericRepository<WOOnboardingAssetsImagesMapping>().Insert(WOOnboardingAssetsImagesMapping);
                                    _UoW.SaveChanges();
                                }

                                // Add/Delete Images for SubComponent NewFlow
                                if (asset_sublevel.subcomponent_image_list != null && asset_sublevel.subcomponent_image_list.Count > 0)
                                {
                                    var new_added_images_list = asset_sublevel.subcomponent_image_list.Where(x => x.woonboardingassetsimagesmapping_id == null && !x.is_deleted).ToList();

                                    foreach (var image in new_added_images_list)
                                    {
                                        WOOnboardingAssetsImagesMapping WOOnboardingAssetsImagesMapping = new WOOnboardingAssetsImagesMapping();
                                        WOOnboardingAssetsImagesMapping.asset_photo = image.image_name;
                                        WOOnboardingAssetsImagesMapping.asset_thumbnail_photo = image.asset_thumbnail_photo;
                                        if (asset_sublevel.is_sublevelcomponent_from_ob_wo) // if subcomp is from ob WO
                                        {
                                            WOOnboardingAssetsImagesMapping.woonboardingassets_id = asset_sublevel.sublevelcomponent_asset_id.Value;
                                        }
                                        else  // if subcomp is from Existing Main Asset so we are Adding subcompmapping_id
                                        {
                                            WOOnboardingAssetsImagesMapping.woline_sublevelcomponent_mapping_id = asset_sublevel.woline_sublevelcomponent_mapping_id;
                                        }
                                        WOOnboardingAssetsImagesMapping.asset_photo_type = image.image_type;
                                        WOOnboardingAssetsImagesMapping.created_at = DateTime.UtcNow;
                                        WOOnboardingAssetsImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                        await _UoW.BaseGenericRepository<WOOnboardingAssetsImagesMapping>().Insert(WOOnboardingAssetsImagesMapping);
                                        _UoW.SaveChanges();
                                    }

                                    var deleted_images_list = asset_sublevel.subcomponent_image_list.Where(x => x.woonboardingassetsimagesmapping_id != null && x.is_deleted == true).ToList();

                                    foreach (var image in deleted_images_list)
                                    {
                                        var get_img = _UoW.WorkOrderRepository.GetWOOBImageById(image.woonboardingassetsimagesmapping_id.Value);

                                        if (get_img != null)
                                        {
                                            get_img.is_deleted = true;
                                            get_img.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                            get_img.modified_at = DateTime.UtcNow;

                                            await _UoW.BaseGenericRepository<WOOnboardingAssetsImagesMapping>().Update(get_img);
                                            _UoW.SaveChanges();
                                        }
                                    }
                                }


                                /*if (!String.IsNullOrEmpty(old_image) && String.IsNullOrEmpty(new_image)) // if image is
                                {
                                    var get_sublevel_woline = _UoW.WorkOrderRepository.GetSublevelWolinefornameplateImage(db_asset_sublevel_.sublevelcomponent_asset_id);
                                    if (get_sublevel_woline != null)
                                    {
                                        if (get_sublevel_woline.WOOnboardingAssetsImagesMapping != null && get_sublevel_woline.WOOnboardingAssetsImagesMapping.Count > 0)
                                        {
                                            if (get_sublevel_woline.WOOnboardingAssetsImagesMapping.Where(x => x.asset_photo == old_image).FirstOrDefault() != null)
                                            {
                                                get_sublevel_woline.WOOnboardingAssetsImagesMapping.Where(x => x.asset_photo == old_image).FirstOrDefault().modified_at = DateTime.UtcNow;
                                                get_sublevel_woline.WOOnboardingAssetsImagesMapping.Where(x => x.asset_photo == old_image).FirstOrDefault().is_deleted = true;

                                                var update_sublevel_img = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_sublevel_woline);
                                                _UoW.SaveChanges();
                                            }
                                        }
                                    }
                                }*/

                                // if requested sublevel is for delete then delete from its actual woline
                                if (asset_sublevel.is_deleted)
                                {
                                    var get_toplevel_mapping = _UoW.WorkOrderRepository.GettoplevelmappingforDelete(asset_sublevel.sublevelcomponent_asset_id.Value);
                                    if (get_toplevel_mapping != null)
                                    {
                                        get_toplevel_mapping.is_deleted = true;
                                        get_toplevel_mapping.updated_at = DateTime.UtcNow;

                                        var update_tolevel = await _UoW.BaseGenericRepository<WOlineTopLevelcomponentMapping>().Update(get_toplevel_mapping);
                                        _UoW.SaveChanges();
                                    }
                                }
                            }
                        }
                    }

                    // FedBy Mappings
                    if (requestmodel.wo_ob_asset_fed_by_mapping != null && requestmodel.wo_ob_asset_fed_by_mapping.Count > 0)
                    {
                        List<WOOBAssetFedByMapping> db_asset_fed_by = new List<WOOBAssetFedByMapping>();
                        if (get_asset.WOOBAssetFedByMapping != null)
                        {
                            db_asset_fed_by = get_asset.WOOBAssetFedByMapping.ToList();
                        }

                        var added_ob_asset_fed_by = requestmodel.wo_ob_asset_fed_by_mapping.Where(x => x.wo_ob_asset_fed_by_id == null || x.wo_ob_asset_fed_by_id == Guid.Empty).ToList();  // insert images 
                        if (added_ob_asset_fed_by.Count > 0)   // insert images 
                        {
                            foreach (var asset_fed_by in added_ob_asset_fed_by)   // insert images 
                            {
                                Guid? ocp_asset_id = null; // if subcomponent assets are just added then find id by name,classcode
                                if (asset_fed_by.via_subcomponant_asset_id == null || asset_fed_by.via_subcomponant_asset_id == Guid.Empty)
                                {
                                    ocp_asset_id = _UoW.WorkOrderRepository.GetOBWOAssetByNameClass(requestmodel.wo_id.ToString(), asset_fed_by.via_subcomponant_asset_name, asset_fed_by.via_subcomponant_asset_class_code);
                                }

                                WOOBAssetFedByMapping WOOBAssetFedByMapping = new WOOBAssetFedByMapping();
                                WOOBAssetFedByMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                WOOBAssetFedByMapping.created_at = DateTime.UtcNow;
                                WOOBAssetFedByMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                WOOBAssetFedByMapping.is_deleted = false;
                                WOOBAssetFedByMapping.woonboardingassets_id = get_asset.woonboardingassets_id;
                                WOOBAssetFedByMapping.parent_asset_id = asset_fed_by.parent_asset_id;
                                WOOBAssetFedByMapping.is_parent_from_ob_wo = asset_fed_by.is_parent_from_ob_wo;
                                WOOBAssetFedByMapping.is_via_subcomponant_asset_from_ob_wo = asset_fed_by.is_via_subcomponant_asset_from_ob_wo;
                                WOOBAssetFedByMapping.via_subcomponant_asset_id = asset_fed_by.via_subcomponant_asset_id!=null ? asset_fed_by.via_subcomponant_asset_id : ocp_asset_id;
                                //WOOBAssetFedByMapping.main_via_subcomponant_asset_id = asset_fed_by.main_via_subcomponant_asset_id;
                                //WOOBAssetFedByMapping.is_main_via_subcomponant_asset_from_ob_wo = asset_fed_by.is_main_via_subcomponant_asset_from_ob_wo;
                                WOOBAssetFedByMapping.fed_by_usage_type_id = asset_fed_by.fed_by_usage_type_id != null ? asset_fed_by.fed_by_usage_type_id : 1;
                                WOOBAssetFedByMapping.style = asset_fed_by.style;
                                WOOBAssetFedByMapping.length = asset_fed_by.length;
                                WOOBAssetFedByMapping.conductor_type_id = asset_fed_by.conductor_type_id;
                                WOOBAssetFedByMapping.raceway_type_id = asset_fed_by.raceway_type_id;
                                WOOBAssetFedByMapping.number_of_conductor = asset_fed_by.number_of_conductor;
                                WOOBAssetFedByMapping.is_fed_by_via_subcomponant_asset_from_ob_wo = asset_fed_by.is_fed_by_via_subcomponant_asset_from_ob_wo;
                                WOOBAssetFedByMapping.fed_by_via_subcomponant_asset_id = asset_fed_by.fed_by_via_subcomponant_asset_id;

                                var insert = await _UoW.BaseGenericRepository<WOOBAssetFedByMapping>().Insert(WOOBAssetFedByMapping);
                                _UoW.SaveChanges();
                            }
                        }
                        var update_ob_asset_fed_by = requestmodel.wo_ob_asset_fed_by_mapping.Where(x => x.wo_ob_asset_fed_by_id != null && x.wo_ob_asset_fed_by_id != Guid.Empty).ToList();  // update images which is deleted
                        if (update_ob_asset_fed_by != null && update_ob_asset_fed_by.Count > 0)
                        {
                            foreach (var asset_fed_by in update_ob_asset_fed_by)
                            {
                                Guid? ocp_asset_id = null; // if subcomponent assets are just added then find id by name,classcode
                                if (asset_fed_by.via_subcomponant_asset_id == null || asset_fed_by.via_subcomponant_asset_id == Guid.Empty)
                                {
                                    ocp_asset_id = _UoW.WorkOrderRepository.GetOBWOAssetByNameClass(requestmodel.wo_id.ToString(), asset_fed_by.via_subcomponant_asset_name, asset_fed_by.via_subcomponant_asset_class_code);
                                }
                                var db_asset_fed_by_ = db_asset_fed_by.Where(q => q.wo_ob_asset_fed_by_id == asset_fed_by.wo_ob_asset_fed_by_id).FirstOrDefault();
                                db_asset_fed_by_.is_deleted = asset_fed_by.is_deleted;
                                db_asset_fed_by_.is_via_subcomponant_asset_from_ob_wo = asset_fed_by.is_via_subcomponant_asset_from_ob_wo;
                                //db_asset_fed_by_.via_subcomponant_asset_id = asset_fed_by.via_subcomponant_asset_id;
                                db_asset_fed_by_.via_subcomponant_asset_id = asset_fed_by.via_subcomponant_asset_id != null ? asset_fed_by.via_subcomponant_asset_id : ocp_asset_id;
                                db_asset_fed_by_.updated_at = DateTime.UtcNow;
                                db_asset_fed_by_.fed_by_usage_type_id = asset_fed_by.fed_by_usage_type_id != null ? asset_fed_by.fed_by_usage_type_id : 1;
                                db_asset_fed_by_.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                db_asset_fed_by_.style = asset_fed_by.style;
                                db_asset_fed_by_.length = asset_fed_by.length;
                                db_asset_fed_by_.conductor_type_id = asset_fed_by.conductor_type_id;
                                db_asset_fed_by_.raceway_type_id = asset_fed_by.raceway_type_id;
                                db_asset_fed_by_.number_of_conductor = asset_fed_by.number_of_conductor;
                                db_asset_fed_by_.is_fed_by_via_subcomponant_asset_from_ob_wo = asset_fed_by.is_fed_by_via_subcomponant_asset_from_ob_wo;
                                db_asset_fed_by_.fed_by_via_subcomponant_asset_id = asset_fed_by.fed_by_via_subcomponant_asset_id;


                                var update_img = await _UoW.BaseGenericRepository<WOOBAssetFedByMapping>().Update(db_asset_fed_by_);
                                _UoW.SaveChanges();
                            }
                        }
                    }


                    // insert location from top level if requested woline is sublevel.
                    if (requestmodel.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent)
                    {
                        if (get_asset.WOlineTopLevelcomponentMapping != null && get_asset.WOlineTopLevelcomponentMapping.Count > 0)
                        {

                            var get_toplevel = get_asset.WOlineTopLevelcomponentMapping.Where(x => !x.is_deleted).FirstOrDefault();
                            if (get_toplevel != null && !get_toplevel.is_toplevelcomponent_from_ob_wo && get_toplevel.toplevelcomponent_asset_id != Guid.Empty)
                            {
                                var get_toplevel_asset = _UoW.WorkOrderRepository.AssetGettoplevelmainAsset(get_toplevel.toplevelcomponent_asset_id);
                                await AssignTemplocationtoWO(get_asset, get_toplevel_asset.AssetFormIOBuildingMappings.FormIOBuildings.formio_building_name,
                                    get_toplevel_asset.AssetFormIOBuildingMappings.FormIOFloors.formio_floor_name,
                                    get_toplevel_asset.AssetFormIOBuildingMappings.FormIORooms.formio_room_name, get_asset.section, get_asset.wo_id);
                            }
                            else if (get_toplevel != null && get_toplevel.is_toplevelcomponent_from_ob_wo && get_toplevel.toplevelcomponent_asset_id != Guid.Empty)
                            {
                                var get_toplevel_asset = _UoW.WorkOrderRepository.GetOBWOAssetforLocation(get_toplevel.toplevelcomponent_asset_id);
                                if (get_toplevel_asset.WOOBAssetTempFormIOBuildingMapping != null)
                                {
                                    await AssignTemplocationtoWO(get_asset, get_toplevel_asset.WOOBAssetTempFormIOBuildingMapping.TempFormIOBuildings.temp_formio_building_name,
                                    get_toplevel_asset.WOOBAssetTempFormIOBuildingMapping.TempFormIOFloors.temp_formio_floor_name,
                                    get_toplevel_asset.WOOBAssetTempFormIOBuildingMapping.TempFormIORooms.temp_formio_room_name, get_asset.section, get_asset.wo_id);

                                }
                                else
                                {
                                    if (String.IsNullOrEmpty(get_asset.building))
                                    {
                                        get_asset.building = "Default";
                                    }
                                    if (String.IsNullOrEmpty(get_asset.floor))
                                    {
                                        get_asset.floor = "Default";
                                    }
                                    if (String.IsNullOrEmpty(get_asset.room))
                                    {
                                        get_asset.room = "Default";
                                    }
                                    if (String.IsNullOrEmpty(get_asset.section))
                                    {
                                        get_asset.section = "Default";
                                    }

                                    await AssignTemplocationtoWO(get_asset, get_asset.building,
                                    get_asset.floor,
                                    get_asset.room,
                                    get_asset.section,
                                    get_asset.wo_id);
                                }
                            }
                            else // insert in default location iftop level is not assigned
                            {
                                if (requestmodel.temp_formiobuilding_id != null && requestmodel.temp_formiobuilding_id != null && requestmodel.temp_formiobuilding_id != null)
                                {
                                    if (get_asset.WOOBAssetTempFormIOBuildingMapping == null)
                                    {
                                        get_asset.WOOBAssetTempFormIOBuildingMapping = new WOOBAssetTempFormIOBuildingMapping();
                                    }
                                    get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id = requestmodel.temp_formiobuilding_id;
                                    get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id = requestmodel.temp_formiofloor_id;
                                    get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id = requestmodel.temp_formioroom_id;
                                }
                                else
                                {
                                    await AssignTemplocationtoWO(get_asset, "Default",
                                     "Default",
                                     "Default",
                                     "Default",
                                     get_asset.wo_id);
                                }
                            }
                        }
                        else // insert in default location iftop level is not assigned
                        {
                            if (requestmodel.temp_formiobuilding_id != null && requestmodel.temp_formiobuilding_id != null && requestmodel.temp_formiobuilding_id != null)
                            {
                                if (get_asset.WOOBAssetTempFormIOBuildingMapping == null)
                                {
                                    get_asset.WOOBAssetTempFormIOBuildingMapping = new WOOBAssetTempFormIOBuildingMapping();
                                }
                                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id = requestmodel.temp_formiobuilding_id;
                                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id = requestmodel.temp_formiofloor_id;
                                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id = requestmodel.temp_formioroom_id;
                            }
                            else if (requestmodel.wo_ob_asset_toplevelcomponent_mapping != null && requestmodel.wo_ob_asset_toplevelcomponent_mapping.Count > 0)
                            {
                                if (get_asset.WOOBAssetTempFormIOBuildingMapping == null)
                                {
                                    get_asset.WOOBAssetTempFormIOBuildingMapping = new WOOBAssetTempFormIOBuildingMapping();
                                }

                                var top_level = requestmodel.wo_ob_asset_toplevelcomponent_mapping.Where(x => !x.is_deleted).FirstOrDefault();
                                if (top_level.toplevelcomponent_asset_id != null)
                                {
                                    var get_topLevel_tempLocation = _UoW.WorkOrderRepository.GetTempLocationOfOBWOAssetByOBAssetID(top_level.toplevelcomponent_asset_id);
                                    if (get_topLevel_tempLocation != null)
                                    {
                                        get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id = get_topLevel_tempLocation.temp_formiobuilding_id.Value;
                                        get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id = get_topLevel_tempLocation.temp_formiofloor_id.Value;
                                        get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id = get_topLevel_tempLocation.temp_formioroom_id.Value;
                                        get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id = get_topLevel_tempLocation.temp_formiosection_id.Value;
                                    }
                                    else
                                    {
                                        //if top level has no Temp Location then Add new here
                                        var get_toplevel_asset = _UoW.WorkOrderRepository.AssetGettoplevelmainAsset(top_level.toplevelcomponent_asset_id);
                                        await AssignTemplocationtoWO(get_asset, get_toplevel_asset.AssetFormIOBuildingMappings.FormIOBuildings.formio_building_name,
                                            get_toplevel_asset.AssetFormIOBuildingMappings.FormIOFloors.formio_floor_name,
                                            get_toplevel_asset.AssetFormIOBuildingMappings.FormIORooms.formio_room_name, get_asset.section, get_asset.wo_id);
                                    }
                                }
                            }
                            else
                            {
                                await AssignTemplocationtoWO(get_asset, "Default",
                                 "Default",
                                 "Default",
                                 "Default",
                                 get_asset.wo_id);
                            }
                        }

                    }


                    //if(requestmodel.temp_formiobuilding_id != null && requestmodel.temp_formiobuilding_id != Guid.Empty 
                    //    || requestmodel.temp_formiofloor_id != null && requestmodel.temp_formiofloor_id != Guid.Empty
                    //    || requestmodel.temp_formioroom_id != null && requestmodel.temp_formioroom_id != Guid.Empty)
                    //{
                    //    WOOBAssetTempFormIOBuildingMapping wOOBAssetTempFormIOBuildingMapping = new WOOBAssetTempFormIOBuildingMapping();
                    //    wOOBAssetTempFormIOBuildingMapping.woonboardingassets_id = get_asset.woonboardingassets_id;
                    //    wOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id = requestmodel.temp_formiobuilding_id;
                    //    wOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id = requestmodel.temp_formiofloor_id;
                    //    wOOBAssetTempFormIOBuildingMapping.temp_formioroom_id = requestmodel.temp_formioroom_id;
                    //    wOOBAssetTempFormIOBuildingMapping.created_at = DateTime.UtcNow;

                    //    var insert2 = await _UoW.BaseGenericRepository<WOOBAssetTempFormIOBuildingMapping>().Insert(wOOBAssetTempFormIOBuildingMapping);
                    //    _UoW.SaveChanges();
                    //}

                    await updateOBWOStatusForStatusManagement(requestmodel.wo_id);

                    // update details in Issues like link issue to woline requested_woline, update woline's desc,images 
                    if (requestmodel.asset_issue_id != null && requestmodel.asset_issue_id.Count > 0 
                        || requestmodel.deleted_asset_issue_id != null && requestmodel.deleted_asset_issue_id.Count > 0
                        || requestmodel.woline_issue_id != null && requestmodel.woline_issue_id.Count > 0 
                        || requestmodel.deleted_woline_issue_id != null && requestmodel.deleted_woline_issue_id.Count > 0)
                    {
                        LinkIssueToWOLineRequestmodel linkIssueToWOLineRequestmodel = new LinkIssueToWOLineRequestmodel();
                        linkIssueToWOLineRequestmodel.woonboardingassets_id = get_asset.woonboardingassets_id;
                        linkIssueToWOLineRequestmodel.wo_id = requestmodel.wo_id;
                        linkIssueToWOLineRequestmodel.asset_issue_id = requestmodel.asset_issue_id;
                        linkIssueToWOLineRequestmodel.deleted_asset_issue_id = requestmodel.deleted_asset_issue_id;

                        linkIssueToWOLineRequestmodel.wo_line_issue_id = requestmodel.woline_issue_id;
                        linkIssueToWOLineRequestmodel.deleted_wo_line_issue_id = requestmodel.deleted_woline_issue_id;

                        await LinkIssueToWOLine(linkIssueToWOLineRequestmodel);
                    }


                    // add data in Temp Asset table 
                    if(get_asset.inspection_type == (int)MWO_inspection_wo_type.OnBoarding && !requestmodel.is_request_from_issue_service) // if inspection type is OB and request is not from issue service then only add/update temp asset.
                    {
                        TempAsset temp_asset = null;
                        if (get_asset.TempAsset != null) // if temp asset is available then update else create new temp asset
                            temp_asset = get_asset.TempAsset;
                        else
                            temp_asset = new TempAsset();

                        requestmodel.site_id = get_asset.site_id;
                        var tempasset_id_new = await AddTempAssetData(requestmodel, temp_asset);

                        if(get_asset.TempAsset == null) // if temp asset is not assigned then assign to woline
                        {
                            // update temp asset id in woline table
                            get_asset.tempasset_id = tempasset_id_new;
                            await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_asset);
                        }
                    }


                    // check if requested class id is different then in db then delete old estimation pm
                    if(requestmodel.woonboardingassets_id!=null && old_woline_class_id!= get_asset.TempAsset.inspectiontemplate_asset_class_id)
                    {
                        var pmestimation = _UoW.WorkOrderRepository.GetPMEstimationbyWOlineid(requestmodel.woonboardingassets_id.Value);
                        foreach(var item in pmestimation)
                        {
                            item.is_deleted = true;
                            item.modified_at = DateTime.UtcNow;
                            item.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                            var update = await _UoW.BaseGenericRepository<SitewalkthroughTempPmEstimation>().Update(item);
                            _UoW.SaveChanges();
                        }
                    }

                    // Add update pm estimation
                    if(requestmodel.pm_estimation_data != null && requestmodel.pm_estimation_data.Count() > 0)
                    {
                        //List<SitewalkthroughTempPmEstimation> sitewalkthroughTempPmEstimation = new List<SitewalkthroughTempPmEstimation>();
                        foreach (var estimationData in requestmodel.pm_estimation_data)
                        {
                            SitewalkthroughTempPmEstimation tempEstimation = new SitewalkthroughTempPmEstimation();

                            if (estimationData.sitewalkthrough_temp_pm_estimation_id != null)
                                tempEstimation = _UoW.WorkOrderRepository.GetSiteWalkThroughPMEstimationbyID(estimationData.sitewalkthrough_temp_pm_estimation_id.Value);

                            tempEstimation.tempasset_id = get_asset.tempasset_id.Value; // Temp asset ID from main request model
                            tempEstimation.pm_plan_id = requestmodel.pm_plan_id.Value;    // PM Plan ID from main request model
                            tempEstimation.pm_id = estimationData.pm_id;           // PM ID from PMEstimationData
                            tempEstimation.estimation_time = estimationData.estimation_time;  // Estimation Time from PMEstimationData
                            tempEstimation.inspectiontemplate_asset_class_id = requestmodel.inspectiontemplate_asset_class_id.Value;
                            tempEstimation.woonboardingassets_id = get_asset.woonboardingassets_id;
                            tempEstimation.is_deleted = estimationData.is_deleted;
                            tempEstimation.woonboardingassets_id = get_asset.woonboardingassets_id;
                            
                            if (estimationData.sitewalkthrough_temp_pm_estimation_id == null)
                            {
                                tempEstimation.created_at = DateTime.UtcNow;
                                tempEstimation.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                var insert = await _UoW.BaseGenericRepository<SitewalkthroughTempPmEstimation>().Insert(tempEstimation);
                                _UoW.SaveChanges();
                            }
                            else
                            {

                                tempEstimation.modified_at = DateTime.UtcNow;
                                tempEstimation.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                var update = await _UoW.BaseGenericRepository<SitewalkthroughTempPmEstimation>().Update(tempEstimation);
                                _UoW.SaveChanges();
                            }

                        }


                    }



                    //if its Toplevel  OBAsset then Assign its locations to Subcomponents
                    if (get_asset.component_level_type_id == (int)ComponentLevelTypes.ToplevelComponent && requestmodel.woonboardingassets_id != null)
                    {
                        await ChangeToplevelsSubcomponentsLocation(requestmodel.woonboardingassets_id.Value);
                    }

                    // decide asset's operating condition based on temp issue 
                    if (get_asset.inspection_type == (int)MWO_inspection_wo_type.OnBoarding)
                    {
                        var get_woline = _UoW.WorkOrderRepository.GetWOlinebyIdforOperatingcondition(get_asset.woonboardingassets_id);
                        if(get_woline.WOLineIssue !=null && get_woline.WOLineIssue.Where(x=>!x.is_deleted).Count() > 0)
                        {

                            var is_repair_issue_exist = get_woline.WOLineIssue.Where(x => (x.issue_type == (int)WOLine_Temp_Issue_Type.Repair ||
                                                x.issue_type == (int)WOLine_Temp_Issue_Type.Thermal_Anamoly || x.issue_type == (int)WOLine_Temp_Issue_Type.Compliance || x.issue_type == (int)WOLine_Temp_Issue_Type.Other)
                                                && !x.is_deleted).FirstOrDefault();
                            if (is_repair_issue_exist != null)
                            {
                                get_woline.asset_operating_condition_state = (int)AssetOperatingConduitionState.Repair_Needed;
                                if (get_woline.TempAsset != null)
                                    get_woline.TempAsset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Repair_Needed;
                            }

                            var is_replcae_issue_exist = get_woline.WOLineIssue.Where(x => x.issue_type == (int)WOLine_Temp_Issue_Type.Replace && !x.is_deleted).FirstOrDefault();
                            if (is_replcae_issue_exist != null)
                            {
                                get_woline.asset_operating_condition_state = (int)AssetOperatingConduitionState.Replacement_Needed;
                                if(get_woline.TempAsset!=null)
                                    get_woline.TempAsset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Replacement_Needed;
                            }
                        }
                        else
                        {
                            get_woline.asset_operating_condition_state = (int)AssetOperatingConduitionState.Operating_Normally;
                            if (get_woline.TempAsset != null)
                                get_woline.TempAsset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Operating_Normally;


                            // if WO line is IR and  there are no issues then mark WO line as completed
                            if (!requestmodel.flag_issue_nec_violation && !requestmodel.flag_issue_osha_violation && !requestmodel.flag_issue_thermal_anamoly_detected && get_asset.WorkOrders != null && get_asset.WorkOrders.wo_type == (int)Status.IR_Scan_WO && requestmodel.status == (int)Status.Ready_for_review)
                            {
                                get_woline.status = (int)Status.Completed;
                                get_woline.completed_at = DateTime.UtcNow;
                                get_woline.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                            }
                        }
                        var update_woline = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_woline);
                        _UoW.SaveChanges();

                    }

                    response.respose = (int)ResponseStatusNumber.Success;
                    return response;
                }
                else
                {
                    response.respose = (int)ResponseStatusNumber.NotFound;
                    return response;
                }
            }
            catch (Exception ex)
            {
                _UoW.RollbackTransaction();
                response.respose = (int)ResponseStatusNumber.Error;
                return response;
            }
        }

        public async Task<int> AddUpdateWOOnboardingAssetsDateTimeTracking(Guid woonboardingassets_id,int action_type,int? work_time_spend)
        {
            int res = (int)ResponseStatusNumber.Error;
            try
            {
                var get_obj = _UoW.WorkOrderRepository.GetWOOnboardingAssetsDateTimeTrackingById(woonboardingassets_id);
                
                if (get_obj != null)
                {
                    if (action_type == (int)WOLineActionsTypes.Save)
                        get_obj.saved_date = DateTime.UtcNow;
                    else if (action_type == (int)WOLineActionsTypes.Submit)
                        get_obj.submitted_date = DateTime.UtcNow;
                    else if (action_type == (int)WOLineActionsTypes.Accept)
                        get_obj.accepted_date = DateTime.UtcNow;
                    else if (action_type == (int)WOLineActionsTypes.Reject)
                        get_obj.rejected_date = DateTime.UtcNow;
                    else if (action_type == (int)WOLineActionsTypes.Hold)
                        get_obj.hold_date = DateTime.UtcNow;
                    else if (action_type == (int)WOLineActionsTypes.Delete)
                        get_obj.deleted_date = DateTime.UtcNow;
                    else if (action_type == (int)WOLineActionsTypes.WorkStartDate)
                        get_obj.work_start_date = DateTime.UtcNow;

                    if (work_time_spend != null && work_time_spend > 0)
                    {
                        get_obj.work_time_spend = work_time_spend;
                    }

                    get_obj.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                    var update = await _UoW.BaseGenericRepository<WOOnboardingAssetsDateTimeTracking>().Update(get_obj);
                    if (update)
                    {
                        res = (int)ResponseStatusNumber.Success;
                        _UoW.SaveChanges();
                    }
                }
                else
                {
                    WOOnboardingAssetsDateTimeTracking WOOnboardingAssetsDateTimeTracking = new WOOnboardingAssetsDateTimeTracking();
                    WOOnboardingAssetsDateTimeTracking.woonboardingassets_id = woonboardingassets_id;
                    WOOnboardingAssetsDateTimeTracking.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                    if (action_type == (int)WOLineActionsTypes.Save)
                        WOOnboardingAssetsDateTimeTracking.saved_date = DateTime.UtcNow;
                    else if (action_type == (int)WOLineActionsTypes.Submit)
                        WOOnboardingAssetsDateTimeTracking.submitted_date = DateTime.UtcNow;
                    else if (action_type == (int)WOLineActionsTypes.Accept)
                        WOOnboardingAssetsDateTimeTracking.accepted_date = DateTime.UtcNow;
                    else if (action_type == (int)WOLineActionsTypes.Reject)
                        WOOnboardingAssetsDateTimeTracking.rejected_date = DateTime.UtcNow;
                    else if (action_type == (int)WOLineActionsTypes.Hold)
                        WOOnboardingAssetsDateTimeTracking.hold_date = DateTime.UtcNow;
                    else if (action_type == (int)WOLineActionsTypes.Delete)
                        WOOnboardingAssetsDateTimeTracking.deleted_date = DateTime.UtcNow;
                    else if (action_type == (int)WOLineActionsTypes.WorkStartDate)
                        WOOnboardingAssetsDateTimeTracking.work_start_date = DateTime.UtcNow;


                    if (work_time_spend != null && work_time_spend > 0)
                    {
                        WOOnboardingAssetsDateTimeTracking.work_time_spend = work_time_spend;
                    }

                    var insert = await _UoW.BaseGenericRepository<WOOnboardingAssetsDateTimeTracking>().Insert(WOOnboardingAssetsDateTimeTracking);
                    if (insert)
                    {
                        res = (int)ResponseStatusNumber.Success;
                        _UoW.SaveChanges();
                    }
                }

            }
            catch(Exception ee)
            {
            }
            return res;
        }

        public string ChangeImageFileextension(string request_img , string db_img)
        {
            string response = request_img;
            try
            {
                string req_img_extension = Path.GetExtension(request_img);
                string db_img_extension = Path.GetExtension(db_img);
                // check if requested image extension and db image extansions are same and only upper/lower case diffence
                if (req_img_extension.ToLower() == db_img_extension.ToLower()) // ex. req_img_extension = png , db_img_extension = PNG
                {
                    if (req_img_extension != db_img_extension)
                    {
                        string request_img_file_name = Path.GetFileNameWithoutExtension(request_img);
                        response = request_img_file_name + db_img_extension;
                    }
                }
            }
            catch(Exception ex)
            {

            }
            return response;
        }

        public async Task<Guid> AddTempAssetData(UpdateOBWOAssetDetailsRequestmodel requestmodel , TempAsset req_temp_asset) // add data in temp asset.
        {
            TempAsset temp_asset = null;
            if (req_temp_asset.tempasset_id != null && req_temp_asset.tempasset_id != Guid.Empty)
            {
                temp_asset = _UoW.IssueRepository.GetTempAssetbyId(req_temp_asset.tempasset_id);
            }
            else
            {
                temp_asset = new TempAsset();
            }
            temp_asset.asset_name = requestmodel.asset_name;
            temp_asset.QR_code = requestmodel.QR_code;
            temp_asset.condition_index_type = requestmodel.condition_index_type;
            temp_asset.criticality_index_type = requestmodel.criticality_index_type;
            temp_asset.form_nameplate_info = requestmodel.form_nameplate_info;
            temp_asset.component_level_type_id = requestmodel.component_level_type_id;
            temp_asset.asset_operating_condition_state = requestmodel.asset_operating_condition_state;
            temp_asset.code_compliance = requestmodel.code_compliance;
            temp_asset.panel_schedule = requestmodel.panel_schedule;
            temp_asset.arc_flash_label_valid = requestmodel.arc_flash_label_valid;
            temp_asset.asset_id = requestmodel.asset_id;
            temp_asset.commisiion_date = requestmodel.commisiion_date;
            temp_asset.maintenance_index_type = requestmodel.maintenance_index_type;
            temp_asset.site_id = requestmodel.site_id;
            temp_asset.asset_group_id = requestmodel.asset_group_id;
            // temp_asset.inspectiontemplate_asset_class_id = requestmodel.inspectiontemplate_asset_class_id;

            //new flow for TempMasterLocations in TempAsset
            if (requestmodel.temp_master_building_id != null&& requestmodel.temp_master_building_id != Guid.Empty)
                temp_asset.temp_master_building_id = requestmodel.temp_master_building_id;
            
            if (requestmodel.temp_master_floor_id != null && requestmodel.temp_master_floor_id != Guid.Empty)
                temp_asset.temp_master_floor_id = requestmodel.temp_master_floor_id;
           
            if (requestmodel.temp_master_room_id != null && requestmodel.temp_master_room_id != Guid.Empty)
                temp_asset.temp_master_room_id = requestmodel.temp_master_room_id;

            if (!String.IsNullOrEmpty(requestmodel.temp_section))
                temp_asset.temp_master_section = requestmodel.temp_section;
            else
                temp_asset.temp_master_section = "Default";

            var location_details =  await AssignLocationtoTempAsset(temp_asset, requestmodel); // assign location details to temp asset
            temp_asset.temp_formiobuilding_id = location_details.temp_formiobuilding_id;
            temp_asset.temp_formiofloor_id = location_details.temp_formiofloor_id;
            temp_asset.temp_formioroom_id = location_details.temp_formioroom_id;
            temp_asset.temp_formiosection_id = location_details.temp_formiosection_id;
            temp_asset.wo_id = requestmodel.wo_id;

            if (requestmodel.inspectiontemplate_asset_class_id != null) // if class id is received from request then assign from there else get from class code
            {
                temp_asset.inspectiontemplate_asset_class_id = requestmodel.inspectiontemplate_asset_class_id;
            }
            else if (!String.IsNullOrEmpty(requestmodel.asset_class_code)) // get class id from class code
            {
                var get_company_id = _UoW.WorkOrderRepository.GetcompantBySiteId(temp_asset.site_id);
                var get_assetclass = _UoW.WorkOrderRepository.GetAssetclassByCodeandCompanyId(requestmodel.asset_class_code.ToLower().Trim() , get_company_id);
                if (get_assetclass != null)
                {
                    temp_asset.inspectiontemplate_asset_class_id = get_assetclass.inspectiontemplate_asset_class_id;
                }
            }

            if(temp_asset.tempasset_id !=null && temp_asset.tempasset_id != Guid.Empty) // update 
            {
                temp_asset.modified_at = DateTime.UtcNow;
                if (UpdatedGenericRequestmodel.CurrentUser != null)
                    temp_asset.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                var update = await _UoW.BaseGenericRepository<TempAsset>().Update(temp_asset);
                _UoW.SaveChanges();
            }
            else // insert 
            {
                temp_asset.created_at = DateTime.UtcNow;
                if (UpdatedGenericRequestmodel.CurrentUser != null)
                    temp_asset.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                
                var insert = await _UoW.BaseGenericRepository<TempAsset>().Insert(temp_asset);
                _UoW.SaveChanges();

            }

            return temp_asset.tempasset_id;
        }

        public async Task<TempLocationData> AssignLocationtoTempAsset(TempAsset temp_asset , UpdateOBWOAssetDetailsRequestmodel requestmodel)
        {
            TempLocationData TempLocationData = new TempLocationData();
            Guid company_id = _UoW.WorkOrderRepository.GetcompantBySiteId(temp_asset.site_id);
            if (requestmodel.temp_formiobuilding_id != null && requestmodel.temp_formiofloor_id != null && requestmodel.temp_formioroom_id != null && requestmodel.component_level_type_id!= (int)ComponentLevelTypes.SublevelComponent)
            {
                TempLocationData.temp_formiobuilding_id = requestmodel.temp_formiobuilding_id;
                TempLocationData.temp_formiofloor_id = requestmodel.temp_formiofloor_id;
                TempLocationData.temp_formioroom_id = requestmodel.temp_formioroom_id;


                /// add section data
                ///  
                if (String.IsNullOrEmpty(requestmodel.section))
                {
                    requestmodel.section = "Default";
                }
                if (!String.IsNullOrEmpty(requestmodel.section))
                {
                    TempFormIOSections TempFormIOSections = _UoW.WorkOrderRepository.GetTempSectionByName(requestmodel.section, TempLocationData.temp_formioroom_id.Value);
                    if (TempFormIOSections == null)
                    {
                        TempFormIOSections = new TempFormIOSections();
                        TempFormIOSections.temp_formio_section_name = requestmodel.section;
                        TempFormIOSections.temp_formioroom_id = requestmodel.temp_formioroom_id;
                        TempFormIOSections.wo_id = requestmodel.wo_id;
                        TempFormIOSections.created_at = DateTime.UtcNow;
                        TempFormIOSections.site_id = temp_asset.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        TempFormIOSections.company_id = company_id;//Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                        var insertsection = await _UoW.BaseGenericRepository<TempFormIOSections>().Insert(TempFormIOSections);
                        _UoW.SaveChanges();
                    }
                    TempLocationData.temp_formiosection_id = TempFormIOSections.temp_formiosection_id;
                }
            }
            else // assign from string coloumn if request doesnot have temp location ids
            {
                string building = requestmodel.building;
                string floor = requestmodel.floor;
                string room = requestmodel.room;
                string section = requestmodel.section;

                // if location is null then assign as "Default"
                if (String.IsNullOrEmpty(building))
                    building = "Default";
                if (String.IsNullOrEmpty(floor))
                    floor = "Default";
                if (String.IsNullOrEmpty(room))
                    room = "Default";
                if (String.IsNullOrEmpty(section))
                    section = "Default";

                TempFormIOBuildings TempFormIOBuildings = null;
                TempFormIOFloors TempFormIOFloors = null;
                TempFormIORooms TempFormIORooms = null;
                TempFormIOSections TempFormIOSections = null;

                TempFormIOBuildings = _UoW.WorkOrderRepository.GetTempBuildingAsnotracking(building, requestmodel.wo_id);
                if (TempFormIOBuildings == null)
                {
                    TempFormIOBuildings = new TempFormIOBuildings();
                    TempFormIOBuildings.temp_formio_building_name = building;
                    TempFormIOBuildings.wo_id = requestmodel.wo_id;
                    TempFormIOBuildings.created_at = DateTime.UtcNow;
                    TempFormIOBuildings.site_id = temp_asset.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    TempFormIOBuildings.company_id = company_id;//Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                    var insertbuilding = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Insert(TempFormIOBuildings);
                    _UoW.SaveChanges();
                }

                TempFormIOFloors = _UoW.WorkOrderRepository.GetTempFloorAsnotracking(floor, TempFormIOBuildings.temp_formiobuilding_id, requestmodel.wo_id);
                if (TempFormIOFloors == null)
                {
                    TempFormIOFloors = new TempFormIOFloors();
                    TempFormIOFloors.temp_formio_floor_name = floor;
                    TempFormIOFloors.wo_id = requestmodel.wo_id;
                    TempFormIOFloors.temp_formiobuilding_id = TempFormIOBuildings.temp_formiobuilding_id;
                    TempFormIOFloors.created_at = DateTime.UtcNow;
                    TempFormIOFloors.site_id = temp_asset.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    TempFormIOFloors.company_id = company_id;//Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                    var insertfloor = await _UoW.BaseGenericRepository<TempFormIOFloors>().Insert(TempFormIOFloors);
                    _UoW.SaveChanges();
                }

                TempFormIORooms = _UoW.WorkOrderRepository.GetTempRoomAsnotracking(room, TempFormIOFloors.temp_formiofloor_id, requestmodel.wo_id);
                if (TempFormIORooms == null)
                {
                    TempFormIORooms = new TempFormIORooms();
                    TempFormIORooms.temp_formio_room_name = room;
                    TempFormIORooms.wo_id = requestmodel.wo_id;
                    TempFormIORooms.temp_formiofloor_id = TempFormIOFloors.temp_formiofloor_id;
                    TempFormIORooms.created_at = DateTime.UtcNow;
                    TempFormIORooms.site_id = temp_asset.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    TempFormIORooms.company_id = company_id;//Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                    var insertroom = await _UoW.BaseGenericRepository<TempFormIORooms>().Insert(TempFormIORooms);
                    _UoW.SaveChanges();
                }

                TempFormIOSections = _UoW.WorkOrderRepository.GetTempSectionAsnotracking(section, TempFormIORooms.temp_formioroom_id, requestmodel.wo_id);
                if (TempFormIOSections == null)
                {
                    TempFormIOSections = new TempFormIOSections();
                    TempFormIOSections.temp_formio_section_name = section;
                    TempFormIOSections.wo_id = requestmodel.wo_id;
                    TempFormIOSections.temp_formioroom_id = TempFormIORooms.temp_formioroom_id;
                    TempFormIOSections.created_at = DateTime.UtcNow;
                    TempFormIOSections.site_id = temp_asset.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    TempFormIOSections.company_id = company_id;//Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                    var insertsection = await _UoW.BaseGenericRepository<TempFormIOSections>().Insert(TempFormIOSections);
                    _UoW.SaveChanges();
                }


                TempLocationData.temp_formiobuilding_id = TempFormIOBuildings.temp_formiobuilding_id;
                TempLocationData.temp_formiofloor_id = TempFormIOFloors.temp_formiofloor_id;
                TempLocationData.temp_formioroom_id = TempFormIORooms.temp_formioroom_id;
                TempLocationData.temp_formiosection_id = TempFormIOSections.temp_formiosection_id;
            }
            return TempLocationData;
        }

        public async Task<WOOnboardingAssets> AssignTemplocationtoWO(WOOnboardingAssets get_asset, string building , string floor ,string room,string section  , Guid wo_id)
        {
            /// new flow for building location hierarchy
            TempFormIOBuildings get_building = null;
            get_building = _UoW.WorkOrderRepository.GetTempFormIOBuildingByName(building, wo_id);
            if (get_building == null)
            {
                get_building = new TempFormIOBuildings();
                get_building.temp_formio_building_name = building;
                get_building.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                get_building.wo_id = wo_id;
                get_building.created_at = DateTime.UtcNow;
                get_building.is_deleted = false;
                get_building.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                var insert_building = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Insert(get_building);
                _UoW.SaveChanges();
            }

            TempFormIOFloors get_floor = null;
            get_floor = _UoW.WorkOrderRepository.GetTempFormIOFloorByName(floor, get_building.temp_formiobuilding_id, wo_id);
            if (get_floor == null)
            {
                get_floor = new TempFormIOFloors();
                get_floor.temp_formio_floor_name = floor;
                get_floor.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                get_floor.wo_id = wo_id;
                get_floor.created_at = DateTime.UtcNow;
                get_floor.is_deleted = false;
                get_floor.temp_formiobuilding_id = get_building.temp_formiobuilding_id;
                get_floor.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                var insert_floor = await _UoW.BaseGenericRepository<TempFormIOFloors>().Insert(get_floor);
                _UoW.SaveChanges();
            }

            TempFormIORooms get_room = null;
            get_room = _UoW.WorkOrderRepository.GetTempFormIORoomByName(room, get_floor.temp_formiofloor_id,wo_id);
            if (get_room == null)
            {
                get_room = new TempFormIORooms();
                get_room.temp_formio_room_name = room;
                get_room.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                get_room.wo_id = wo_id;
                get_room.created_at = DateTime.UtcNow;
                get_room.is_deleted = false;
                get_room.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                get_room.temp_formiofloor_id = get_floor.temp_formiofloor_id;
                var insert_room = await _UoW.BaseGenericRepository<TempFormIORooms>().Insert(get_room);
                _UoW.SaveChanges();
            }

            TempFormIOSections get_section = null;
            get_section = _UoW.WorkOrderRepository.GetTempFormIOSectionByName(section, get_room.temp_formioroom_id, wo_id);
            if (get_section == null)
            {
                get_section = new TempFormIOSections();
                get_section.temp_formio_section_name = section;
                get_section.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                get_section.wo_id = wo_id;
                get_section.created_at = DateTime.UtcNow;
                get_section.is_deleted = false;
                get_section.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                get_section.temp_formioroom_id = get_room.temp_formioroom_id;
                var insert_section = await _UoW.BaseGenericRepository<TempFormIOSections>().Insert(get_section);
                _UoW.SaveChanges();
            }

            if(get_asset.WOOBAssetTempFormIOBuildingMapping == null)
            {
                get_asset.WOOBAssetTempFormIOBuildingMapping = new WOOBAssetTempFormIOBuildingMapping();
                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id = get_building.temp_formiobuilding_id;
                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id = get_floor.temp_formiofloor_id;
                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id = get_room.temp_formioroom_id;
                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id = get_section.temp_formiosection_id;
                get_asset.WOOBAssetTempFormIOBuildingMapping.created_at = DateTime.UtcNow;
                
            }
            else
            {
                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id = get_building.temp_formiobuilding_id;
                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id = get_floor.temp_formiofloor_id;
                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id = get_room.temp_formioroom_id;
                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id = get_section.temp_formiosection_id;
                get_asset.WOOBAssetTempFormIOBuildingMapping.created_at = DateTime.UtcNow;
                
            }
            await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_asset);
            return get_asset;
        }

        public async Task<Guid> AddSublevelComponentWoline(AddSublevelComponentWolineRequest request)
        {
            var get_asset_class = _UoW.WorkOrderRepository.GetAssetclassByID(request.inspectiontemplate_asset_class_id);

            WOOnboardingAssets get_asset = new WOOnboardingAssets();
            get_asset.asset_name = request.sublevelcomponent_asset_name;
            if (get_asset_class != null)
            {
                get_asset.asset_class_code = get_asset_class.asset_class_code;
                get_asset.asset_class_name = get_asset_class.asset_class_name;
            }
            get_asset.building = request.building;
            get_asset.floor = request.floor;
            get_asset.room = request.room;
            get_asset.section = request.section;
            get_asset.wo_id = request.wo_id;
            get_asset.asset_operating_condition_state = request.asset_operating_condition_state;
            get_asset.status = (int)Status.open;
            get_asset.component_level_type_id = (int)ComponentLevelTypes.SublevelComponent;
            get_asset.inspection_type = (int)MWO_inspection_wo_type.OnBoarding;
            get_asset.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
            get_asset.created_at = DateTime.UtcNow;
            get_asset.is_woline_from_other_inspection = request.is_woline_from_other_inspection;
            get_asset.condition_index_type = request.condition_index_type;
            get_asset.criticality_index_type = request.criticality_index_type;
            if (!String.IsNullOrEmpty(get_asset_class.form_nameplate_info))
            {
                get_asset.form_nameplate_info = AddNamePlateListData(get_asset_class.form_nameplate_info);
            }
            if (String.IsNullOrEmpty(get_asset.section))
            {
                get_asset.section = " default";
            }
            if(request.formiobuilding_id > 0 && request.formiofloor_id >0 && request.formioroom_id >0 && request.formiosection_id >0)
            {
                get_asset.WOLineBuildingMapping = new WOLineBuildingMapping();

                get_asset.WOLineBuildingMapping.formiobuilding_id = request.formiobuilding_id;
                get_asset.WOLineBuildingMapping.formiofloor_id = request.formiofloor_id;
                get_asset.WOLineBuildingMapping.formioroom_id = request.formioroom_id;
                get_asset.WOLineBuildingMapping.formiosection_id = request.formiosection_id;
                get_asset.WOLineBuildingMapping.created_at = DateTime.UtcNow;
            }
            if (request.temp_formiobuilding_id != null && request.temp_formiofloor_id != null && request.temp_formioroom_id != null && request.temp_formiosection_id != null)
            {
                get_asset.WOOBAssetTempFormIOBuildingMapping = new WOOBAssetTempFormIOBuildingMapping();

                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id = request.temp_formiobuilding_id;
                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id = request.temp_formiofloor_id;
                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id = request.temp_formioroom_id;
                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id = request.temp_formiosection_id;
                get_asset.WOOBAssetTempFormIOBuildingMapping.created_at = DateTime.UtcNow;
            }

            AddTempMasterLocationDataMainFunctionRequestModel req2 = new AddTempMasterLocationDataMainFunctionRequestModel();
            req2.temp_building = request.building;
            req2.temp_floor = request.floor;
            req2.temp_room = request.room;
            req2.wo_id = request.wo_id;

            var res_location = await AddTempMasterLocationDataMainFunction(req2);

            if (!String.IsNullOrEmpty(request.image_name))
            {
                get_asset.WOOnboardingAssetsImagesMapping = new List<WOOnboardingAssetsImagesMapping>();
                WOOnboardingAssetsImagesMapping WOOnboardingAssetsImagesMapping = new WOOnboardingAssetsImagesMapping();
                WOOnboardingAssetsImagesMapping.asset_photo = request.image_name;
                WOOnboardingAssetsImagesMapping.asset_photo_type = (int)AssetPhotoType.Nameplate_Photo;
                WOOnboardingAssetsImagesMapping.created_at = DateTime.UtcNow;

                get_asset.WOOnboardingAssetsImagesMapping.Add(WOOnboardingAssetsImagesMapping);
            }

            //new flow for adding exterior/Nameplate and multiple Additional photos for subcomponent
            if(request.subcomponent_image_list != null && request.subcomponent_image_list.Count > 0)
            {
                get_asset.WOOnboardingAssetsImagesMapping = new List<WOOnboardingAssetsImagesMapping>();
                foreach (var image in request.subcomponent_image_list)
                {
                    WOOnboardingAssetsImagesMapping WOOnboardingAssetsImagesMapping = new WOOnboardingAssetsImagesMapping();
                    WOOnboardingAssetsImagesMapping.asset_photo = image.image_name;
                    WOOnboardingAssetsImagesMapping.asset_thumbnail_photo = image.asset_thumbnail_photo;
                    WOOnboardingAssetsImagesMapping.asset_photo_type = image.image_type;
                    WOOnboardingAssetsImagesMapping.created_at = DateTime.UtcNow;

                    get_asset.WOOnboardingAssetsImagesMapping.Add(WOOnboardingAssetsImagesMapping);
                }
            }

            WOlineTopLevelcomponentMapping WOlinetoplevelcomponentMapping = new WOlineTopLevelcomponentMapping();
            WOlinetoplevelcomponentMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
            WOlinetoplevelcomponentMapping.created_at = DateTime.UtcNow;
            WOlinetoplevelcomponentMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
            WOlinetoplevelcomponentMapping.is_deleted = false;
            WOlinetoplevelcomponentMapping.woonboardingassets_id = get_asset.woonboardingassets_id;
            WOlinetoplevelcomponentMapping.toplevelcomponent_asset_id = request.woonboardingassets_id.Value;
            WOlinetoplevelcomponentMapping.is_toplevelcomponent_from_ob_wo = true;

            get_asset.WOlineTopLevelcomponentMapping = new List<WOlineTopLevelcomponentMapping>
            {
                WOlinetoplevelcomponentMapping
            };

            // add temp asset data 
            UpdateOBWOAssetDetailsRequestmodel temp_asset_request_data = new UpdateOBWOAssetDetailsRequestmodel();
            temp_asset_request_data.asset_name = request.sublevelcomponent_asset_name;
            temp_asset_request_data.inspectiontemplate_asset_class_id = request.inspectiontemplate_asset_class_id;
            
            temp_asset_request_data.building = request.building;
            temp_asset_request_data.floor = request.floor;
            temp_asset_request_data.room = request.room;
            temp_asset_request_data.condition_index_type = request.condition_index_type;
            temp_asset_request_data.criticality_index_type = request.criticality_index_type;
            temp_asset_request_data.temp_formiobuilding_id = request.temp_formiobuilding_id;
            temp_asset_request_data.temp_formiofloor_id = request.temp_formiofloor_id;
            temp_asset_request_data.temp_formioroom_id = request.temp_formioroom_id;
            temp_asset_request_data.section = request.section;
            temp_asset_request_data.component_level_type_id = (int)ComponentLevelTypes.SublevelComponent;

            temp_asset_request_data.temp_master_building_id = res_location.temp_master_building_id;
            temp_asset_request_data.temp_master_floor_id = res_location.temp_master_floor_id;
            temp_asset_request_data.temp_master_room_id = res_location.temp_master_room_id;

            temp_asset_request_data.wo_id = request.wo_id;
            temp_asset_request_data.site_id = get_asset.site_id;
            var temp_asset = await AddTempAssetData(temp_asset_request_data, new TempAsset());

            get_asset.tempasset_id = temp_asset;
            var inser = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Insert(get_asset);
            _UoW.SaveChanges();
            await AddUpdateWOOnboardingAssetsDateTimeTracking(get_asset.woonboardingassets_id, (int)WOLineActionsTypes.WorkStartDate,0);

            return get_asset.woonboardingassets_id;
        }


        public AddUpdateTempIssueFromWORequestmodel OBWOMakeRequestmodelforWOlineIssue(Guid woonboardingassets_id)
        {
            AddUpdateTempIssueFromWORequestmodel requestmodel = new AddUpdateTempIssueFromWORequestmodel();
            requestmodel.list_temp_issue = new List<TempIssueListRequest>();
            var obwoline = _UoW.WorkOrderRepository.GetWOlineByOBAssetId(woonboardingassets_id);
            int temp_issue_status = (int)Status.open;
            /*if (obwoline.status != (int)Status.open)
            {
                 temp_issue_status = (int)Status.InProgress;
            }*/
            if (obwoline.WorkOrders.wo_type == (int)Status.IR_Scan_WO) // for IR scan we have only WO type 
            {
                if (obwoline.flag_issue_osha_violation && obwoline.osha_violation != null && obwoline.osha_violation > 0) // if Osha Violation then create an issue with Osha 
                {
                    // check if issue is already exist or not for Osha violation in DB
                    var exist = obwoline.WOLineIssue.Where(x => x.issue_caused_id == (int)WOLine_Temp_Issue_Caused.OSha_Violation && !x.is_deleted).FirstOrDefault();
                    if (exist != null)
                    {
                        /// update Issue
                        TempIssueListRequest request = new TempIssueListRequest();
                        request.wo_line_issue_id = exist.wo_line_issue_id;
                        request.wo_id = exist.wo_id;
                        request.is_issue_linked_for_fix = obwoline.is_osha_violation_resolved;
                        request.form_retrived_asset_name = obwoline.asset_name;
                        request.issue_title = Issue_Title.Osha_Violation;
                        //request.issue_description = Enum.GetName(typeof(OSHA_Violations), obwoline.osha_violation);
                        request.issue_description = GlobalConstants.OSHAViolationDropdown(obwoline.osha_violation.Value);
                        request.is_deleted = false;

                        requestmodel.list_temp_issue.Add(request);
                    }
                    else
                    {
                        /// insert New Issue
                        /// 
                        TempIssueListRequest request = new TempIssueListRequest();
                        request.issue_title = Issue_Title.Osha_Violation;
                        request.issue_description = GlobalConstants.OSHAViolationDropdown(obwoline.osha_violation.Value);
                        request.is_deleted = false;
                        request.wo_id = obwoline.wo_id;
                        request.is_issue_linked_for_fix = obwoline.is_osha_violation_resolved;
                        request.temp_issue_status = temp_issue_status;
                        request.form_retrived_asset_name = obwoline.asset_name;
                        request.woonboardingassets_id = obwoline.woonboardingassets_id;
                        request.issue_type = (int)WOLine_Temp_Issue_Type.Compliance;
                        request.issue_caused_id = (int)WOLine_Temp_Issue_Caused.OSha_Violation;
                        request.osha_violation = obwoline.osha_violation;

                        // add asset_id if WO line is for existing Asset
                        if (obwoline.asset_id != null && obwoline.asset_id != Guid.Empty)
                        {
                            request.asset_id = obwoline.asset_id;
                        }

                        requestmodel.list_temp_issue.Add(request);
                    }
                }
                else
                {
                    // check if issue is exist or not if exist then delete that issue 
                    var exist = obwoline.WOLineIssue.Where(x => x.issue_caused_id == (int)WOLine_Temp_Issue_Caused.OSha_Violation && !x.is_deleted).FirstOrDefault();
                    if (exist != null)
                    {
                        /// update Issue
                        TempIssueListRequest request = new TempIssueListRequest();
                        request.wo_line_issue_id = exist.wo_line_issue_id;
                        request.wo_id = exist.wo_id;
                        request.is_deleted = true;
                        requestmodel.list_temp_issue.Add(request);
                    }
                }

                if (obwoline.flag_issue_nec_violation && obwoline.nec_violation != null && obwoline.nec_violation > 0) // if Osha Violation then create an issue with Osha 
                {
                    // check if issue is already exist or not for Osha violation in DB
                    var exist = obwoline.WOLineIssue.Where(x => x.issue_caused_id == (int)WOLine_Temp_Issue_Caused.NEC_Violation && !x.is_deleted).FirstOrDefault();
                    if (exist != null)
                    {
                        /// update Issue
                        TempIssueListRequest request = new TempIssueListRequest();
                        request.wo_line_issue_id = exist.wo_line_issue_id;
                        request.wo_id = exist.wo_id;
                        request.form_retrived_asset_name = obwoline.asset_name;
                        request.is_issue_linked_for_fix = obwoline.is_nec_violation_resolved;
                        request.issue_title = Issue_Title.NEC_Violation;
                        //request.issue_description = Enum.GetName(typeof(NEC_Violations), obwoline.nec_violation);
                        request.issue_description = GlobalConstants.NECViolationDropdown(obwoline.nec_violation.Value);
                        request.is_deleted = false;

                        requestmodel.list_temp_issue.Add(request);
                    }
                    else
                    {
                        /// insert New Issue
                        /// 
                        TempIssueListRequest request = new TempIssueListRequest();
                        request.issue_title = Issue_Title.NEC_Violation;
                        request.issue_description = GlobalConstants.NECViolationDropdown(obwoline.nec_violation.Value);
                        request.is_deleted = false;
                        request.wo_id = obwoline.wo_id;
                        request.temp_issue_status = temp_issue_status;
                        request.is_issue_linked_for_fix = obwoline.is_nec_violation_resolved;
                        request.form_retrived_asset_name = obwoline.asset_name;
                        request.issue_caused_id = (int)WOLine_Temp_Issue_Caused.NEC_Violation;
                        request.issue_type = (int)WOLine_Temp_Issue_Type.Compliance;
                        request.woonboardingassets_id = obwoline.woonboardingassets_id;
                        request.nec_violation = obwoline.nec_violation;
                        if (obwoline.asset_id != null && obwoline.asset_id != Guid.Empty)
                        {
                            request.asset_id = obwoline.asset_id;
                        }
                        requestmodel.list_temp_issue.Add(request);
                    }
                }
                else
                {
                    // check if issue is exist or not if exist then delete that issue 
                    var exist = obwoline.WOLineIssue.Where(x => x.issue_caused_id == (int)WOLine_Temp_Issue_Caused.NEC_Violation && !x.is_deleted).FirstOrDefault();
                    if (exist != null)
                    {
                        /// update Issue
                        TempIssueListRequest request = new TempIssueListRequest();
                        request.wo_line_issue_id = exist.wo_line_issue_id;
                        request.wo_id = exist.wo_id;
                        request.is_deleted = true;
                        requestmodel.list_temp_issue.Add(request);
                    }
                }
                if (obwoline.flag_issue_thermal_anamoly_detected && obwoline.thermal_anomaly_probable_cause != null && obwoline.thermal_anomaly_probable_cause > 0) // if thermal anamolly Violation then create an issue with Thermal 
                {
                    // check if issue is already exist or not for thermal violation in DB
                    var exist = obwoline.WOLineIssue.Where(x => x.issue_caused_id == (int)WOLine_Temp_Issue_Caused.Thermal_Anamoly_Violation && !x.is_deleted).FirstOrDefault();
                    if (exist != null)
                    {
                        /// update Issue
                        TempIssueListRequest request = new TempIssueListRequest();
                        request.wo_line_issue_id = exist.wo_line_issue_id;
                        request.wo_id = exist.wo_id;
                        request.is_issue_linked_for_fix = obwoline.is_thermal_anomaly_resolved;
                        request.form_retrived_asset_name = obwoline.asset_name;
                        request.issue_title = Issue_Title.Thermal_Anamoly;
                        request.issue_description = Enum.GetName(typeof(thermal_classification), obwoline.thermal_classification_id) + "," + GlobalConstants.ThermalProbableCauseDropdown(obwoline.thermal_anomaly_probable_cause.Value); //
                        request.is_deleted = false;

                        requestmodel.list_temp_issue.Add(request);
                    }
                    else
                    {
                        /// insert New Issue
                        /// 
                        TempIssueListRequest request = new TempIssueListRequest();
                        request.issue_title = Issue_Title.Thermal_Anamoly;
                        // request.issue_description = Enum.GetName(typeof(thermal_classification), obwoline.thermal_classification_id) + "," + Enum.GetName(typeof(Thermal_Anomaly_Probable_Cause), obwoline.thermal_anomaly_probable_cause); //
                        request.issue_description = Enum.GetName(typeof(thermal_classification), obwoline.thermal_classification_id) + "," + GlobalConstants.ThermalProbableCauseDropdown(obwoline.thermal_anomaly_probable_cause.Value); //
                        request.is_deleted = false;
                        request.wo_id = obwoline.wo_id;
                        request.temp_issue_status = temp_issue_status;
                        request.form_retrived_asset_name = obwoline.asset_name;
                        request.is_issue_linked_for_fix = obwoline.is_thermal_anomaly_resolved;
                        request.issue_caused_id = (int)WOLine_Temp_Issue_Caused.Thermal_Anamoly_Violation;
                        request.issue_type = (int)WOLine_Temp_Issue_Type.Thermal_Anamoly;
                        request.thermal_anomaly_sub_componant = obwoline.thermal_anomaly_sub_componant;
                        request.thermal_anomaly_measured_amps = obwoline.thermal_anomaly_measured_amps;
                        request.thermal_anomaly_refrence_temps = obwoline.thermal_anomaly_refrence_temps;
                        request.thermal_anomaly_measured_temps = obwoline.thermal_anomaly_measured_temps;
                        request.thermal_anomaly_additional_ir_photo = obwoline.thermal_anomaly_additional_ir_photo;
                        request.thermal_anomaly_location = obwoline.thermal_anomaly_location;
                        request.thermal_anomaly_probable_cause = obwoline.thermal_anomaly_probable_cause;
                        request.thermal_anomaly_recommendation = obwoline.thermal_anomaly_recommendation;
                        request.thermal_classification_id = obwoline.thermal_classification_id;
                        request.woonboardingassets_id = obwoline.woonboardingassets_id;

                        if (obwoline.asset_id != null && obwoline.asset_id != Guid.Empty)
                        {
                            request.asset_id = obwoline.asset_id;
                        }
                        requestmodel.list_temp_issue.Add(request);
                    }
                }
                else
                {
                    // check if issue is exist or not if exist then delete that issue 
                    var exist = obwoline.WOLineIssue.Where(x => x.issue_caused_id == (int)WOLine_Temp_Issue_Caused.Thermal_Anamoly_Violation && !x.is_deleted).FirstOrDefault();
                    if (exist != null)
                    {
                        /// update Issue
                        TempIssueListRequest request = new TempIssueListRequest();
                        request.wo_line_issue_id = exist.wo_line_issue_id;
                        request.wo_id = exist.wo_id;
                        request.is_deleted = true;
                        requestmodel.list_temp_issue.Add(request);
                    }
                }
            }
            else if (obwoline.inspection_type == (int)MWO_inspection_wo_type.OnBoarding)  // if wo line type is OB then only, create an Issue
            {
                if (obwoline.flag_issue_osha_violation && obwoline.osha_violation != null && obwoline.osha_violation > 0) // if Osha Violation then create an issue with Osha 
                {
                    // check if issue is already exist or not for Osha violation in DB
                    var exist = obwoline.WOLineIssue.Where(x => x.issue_caused_id == (int)WOLine_Temp_Issue_Caused.OSha_Violation && !x.is_deleted).FirstOrDefault();
                    if (exist != null)
                    {
                        /// update Issue
                        TempIssueListRequest request = new TempIssueListRequest();
                        request.wo_line_issue_id = exist.wo_line_issue_id;
                        request.wo_id = exist.wo_id;
                        request.form_retrived_asset_name = obwoline.asset_name;
                        request.is_issue_linked_for_fix = obwoline.is_osha_violation_resolved;

                        request.issue_title = Issue_Title.Osha_Violation;
                        //request.issue_description = Enum.GetName(typeof(OSHA_Violations), obwoline.osha_violation);
                        request.issue_description = GlobalConstants.OSHAViolationDropdown(obwoline.osha_violation.Value);
                        request.is_deleted = false;

                        requestmodel.list_temp_issue.Add(request);
                    }
                    else
                    {
                        /// insert New Issue
                        /// 
                        TempIssueListRequest request = new TempIssueListRequest();
                        request.issue_title = Issue_Title.Osha_Violation;
                        request.issue_description = GlobalConstants.OSHAViolationDropdown(obwoline.osha_violation.Value);
                        request.is_deleted = false;
                        request.wo_id = obwoline.wo_id;
                        request.temp_issue_status = temp_issue_status;
                        request.form_retrived_asset_name = obwoline.asset_name;
                        request.is_issue_linked_for_fix = obwoline.is_osha_violation_resolved;
                        request.woonboardingassets_id = obwoline.woonboardingassets_id;
                        request.issue_type = (int)WOLine_Temp_Issue_Type.Compliance;
                        request.issue_caused_id = (int)WOLine_Temp_Issue_Caused.OSha_Violation;
                        request.osha_violation = obwoline.osha_violation;
                        if (obwoline.asset_id != null && obwoline.asset_id != Guid.Empty)
                        {
                            request.asset_id = obwoline.asset_id;
                        }
                        requestmodel.list_temp_issue.Add(request);
                    }
                }
                else
                {
                    // check if issue is exist or not if exist then delete that issue 
                    var exist = obwoline.WOLineIssue.Where(x => x.issue_caused_id == (int)WOLine_Temp_Issue_Caused.OSha_Violation && !x.is_deleted).FirstOrDefault();
                    if (exist != null)
                    {
                        /// update Issue
                        TempIssueListRequest request = new TempIssueListRequest();
                        request.wo_line_issue_id = exist.wo_line_issue_id;
                        request.wo_id = exist.wo_id;
                        request.is_deleted = true;
                        requestmodel.list_temp_issue.Add(request);
                    }
                }

                if (obwoline.flag_issue_nec_violation && obwoline.nec_violation != null && obwoline.nec_violation > 0) // if Osha Violation then create an issue with Osha 
                {
                    // check if issue is already exist or not for Osha violation in DB
                    var exist = obwoline.WOLineIssue.Where(x => x.issue_caused_id == (int)WOLine_Temp_Issue_Caused.NEC_Violation && !x.is_deleted).FirstOrDefault();
                    if (exist != null)
                    {
                        /// update Issue
                        TempIssueListRequest request = new TempIssueListRequest();
                        request.wo_id = exist.wo_id;
                        request.wo_line_issue_id = exist.wo_line_issue_id;
                        request.form_retrived_asset_name = obwoline.asset_name;
                        request.is_issue_linked_for_fix = obwoline.is_nec_violation_resolved;
                        request.issue_title = Issue_Title.NEC_Violation;
                        //request.issue_description = Enum.GetName(typeof(NEC_Violations), obwoline.nec_violation);
                        request.issue_description = GlobalConstants.NECViolationDropdown(obwoline.nec_violation.Value);
                        request.is_deleted = false;

                        requestmodel.list_temp_issue.Add(request);
                    }
                    else
                    {
                        /// insert New Issue
                        /// 
                        TempIssueListRequest request = new TempIssueListRequest();
                        request.issue_title = Issue_Title.NEC_Violation;
                        request.issue_description = GlobalConstants.NECViolationDropdown(obwoline.nec_violation.Value);
                        request.is_deleted = false;
                        request.wo_id = obwoline.wo_id;
                        request.temp_issue_status = temp_issue_status;
                        request.is_issue_linked_for_fix = obwoline.is_nec_violation_resolved;
                        request.form_retrived_asset_name = obwoline.asset_name;
                        request.issue_caused_id = (int)WOLine_Temp_Issue_Caused.NEC_Violation;
                        request.issue_type = (int)WOLine_Temp_Issue_Type.Compliance;
                        request.woonboardingassets_id = obwoline.woonboardingassets_id;
                        request.nec_violation = obwoline.nec_violation;
                        if (obwoline.asset_id != null && obwoline.asset_id != Guid.Empty)
                        {
                            request.asset_id = obwoline.asset_id;
                        }
                        requestmodel.list_temp_issue.Add(request);
                    }
                }
                else
                {
                    // check if issue is exist or not if exist then delete that issue 
                    var exist = obwoline.WOLineIssue.Where(x => x.issue_caused_id == (int)WOLine_Temp_Issue_Caused.NEC_Violation && !x.is_deleted).FirstOrDefault();
                    if (exist != null)
                    {
                        /// update Issue
                        TempIssueListRequest request = new TempIssueListRequest();
                        request.wo_line_issue_id = exist.wo_line_issue_id;
                        request.wo_id = exist.wo_id;
                        request.is_deleted = true;
                        requestmodel.list_temp_issue.Add(request);
                    }
                }
            }
            else if (obwoline.inspection_type == (int)MWO_inspection_wo_type.PM)
            {
                string json_data = null;
                PMs get_pm = null;
                // for main Asset pm
                if (obwoline.ActiveAssetPMWOlineMapping != null && !String.IsNullOrEmpty(obwoline.ActiveAssetPMWOlineMapping.pm_form_output_data))
                {
                    json_data = obwoline.ActiveAssetPMWOlineMapping.pm_form_output_data;
                    get_pm = _UoW.WorkOrderRepository.GetPMById(obwoline.ActiveAssetPMWOlineMapping.AssetPMs.pm_id.Value);

                }
                else if(obwoline.TempActiveAssetPMWOlineMapping != null && !String.IsNullOrEmpty(obwoline.TempActiveAssetPMWOlineMapping.pm_form_output_data))
                {
                    json_data = obwoline.TempActiveAssetPMWOlineMapping.pm_form_output_data;
                    get_pm = _UoW.WorkOrderRepository.GetPMById(obwoline.TempActiveAssetPMWOlineMapping.TempAssetPMs.pm_id.Value);
                }
                if (!String.IsNullOrEmpty(json_data))
                {
                    try
                    {
                        dynamic jsonObject = JObject.Parse(json_data);
                        if(get_pm.pm_inspection_type_id == (int)PMInspectionTypeId.IRThermography)
                        {
                            foreach (JProperty property in jsonObject)
                            {
                                temp_issue_status = (int)Status.open;
                                string key = property.Name;
                                if(!String.IsNullOrEmpty(key) && key == "thermalAnamolyDetected") // create issue for thermal anamoly
                                {
                                    dynamic IssueObject = property.Value; // thermalAnamolyDetected object
                                    string test = IssueObject.test.value.ToString(); // ok / not ok
                                    if (test == "notOk")
                                    {
                                        string issue_title = Issue_Title.Thermal_Anamoly;
                                        string issue_desc = "";
                                        dynamic thermal_classification_object = IssueObject.thermalClassification;
                                        dynamic probableCause_object = IssueObject.probableCause;

                                        if(thermal_classification_object != null)
                                        {
                                            int thermal_classification_value = thermal_classification_object.value;
                                            issue_desc = Enum.GetName(typeof(thermal_classification), thermal_classification_value);
                                        }
                                        if (probableCause_object != null)
                                        {
                                            int probableCause_value = probableCause_object.value;
                                            if (!String.IsNullOrEmpty(issue_desc))
                                            {
                                                
                                                issue_desc = issue_desc + "," + GlobalConstants.ThermalProbableCauseDropdown(probableCause_value);
                                            }
                                            else
                                            {
                                                issue_desc =  GlobalConstants.ThermalProbableCauseDropdown(probableCause_value);
                                            }
                                        }
                                        // check if temp issue is exist then update 
                                        var exist = obwoline.WOLineIssue.Where(x => x.pm_issue_identity_key.ToLower() == key.ToLower() && !x.is_deleted).FirstOrDefault();
                                        if (exist != null)
                                        {
                                            TempIssueListRequest request = new TempIssueListRequest();

                                            request.issue_title = issue_title;
                                            request.wo_line_issue_id = exist.wo_line_issue_id;
                                            request.wo_id = exist.wo_id;
                                            if (!String.IsNullOrEmpty(obwoline.asset_name))
                                                request.form_retrived_asset_name = obwoline.asset_name;
                                            else if(obwoline.Asset!=null)
                                                request.form_retrived_asset_name = obwoline.Asset.name;

                                            request.issue_description = issue_desc;
                                            request.is_deleted = false;
                                            request.temp_issue_status = temp_issue_status;
                                            request.is_issue_linked_for_fix = false;

                                            // insert photos if exist in json
                                            dynamic before_photo_list = IssueObject.photos; // insert before photos
                                            if (before_photo_list != null)
                                            {
                                                foreach (var item in before_photo_list)
                                                {
                                                    string photo = item.ToString();
                                                    if (!String.IsNullOrEmpty(photo))
                                                    {
                                                        Uri uri = new Uri(photo);
                                                        string filename = System.IO.Path.GetFileName(uri.AbsolutePath);
                                                        if (request.list_temp_issue_images == null)
                                                        {
                                                            request.list_temp_issue_images = new List<TempIssueImagesRequest>();
                                                        }

                                                        TempIssueImagesRequest TempIssueImagesRequest = new TempIssueImagesRequest();
                                                        TempIssueImagesRequest.image_file_name = filename;
                                                        TempIssueImagesRequest.image_duration_type_id = (int)IssueImageDuration.before;

                                                        request.list_temp_issue_images.Add(TempIssueImagesRequest);
                                                    }
                                                }
                                            }
                                            requestmodel.list_temp_issue.Add(request);
                                        }
                                        else
                                        {
                                            TempIssueListRequest request = new TempIssueListRequest();
                                            request.list_temp_issue_images = new List<TempIssueImagesRequest>();
                                            request.issue_title = issue_title;
                                            request.issue_description = issue_desc;
                                            request.is_deleted = false;
                                            request.wo_id = obwoline.wo_id;
                                            request.temp_issue_status = temp_issue_status;
                                            if (!String.IsNullOrEmpty(obwoline.asset_name))
                                                request.form_retrived_asset_name = obwoline.asset_name;
                                            else if (obwoline.Asset != null)
                                                request.form_retrived_asset_name = obwoline.Asset.name;
                                            request.woonboardingassets_id = obwoline.woonboardingassets_id;
                                            request.issue_type = (int)WOLine_Temp_Issue_Type.Repair;
                                            request.issue_caused_id = (int)WOLine_Temp_Issue_Caused.Thermal_Anamoly_Violation;
                                            request.temp_issue_status = temp_issue_status;
                                            request.pm_issue_identity_key = key;
                                            request.is_issue_linked_for_fix = false;
                                            if (obwoline.asset_id != null && obwoline.asset_id != Guid.Empty)
                                            {
                                                request.asset_id = obwoline.asset_id;
                                            }
                                            // insert photos if exist in json
                                            dynamic before_photo_list = IssueObject.photos; // insert before photos
                                            if (before_photo_list != null)
                                            {
                                                foreach (var item in before_photo_list)
                                                {
                                                    string photo = item.ToString();
                                                    if (!String.IsNullOrEmpty(photo))
                                                    {
                                                        Uri uri = new Uri(photo);
                                                        string filename = System.IO.Path.GetFileName(uri.AbsolutePath);
                                                        if (request.list_temp_issue_images == null)
                                                        {
                                                            request.list_temp_issue_images = new List<TempIssueImagesRequest>();
                                                        }

                                                        TempIssueImagesRequest TempIssueImagesRequest = new TempIssueImagesRequest();
                                                        TempIssueImagesRequest.image_file_name = filename;
                                                        TempIssueImagesRequest.image_duration_type_id = (int)IssueImageDuration.before;

                                                        request.list_temp_issue_images.Add(TempIssueImagesRequest);
                                                    }
                                                }
                                            }
                                            requestmodel.list_temp_issue.Add(request);
                                        }
                                    }
                                    else // if exist then delete 
                                    {
                                        // check if issue is exist or not if exist then delete that issue 
                                        var exist = obwoline.WOLineIssue.Where(x => !String.IsNullOrEmpty(x.pm_issue_identity_key) && x.pm_issue_identity_key.ToLower() == key.ToLower() && !x.is_deleted).FirstOrDefault();
                                        if (exist != null)
                                        {
                                            /// update Issue
                                            TempIssueListRequest request = new TempIssueListRequest();
                                            request.wo_line_issue_id = exist.wo_line_issue_id;
                                            request.wo_id = exist.wo_id;
                                            request.is_deleted = true;
                                            requestmodel.list_temp_issue.Add(request);
                                        }
                                    }
                                }
                                if (!String.IsNullOrEmpty(key) && key == "necViolation") // create issue for NEC violation
                                {
                                    dynamic IssueObject = property.Value; // NEC violation object
                                    string test = IssueObject.test.value.ToString(); // ok / not ok
                                    if (test == "notOk")
                                    {
                                        string issue_title = Issue_Title.NEC_Violation;
                                        string issue_desc = "";
                                        dynamic violation_object = IssueObject.violation;
                                        
                                        if (violation_object != null)
                                        {
                                            int violation_object_value = violation_object.value;
                                            issue_desc = GlobalConstants.NECViolationDropdown(violation_object_value);// Enum.GetName(typeof(NEC_Violations), violation_object_value);
                                        }
                                        // check if temp issue is exist then update 
                                        var exist = obwoline.WOLineIssue.Where(x => x.pm_issue_identity_key.ToLower() == key.ToLower() && !x.is_deleted).FirstOrDefault();
                                        if (exist != null)
                                        {
                                            TempIssueListRequest request = new TempIssueListRequest();

                                            request.issue_title = issue_title;
                                            request.wo_line_issue_id = exist.wo_line_issue_id;
                                            request.wo_id = exist.wo_id;
                                            if (!String.IsNullOrEmpty(obwoline.asset_name))
                                                request.form_retrived_asset_name = obwoline.asset_name;
                                            else if (obwoline.Asset != null)
                                                request.form_retrived_asset_name = obwoline.Asset.name;
                                            request.issue_description = issue_desc;
                                            request.is_deleted = false;
                                            request.temp_issue_status = temp_issue_status;
                                            request.is_issue_linked_for_fix = false;

                                            // insert photos if exist in json
                                            dynamic before_photo_list = IssueObject.photos; // insert before photos
                                            if (before_photo_list != null)
                                            {
                                                foreach (var item in before_photo_list)
                                                {
                                                    string photo = item.ToString();
                                                    if (!String.IsNullOrEmpty(photo))
                                                    {
                                                        Uri uri = new Uri(photo);
                                                        string filename = System.IO.Path.GetFileName(uri.AbsolutePath);
                                                        if (request.list_temp_issue_images == null)
                                                        {
                                                            request.list_temp_issue_images = new List<TempIssueImagesRequest>();
                                                        }

                                                        TempIssueImagesRequest TempIssueImagesRequest = new TempIssueImagesRequest();
                                                        TempIssueImagesRequest.image_file_name = filename;
                                                        TempIssueImagesRequest.image_duration_type_id = (int)IssueImageDuration.before;

                                                        request.list_temp_issue_images.Add(TempIssueImagesRequest);
                                                    }
                                                }
                                            }
                                            requestmodel.list_temp_issue.Add(request);
                                        }
                                        else
                                        {
                                            TempIssueListRequest request = new TempIssueListRequest();
                                            request.list_temp_issue_images = new List<TempIssueImagesRequest>();
                                            request.issue_title = issue_title;
                                            request.issue_description = issue_desc;
                                            request.is_deleted = false;
                                            request.wo_id = obwoline.wo_id;
                                            request.temp_issue_status = temp_issue_status;
                                            if (!String.IsNullOrEmpty(obwoline.asset_name))
                                                request.form_retrived_asset_name = obwoline.asset_name;
                                            else if (obwoline.Asset != null)
                                                request.form_retrived_asset_name = obwoline.Asset.name;
                                            request.woonboardingassets_id = obwoline.woonboardingassets_id;
                                            request.issue_type = (int)WOLine_Temp_Issue_Type.Repair;
                                            request.issue_caused_id = (int)WOLine_Temp_Issue_Caused.NEC_Violation;
                                            request.temp_issue_status = temp_issue_status;
                                            request.pm_issue_identity_key = key;
                                            request.is_issue_linked_for_fix = false;
                                            if (obwoline.asset_id != null && obwoline.asset_id != Guid.Empty)
                                            {
                                                request.asset_id = obwoline.asset_id;
                                            }
                                            // insert photos if exist in json
                                            dynamic before_photo_list = IssueObject.photos; // insert before photos
                                            if (before_photo_list != null)
                                            {
                                                foreach (var item in before_photo_list)
                                                {
                                                    string photo = item.ToString();
                                                    if (!String.IsNullOrEmpty(photo))
                                                    {
                                                        Uri uri = new Uri(photo);
                                                        string filename = System.IO.Path.GetFileName(uri.AbsolutePath);
                                                        if (request.list_temp_issue_images == null)
                                                        {
                                                            request.list_temp_issue_images = new List<TempIssueImagesRequest>();
                                                        }

                                                        TempIssueImagesRequest TempIssueImagesRequest = new TempIssueImagesRequest();
                                                        TempIssueImagesRequest.image_file_name = filename;
                                                        TempIssueImagesRequest.image_duration_type_id = (int)IssueImageDuration.before;

                                                        request.list_temp_issue_images.Add(TempIssueImagesRequest);
                                                    }
                                                }
                                            }
                                            requestmodel.list_temp_issue.Add(request);
                                        }
                                    }
                                    else // if exist then delete 
                                    {
                                        // check if issue is exist or not if exist then delete that issue 
                                        var exist = obwoline.WOLineIssue.Where(x => !String.IsNullOrEmpty(x.pm_issue_identity_key) && x.pm_issue_identity_key.ToLower() == key.ToLower() && !x.is_deleted).FirstOrDefault();
                                        if (exist != null)
                                        {
                                            /// update Issue
                                            TempIssueListRequest request = new TempIssueListRequest();
                                            request.wo_line_issue_id = exist.wo_line_issue_id;
                                            request.wo_id = exist.wo_id;
                                            request.is_deleted = true;
                                            requestmodel.list_temp_issue.Add(request);
                                        }
                                    }
                                }
                                if (!String.IsNullOrEmpty(key) && key == "oshaViolation") // create issue for Osha violation
                                {
                                    dynamic IssueObject = property.Value; // oshaviolation object
                                    dynamic test_obj = IssueObject.test; // ok / not ok
                                    if (test_obj != null)
                                    {
                                        string test = IssueObject.test.value.ToString(); // ok / not ok
                                        if (test == "notOk")
                                        {
                                            string issue_title = Issue_Title.Osha_Violation;
                                            string issue_desc = "";
                                            dynamic oshaviolation_object = IssueObject.violation;

                                            if (oshaviolation_object != null)
                                            {
                                                int osha_violation_value = oshaviolation_object.value;
                                                issue_desc = GlobalConstants.OSHAViolationDropdown(osha_violation_value);
                                            }
                                            // check if temp issue is exist then update 
                                            var exist = obwoline.WOLineIssue.Where(x => x.pm_issue_identity_key.ToLower() == key.ToLower() && !x.is_deleted).FirstOrDefault();
                                            if (exist != null)
                                            {
                                                TempIssueListRequest request = new TempIssueListRequest();

                                                request.issue_title = issue_title;
                                                request.wo_line_issue_id = exist.wo_line_issue_id;
                                                request.wo_id = exist.wo_id;
                                                if (!String.IsNullOrEmpty(obwoline.asset_name))
                                                    request.form_retrived_asset_name = obwoline.asset_name;
                                                else if (obwoline.Asset != null)
                                                    request.form_retrived_asset_name = obwoline.Asset.name;
                                                request.issue_description = issue_desc;
                                                request.is_deleted = false;
                                                request.temp_issue_status = temp_issue_status;
                                                request.is_issue_linked_for_fix = false;

                                                // insert photos if exist in json
                                                dynamic before_photo_list = IssueObject.photos; // insert before photos
                                                if (before_photo_list != null)
                                                {
                                                    foreach (var item in before_photo_list)
                                                    {
                                                        string photo = item.ToString();
                                                        if (!String.IsNullOrEmpty(photo))
                                                        {
                                                            Uri uri = new Uri(photo);
                                                            string filename = System.IO.Path.GetFileName(uri.AbsolutePath);
                                                            if (request.list_temp_issue_images == null)
                                                            {
                                                                request.list_temp_issue_images = new List<TempIssueImagesRequest>();
                                                            }

                                                            TempIssueImagesRequest TempIssueImagesRequest = new TempIssueImagesRequest();
                                                            TempIssueImagesRequest.image_file_name = filename;
                                                            TempIssueImagesRequest.image_duration_type_id = (int)IssueImageDuration.before;

                                                            request.list_temp_issue_images.Add(TempIssueImagesRequest);
                                                        }
                                                    }
                                                }
                                                requestmodel.list_temp_issue.Add(request);
                                            }
                                            else
                                            {
                                                TempIssueListRequest request = new TempIssueListRequest();
                                                request.list_temp_issue_images = new List<TempIssueImagesRequest>();
                                                request.issue_title = issue_title;
                                                request.issue_description = issue_desc;
                                                request.is_deleted = false;
                                                request.wo_id = obwoline.wo_id;
                                                request.temp_issue_status = temp_issue_status;
                                                if (!String.IsNullOrEmpty(obwoline.asset_name))
                                                    request.form_retrived_asset_name = obwoline.asset_name;
                                                else if (obwoline.Asset != null)
                                                    request.form_retrived_asset_name = obwoline.Asset.name;
                                                request.woonboardingassets_id = obwoline.woonboardingassets_id;
                                                request.issue_type = (int)WOLine_Temp_Issue_Type.Repair;
                                                request.issue_caused_id = (int)WOLine_Temp_Issue_Caused.OSha_Violation;
                                                request.temp_issue_status = temp_issue_status;
                                                request.pm_issue_identity_key = key;
                                                request.is_issue_linked_for_fix = false;
                                                if (obwoline.asset_id != null && obwoline.asset_id != Guid.Empty)
                                                {
                                                    request.asset_id = obwoline.asset_id;
                                                }
                                                // insert photos if exist in json
                                                dynamic before_photo_list = IssueObject.photos; // insert before photos
                                                if (before_photo_list != null)
                                                {
                                                    foreach (var item in before_photo_list)
                                                    {
                                                        string photo = item.ToString();
                                                        if (!String.IsNullOrEmpty(photo))
                                                        {
                                                            Uri uri = new Uri(photo);
                                                            string filename = System.IO.Path.GetFileName(uri.AbsolutePath);
                                                            if (request.list_temp_issue_images == null)
                                                            {
                                                                request.list_temp_issue_images = new List<TempIssueImagesRequest>();
                                                            }

                                                            TempIssueImagesRequest TempIssueImagesRequest = new TempIssueImagesRequest();
                                                            TempIssueImagesRequest.image_file_name = filename;
                                                            TempIssueImagesRequest.image_duration_type_id = (int)IssueImageDuration.before;

                                                            request.list_temp_issue_images.Add(TempIssueImagesRequest);
                                                        }
                                                    }
                                                }
                                                requestmodel.list_temp_issue.Add(request);
                                            }
                                        }
                                        else // if exist then delete 
                                        {
                                            // check if issue is exist or not if exist then delete that issue 
                                            var exist = obwoline.WOLineIssue.Where(x => !String.IsNullOrEmpty(x.pm_issue_identity_key) && x.pm_issue_identity_key.ToLower() == key.ToLower() && !x.is_deleted).FirstOrDefault();
                                            if (exist != null)
                                            {
                                                /// update Issue
                                                TempIssueListRequest request = new TempIssueListRequest();
                                                request.wo_line_issue_id = exist.wo_line_issue_id;
                                                request.wo_id = exist.wo_id;
                                                request.is_deleted = true;
                                                requestmodel.list_temp_issue.Add(request);
                                            }
                                        }
                                    }
                                    
                                }
                                if (!String.IsNullOrEmpty(key) && key == "irScanPhotos") // IR/Visual photos
                                {
                                    dynamic IRVisualImageListObj = property.Value; // thermalAnamolyDetected object
                                    if (IRVisualImageListObj != null)
                                    {
                                        requestmodel.list_pm_ir_scan_images = new List<IRVisualScanImages>();
                                        foreach (var item in IRVisualImageListObj)
                                        {
                                            string irPhoto = item.irPhoto;
                                            string visualPhoto = item.visualPhoto;
                                            string img_extention_type = item.type.value;

                                            
                                            if(!String.IsNullOrEmpty(irPhoto) || !String.IsNullOrEmpty(visualPhoto))
                                            {
                                                IRVisualScanImages IRVisualScanImages = new IRVisualScanImages();
                                                if (!String.IsNullOrEmpty(irPhoto))
                                                {
                                                    IRVisualScanImages.ir_image_label = irPhoto + img_extention_type;
                                                }
                                                if (!String.IsNullOrEmpty(visualPhoto))
                                                {
                                                    IRVisualScanImages.visual_image_label = visualPhoto + img_extention_type;
                                                }
                                                requestmodel.list_pm_ir_scan_images.Add(IRVisualScanImages);
                                            }

                                            
                                        }
                                    }
                                }
                                if (!String.IsNullOrEmpty(key) && key == "footer")
                                {
                                    dynamic footervalue = property.Value;
                                    if (footervalue != null)
                                    {
                                        /// Clear PM Item section
                                        string clear_pm_string = footervalue.clearPmItem.value.ToString();
                                        if (clear_pm_string == "yes")
                                        {
                                            requestmodel.is_pm_clear = true;
                                        }

                                        //additional photos section
                                        dynamic Additional_photo_list = footervalue.additionalPhotos;
                                        if (Additional_photo_list != null)
                                        {
                                            requestmodel.list_pm_additional_images = new List<PMAdditionalImagesRequest>();
                                            foreach (var item in Additional_photo_list)
                                            {
                                                string photo_type = item.type.value;
                                                string caption = item.caption;
                                                string photo = item.photo;

                                                if (!String.IsNullOrEmpty(photo))
                                                {
                                                    Uri uri = new Uri(photo);
                                                    string filename = System.IO.Path.GetFileName(uri.AbsolutePath);
                                                    int asset_photo_type = 1;
                                                    int image_duration_type = 0;
                                                    if (!String.IsNullOrEmpty(photo_type))
                                                    {
                                                        if (photo_type.ToLower() == "general")
                                                            asset_photo_type = (int)AssetPhotoType.PM_Additional_General_photo;

                                                        if (photo_type.ToLower() == "nameplate")
                                                            asset_photo_type = (int)AssetPhotoType.PM_Additional_Nameplate_photo;

                                                        if (photo_type.ToLower() == "before")
                                                        {
                                                            asset_photo_type = (int)AssetPhotoType.PM_Additional_Before_photo;
                                                            image_duration_type = (int)IssueImageDuration.before;
                                                        }

                                                        if (photo_type.ToLower() == "after")
                                                        {
                                                            asset_photo_type = (int)AssetPhotoType.PM_Additional_After_photo;
                                                            image_duration_type = (int)IssueImageDuration.after;
                                                        }

                                                        if (photo_type.ToLower() == "environment")
                                                            asset_photo_type = (int)AssetPhotoType.PM_Additional_Environment_photo;
                                                    }

                                                    PMAdditionalImagesRequest PMAdditionalImagesRequest = new PMAdditionalImagesRequest();
                                                    PMAdditionalImagesRequest.image_name = filename;
                                                    PMAdditionalImagesRequest.image_type = asset_photo_type;
                                                    PMAdditionalImagesRequest.pm_image_caption = item.caption;

                                                    requestmodel.list_pm_additional_images.Add(PMAdditionalImagesRequest);
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                        }
                        else
                        {

                            // Iterate through all properties and retrieve their values
                            foreach (JProperty property in jsonObject)
                            {
                                temp_issue_status = (int)Status.open;
                                string key = property.Name;
                                if (!String.IsNullOrEmpty(key) && key != "header" && key != "footer" && key != "metaData")
                                {
                                    dynamic value = property.Value;

                                    string test = value.test.value.ToString();
                                    if (test == "notOk")
                                    {
                                        string issue_title = value.title;
                                        string issue_desc = value.issueDescription;
                                        var issue_type_obj = value.issueType;

                                        int issue_type = 0;
                                        string issue_comment = value.comments;
                                        string resolved_value = null;
                                        if (value.resolved != null)
                                        {
                                            resolved_value = value.resolved.value.ToString();
                                        }

                                        if (resolved_value == "yes")
                                        {
                                            //  temp_issue_status = (int)Status.Completed;
                                        }
                                        if (issue_type_obj != null)
                                        {
                                            if (issue_type_obj.value == 1)
                                            {
                                                issue_type = (int)WOLine_Temp_Issue_Type.Compliance;

                                            }
                                            else if (issue_type_obj.value == 2)
                                            {
                                                issue_type = (int)WOLine_Temp_Issue_Type.Thermal_Anamoly;
                                            }
                                            else if (issue_type_obj.value == 3)
                                            {
                                                issue_type = (int)WOLine_Temp_Issue_Type.Repair;
                                            }
                                            else if (issue_type_obj.value == 4)
                                            {
                                                issue_type = (int)WOLine_Temp_Issue_Type.Replace;
                                            }
                                            else if (issue_type_obj.value == 6)
                                            {
                                                issue_type = (int)WOLine_Temp_Issue_Type.Other;
                                            }
                                        }
                                        // check if temp issue is exist then update 
                                        var exist = obwoline.WOLineIssue.Where(x => x.pm_issue_identity_key.ToLower() == key.ToLower() && !x.is_deleted).FirstOrDefault();
                                        if (exist != null)
                                        {
                                            /// update Issue
                                            TempIssueListRequest request = new TempIssueListRequest();

                                            request.issue_title = issue_title;
                                            request.wo_line_issue_id = exist.wo_line_issue_id;
                                            request.wo_id = exist.wo_id;
                                            if (!String.IsNullOrEmpty(obwoline.asset_name))
                                                request.form_retrived_asset_name = obwoline.asset_name;
                                            else if (obwoline.Asset != null)
                                                request.form_retrived_asset_name = obwoline.Asset.name;
                                            request.issue_description = issue_desc;
                                            request.is_deleted = false;
                                            request.temp_issue_status = temp_issue_status;
                                            request.issue_type = issue_type;
                                            request.atmw_first_comment = issue_comment;
                                            request.is_issue_linked_for_fix = false;
                                            if (resolved_value == "yes")
                                            {
                                                request.is_issue_linked_for_fix = true;
                                            }
                                            // insert photos if exist in json
                                            dynamic before_photo_list = value.beforePhoto; // insert before photos
                                            if (before_photo_list != null)
                                            {
                                                foreach (var item in before_photo_list)
                                                {
                                                    string photo = item.ToString();
                                                    if (!String.IsNullOrEmpty(photo))
                                                    {
                                                        Uri uri = new Uri(photo);
                                                        string filename = System.IO.Path.GetFileName(uri.AbsolutePath);
                                                        if (request.list_temp_issue_images == null)
                                                        {
                                                            request.list_temp_issue_images = new List<TempIssueImagesRequest>();
                                                        }

                                                        TempIssueImagesRequest TempIssueImagesRequest = new TempIssueImagesRequest();
                                                        TempIssueImagesRequest.image_file_name = filename;
                                                        TempIssueImagesRequest.image_duration_type_id = (int)IssueImageDuration.before;

                                                        request.list_temp_issue_images.Add(TempIssueImagesRequest);
                                                    }
                                                }
                                            }

                                            // insert after photos
                                            dynamic after_photo_list = value.afterPhoto;
                                            if (after_photo_list != null)
                                            {
                                                foreach (var item in after_photo_list)
                                                {
                                                    string photo = item.ToString();
                                                    if (!String.IsNullOrEmpty(photo))
                                                    {
                                                        Uri uri = new Uri(photo);
                                                        string filename = System.IO.Path.GetFileName(uri.AbsolutePath);
                                                        if (request.list_temp_issue_images == null)
                                                        {
                                                            request.list_temp_issue_images = new List<TempIssueImagesRequest>();
                                                        }

                                                        TempIssueImagesRequest TempIssueImagesRequest = new TempIssueImagesRequest();
                                                        TempIssueImagesRequest.image_file_name = filename;
                                                        TempIssueImagesRequest.image_duration_type_id = (int)IssueImageDuration.after;

                                                        request.list_temp_issue_images.Add(TempIssueImagesRequest);
                                                    }
                                                }
                                            }


                                            requestmodel.list_temp_issue.Add(request);
                                        }
                                        else // insert new issue
                                        {
                                            TempIssueListRequest request = new TempIssueListRequest();
                                            request.list_temp_issue_images = new List<TempIssueImagesRequest>();
                                            request.list_temp_issue_images = new List<TempIssueImagesRequest>();
                                            request.issue_title = issue_title;
                                            request.issue_description = issue_desc;
                                            request.is_deleted = false;
                                            request.wo_id = obwoline.wo_id;
                                            request.temp_issue_status = temp_issue_status;
                                            if (!String.IsNullOrEmpty(obwoline.asset_name))
                                                request.form_retrived_asset_name = obwoline.asset_name;
                                            else if (obwoline.Asset != null)
                                                request.form_retrived_asset_name = obwoline.Asset.name;
                                            request.woonboardingassets_id = obwoline.woonboardingassets_id;
                                            request.issue_type = issue_type;
                                            request.issue_caused_id = (int)WOLine_Temp_Issue_Caused.PM;
                                            request.temp_issue_status = temp_issue_status;
                                            request.atmw_first_comment = issue_comment;
                                            request.pm_issue_identity_key = key;
                                            request.is_issue_linked_for_fix = false;
                                            if (resolved_value == "yes")
                                            {
                                                request.is_issue_linked_for_fix = true;
                                            }
                                            if (obwoline.asset_id != null && obwoline.asset_id != Guid.Empty)
                                            {
                                                request.asset_id = obwoline.asset_id;
                                            }


                                            // insert photos if exist in json
                                            dynamic before_photo_list = value.beforePhoto;
                                            if (before_photo_list != null)
                                            {
                                                foreach (var item in before_photo_list)
                                                {
                                                    string photo = item.ToString();
                                                    if (!String.IsNullOrEmpty(photo))
                                                    {

                                                        Uri uri = new Uri(photo);
                                                        string filename = System.IO.Path.GetFileName(uri.AbsolutePath);
                                                        if (request.list_temp_issue_images == null)
                                                        {
                                                            request.list_temp_issue_images = new List<TempIssueImagesRequest>();
                                                        }

                                                        TempIssueImagesRequest TempIssueImagesRequest = new TempIssueImagesRequest();
                                                        TempIssueImagesRequest.image_file_name = filename;
                                                        TempIssueImagesRequest.image_duration_type_id = (int)IssueImageDuration.before;

                                                        request.list_temp_issue_images.Add(TempIssueImagesRequest);
                                                    }
                                                }
                                            }


                                            // insert after photos
                                            dynamic after_photo_list = value.afterPhoto;
                                            if (after_photo_list != null)
                                            {
                                                foreach (var item in after_photo_list)
                                                {
                                                    string photo = item.ToString();
                                                    if (!String.IsNullOrEmpty(photo))
                                                    {

                                                        Uri uri = new Uri(photo);
                                                        string filename = System.IO.Path.GetFileName(uri.AbsolutePath);
                                                        if (request.list_temp_issue_images == null)
                                                        {
                                                            request.list_temp_issue_images = new List<TempIssueImagesRequest>();
                                                        }

                                                        TempIssueImagesRequest TempIssueImagesRequest = new TempIssueImagesRequest();
                                                        TempIssueImagesRequest.image_file_name = filename;
                                                        TempIssueImagesRequest.image_duration_type_id = (int)IssueImageDuration.after;

                                                        request.list_temp_issue_images.Add(TempIssueImagesRequest);
                                                    }
                                                }
                                            }
                                            requestmodel.list_temp_issue.Add(request);
                                        }
                                    }
                                    else // if exist then delete 
                                    {
                                        // check if issue is exist or not if exist then delete that issue 
                                        var exist = obwoline.WOLineIssue.Where(x => !String.IsNullOrEmpty(x.pm_issue_identity_key) && x.pm_issue_identity_key.ToLower() == key.ToLower() && !x.is_deleted).FirstOrDefault();
                                        if (exist != null)
                                        {
                                            /// update Issue
                                            TempIssueListRequest request = new TempIssueListRequest();
                                            request.wo_line_issue_id = exist.wo_line_issue_id;
                                            request.wo_id = exist.wo_id;
                                            request.is_deleted = true;
                                            requestmodel.list_temp_issue.Add(request);
                                        }
                                    }
                                }
                                if (!String.IsNullOrEmpty(key) && key == "footer")
                                {
                                    dynamic footervalue = property.Value;
                                    if (footervalue != null)
                                    {
                                        /// Clear PM Item section
                                        string clear_pm_string = footervalue.clearPmItem.value.ToString();
                                        if (clear_pm_string == "yes")
                                        {
                                            requestmodel.is_pm_clear = true;
                                        }

                                        //additional photos section
                                        dynamic Additional_photo_list = footervalue.additionalPhotos;
                                        if (Additional_photo_list != null)
                                        {
                                            requestmodel.list_pm_additional_images = new List<PMAdditionalImagesRequest>();
                                            foreach (var item in Additional_photo_list)
                                            {
                                                string photo_type = item.type.value;
                                                string caption = item.caption;
                                                string photo = item.photo;

                                                if (!String.IsNullOrEmpty(photo))
                                                {
                                                    Uri uri = new Uri(photo);
                                                    string filename = System.IO.Path.GetFileName(uri.AbsolutePath);
                                                    int asset_photo_type = 1;
                                                    int image_duration_type = 0;
                                                    if (!String.IsNullOrEmpty(photo_type))
                                                    {
                                                        if (photo_type.ToLower() == "general")
                                                            asset_photo_type = (int)AssetPhotoType.PM_Additional_General_photo;

                                                        if (photo_type.ToLower() == "nameplate")
                                                            asset_photo_type = (int)AssetPhotoType.PM_Additional_Nameplate_photo;

                                                        if (photo_type.ToLower() == "before")
                                                        {
                                                            asset_photo_type = (int)AssetPhotoType.PM_Additional_Before_photo;
                                                            image_duration_type = (int)IssueImageDuration.before;
                                                        }

                                                        if (photo_type.ToLower() == "after")
                                                        {
                                                            asset_photo_type = (int)AssetPhotoType.PM_Additional_After_photo;
                                                            image_duration_type = (int)IssueImageDuration.after;
                                                        }

                                                        if (photo_type.ToLower() == "environment")
                                                            asset_photo_type = (int)AssetPhotoType.PM_Additional_Environment_photo;
                                                    }

                                                    PMAdditionalImagesRequest PMAdditionalImagesRequest = new PMAdditionalImagesRequest();
                                                    PMAdditionalImagesRequest.image_name = filename;
                                                    PMAdditionalImagesRequest.image_type = asset_photo_type;
                                                    PMAdditionalImagesRequest.pm_image_caption = item.caption;

                                                    requestmodel.list_pm_additional_images.Add(PMAdditionalImagesRequest);
                                                }
                                            }
                                        }

                                    }
                                }

                            }
                            /// new flow: if we change from energized to deenergized then all object of ok/not-ok will not come in json same will be happen viceversa , 
                            /// so we need to identify previose inspection issue if it is exist then delete.
                            var requested_issue = requestmodel.list_temp_issue.Where(x => x.wo_line_issue_id != null).Select(x => x.wo_line_issue_id).ToList();
                            var previos_inspection_issue = obwoline.WOLineIssue.Where(x => !requested_issue.Contains(x.wo_line_issue_id) && !x.is_deleted).ToList();
                            foreach (var Item in previos_inspection_issue)
                            {
                                TempIssueListRequest request = new TempIssueListRequest();
                                request.wo_line_issue_id = Item.wo_line_issue_id;
                                request.wo_id = Item.wo_id;
                                request.is_deleted = true;
                                requestmodel.list_temp_issue.Add(request);
                            }
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                }

            }
            return requestmodel;
        }

        public async Task<int> AddUpdateTempIssueFromWO(AddUpdateTempIssueFromWORequestmodel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;

            foreach (var tempp_issue in requestmodel.list_temp_issue)
            {
                //var get_wo = _UoW.WorkOrderRepository.GetWObyIDForOfflineIssue(tempp_issue.wo_id.Value);
                var get_wo = _UoW.WorkOrderRepository.GetWObyIDForOfflineIssue(tempp_issue.wo_id.Value);
                if (tempp_issue.wo_line_issue_id != null)
                {
                    var wo_line_issue = _UoW.WorkOrderRepository.GetWOLineIssueById(tempp_issue.wo_line_issue_id.Value);

                    if (!tempp_issue.is_deleted) // if request is to delete records then do not updte any thing other than is delete flag
                    {
                        wo_line_issue.issue_title = tempp_issue.issue_title;
                        wo_line_issue.issue_description = tempp_issue.issue_description;
                        wo_line_issue.form_retrived_asset_name = tempp_issue.form_retrived_asset_name;
                        wo_line_issue.is_issue_linked_for_fix = tempp_issue.is_issue_linked_for_fix;
                        wo_line_issue.atmw_first_comment = tempp_issue.atmw_first_comment;
                        wo_line_issue.issue_status = (int)Status.open;
                        wo_line_issue.thermal_anomaly_sub_componant = tempp_issue.thermal_anomaly_sub_componant;
                        wo_line_issue.thermal_anomaly_measured_amps = tempp_issue.thermal_anomaly_measured_amps;
                        wo_line_issue.thermal_anomaly_refrence_temps = tempp_issue.thermal_anomaly_refrence_temps;
                        wo_line_issue.thermal_anomaly_measured_temps = tempp_issue.thermal_anomaly_measured_temps;
                        wo_line_issue.thermal_anomaly_additional_ir_photo = tempp_issue.thermal_anomaly_additional_ir_photo;
                        wo_line_issue.thermal_anomaly_location = tempp_issue.thermal_anomaly_location;
                        wo_line_issue.thermal_anomaly_probable_cause = tempp_issue.thermal_anomaly_probable_cause;
                        wo_line_issue.thermal_anomaly_recommendation = tempp_issue.thermal_anomaly_recommendation;
                        wo_line_issue.thermal_classification_id = tempp_issue.thermal_classification_id;
                        wo_line_issue.nec_violation = tempp_issue.nec_violation;
                        wo_line_issue.osha_violation = tempp_issue.osha_violation;
                        wo_line_issue.dynamic_field_json = tempp_issue.dynamic_field_json;
                        if (tempp_issue.issue_type > 0)
                        {
                            wo_line_issue.issue_type = tempp_issue.issue_type;
                        }
                        if (wo_line_issue.is_issue_linked_for_fix && tempp_issue.temp_issue_status > 0)
                        {
                            wo_line_issue.issue_status = tempp_issue.temp_issue_status;
                        }

                        // add/update images 
                        if (tempp_issue.list_temp_issue_images != null && tempp_issue.list_temp_issue_images.Count > 0) // delete imags if request dont have but in table there is data
                        {
                            var requested_imges = tempp_issue.list_temp_issue_images.Select(x => x.image_file_name).ToList();
                            var db_imges = wo_line_issue.WOlineIssueImagesMapping.Where(x => !x.is_deleted).Select(x => x.image_file_name).ToList();

                            // insert images if new added
                            var new_imgs_names = requested_imges.Where(x => !db_imges.Contains(x)).ToList();
                            var new_images = tempp_issue.list_temp_issue_images.Where(x => new_imgs_names.Contains(x.image_file_name)).ToList();
                            foreach (var item in new_images)
                            {
                                WOlineIssueImagesMapping WOlineIssueImagesMapping = new WOlineIssueImagesMapping();
                                WOlineIssueImagesMapping.image_file_name = item.image_file_name;
                                WOlineIssueImagesMapping.site_id = wo_line_issue.site_id != null ? wo_line_issue.site_id.Value : Guid.Parse(UpdatedGenericRequestmodel.CurrentUser != null ? UpdatedGenericRequestmodel.CurrentUser.site_id : null);// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                WOlineIssueImagesMapping.image_duration_type_id = item.image_duration_type_id;
                                WOlineIssueImagesMapping.site_id = get_wo.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                wo_line_issue.WOlineIssueImagesMapping.Add(WOlineIssueImagesMapping);
                            }

                            // delete if any image is exist in db but not in request 
                            var delete_imgs_names = db_imges.Where(x => !requested_imges.Contains(x)).ToList();
                            var delete_images = tempp_issue.list_temp_issue_images.Where(x => delete_imgs_names.Contains(x.image_file_name)).ToList();

                            foreach (var item in delete_images)
                            {
                                wo_line_issue.WOlineIssueImagesMapping.Where(x => x.image_file_name == item.image_file_name && !x.is_deleted).FirstOrDefault().is_deleted = true;
                            }
                        }
                        else // delete all images if exist in db 
                        {
                            wo_line_issue.WOlineIssueImagesMapping.All(x => x.is_deleted = true);
                        }
                    }
                    else
                    {
                        wo_line_issue.is_deleted = tempp_issue.is_deleted;
                        // delete images if exist
                        wo_line_issue.WOlineIssueImagesMapping.All(x => x.is_deleted = true);
                    }
                    
                    var update = await _UoW.BaseGenericRepository<WOLineIssue>().Update(wo_line_issue);
                    
                }
                else
                {
                    // get wo
                    //var get_wo = _UoW.WorkOrderRepository.GetWObyIDForOfflineIssue(tempp_issue.wo_id.Value);

                    WOLineIssue wo_line_issue = new WOLineIssue();
                    wo_line_issue.issue_title = tempp_issue.issue_title;
                    wo_line_issue.issue_description = tempp_issue.issue_description;
                    wo_line_issue.issue_caused_id = tempp_issue.issue_caused_id;
                    wo_line_issue.wo_id = tempp_issue.wo_id;
                    wo_line_issue.issue_type = tempp_issue.issue_type;
                    wo_line_issue.woonboardingassets_id = tempp_issue.woonboardingassets_id;
                    wo_line_issue.issue_status = (int)Status.open;
                    wo_line_issue.is_issue_linked_for_fix = tempp_issue.is_issue_linked_for_fix;
                    if (wo_line_issue.is_issue_linked_for_fix)
                    {
                        wo_line_issue.issue_status = tempp_issue.temp_issue_status;
                    }
                    wo_line_issue.asset_form_id = tempp_issue.asset_form_id;
                    wo_line_issue.asset_id = tempp_issue.asset_id;
                    wo_line_issue.form_retrived_asset_name = tempp_issue.form_retrived_asset_name;
                    wo_line_issue.is_deleted = false;
                    wo_line_issue.created_at = DateTime.UtcNow;
                    wo_line_issue.created_by = UpdatedGenericRequestmodel.CurrentUser != null ? UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString() : null;
                    wo_line_issue.original_wo_id = tempp_issue.wo_id;
                    wo_line_issue.original_asset_form_id = tempp_issue.asset_form_id;
                    wo_line_issue.original_woonboardingassets_id = tempp_issue.woonboardingassets_id;
                    wo_line_issue.is_issue_linked_for_fix = tempp_issue.is_issue_linked_for_fix;
                    wo_line_issue.site_id = get_wo.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    wo_line_issue.atmw_first_comment = tempp_issue.atmw_first_comment;
                    wo_line_issue.pm_issue_identity_key = tempp_issue.pm_issue_identity_key;
                    wo_line_issue.thermal_anomaly_sub_componant = tempp_issue.thermal_anomaly_sub_componant;
                    wo_line_issue.thermal_anomaly_measured_amps = tempp_issue.thermal_anomaly_measured_amps;
                    wo_line_issue.thermal_anomaly_refrence_temps = tempp_issue.thermal_anomaly_refrence_temps;
                    wo_line_issue.thermal_anomaly_measured_temps = tempp_issue.thermal_anomaly_measured_temps;
                    wo_line_issue.thermal_anomaly_additional_ir_photo = tempp_issue.thermal_anomaly_additional_ir_photo;
                    wo_line_issue.thermal_anomaly_location = tempp_issue.thermal_anomaly_location;
                    wo_line_issue.thermal_anomaly_probable_cause = tempp_issue.thermal_anomaly_probable_cause;
                    wo_line_issue.thermal_anomaly_recommendation = tempp_issue.thermal_anomaly_recommendation;
                    wo_line_issue.thermal_classification_id = tempp_issue.thermal_classification_id;
                    wo_line_issue.nec_violation = tempp_issue.nec_violation;
                    wo_line_issue.osha_violation = tempp_issue.osha_violation;
                    wo_line_issue.dynamic_field_json = tempp_issue.dynamic_field_json;

                    // insert before / after photos
                    if (tempp_issue.list_temp_issue_images != null && tempp_issue.list_temp_issue_images.Count > 0)
                    {

                        wo_line_issue.WOlineIssueImagesMapping = new List<WOlineIssueImagesMapping>();
                        foreach (var item in tempp_issue.list_temp_issue_images)
                        {
                            WOlineIssueImagesMapping WOlineIssueImagesMapping = new WOlineIssueImagesMapping();
                            WOlineIssueImagesMapping.image_file_name = item.image_file_name;
                            WOlineIssueImagesMapping.created_at = DateTime.UtcNow;
                            WOlineIssueImagesMapping.image_duration_type_id = item.image_duration_type_id;
                            WOlineIssueImagesMapping.site_id = get_wo.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            wo_line_issue.WOlineIssueImagesMapping.Add(WOlineIssueImagesMapping);
                        }


                    }


                    var insert = await _UoW.BaseGenericRepository<WOLineIssue>().Insert(wo_line_issue);

                    _UoW.SaveChanges();
                }

            }


            return 1;
        }

        public async Task<int> updateOBWOStatusForStatusManagement(Guid wo_id)
        {
            var wo = _UoW.WorkOrderRepository.GetWOByidforUpdateStatus(wo_id);
            if (wo.status != (int)Status.PlannedWO)
            {
                var all_woon_assets = wo.WOOnboardingAssets.Where(x => !x.is_deleted && !x.is_woline_from_other_inspection).ToList();
                if (all_woon_assets.Count > 0 && all_woon_assets.All(x => x.status == (int)Status.Hold))
                {
                    wo.status = (int)Status.Hold;
                    wo.modified_at = DateTime.UtcNow;
                    var res1ult = await _UoW.BaseGenericRepository<db.Models.WorkOrders>().Update(wo);
                }
                else if (all_woon_assets.Count > 0 && all_woon_assets.All(x => x.status == (int)Status.Recheck))
                {
                    wo.status = (int)Status.InProgress;
                    wo.modified_at = DateTime.UtcNow;
                    var res1ult = await _UoW.BaseGenericRepository<db.Models.WorkOrders>().Update(wo);
                }
                else if (all_woon_assets.Count > 0 && all_woon_assets.All(x => x.status == (int)Status.InProgress))
                {
                    wo.status = (int)Status.InProgress;
                    wo.modified_at = DateTime.UtcNow;
                    var res1ult = await _UoW.BaseGenericRepository<db.Models.WorkOrders>().Update(wo);
                }
                else if (all_woon_assets.Count > 0 && (all_woon_assets.All(q => q.status == (int)Status.Submitted) || all_woon_assets.All(q => q.status == (int)Status.Ready_for_review) || all_woon_assets.All(q => q.status == (int)Status.Completed)))
                {
                    // wo.status = (int)Status.Ready_for_review;
                    wo.status = (int)Status.InProgress;
                    wo.modified_at = DateTime.UtcNow;
                    var res1ult = await _UoW.BaseGenericRepository<db.Models.WorkOrders>().Update(wo);
                }
                else
                {
                    wo.status = (int)Status.ReleasedOpenWO;
                    wo.modified_at = DateTime.UtcNow;
                    var res1ult = await _UoW.BaseGenericRepository<db.Models.WorkOrders>().Update(wo);
                }
            }
            return 1;
        }
        public async Task<int> DeleteOBWOAsset(DeleteOBWOAssetRequestmodel requestmodel)
        {
            var get_asset = _UoW.WorkOrderRepository.GetOBWOAssetDetailsById(requestmodel.woonboardingassets_id);
            try
            {
                // check if any wo line have this fed by if yes then do not delete this WO line / wo ob asset
                var ob_fed_by = _UoW.WorkOrderRepository.GetWOLineByFedby(get_asset.woonboardingassets_id);
                if (ob_fed_by != null)
                {
                    return (int)ResponseStatusNumber.can_not_delete_fed_by_wo_line;
                }
                // check if any woline have this subcomponent then do not delete this WOline / ob wo asset
                var get_subcomponent = _UoW.WorkOrderRepository.Getsublevelcomponenttocheck(get_asset.woonboardingassets_id);
                if (get_subcomponent != null)
                {
                    return (int)ResponseStatusNumber.can_not_delete_sublevel_woline;
                }
                // check if any woline have this top then do not delete this WOline / ob wo asset
                var get_topcomponent = _UoW.WorkOrderRepository.Gettoplevelcomponenttocheck(get_asset.woonboardingassets_id);
                if (get_topcomponent != null)
                {
                    return (int)ResponseStatusNumber.can_not_delete_toplevel_woline;
                }
                if (get_asset != null)
                {
                    List<Guid> IssueAssetId = new List<Guid>();
                    get_asset.is_deleted = true;
                    get_asset.QR_code = null;
                    get_asset.modified_at = DateTime.UtcNow;
                    get_asset.WOOBAssetFedByMapping.ToList().ForEach(x =>
                    {
                        x.is_deleted = true;
                        x.updated_at = DateTime.UtcNow;
                    });
                    foreach (var x in get_asset.AssetIssue)
                    {
                        IssueAssetId.Add(x.asset_id.Value);
                        x.wo_id = null;
                        x.asset_form_id = null;
                        x.woonboardingassets_id = null;
                        x.issue_status = (int)Status.open;
                        x.is_issue_linked = false;
                        x.modified_at = DateTime.UtcNow;

                    }
                    get_asset.WOLineIssue.ToList().ForEach(x =>
                    {
                        x.is_deleted = true;
                    });
                    if (get_asset.AssetPMs != null)
                    {
                        if (get_asset.ActiveAssetPMWOlineMapping != null)
                        {
                            get_asset.ActiveAssetPMWOlineMapping.is_active = false;
                            get_asset.ActiveAssetPMWOlineMapping.is_deleted = true;
                            get_asset.ActiveAssetPMWOlineMapping.modified_at = DateTime.UtcNow;
                        }
                        get_asset.AssetPMs.wo_id = null;
                        get_asset.AssetPMs.asset_form_id = null;
                        get_asset.AssetPMs.WOOnboardingAssets = null;
                        get_asset.AssetPMs.status = (int)Status.Active;
                        get_asset.AssetPMs.modified_at = DateTime.UtcNow;
                    }
                    if (get_asset.TempAssetPMs != null && get_asset.TempAssetPMs.Count>0)
                    {
                        get_asset.TempAssetPMs.ToList().ForEach(x =>
                        {
                            x.is_archive = true;
                            x.modified_at = DateTime.UtcNow;
                            x.TempActiveAssetPMWOlineMapping.ToList().ForEach(x => 
                            {
                                x.is_deleted = true;
                                x.WOOnboardingAssets.is_deleted = true; // delete temp pm woline also
                                x.WOOnboardingAssets.modified_at =DateTime.UtcNow;
                               
                            });
                        });
                    }
                    if (get_asset.TempActiveAssetPMWOlineMapping != null) // if requested woline is temp pm woline then delete tempassetpm also
                    {
                        get_asset.TempActiveAssetPMWOlineMapping.is_deleted = true;
                        get_asset.TempActiveAssetPMWOlineMapping.is_active = false;
                        get_asset.TempActiveAssetPMWOlineMapping.modified_at = DateTime.UtcNow;
                        get_asset.TempActiveAssetPMWOlineMapping.TempAssetPMs.is_archive = true;
                        get_asset.TempActiveAssetPMWOlineMapping.TempAssetPMs.modified_at = DateTime.UtcNow;
                    }

                    await AddUpdateWOOnboardingAssetsDateTimeTracking(get_asset.woonboardingassets_id, (int)WOLineActionsTypes.Delete,0);
                    
                    var update = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_asset);
                    _UoW.SaveChanges();

                    // if requested woline is repair/replace/other/PM then delete its Install woline and  tempasset details
                    // 
                    // check woline type
                    if(get_asset.inspection_type  == (int)MWO_inspection_wo_type.Repair  ||
                        get_asset.inspection_type == (int)MWO_inspection_wo_type.Replace ||
                        get_asset.inspection_type == (int)MWO_inspection_wo_type.Trouble_Call_Check ||
                        get_asset.inspection_type == (int)MWO_inspection_wo_type.Others ||
                        get_asset.inspection_type == (int)MWO_inspection_wo_type.PM)
                    {
                        if (get_asset.TempAsset != null)
                        {
                           await DeleteTempAssetData(get_asset.tempasset_id.Value, requestmodel.woonboardingassets_id);
                        }
                    }
                    else // if woline is install then delete only temp asset
                    {
                        if (get_asset.TempAsset != null)
                        {
                            get_asset.TempAsset.is_deleted = true;

                            var update_woline = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_asset);
                            _UoW.SaveChanges();
                        }
                    }


                    /// delete its WO line fed by also if fed by is not assign to any other wo line
                    /// 
                    if (IssueAssetId.Count > 0)
                    {
                        IssueAssetId = IssueAssetId.Distinct().ToList();
                        foreach (var x in IssueAssetId) // update asset condition based on issues
                        {
                            await UpdateAssetconditionbasedonIssue(x);

                        }
                    }

                    if (get_asset.WorkOrders.wo_type == (int)Status.IR_Scan_WO && get_asset.is_wo_line_for_exisiting_asset && get_asset.asset_id != null)
                    {
                        var list = new List<Guid> { get_asset.asset_id.Value };

                        var get_schedule_pms = _UoW.WorkOrderRepository.GetSchedulePMsByAssetIds(list);
                        foreach (var assetpm in get_schedule_pms)
                        {
                            var is_asset_assigned_to_wo = _UoW.WorkOrderRepository.IsAssetisAssignedToOtherWOs(get_asset.asset_id.Value, get_asset.wo_id);
                            if (!is_asset_assigned_to_wo)
                            {
                                if (assetpm.title.Replace(" ", "").ToLower().Contains("visualinspection"))// if pm is visual then check if this asset is  in any other OB/IR WO without completed then do not mark it as active 
                                {
                                    // check if asset is assigned in other ob/IR WO
                                    var is_asset_assigned = _UoW.WorkOrderRepository.IsAssetisAssigned(get_asset.asset_id.Value);
                                    if (!is_asset_assigned)
                                    {
                                        assetpm.status = (int)Status.Active;
                                        assetpm.wo_id = null;
                                        assetpm.modified_at = DateTime.UtcNow;
                                        assetpm.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                        var update_pm = await _UoW.BaseGenericRepository<AssetPMs>().Update(assetpm);
                                        _UoW.SaveChanges();
                                    }
                                }
                                else
                                {
                                    assetpm.status = (int)Status.Active;
                                    assetpm.wo_id = null;
                                    assetpm.modified_at = DateTime.UtcNow;
                                    assetpm.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                    var update_pm = await _UoW.BaseGenericRepository<AssetPMs>().Update(assetpm);
                                    _UoW.SaveChanges();
                                }
                            }
                        }
                    }
                    if (get_asset.WorkOrders.wo_type == (int)Status.Onboarding_WO && get_asset.is_wo_line_for_exisiting_asset && get_asset.asset_id != null)
                    {
                        var list = new List<Guid> { get_asset.asset_id.Value };

                        var get_schedule_pms = _UoW.WorkOrderRepository.GetVisualSchedulePMsByAssetIds(list);
                        foreach (var assetpm in get_schedule_pms)
                        {
                            var is_asset_assigned_to_wo = _UoW.WorkOrderRepository.IsAssetisAssignedToOtherWOs(get_asset.asset_id.Value, get_asset.wo_id);
                            if (!is_asset_assigned_to_wo)
                            {
                                assetpm.status = (int)Status.Active;
                                assetpm.wo_id = null;
                                assetpm.modified_at = DateTime.UtcNow;
                                assetpm.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                var update_pm = await _UoW.BaseGenericRepository<AssetPMs>().Update(assetpm);
                                _UoW.SaveChanges();
                            }
                        }
                    }

                    await updateOBWOStatusForStatusManagement(get_asset.wo_id);
                    return (int)ResponseStatusNumber.Success;
                }
                else
                {
                    return (int)ResponseStatusNumber.NotFound;
                }
            }
            catch (Exception ex)
            {
                return (int)ResponseStatusNumber.Error;
            }
        }

        public async Task<int> DeleteTempAssetData(Guid tempasset_id , Guid request_woonboardingassets_id)
        {
            var get_tempasset = _UoW.WorkOrderRepository.GetTempAssetForDelete(tempasset_id);
            var get_wolines = get_tempasset.WOOnboardingAssets.Where(x => !x.is_deleted).ToList();

            // check if there is any woline other than requested and inspection type is not install then do not delete temp asset and install woline
            var is_other_woline = get_wolines.Where(x => x.inspection_type != (int)MWO_inspection_wo_type.OnBoarding && x.woonboardingassets_id != request_woonboardingassets_id).FirstOrDefault();
            if(is_other_woline == null)
            {
                // delete temp asset
                get_tempasset.is_deleted = true;
                get_tempasset.modified_at = DateTime.UtcNow;

                var update_tempassset =await _UoW.BaseGenericRepository<TempAsset>().Update(get_tempasset);
                _UoW.SaveChanges();

                // delete install woline
                var install_woline =  get_tempasset.WOOnboardingAssets.Where(x => x.inspection_type == (int)MWO_inspection_wo_type.OnBoarding).FirstOrDefault();

                // get_woline_details 
                var db_install_woline = _UoW.WorkOrderRepository.GetWolineForTempAssetdelete(install_woline.woonboardingassets_id);
               
                /// delete subcomponent if any added from wo
                if(db_install_woline.WOlineSubLevelcomponentMapping != null && db_install_woline.WOlineSubLevelcomponentMapping.Count > 0)
                {
                    var get_new_subasset = db_install_woline.WOlineSubLevelcomponentMapping.Where(x => !x.is_deleted && x.is_sublevelcomponent_from_ob_wo).ToList();
                    if (get_new_subasset.Count > 0)
                    {
                        var db_sublevels = _UoW.WorkOrderRepository.GetWOSublevelByIds(get_new_subasset.Select(x => x.sublevelcomponent_asset_id).ToList());
                        foreach(var item in db_sublevels)
                        {
                            item.is_deleted = true;
                            item.modified_at = DateTime.UtcNow;

                            var update_sblevel = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(item);
                        }
                    }
                }
                if(db_install_woline.WOOBAssetFedByMapping!=null && db_install_woline.WOOBAssetFedByMapping.Count > 0)
                {
                    var get_new_fedby = db_install_woline.WOOBAssetFedByMapping.Where(x => !x.is_deleted && x.is_via_subcomponant_asset_from_ob_wo).ToList();
                    if (get_new_fedby.Count > 0)
                    {
                        var db_fedbys = _UoW.WorkOrderRepository.GetWOSublevelByIds(get_new_fedby.Select(x => x.parent_asset_id).ToList());
                        foreach (var item in db_fedbys)
                        {
                            item.is_deleted = true;
                            item.modified_at = DateTime.UtcNow;

                            var update_sblevel = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(item);
                        }
                    }
                }
                    
                db_install_woline.is_deleted = true;
                db_install_woline.modified_at = DateTime.UtcNow;

                var update_installwoline = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(db_install_woline);
                _UoW.SaveChanges();
            }
            return 1;
        }

        public async Task<int> UpdateAssetconditionbasedonIssue(Guid asset_id)
        {
            int response = (int)ResponseStatusNumber.Error;
            var get_asset = _UoW.WorkOrderRepository.GetAssetbyIDForCondition(asset_id);
            var asset_issues = get_asset.AssetIssue.Where(x => !x.is_deleted).ToList();
            if (asset_issues.Any(x => x.issue_type == (int)WOLine_Temp_Issue_Type.Replace)) // priority for replace
            {
                if (asset_issues.Any(x => x.issue_type == (int)WOLine_Temp_Issue_Type.Replace && x.issue_status == (int)Status.InProgress))
                {
                    get_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Replacement_Scheduled;
                }
                else if (asset_issues.Any(x => x.issue_type == (int)WOLine_Temp_Issue_Type.Replace && x.issue_status == (int)Status.Schedule))
                {
                    get_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Replacement_Scheduled;
                }
                else if (asset_issues.Any(x => x.issue_type == (int)WOLine_Temp_Issue_Type.Replace && x.issue_status == (int)Status.open))
                {
                    get_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Replacement_Needed;
                }
            }
            else
            {
                if (asset_issues.Any(x => (x.issue_type == (int)WOLine_Temp_Issue_Type.Repair || x.issue_type == (int)WOLine_Temp_Issue_Type.Compliance || x.issue_type == (int)WOLine_Temp_Issue_Type.Thermal_Anamoly)
                && x.issue_status == (int)Status.InProgress))
                {
                    get_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Repair_Scheduled;
                }
                else if (asset_issues.Any(x => (x.issue_type == (int)WOLine_Temp_Issue_Type.Repair || x.issue_type == (int)WOLine_Temp_Issue_Type.Compliance || x.issue_type == (int)WOLine_Temp_Issue_Type.Thermal_Anamoly)
                && x.issue_status == (int)Status.Schedule))
                {
                    get_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Repair_Scheduled;
                }
                else if (asset_issues.Any(x => (x.issue_type == (int)WOLine_Temp_Issue_Type.Repair || x.issue_type == (int)WOLine_Temp_Issue_Type.Compliance || x.issue_type == (int)WOLine_Temp_Issue_Type.Thermal_Anamoly)
                && x.issue_status == (int)Status.open))
                {
                    get_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Repair_Needed;
                }
            }
            var update = await _UoW.BaseGenericRepository<Asset>().Update(get_asset);
            if (update)
            {
                _UoW.SaveChanges();
                response = (int)ResponseStatusNumber.Success;
            }
            return response;
        }

        public async Task<UpdateOBWOAssetStatusResponsemodel> UpdateOBWOAssetStatus(UpdateOBWOAssetStatusRequestmodel requestmodel)
        {
            UpdateOBWOAssetStatusResponsemodel respose = new UpdateOBWOAssetStatusResponsemodel();
            try
            {
                var get_asset = _UoW.WorkOrderRepository.GetOBWOAssetDetailsById(requestmodel.woonboardingassets_id);

                ///if wo line is getting completed then check qr code is duplicate or not in that WO and in asset list then give error
                if (requestmodel.status == (int)Status.Completed)
                {
                    if (!get_asset.is_wo_line_for_exisiting_asset)
                    {
                        if(get_asset.inspection_type == (int)MWO_inspection_wo_type.OnBoarding)
                        {
                            if (!String.IsNullOrEmpty(get_asset.QR_code))
                            {
                                var get_ob_asset_same_qr = _UoW.WorkOrderRepository.GetWOLineByQRcode(get_asset.QR_code.ToLower().Trim(), get_asset.woonboardingassets_id);
                                if (get_ob_asset_same_qr != null)
                                {
                                    respose.success = (int)ResponseStatusNumber.qr_code_must_be_unique;
                                    respose.qr_code = get_asset.QR_code;
                                    return respose;
                                }
                                var get_asset_by_internal_id = _UoW.WorkOrderRepository.GetAssetByQRCodeForOBWO(get_asset.QR_code.ToLower().Trim(),get_asset.asset_id);
                                if (get_asset_by_internal_id != null)
                                {
                                    respose.success = (int)ResponseStatusNumber.qr_code_must_be_unique;
                                    respose.qr_code = get_asset.QR_code;
                                    return respose;
                                }
                            }
                        }
                       
                    }
                    else // check db assets
                    {
                        if (!String.IsNullOrEmpty(get_asset.QR_code))
                        {
                            var get_asset_by_qr = _UoW.WorkOrderRepository.GetAssetByQRCodeExist(new List<string> { get_asset.QR_code }, new List<Guid> { get_asset.asset_id.Value });
                            if (get_asset_by_qr != null)
                            {

                                respose.success = (int)ResponseStatusNumber.qr_code_must_be_unique;
                                respose.qr_code = get_asset.QR_code;
                                return respose;
                            }
                        }
                    }

                    get_asset.completed_at = DateTime.UtcNow;
                    
                    await AddUpdateWOOnboardingAssetsDateTimeTracking(requestmodel.woonboardingassets_id, (int)WOLineActionsTypes.Accept,0);
                    
                }
                get_asset.status = requestmodel.status;
                if (requestmodel.status == (int)Status.Rejected || requestmodel.status == (int)Status.Recheck)
                {
                    get_asset.status = (int)Status.Recheck;
                    get_asset.task_rejected_notes = requestmodel.task_rejected_notes;
                    await AddUpdateWOOnboardingAssetsDateTimeTracking(requestmodel.woonboardingassets_id, (int)WOLineActionsTypes.Reject,0);
                }

                if(requestmodel.status==(int)Status.Hold)
                    await AddUpdateWOOnboardingAssetsDateTimeTracking(requestmodel.woonboardingassets_id, (int)WOLineActionsTypes.Hold,0);
                
                get_asset.modified_at = DateTime.UtcNow;
                get_asset.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                var update = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_asset);
                _UoW.SaveChanges();

                /// change WO status by OB asset status
                /// 
                await updateOBWOStatusForStatusManagement(get_asset.wo_id);
                respose.success = (int)ResponseStatusNumber.Success;
                return respose;

            }
            catch (Exception ex)
            {
                respose.success = (int)ResponseStatusNumber.Error;
                return respose;
            }

        }


        public ExportCompletedAssetsByWOResponsemodel ExportCompletedAssetsByWO(ExportCompletedAssetsByWORequestmodel requestmodel)
        {
            ExportCompletedAssetsByWOResponsemodel response = new ExportCompletedAssetsByWOResponsemodel();
            var get_asset_forms = _UoW.WorkOrderRepository.ExportCompletedAssetsByWO(requestmodel);

            var get_ob_assets = _UoW.WorkOrderRepository.GetOBAssetsListByWOId(requestmodel);
            
            var mapped_forms = _mapper.Map<List<ExportCompletedAssets>>(get_asset_forms);

            var mapped_ob_assets = _mapper.Map<List<ExportCompletedAssets>>(get_ob_assets);

            var mapper = mapped_forms.Concat(mapped_ob_assets).ToList();

            response.asset_list = mapper;
            return response;
        }
        public List<GetAssetclassFormToAddcategoryResponsemodel> GetAssetclassFormToAddcategory(GetAssetclassFormToAddcategoryRequestmodel requestmodel)
        {
            List<GetAssetclassFormToAddcategoryResponsemodel> response = new List<GetAssetclassFormToAddcategoryResponsemodel>();

            var get_class_form_mapping = _UoW.WorkOrderRepository.GetAssetclassFormToAddcategory(requestmodel);

            response = _mapper.Map<List<GetAssetclassFormToAddcategoryResponsemodel>>(get_class_form_mapping);

            return response;
        }

        public async Task<int> UpdateHierarchyandLevelForPythonscript(UpdateHierarchyandLevelForPythonscriptRequestmodel requestmodel)
        {

            var form_obj = JsonSerializer.Deserialize<List<ParseUpdateHierarchyandLevelForPythonscript>>(requestmodel.asset_json);
            List<asset_form_data> list_form_data = new List<asset_form_data>();
            foreach (var asset in form_obj)
            {
                if (!String.IsNullOrEmpty(asset.header.parent))
                {
                    string location = asset.header.parent.Trim().ToLower();
                    var get_asset_ = _UoW.WorkOrderRepository.GetAssetByLocation(location);
                    if (get_asset_ == null)
                    {
                        // create new assset for location
                        get_asset_ = new Asset();
                        get_asset_.name = asset.header.parent.Trim();
                        get_asset_.internal_asset_id = asset.header.parent.Trim();
                        get_asset_.client_internal_id = asset.header.parent.Trim();
                        get_asset_.status = (int)Status.AssetActive;
                        get_asset_.company_id = UpdatedGenericRequestmodel.CurrentUser.company_id;
                        get_asset_.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        get_asset_.created_at = DateTime.UtcNow;
                        get_asset_.site_location = "test";
                        get_asset_.levels = "1";
                        var insert_parent = _UoW.BaseGenericRepository<Asset>().Insert(get_asset_);
                        _UoW.SaveChanges();
                    }
                    if (!String.IsNullOrEmpty(asset.header.identification))
                    {
                        asset_form_data asset_form_data = new asset_form_data();
                        asset_form_data.location = location;
                        asset_form_data.identification = asset.header.identification.ToLower().Trim();
                        asset_form_data.asset_id = asset.header.assetId;
                        list_form_data.Add(asset_form_data);
                    }
                }
                foreach (var asset1 in form_obj)
                {
                    if (!String.IsNullOrEmpty(asset1.header.parent))
                    {
                        /// insert children in location asset
                        string location = asset1.header.parent.Trim().ToLower();
                        var get_asset_ = _UoW.WorkOrderRepository.GetAssetByLocation(location);
                        Asset inserted_asset = null;
                        if (!String.IsNullOrEmpty(asset1.header.assetId))
                        {
                            inserted_asset = _UoW.WorkOrderRepository.GetAssetByInternalID(asset1.header.assetId);
                        }
                        else if (!String.IsNullOrEmpty(asset1.header.identification))
                        {
                            inserted_asset = _UoW.WorkOrderRepository.GetAssetByLocation(asset1.header.identification.ToLower().Trim());
                        }

                        if (!String.IsNullOrEmpty(get_asset_.children))
                        {
                            get_asset_.children = get_asset_.children + "," + inserted_asset.internal_asset_id;
                        }
                        else
                        {
                            get_asset_.children = asset1.header.assetId;
                        }
                        // insert paret and level in new_asset

                        if (inserted_asset != null)
                        {
                            inserted_asset.parent = get_asset_.internal_asset_id;
                            //if (!String.IsNullOrEmpty(get_asset_.levels))
                            // {
                            inserted_asset.levels = GetLevel(list_form_data, location);
                            // }
                        }
                        get_asset_.modified_at = DateTime.UtcNow;
                        var update_parent_asset = await _UoW.BaseGenericRepository<Asset>().Update(get_asset_);
                        inserted_asset.modified_at = DateTime.UtcNow;
                        var update_child_asset = await _UoW.BaseGenericRepository<Asset>().Update(inserted_asset);
                        _UoW.SaveChanges();
                    }

                }

            }

            return 1;
        }

        public async Task<AddOBFedByAssetResponsemodel> AddOBFedByAsset(AddOBFedByAssetRequestmodel requestmodel)
        {
            // await update_hierarchy_old_asset();
            AddOBFedByAssetResponsemodel responsemodel = null;
            try
            {
                WOOnboardingAssets get_asset = new WOOnboardingAssets();
                get_asset.asset_name = requestmodel.asset_name;
                var get_assetclass = _UoW.WorkOrderRepository.GetAssetClassById(requestmodel.inspectiontemplate_asset_class_id);
                get_asset.asset_class_code = get_assetclass.asset_class_code;
                get_asset.asset_class_name = get_assetclass.asset_class_name;
                //get_asset.inspection_type = requestmodel.inspection_type;
                get_asset.wo_id = requestmodel.wo_id;
                get_asset.is_deleted = false;
                get_asset.status = (int)Status.open;
                get_asset.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                get_asset.created_at = DateTime.UtcNow;
                get_asset.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                get_asset.inspection_type = (int)MWO_inspection_wo_type.OnBoarding;/// if Fed by is created from MWO then inspection type is fixed as OB 
                get_asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Operating_Normally;
                get_asset.component_level_type_id = (int)ComponentLevelTypes.ToplevelComponent;
                get_asset.is_woline_from_other_inspection = requestmodel.is_woline_from_other_inspection;

                if (!String.IsNullOrEmpty(get_assetclass.form_nameplate_info))
                {
                    get_asset.form_nameplate_info = AddNamePlateListData(get_assetclass.form_nameplate_info);
                }

                /*
                if (String.IsNullOrEmpty(requestmodel.formio_building_name))
                {
                    requestmodel.formio_building_name = "Default";
                }
                if (String.IsNullOrEmpty(requestmodel.formio_floor_name))
                {
                    requestmodel.formio_floor_name = "Default";
                }
                if (String.IsNullOrEmpty(requestmodel.formio_room_name))
                {
                    requestmodel.formio_room_name = "Default";
                }
                if (String.IsNullOrEmpty(requestmodel.formio_section_name))
                {
                    requestmodel.formio_section_name = "Default";
                }
                */

                // old flow : add location in main table , new flow : add location in temp table
                /* FormIOBuildings FormIOBuildings = null;
                FormIOFloors FormIOFloors = null;
                FormIORooms FormIORooms = null;
                FormIOSections FormIOSections = null;
                if (!String.IsNullOrEmpty(requestmodel.formio_building_name))
                {
                    FormIOBuildings = _UoW.WorkOrderRepository.GetFormIOBuildingByName(requestmodel.formio_building_name);
                    if (FormIOBuildings == null)
                    {
                        FormIOBuildings = new FormIOBuildings();
                        FormIOBuildings.formio_building_name = requestmodel.formio_building_name;
                        FormIOBuildings.created_at = DateTime.UtcNow;
                        FormIOBuildings.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        FormIOBuildings.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                        var insertbuilding = await _UoW.BaseGenericRepository<FormIOBuildings>().Insert(FormIOBuildings);
                        _UoW.SaveChanges();
                    }
                }
                if (!String.IsNullOrEmpty(requestmodel.formio_floor_name))
                {
                    FormIOFloors = _UoW.WorkOrderRepository.GetFormIOFloorByName(requestmodel.formio_floor_name, FormIOBuildings.formiobuilding_id);
                    if (FormIOFloors == null)
                    {
                        FormIOFloors = new FormIOFloors();
                        FormIOFloors.formio_floor_name = requestmodel.formio_floor_name;
                        FormIOFloors.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                        FormIOFloors.created_at = DateTime.UtcNow;
                        FormIOFloors.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        FormIOFloors.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                        var insertfloor = await _UoW.BaseGenericRepository<FormIOFloors>().Insert(FormIOFloors);
                        _UoW.SaveChanges();
                    }
                }
                if (!String.IsNullOrEmpty(requestmodel.formio_room_name))
                {
                    FormIORooms = _UoW.WorkOrderRepository.GetFormIORoomByName(requestmodel.formio_room_name, FormIOFloors.formiofloor_id);
                    if (FormIORooms == null)
                    {
                        FormIORooms = new FormIORooms();
                        FormIORooms.formio_room_name = requestmodel.formio_room_name;
                        FormIORooms.formiofloor_id = FormIOFloors.formiofloor_id;
                        FormIORooms.created_at = DateTime.UtcNow;
                        FormIORooms.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        FormIORooms.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                        var insertroom = await _UoW.BaseGenericRepository<FormIORooms>().Insert(FormIORooms);
                        _UoW.SaveChanges();
                    }
                }
                if (!String.IsNullOrEmpty(requestmodel.formio_section_name))
                {
                    FormIOSections = _UoW.WorkOrderRepository.GetFormIOSectionByName(requestmodel.formio_section_name, FormIORooms.formioroom_id);
                    if (FormIOSections == null)
                    {
                        FormIOSections = new FormIOSections();
                        FormIOSections.formio_section_name = requestmodel.formio_section_name;
                        FormIOSections.formioroom_id = FormIORooms.formioroom_id;
                        FormIOSections.created_at = DateTime.UtcNow;
                        FormIOSections.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        FormIOSections.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                        var insertroom = await _UoW.BaseGenericRepository<FormIOSections>().Insert(FormIOSections);
                        _UoW.SaveChanges();
                    }
                }
                
                get_asset.WOLineBuildingMapping = new WOLineBuildingMapping();
                get_asset.WOLineBuildingMapping.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                get_asset.WOLineBuildingMapping.formiofloor_id = FormIOFloors.formiofloor_id;
                get_asset.WOLineBuildingMapping.formioroom_id = FormIORooms.formioroom_id;
                get_asset.WOLineBuildingMapping.formiosection_id = FormIOSections.formiosection_id;
                get_asset.WOLineBuildingMapping.created_at = DateTime.UtcNow;
                */

                //  get_asset.building = requestmodel.formio_building_name;
                //  get_asset.floor = requestmodel.formio_floor_name;
                //  get_asset.room = requestmodel.formio_room_name;
                //  get_asset.section = requestmodel.formio_section_name;



                //Assign Default Locations to New Fed By 
                string building_name = "Default";
                string floor_name = "Default";
                string room_name = "Default";
                string section_name = "Default";


                /// new flow for building location hierarchy
                TempFormIOBuildings get_building = null;
                get_building = _UoW.WorkOrderRepository.GetTempFormIOBuildingByName(building_name, requestmodel.wo_id);
                if (get_building == null)
                {
                    get_building = new TempFormIOBuildings();
                    get_building.temp_formio_building_name = building_name;
                    get_building.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    get_building.wo_id = requestmodel.wo_id;
                    get_building.created_at = DateTime.UtcNow;
                    get_building.is_deleted = false;
                    get_building.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                    var insert_building = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Insert(get_building);
                    _UoW.SaveChanges();
                }

                TempFormIOFloors get_floor = null;
                get_floor = _UoW.WorkOrderRepository.GetTempFormIOFloorByName(floor_name, get_building.temp_formiobuilding_id, requestmodel.wo_id);
                if (get_floor == null)
                {
                    get_floor = new TempFormIOFloors();
                    get_floor.temp_formio_floor_name = floor_name;
                    get_floor.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    get_floor.wo_id = requestmodel.wo_id;
                    get_floor.created_at = DateTime.UtcNow;
                    get_floor.is_deleted = false;
                    get_floor.temp_formiobuilding_id = get_building.temp_formiobuilding_id;
                    get_floor.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                    var insert_floors = await _UoW.BaseGenericRepository<TempFormIOFloors>().Insert(get_floor);
                    _UoW.SaveChanges();
                }

                TempFormIORooms get_room = null;
                get_room = _UoW.WorkOrderRepository.GetTempFormIORoomByName(room_name, get_floor.temp_formiofloor_id, requestmodel.wo_id);
                if (get_room == null)
                {
                    get_room = new TempFormIORooms();
                    get_room.temp_formio_room_name = room_name;
                    get_room.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    get_room.wo_id = requestmodel.wo_id;
                    get_room.created_at = DateTime.UtcNow;
                    get_room.is_deleted = false;
                    get_room.temp_formiofloor_id = get_floor.temp_formiofloor_id;
                    get_room.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                    var insert_rooms = await _UoW.BaseGenericRepository<TempFormIORooms>().Insert(get_room);
                    _UoW.SaveChanges();
                }

                TempFormIOSections get_section = null;
                get_section = _UoW.WorkOrderRepository.GetTempFormIOSectionByName(section_name, get_room.temp_formioroom_id, requestmodel.wo_id);
                if (get_section == null)
                {
                    get_section = new TempFormIOSections();
                    get_section.temp_formio_section_name = section_name;
                    get_section.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    get_section.wo_id = requestmodel.wo_id;
                    get_section.created_at = DateTime.UtcNow;
                    get_section.is_deleted = false;
                    get_section.temp_formioroom_id = get_room.temp_formioroom_id;
                    get_section.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                    var insert_section = await _UoW.BaseGenericRepository<TempFormIOSections>().Insert(get_section);
                    _UoW.SaveChanges();
                }

                get_asset.WOOBAssetTempFormIOBuildingMapping = new WOOBAssetTempFormIOBuildingMapping();
                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id = get_building.temp_formiobuilding_id;
                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id = get_floor.temp_formiofloor_id;
                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id = get_room.temp_formioroom_id;
                get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id = get_section.temp_formiosection_id;
                get_asset.WOOBAssetTempFormIOBuildingMapping.created_at = DateTime.UtcNow;

                get_asset.building = building_name;
                get_asset.floor = floor_name;
                get_asset.room = room_name;
                get_asset.section = section_name;

                AddTempMasterLocationDataMainFunctionRequestModel req2 = new AddTempMasterLocationDataMainFunctionRequestModel();
                req2.temp_building = building_name;
                req2.temp_floor = floor_name;
                req2.temp_room = room_name;
                req2.wo_id = requestmodel.wo_id;
                var res_location = await AddTempMasterLocationDataMainFunction(req2);

                // add temp asset data
                UpdateOBWOAssetDetailsRequestmodel temp_asset_request_data = new UpdateOBWOAssetDetailsRequestmodel();
                temp_asset_request_data.asset_name = requestmodel.asset_name;
                temp_asset_request_data.component_level_type_id = (int)ComponentLevelTypes.ToplevelComponent;
                temp_asset_request_data.inspectiontemplate_asset_class_id = requestmodel.inspectiontemplate_asset_class_id;
                temp_asset_request_data.temp_formiobuilding_id = get_building.temp_formiobuilding_id;
                temp_asset_request_data.temp_formiofloor_id = get_floor.temp_formiofloor_id;
                temp_asset_request_data.temp_formioroom_id = get_room.temp_formioroom_id;
                temp_asset_request_data.section = section_name;

                temp_asset_request_data.temp_master_building_id = res_location.temp_master_building_id;
                temp_asset_request_data.temp_master_floor_id = res_location.temp_master_floor_id;
                temp_asset_request_data.temp_master_room_id = res_location.temp_master_room_id;
                temp_asset_request_data.temp_section = section_name;

                temp_asset_request_data.wo_id = requestmodel.wo_id;
                temp_asset_request_data.site_id = get_asset.site_id;

                var temp_asset = await AddTempAssetData(temp_asset_request_data, new TempAsset());

                get_asset.tempasset_id = temp_asset;

                var insert = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Insert(get_asset);
                if (insert)
                {
                    responsemodel = new AddOBFedByAssetResponsemodel();
                    responsemodel.subcomponent_ocp_list = new List<subcomponent_ocp_class>();
                    if (requestmodel.subcomponents_list != null && requestmodel.subcomponents_list.Count > 0)
                    {
                        foreach (var subcomponent in requestmodel.subcomponents_list)
                        {
                            AddSublevelComponentWolineRequest AddSublevelComponentWolineRequest = new AddSublevelComponentWolineRequest();
                            AddSublevelComponentWolineRequest.wo_id = requestmodel.wo_id;
                            AddSublevelComponentWolineRequest.woonboardingassets_id = get_asset.woonboardingassets_id; //toplevel_component's id
                            AddSublevelComponentWolineRequest.sublevelcomponent_asset_name = subcomponent.asset_name;
                            AddSublevelComponentWolineRequest.inspectiontemplate_asset_class_id = subcomponent.inspectiontemplate_asset_class_id;

                            AddSublevelComponentWolineRequest.building = get_asset.building;
                            AddSublevelComponentWolineRequest.floor = get_asset.floor;
                            AddSublevelComponentWolineRequest.room = get_asset.room;
                            AddSublevelComponentWolineRequest.section = get_asset.section;
                            if (get_asset.WOLineBuildingMapping != null)
                            {
                                AddSublevelComponentWolineRequest.formiobuilding_id = get_asset.WOLineBuildingMapping.formiobuilding_id;
                                AddSublevelComponentWolineRequest.formiofloor_id = get_asset.WOLineBuildingMapping.formiofloor_id;
                                AddSublevelComponentWolineRequest.formioroom_id = get_asset.WOLineBuildingMapping.formioroom_id;
                                AddSublevelComponentWolineRequest.formiosection_id = get_asset.WOLineBuildingMapping.formiosection_id;
                            }
                            if (get_asset.WOOBAssetTempFormIOBuildingMapping != null)
                            {
                                AddSublevelComponentWolineRequest.temp_formiobuilding_id = get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id;
                                AddSublevelComponentWolineRequest.temp_formiofloor_id = get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id;
                                AddSublevelComponentWolineRequest.temp_formioroom_id = get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id;
                                AddSublevelComponentWolineRequest.temp_formiosection_id = get_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id;
                            }

                            var subcomp_woobid = await AddSublevelComponentWoline(AddSublevelComponentWolineRequest);

                            WOlineSubLevelcomponentMapping WOlinesublevelcomponentMapping1 = new WOlineSubLevelcomponentMapping();
                            WOlinesublevelcomponentMapping1.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            WOlinesublevelcomponentMapping1.created_at = DateTime.UtcNow;
                            WOlinesublevelcomponentMapping1.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                            WOlinesublevelcomponentMapping1.is_deleted = false;
                            WOlinesublevelcomponentMapping1.woonboardingassets_id = get_asset.woonboardingassets_id;
                            WOlinesublevelcomponentMapping1.sublevelcomponent_asset_id = subcomp_woobid;
                            WOlinesublevelcomponentMapping1.is_sublevelcomponent_from_ob_wo = true;
                            //WOlinesublevelcomponentMapping1.circuit = asset_sub_level.circuit;
                            //WOlinesublevelcomponentMapping1.image_name = asset_sub_level.image_name;

                            var insert2 = await _UoW.BaseGenericRepository<WOlineSubLevelcomponentMapping>().Insert(WOlinesublevelcomponentMapping1);
                            _UoW.SaveChanges();

                            subcomponent_ocp_class _subcomponent_ocp_class = new subcomponent_ocp_class();
                            _subcomponent_ocp_class.subcomponent_woonboardingassets_id = subcomp_woobid;
                            _subcomponent_ocp_class.subcomponent_name = subcomponent.asset_name;

                            responsemodel.subcomponent_ocp_list.Add(_subcomponent_ocp_class);
                        }
                    }

                    _UoW.SaveChanges();

                    await AddUpdateWOOnboardingAssetsDateTimeTracking(get_asset.woonboardingassets_id, (int)WOLineActionsTypes.WorkStartDate,0);

                    responsemodel.woonboardingassets_id = get_asset.woonboardingassets_id;
                    responsemodel.asset_name = get_asset.asset_name;

                    // Add pm estimation
                    var get_sublevel_asset_pm_estimation = _UoW.WorkOrderRepository.GetPMEstimationByClassId(requestmodel.inspectiontemplate_asset_class_id);
                    if (get_sublevel_asset_pm_estimation != null && get_sublevel_asset_pm_estimation.pm_estimation_list != null && get_sublevel_asset_pm_estimation.pm_estimation_list.Count > 0)
                    {
                        foreach (var sublevel_asset_pm in get_sublevel_asset_pm_estimation.pm_estimation_list)
                        {
                            SitewalkthroughTempPmEstimation tempEstimation = new SitewalkthroughTempPmEstimation();

                            tempEstimation.tempasset_id = get_asset.tempasset_id.Value; 
                            tempEstimation.pm_plan_id = get_sublevel_asset_pm_estimation.pm_plan_id.Value;
                            tempEstimation.pm_id = sublevel_asset_pm.pm_id;
                            tempEstimation.estimation_time = sublevel_asset_pm.estimation_time;
                            tempEstimation.inspectiontemplate_asset_class_id = requestmodel.inspectiontemplate_asset_class_id;
                            tempEstimation.woonboardingassets_id = get_asset.woonboardingassets_id;
                            tempEstimation.is_deleted = false;
                            tempEstimation.created_at = DateTime.UtcNow;
                            tempEstimation.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                            var insert2 = await _UoW.BaseGenericRepository<SitewalkthroughTempPmEstimation>().Insert(tempEstimation);
                            _UoW.SaveChanges();

                        }
                    }
                }
                else
                {
                    _UoW.RollbackTransaction();
                }
            }
            catch (Exception ex)
            {

            }

            return responsemodel;
        }
        public string AddNamePlateListData(string form_nameplate_info)
        {
            try
            {
                //form_nameplate_info = "{\"manufacturer\":{\"type\":\"textfield\",\"value\":10},\"protectionClass\":{\"type\":\"select\",\"value\":{\"label\":\"Intermeidate\",\"value\":\"Intermeidate\"},\"options\":[{\"label\":\"Station\",\"value\":\"Station\"},{\"label\":\"Distribution\",\"value\":\"Distribution\"},{\"label\":\"Intermeidate\",\"value\":\"Intermeidate\"}]},\"model\":{\"type\":\"textfield\",\"value\":11.25},\"catalogNumber\":{\"type\":\"textfield\",\"value\":\"12\"},\"style\":{\"type\":\"textfield\",\"value\":\"13\"},\"MCOV\":{\"type\":\"textfield\",\"value\":\"14\"},\"dutyCycle\":{\"type\":\"textfield\",\"value\":\"15\"},\"aPhaseSerialNumber\":{\"type\":\"textfield\",\"value\":\"16\"},\"bPhaseSerialNumber\":{\"type\":\"textfield\",\"value\":\"17\"},\"cPhaseSerialNumber\":{\"type\":\"textfield\",\"value\":\"18\"},\"numberManual\":{\"type\":\"number\",\"value\":\"\"}}";
                var nameplateDataDict = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(form_nameplate_info);
                dynamic expando = new System.Dynamic.ExpandoObject();
                var dictionary = (IDictionary<string, object>)expando;
                foreach (var property in nameplateDataDict)
                {
                    if (property.Value.type.ToString() != "select")
                    {
                        dictionary[property.Key] = property.Value.value;
                    }
                    else // if key type is select then get from value.value
                    {
                        var seralize_select = Newtonsoft.Json.JsonConvert.SerializeObject(property.Value.value);
                        if (seralize_select != null)
                        {
                            var dropdownvalue = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(seralize_select);

                            if (dropdownvalue != null && dropdownvalue != "")
                            {
                                dictionary[property.Key] = dropdownvalue["value"];
                            }
                            else
                            {
                                property.Value.value = "";
                                dictionary[property.Key] = property.Value.value; //dropdownvalue["value"];
                            }
                        }
                    }
                }
                var object1 = Newtonsoft.Json.JsonConvert.SerializeObject(dictionary);

                return object1;// Newtonsoft.Json.JsonConvert.SerializeObject(object1);
            }
            catch (Exception ex)
            {
                return "{}";
            }
        }
        public GetOBFedByAssetListResponsemodel GetOBFedByAssetList(GetOBFedByAssetListRequestmodel requestmodel)
        {
            GetOBFedByAssetListResponsemodel response = new GetOBFedByAssetListResponsemodel();

            var assets = _UoW.AssetRepository.GetAllRawHierarchyAssets();
            response.main_asset_list = new List<GetAllHierarchyAssetsResponseModel>();
            response.ob_wo_asset_list = new List<OBWOAssetDetails>();
            if (assets?.Count > 0)
            {
                response.main_asset_list = _mapper.Map<List<GetAllHierarchyAssetsResponseModel>>(assets);

                response.main_asset_list.ForEach(x =>
                {
                    if (!String.IsNullOrEmpty(x.children))
                    {
                        x.is_child_available = true;
                    }
                });
            }

            var db_ob_wo_assets = _UoW.WorkOrderRepository.GetOBWOAssetsByWOid(requestmodel);
            if (db_ob_wo_assets.Count > 0)
            {
                response.ob_wo_asset_list = _mapper.Map<List<OBWOAssetDetails>>(db_ob_wo_assets);
                /*response.ob_wo_asset_list.ForEach(x =>
                {
                    if (!String.IsNullOrEmpty(x.asset_class_code))
                    {
                        var class_code = x.asset_class_code.ToLower().Trim();
                        var asset_class = _UoW.WorkOrderRepository.GetAssetclassByCode(class_code);
                        if (asset_class != null)
                        {
                            x.inspectiontemplate_asset_class_id = asset_class.inspectiontemplate_asset_class_id;
                        }
                    }
                });*/
            }

            return response;
        }
        public GetFormJsonForLambdaResponsemodel GetFormJsonForLambda(string asset_form_id)
        {
            GetFormJsonForLambdaResponsemodel response = new GetFormJsonForLambdaResponsemodel();
            var get_asset_form = _UoW.WorkOrderRepository.GetAssetformdataByID(Guid.Parse(asset_form_id));
            var get_master_form_json = _UoW.WorkOrderRepository.GetMasterFormsByFormIDs(new List<Guid> { get_asset_form.form_id.Value });
            response.master_form_json = get_master_form_json.FirstOrDefault().form_data;
            response.asset_form_data = get_asset_form.asset_form_data;

            return response;
        }
        public async Task<int> UpdateWOlinePDFurlfromLambda(UpdateWOlinePDFurlfromLambdaRequestmodel requestmodel)
        {
            var get_asset_form = _UoW.WorkOrderRepository.GetAssetformdataByID(requestmodel.asset_form_id);
            get_asset_form.pdf_report_status = (int)Status.Completed;
            get_asset_form.pdf_report_url = UrlGenerator.GetFormIOPDFUrl(requestmodel.pdf_url, requestmodel.manual_wo_number);
            var update = await _UoW.BaseGenericRepository<AssetFormIO>().Update(get_asset_form);

            return 1;
        }
        public async Task<int> update_hierarchy_old_asset()
        {
            var get_assets = _UoW.WorkOrderRepository.GetAssetsForHierarchy();
            try
            {
                _UoW.BeginTransaction();
                int i = 0;
                foreach (var asset in get_assets)
                {
                    i++;
                    if (!String.IsNullOrEmpty(asset.parent))
                    {
                        List<string> parents = new List<string> { asset.parent };
                        var get_parent = _UoW.WorkOrderRepository.GetAssetsByInternalid(parents, asset.site_id).FirstOrDefault();
                        if (get_parent != null)
                        {
                            AssetParentHierarchyMapping AssetParentHierarchyMapping = new AssetParentHierarchyMapping();
                            AssetParentHierarchyMapping.asset_id = asset.asset_id;
                            AssetParentHierarchyMapping.parent_asset_id = get_parent.asset_id;
                            AssetParentHierarchyMapping.created_at = DateTime.UtcNow;
                            AssetParentHierarchyMapping.is_deleted = false;
                            AssetParentHierarchyMapping.site_id = asset.site_id;

                            var insert_parent = await _UoW.BaseGenericRepository<AssetParentHierarchyMapping>().Insert(AssetParentHierarchyMapping);
                        }
                    }
                    if (!String.IsNullOrEmpty(asset.children))
                    {
                        var childlist = asset.children.Split(',').ToList().Where(x => !String.IsNullOrEmpty(x)).ToList();
                        var get_children = _UoW.WorkOrderRepository.GetAssetsByInternalid(childlist, asset.site_id);

                        foreach (var child in get_children)
                        {
                            AssetChildrenHierarchyMapping AssetChildrenHierarchyMapping = new AssetChildrenHierarchyMapping();
                            AssetChildrenHierarchyMapping.asset_id = asset.asset_id;
                            AssetChildrenHierarchyMapping.children_asset_id = child.asset_id;
                            AssetChildrenHierarchyMapping.created_at = DateTime.UtcNow;
                            AssetChildrenHierarchyMapping.is_deleted = false;
                            AssetChildrenHierarchyMapping.site_id = asset.site_id;

                            var insert_child = await _UoW.BaseGenericRepository<AssetChildrenHierarchyMapping>().Insert(AssetChildrenHierarchyMapping);
                        }
                    }
                }
                _UoW.SaveChanges();
                _UoW.CommitTransaction();
            }
            catch (Exception ex)
            {
                _UoW.RollbackTransaction();
            }
            return 1;
        }

        public async Task<int> AddIRImage(List<IFormFile> images, string manual_order_number, string wo_id, string string_site_id)
        {
            var get_img_lael_maping_by_wo = _UoW.WorkOrderRepository.GetIRImageLabelsByWOID(wo_id);
            
            foreach (var file1 in images)
            {
                var file_name = file1.FileName;

                // check if same image filename is exist 
                var get_file = _UoW.WorkOrderRepository.GetIRScanImageFileByNAme(file_name, wo_id);
                if (get_file == null) // if not exist then only add mapping 
                {
                    IRScanWOImageFileMapping IRScanWOImageFileMapping = new IRScanWOImageFileMapping();

                    IRScanWOImageFileMapping.img_file_name = file_name;
                    IRScanWOImageFileMapping.wo_id = Guid.Parse(wo_id);
                    IRScanWOImageFileMapping.manual_wo_number = string_site_id + "/" + manual_order_number;
                    IRScanWOImageFileMapping.created_at = DateTime.UtcNow;
                    IRScanWOImageFileMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                    IRScanWOImageFileMapping.is_deleted = false;

                    var update_img_mapping = get_img_lael_maping_by_wo.Where(s => s.ir_image_label == file_name ||
                                                                             s.visual_image_label == file_name).FirstOrDefault();
                    if (update_img_mapping != null)
                    {
                        IRScanWOImageFileMapping.is_img_attached = true;
                    }

                    var inset = await _UoW.BaseGenericRepository<IRScanWOImageFileMapping>().Insert(IRScanWOImageFileMapping);
                    _UoW.SaveChanges();
                }
            }


            return 1;
        }
        public List<GetIRScanImagesFilesResponsemodel> GetIRScanImagesFiles(GetIRScanImagesFilesRequestmodel requestmodel)
        {
            List<GetIRScanImagesFilesResponsemodel> response = new List<GetIRScanImagesFilesResponsemodel>();

            var get_img_file_mapping = _UoW.WorkOrderRepository.GetImageNameMappingByID(requestmodel.wo_id);

            response = _mapper.Map<List<GetIRScanImagesFilesResponsemodel>>(get_img_file_mapping);

            return response;

        }


        public async Task<GenerateAssetInspectionFormioReportResponsemodel> GenerateAssetInspectionFormioReport(GenerateAssetInspectionFormioReportRequestmodel requestModel, string aws_access_key, string aws_secret_key, string bucketName)
        {
            try
            {
                GenerateAssetInspectionFormioReportResponsemodel response = new GenerateAssetInspectionFormioReportResponsemodel();

                AssetFormIO assetformio = _UoW.AssetFormIORepository.GetAssetFormIOBytId(requestModel.asset_form_id);

                if (assetformio != null && !String.IsNullOrEmpty(assetformio.WOcategorytoTaskMapping.WOInspectionsTemplateFormIOAssignment.InspectionTemplateAssetClass.pdf_report_template_url))
                {
                    #region generate pdf from formio server
                    /*
                    var master_form = _UoW.AssetFormIORepository.GetMasterFormByformID(assetformio.form_id.Value);

                    var master_form_ = JsonSerializer.Deserialize<FormioDynamicDataobj.Root>(master_form.form_data);
                    var asset_form_data = JsonSerializer.Deserialize<FormioDynamicDataobj.Root>(assetformio.asset_form_data);

                    string request = "{\r\n  \"form\": " + master_form.form_data + ",\r\n  \"submission\": " + assetformio.asset_form_data + "}";

                    var get_token = _UoW.WorkOrderRepository.GetFormIOToken();
                    var export_pdf = await FormIOWebAPI.PostApiCallWithJson<System.IO.Stream>(FormIOWebAPI.ApiFunciton.PostURL.ExporterPDF, request, get_token.formio_token);
                    if (export_pdf == null) // if export_pdf is null then refreshtoken and try again
                    {
                        string user_login_request = "{\"data\":{\"email\":\"mukul@egalvanic.com\",\"password\":\"52@^fdr3##4234\",\"login\":true},\"metadata\":{\"timezone\":\"Asia/Calcutta\",\"offset\":330,\"origin\":\"http://formiodev-env.eba-mmqr5ivu.us-east-2.elasticbeanstalk.com\",\"referrer\":\"\",\"browserName\":\"Netscape\",\"userAgent\":\"Mozilla/5.0(WindowsNT10.0;Win64;x64)AppleWebKit/537.36(KHTML,likeGecko)Chrome/111.0.0.0Safari/537.36\",\"pathName\":\"/\",\"onLine\":true},\"state\":\"submitted\",\"_vnote\":\"\"}";
                        var user_login_token = await FormIOWebAPI.FormIOUserLogin<System.IO.Stream>(FormIOWebAPI.ApiFunciton.PostURL.UserLogin, user_login_request);
                        if (!String.IsNullOrEmpty(user_login_token))
                        {
                            get_token.formio_token = user_login_token;
                            var update_token = await _UoW.BaseGenericRepository<FormIOAuthToken>().Update(get_token);
                            export_pdf = await FormIOWebAPI.PostApiCallWithJson<System.IO.Stream>(FormIOWebAPI.ApiFunciton.PostURL.ExporterPDF, request, get_token.formio_token);
                        }
                    }
                    if (export_pdf != null)
                    {
                        var get_master_form = _UoW.formIORepository.GetFormsExcludedByIds(new List<Guid> { assetformio.form_id.Value }).FirstOrDefault();
                        string file_name = get_master_form.form_name + "_" + assetformio.form_retrived_asset_name + "_" + assetformio.form_retrived_location + "_" + assetformio.WorkOrders.manual_wo_number + ".pdf";
                        string file_path = assetformio.WorkOrders.manual_wo_number + "/" + file_name;
                        file_path = file_path.Replace(" ", "_");
                        var upload_to_s3 = await s3BucketService.UploadAsStremForPDF(export_pdf, aws_access_key, aws_secret_key, bucketName, file_path);

                        response.pdf_s3_url = UrlGenerator.GetFormIOPDFUrl(upload_to_s3, assetformio.WorkOrders.manual_wo_number);

                        assetformio.pdf_report_url = response.pdf_s3_url;

                        if (!String.IsNullOrEmpty(assetformio.pdf_report_url))
                        {
                            var update_formio = await _UoW.BaseGenericRepository<AssetFormIO>().Update(assetformio);
                            _UoW.SaveChanges();
                        }
                    }
                    */
                    #endregion generate pdf from formio server

                    #region old flow for generate pdf 
                    assetformio.pdf_report_status = (int)Status.ReportInProgress;
                    assetformio.export_pdf_at = DateTime.UtcNow;
                    assetformio.modified_at = DateTime.UtcNow;
                    bool report_added = await _UoW.BaseGenericRepository<AssetFormIO>().Update(assetformio);
                    if (report_added)
                    {
                        var get_master_form = _UoW.formIORepository.GetFormsExcludedByIds(new List<Guid> { assetformio.form_id.Value }).FirstOrDefault();
                        LambdaAssetFornioInspectionReportRequestmodel LambdaAssetFornioInspectionReportRequestmodel = new LambdaAssetFornioInspectionReportRequestmodel();
                        LambdaAssetFornioInspectionReportRequestmodel.company_code = UpdatedGenericRequestmodel.CurrentUser.domain_name;
                        LambdaAssetFornioInspectionReportRequestmodel.asset_form_id = assetformio.asset_form_id.ToString();
                        LambdaAssetFornioInspectionReportRequestmodel.pdf_report_template_url = assetformio.WOcategorytoTaskMapping.WOInspectionsTemplateFormIOAssignment.InspectionTemplateAssetClass.pdf_report_template_url;

                        // Call Lamda
                        string jsonString = JsonSerializer.Serialize(LambdaAssetFornioInspectionReportRequestmodel);
                        AssetFornioInspectionReport.GenerateReport(aws_access_key, aws_secret_key, jsonString, _logger);
                        response.success = (int)ResponseStatusNumber.Success;
                    }
                    else
                    {
                        response.success = (int)ResponseStatusNumber.Error;
                        //  response = (int)ResponseStatusNumber.Error;
                    }

                    #endregion old flow for generate pdf 
                }
                else
                {
                    response.success = (int)ResponseStatusNumber.NotFound;
                    response.pdf_s3_url = null;
                }
                return response;
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        /*
        public async Task<GenerateAssetInspectionFormioReportResponsemodel> GenerateIRWOAssetReport(GenerateIRWOAssetReportRequestmodel requestModel, string aws_access_key, string aws_secret_key, string bucketName)
        {
            try
            {
                GenerateAssetInspectionFormioReportResponsemodel response = new GenerateAssetInspectionFormioReportResponsemodel();

                var WO = _UoW.WorkOrderRepository.GetWObyIdforIRlambdareport(requestModel.wo_id);

                if (WO != null)
                {
                    if (!requestModel.is_requested_to_regenerate_report && WO.ir_wo_pdf_report_status == (int)Status.ReportCompleted)
                    {
                        response.pdf_s3_url = UrlGenerator.GetOBAssetPdfUrl(WO.ir_wo_pdf_report, WO.wo_id.ToString());
                        response.success = (int)ResponseStatusNumber.Success;
                    }
                    else if (requestModel.is_requested_to_regenerate_report || WO.ir_wo_pdf_report_status == null || WO.ir_wo_pdf_report_status == (int)Status.ReportFailed)
                    {
                        WO.ir_wo_pdf_report_status = (int)Status.ReportInProgress;
                        WO.ir_wo_export_pdf_at = DateTime.UtcNow;
                        WO.modified_at = DateTime.UtcNow;
                        bool report_added = await _UoW.BaseGenericRepository<WorkOrders>().Update(WO);
                        if (report_added)
                        {
                            LambdaGenerateIRWOAssetReportRequestmodel LambdaGenerateIRWOAssetReportRequestmodel = new LambdaGenerateIRWOAssetReportRequestmodel();
                            LambdaGenerateIRWOAssetReportRequestmodel.wo_id = requestModel.wo_id;
                            LambdaGenerateIRWOAssetReportRequestmodel.manual_wo_number = WO.manual_wo_number;
                            LambdaGenerateIRWOAssetReportRequestmodel.wo_start_date = WO.start_date;

                            string jsonString = JsonSerializer.Serialize(LambdaGenerateIRWOAssetReportRequestmodel);
                            // Call Lamda
                            // we are using same API and keys in IR scan wo and MWO report only lambda and SQS will be differnt for both
                            if (WO.wo_type == (int)Status.IR_Scan_WO)
                                AssetFornioInspectionReport.GenerateIRWOReport(aws_access_key, aws_secret_key, jsonString, _logger);
                            else if (WO.wo_type == (int)Status.Maintenance_WO)
                                AssetFornioInspectionReport.GenerateMWOReport(aws_access_key, aws_secret_key, jsonString, _logger);
                            else if (WO.wo_type == (int)Status.Onboarding_WO)
                                AssetFornioInspectionReport.GenerateOBWOReport(aws_access_key, aws_secret_key, jsonString, _logger);
                        }
                        else
                        {
                            //  response = (int)ResponseStatusNumber.Error;
                        }
                    }
                }
                else
                {
                    response.pdf_s3_url = null;
                }
                return response;
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        */

        public async Task<GenerateAssetInspectionFormioReportResponsemodel> GenerateIRWOAssetReport(GenerateIRWOAssetReportRequestmodel requestModel, string aws_access_key, string aws_secret_key, string bucketName)
        {
            try
            {
                GenerateAssetInspectionFormioReportResponsemodel response = new GenerateAssetInspectionFormioReportResponsemodel();

                var WO = _UoW.WorkOrderRepository.GetWObyIdforIRlambdareport(requestModel.wo_id);
                if (WO != null)
                {
                    WO.ir_wo_pdf_report_status = (int)Status.ReportInProgress;
                    WO.ir_wo_export_pdf_at = DateTime.UtcNow;
                    WO.modified_at = DateTime.UtcNow;
                    bool report_added = await _UoW.BaseGenericRepository<WorkOrders>().Update(WO);
                    if (report_added)
                    {
                        LambdaGenerateIRWOAssetReportRequestmodel LambdaGenerateIRWOAssetReportRequestmodel = new LambdaGenerateIRWOAssetReportRequestmodel();
                        LambdaGenerateIRWOAssetReportRequestmodel.wo_id = requestModel.wo_id;
                        LambdaGenerateIRWOAssetReportRequestmodel.manual_wo_number = WO.manual_wo_number;
                        LambdaGenerateIRWOAssetReportRequestmodel.wo_start_date = WO.start_date;
                        LambdaGenerateIRWOAssetReportRequestmodel.user_id = UpdatedGenericRequestmodel.CurrentUser.requested_by;

                        string jsonString = JsonSerializer.Serialize(LambdaGenerateIRWOAssetReportRequestmodel);
                        // Call Lamda
                        // we are using same API and keys in IR scan wo and MWO report only lambda and SQS will be differnt for both
                        if (WO.wo_type == (int)Status.IR_Scan_WO)
                            AssetFornioInspectionReport.GenerateIRWOReport(aws_access_key, aws_secret_key, jsonString, _logger);
                        else if (WO.wo_type == (int)Status.Maintenance_WO)
                            AssetFornioInspectionReport.GenerateMWOReport(aws_access_key, aws_secret_key, jsonString, _logger);
                        else if (WO.wo_type == (int)Status.Onboarding_WO)
                            AssetFornioInspectionReport.GenerateOBWOReport(aws_access_key, aws_secret_key, jsonString, _logger);
                    }
                    else
                    {
                        //  response = (int)ResponseStatusNumber.Error;
                    }
                }
                else
                {
                    response.pdf_s3_url = null; ;
                }
                return response;
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        public async Task<IRWOAssetReportStatusResponsemodel> IRWOAssetReportStatus(string wo_id)
        {
            IRWOAssetReportStatusResponsemodel response = new IRWOAssetReportStatusResponsemodel();
            try
            {
                WorkOrders reports = _UoW.WorkOrderRepository.GetWObyIdforIRlambdareport(Guid.Parse(wo_id));
                if (reports != null && reports.ir_wo_export_pdf_at != null && reports.ir_wo_export_pdf_at.Value.AddMinutes(18) < DateTime.UtcNow)// if 18 min. is elapsed and status is still in progress then make status as failed and return
                {
                    if (reports.ir_wo_pdf_report_status == (int)ReportStatus.ReportInProgress)
                    {
                        reports.ir_wo_pdf_report_status = (int)ReportStatus.ReportRequestTimeOut;
                        var update = await _UoW.BaseGenericRepository<WorkOrders>().Update(reports);

                        response.pdf_report_status = reports.ir_wo_pdf_report_status;
                        response.wo_id = reports.wo_id;
                    }
                    if (reports.ir_wo_pdf_report_status == (int)ReportStatus.ReportFailed)
                    {
                        response.pdf_report_status = reports.ir_wo_pdf_report_status;
                        response.wo_id = reports.wo_id;
                    }
                }
                else if (reports != null)
                {
                    response.pdf_report_status = reports.ir_wo_pdf_report_status;
                    response.wo_id = reports.wo_id;
                    if (reports.ir_wo_pdf_report_status == (int)ReportStatus.ReportCompleted) // if report is completed then send url 
                    {
                        response.pdf_report_url = UrlGenerator.GetOBAssetPdfUrl(reports.ir_wo_pdf_report, reports.wo_id.ToString());
                    }
                }
                return response;
            }
            catch { throw; }
        }

        public BulkImportStatusResponsemodel BulkImportAssetFormIOStatus(string wo_id)
        {

            BulkImportStatusResponsemodel response = new BulkImportStatusResponsemodel();
            try
            {
                WorkOrders reports = _UoW.WorkOrderRepository.GetWObyIdforIRlambdareport(Guid.Parse(wo_id));
                if (reports != null)
                {
                    response.bulk_data_import_status = reports.bulk_data_import_status;
                    response.bulk_data_import_failed_logs = reports.bulk_data_import_failed_logs;
                }
                return response;
            }
            catch { throw; }
        }

        public async Task<int> BulkImportAssetFormIO(BulkImportAssetFormIORequestmodel requestModel, string aws_access_key, string aws_secret_key, string bucketName)
        {
            try
            {

                int response = (int)ResponseStatusNumber.Error;

                var WO = _UoW.WorkOrderRepository.GetWObyIdforIRlambdareport(requestModel.wo_id);

                if (WO != null)
                {

                    WO.bulk_data_import_status = (int)BulkDataImportStatus.Inprogress;
                    WO.modified_at = DateTime.UtcNow;
                    bool report_added = await _UoW.BaseGenericRepository<WorkOrders>().Update(WO);
                    if (report_added)
                    {
                        LambdaBulkImportAssetFormIORequestmodel LambdaBulkImportAssetFormIORequestmodel = new LambdaBulkImportAssetFormIORequestmodel();
                        LambdaBulkImportAssetFormIORequestmodel.wo_id = requestModel.wo_id;
                        LambdaBulkImportAssetFormIORequestmodel.zip_link = requestModel.file_name;

                        // Call Lamda
                        string jsonString = JsonSerializer.Serialize(LambdaBulkImportAssetFormIORequestmodel);
                        AssetFornioInspectionReport.BulkImportAssetFormIO(aws_access_key, aws_secret_key, jsonString, _logger);

                        response = (int)ResponseStatusNumber.Success;
                    }
                    else
                    {
                        response = (int)ResponseStatusNumber.Error;
                    }


                }
                else
                {
                    response = (int)ResponseStatusNumber.Error;
                }
                return response;
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        public int UpdateWOCategoryGroupString(UpdateWOCategoryGroupStringRequestmodel requestmodel)
        {

            if (requestmodel.wo_inspectionsTemplateFormIOAssignment_id.Count > 0)
            {
                var get_category = _UoW.WorkOrderRepository.GetWOCategoryByIds(requestmodel.wo_inspectionsTemplateFormIOAssignment_id);
                get_category.ForEach(x =>
                {
                    x.group_string = requestmodel.group_string;
                    x.updated_at = DateTime.UtcNow;
                    x.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                });
                var update = _UoW.BaseGenericRepository<WOInspectionsTemplateFormIOAssignment>().UpdateList(get_category);
                if (update)
                {
                    return (int)ResponseStatusNumber.Success;
                }
            }
            else
            {
                return (int)ResponseStatusNumber.NotFound;
            }
            return (int)ResponseStatusNumber.Error;
        }

        public ListViewModel<GetAllWOLineTempIssuesResponsemodel> GetAllWOLineTempIssues(GetAllWOLineTempIssuesRequestmodel requestmodel)
        {
            ListViewModel<GetAllWOLineTempIssuesResponsemodel> IssueList = new ListViewModel<GetAllWOLineTempIssuesResponsemodel>();
            var issueList = _UoW.WorkOrderRepository.GetAllWOLineTempIssues(requestmodel);
            if (issueList.Item1 != null && issueList.Item1.Count > 0)
            {
                IssueList.list = _mapper.Map<List<GetAllWOLineTempIssuesResponsemodel>>(issueList.Item1);

                IssueList.pageSize = requestmodel.page_size;
                IssueList.pageIndex = requestmodel.page_index;
                IssueList.listsize = issueList.Item2;
            }
            return IssueList;
        }
        public ListViewModel<GetAllAssetIssuesResponsemodel> GetAllAssetIssues(GetAllAssetIssuesRequestmodel requestmodel)
        {
            ListViewModel<GetAllAssetIssuesResponsemodel> IssueList = new ListViewModel<GetAllAssetIssuesResponsemodel>();
            var issueList = _UoW.WorkOrderRepository.GetAllAssetIssues(requestmodel);
            if (issueList.Item1 != null && issueList.Item1.Count > 0)
            {

                IssueList.list = _mapper.Map<List<GetAllAssetIssuesResponsemodel>>(issueList.Item1);

                IssueList.pageSize = requestmodel.page_size;
                IssueList.pageIndex = requestmodel.page_index;
                IssueList.listsize = issueList.Item2;
            }
            return IssueList;
        }
        public ListViewModel<GetAllAssetIssueCommentsResponsemodel> GetAllAssetIssueComments(GetAllAssetIssueCommentsRequestmodel requestmodel)
        {
            ListViewModel<GetAllAssetIssueCommentsResponsemodel> IssueList = new ListViewModel<GetAllAssetIssueCommentsResponsemodel>();
            var issueList = _UoW.WorkOrderRepository.GetAllAssetIssueComments(requestmodel);
            if (issueList.Item1 != null && issueList.Item1.Count > 0)
            {
                IssueList.list = _mapper.Map<List<GetAllAssetIssueCommentsResponsemodel>>(issueList.Item1);

                IssueList.pageSize = requestmodel.page_size;
                IssueList.pageIndex = requestmodel.page_index;
                IssueList.listsize = issueList.Item2;
            }
            return IssueList;
        }
        public async Task<int> AddUpdateAssetIssue(AddUpdateAssetIssueRequestmodel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;

            if (requestmodel.asset_issue_id != null) // update
            {
                var get_asset_issue = _UoW.WorkOrderRepository.GetAssetIssueById(requestmodel.asset_issue_id.Value);
                if (get_asset_issue != null)
                {
                    get_asset_issue.asset_id = requestmodel.asset_id;
                    get_asset_issue.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                    get_asset_issue.modified_at = DateTime.UtcNow;
                    get_asset_issue.is_deleted = requestmodel.is_deleted;
                    get_asset_issue.issue_status = requestmodel.issue_status;
                    get_asset_issue.priority = requestmodel.priority;
                    get_asset_issue.issue_title = requestmodel.issue_title;
                    get_asset_issue.issue_description = requestmodel.issue_description;
                    get_asset_issue.field_note = requestmodel.field_note;
                    get_asset_issue.back_office_note = requestmodel.back_office_note;
                    get_asset_issue.issue_type = requestmodel.issue_type != null ? requestmodel.issue_type.Value : 0;
                    get_asset_issue.resolve_issue_reason = requestmodel.resolve_issue_reason;

                    if (requestmodel.issue_image_list != null && requestmodel.issue_image_list.Count > 0)
                    {
                        var new_imge_list = requestmodel.issue_image_list.Where(x => x.asset_issue_image_mapping_id == null).ToList();
                        var requested_deleted_image_list = requestmodel.issue_image_list.Where(x => x.asset_issue_image_mapping_id != null && x.is_deleted == true).ToList();

                        if (new_imge_list.Count > 0)
                        {
                            foreach (var new_imge in new_imge_list)
                            {
                                AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                                AssetIssueImagesMapping.asset_issue_id = get_asset_issue.asset_issue_id;
                                AssetIssueImagesMapping.image_duration_type_id = new_imge.image_duration_type_id;
                                AssetIssueImagesMapping.image_file_name = new_imge.image_file_name;
                                AssetIssueImagesMapping.image_thumbnail_file_name = new_imge.image_thumbnail_file_name;
                                AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                                AssetIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                AssetIssueImagesMapping.is_deleted = false;
                                AssetIssueImagesMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                                var insert = await _UoW.BaseGenericRepository<AssetIssueImagesMapping>().Insert(AssetIssueImagesMapping);
                            }
                        }
                        if (requested_deleted_image_list.Count > 0)
                        {
                            var requested_deleted_image_mapping_ids = requested_deleted_image_list.Select(x => x.asset_issue_image_mapping_id).ToList();
                            get_asset_issue.AssetIssueImagesMapping.ToList().ForEach(img =>
                            {
                                if (requested_deleted_image_mapping_ids.Contains(img.asset_issue_image_mapping_id))
                                {
                                    img.is_deleted = true;
                                    img.modified_at = DateTime.UtcNow;
                                    img.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                }
                            });
                            /*
                             var db_images = get_asset_issue.AssetIssueImagesMapping.ToList();
                             var db_deleted_image = db_images.Where(x => requested_deleted_image_mapping_ids.Contains(x.asset_issue_image_mapping_id)).ToList();
                             foreach (var deleted_imge in db_deleted_image)
                             {
                                 deleted_imge.is_deleted = true;
                                 deleted_imge.modified_at = DateTime.UtcNow;
                                 deleted_imge.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                 var update_img = await _UoW.BaseGenericRepository<AssetIssueImagesMapping>().Update(deleted_imge);
                             }
                            */
                        }
                    }

                    var update = await _UoW.BaseGenericRepository<AssetIssue>().Update(get_asset_issue);
                    _UoW.SaveChanges();

                    await ChangeAssetConditionBasedOnIssue(get_asset_issue.asset_issue_id);

                    response = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    response = (int)ResponseStatusNumber.NotFound;
                }

            }
            else // insert
            {
                AssetIssue AssetIssue = new AssetIssue();
                AssetIssue.asset_id = requestmodel.asset_id;
                AssetIssue.issue_status = requestmodel.issue_status;
                AssetIssue.priority = requestmodel.priority;
                AssetIssue.issue_title = requestmodel.issue_title;
                AssetIssue.issue_description = requestmodel.issue_description;
                AssetIssue.field_note = requestmodel.field_note;
                AssetIssue.back_office_note = requestmodel.back_office_note;
                AssetIssue.created_at = DateTime.UtcNow;
                AssetIssue.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                AssetIssue.is_deleted = false;
                AssetIssue.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                AssetIssue.issue_type = requestmodel.issue_type != null ? requestmodel.issue_type.Value : 0; AssetIssue.wo_id = requestmodel.wo_id;
                AssetIssue.asset_form_id = requestmodel.asset_form_id;
                AssetIssue.woonboardingassets_id = requestmodel.woonboardingassets_id;
                AssetIssue.is_issue_linked = requestmodel.is_issue_linked;

                var totalIssues = _UoW.WorkOrderRepository.GetTotalNumberOfIssues(
                    Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id));
                var siteCode = _UoW.WorkOrderRepository.GetSiteCodeById(Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id));

                AssetIssue.issue_number = siteCode + " Issue-" + (++totalIssues);

                // insert images 
                if (requestmodel.issue_image_list != null && requestmodel.issue_image_list.Count > 0)
                {
                    AssetIssue.AssetIssueImagesMapping = new List<AssetIssueImagesMapping>();
                    foreach (var img in requestmodel.issue_image_list)
                    {
                        AssetIssueImagesMapping AssetIssueImagesMapping = new AssetIssueImagesMapping();
                        AssetIssueImagesMapping.asset_issue_id = AssetIssue.asset_issue_id;
                        AssetIssueImagesMapping.image_file_name = img.image_file_name;
                        AssetIssueImagesMapping.image_thumbnail_file_name = img.image_thumbnail_file_name;
                        AssetIssueImagesMapping.created_at = DateTime.UtcNow;
                        AssetIssueImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                        AssetIssueImagesMapping.is_deleted = false;
                        AssetIssueImagesMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        AssetIssueImagesMapping.image_duration_type_id = img.image_duration_type_id;
                        AssetIssue.AssetIssueImagesMapping.Add(AssetIssueImagesMapping);
                    }
                }
                var insert = await _UoW.BaseGenericRepository<AssetIssue>().Insert(AssetIssue);
                _UoW.SaveChanges();

                await ChangeAssetConditionBasedOnIssue(AssetIssue.asset_issue_id);
                response = (int)ResponseStatusNumber.Success;
            }
            return response;
        }
        public async Task<int> LinkIssueToWOLine(LinkIssueToWOLineRequestmodel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;
            if (requestmodel.deleted_asset_issue_id != null && requestmodel.deleted_asset_issue_id.Count > 0)
            {
                var get_asset_issue_list = _UoW.WorkOrderRepository.GetAssetIssueByMultiId(requestmodel.deleted_asset_issue_id);

                foreach (var get_asset_issue in get_asset_issue_list)
                {
                    if (get_asset_issue.woonboardingassets_id != null)
                    {
                        var remove_images = await RemoveImagesInWOline(get_asset_issue);
                    }
                    get_asset_issue.asset_form_id = null;
                    get_asset_issue.wo_id = null;
                    get_asset_issue.is_issue_linked = false;
                    get_asset_issue.woonboardingassets_id = null;
                    get_asset_issue.modified_at = DateTime.UtcNow;
                    get_asset_issue.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                    get_asset_issue.issue_status = (int)Status.open;
                    var update = await _UoW.BaseGenericRepository<AssetIssue>().Update(get_asset_issue);

                    WOOnboardingAssets get_wo_line = null;
                    if (requestmodel.woonboardingassets_id != null)
                    {
                        get_wo_line = _UoW.WorkOrderRepository.GetWOlineByIdForLinkIssue(requestmodel.woonboardingassets_id.Value);
                        if (!String.IsNullOrEmpty(get_wo_line.problem_description))
                        {
                            var description_array = get_wo_line.problem_description.Split(",").ToList();
                            description_array = description_array.Select(fruit => fruit.Trim()).ToList();
                            int index = description_array.IndexOf(get_asset_issue.issue_description);
                            if (index != -1)
                            {

                            }
                            else
                            {
                                // attach description to WO line
                                if (!String.IsNullOrEmpty(get_wo_line.problem_description))
                                { get_wo_line.problem_description = get_wo_line.problem_description.Replace("," + get_asset_issue.issue_description, ""); }
                                else { get_wo_line.problem_description = get_asset_issue.issue_description; }
                            }
                        }

                    }

                    if (get_wo_line != null)
                    {
                        get_wo_line.modified_at = DateTime.UtcNow;
                        var update_wo_line = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_wo_line);

                    }


                    response = (int)ResponseStatusNumber.Success;
                }
            }
            if (requestmodel.deleted_wo_line_issue_id != null && requestmodel.deleted_wo_line_issue_id.Count > 0)
            {
                var get_temp_issue_list = _UoW.WorkOrderRepository.GetTempIssueByMultiId(requestmodel.deleted_wo_line_issue_id);
                foreach (var get_temp_issue in get_temp_issue_list)
                {
                    if (get_temp_issue.woonboardingassets_id != null)
                    {
                        var remove_images = await RemoveTempIssueImagesInWOline(get_temp_issue);
                    }
                    get_temp_issue.asset_form_id = null;
                    get_temp_issue.wo_id = get_temp_issue.original_wo_id;
                    get_temp_issue.woonboardingassets_id = null;
                    get_temp_issue.is_issue_linked_for_fix = false;
                    get_temp_issue.modified_at = DateTime.UtcNow;
                    get_temp_issue.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                    WOOnboardingAssets get_wo_line = null;
                    if (requestmodel.woonboardingassets_id != null)
                    {
                        get_wo_line = _UoW.WorkOrderRepository.GetWOlineByIdForLinkIssue(requestmodel.woonboardingassets_id.Value);
                        if (!String.IsNullOrEmpty(get_wo_line.problem_description))
                        {
                            var description_array = get_wo_line.problem_description.Split(",").ToList();
                            description_array = description_array.Select(fruit => fruit.Trim()).ToList();
                            int index = description_array.IndexOf(get_temp_issue.issue_description);
                            if (index != -1)
                            {

                            }
                            else
                            {
                                // attach description to WO line
                                if (!String.IsNullOrEmpty(get_wo_line.problem_description))
                                { get_wo_line.problem_description = get_wo_line.problem_description.Replace("," + get_temp_issue.issue_description, ""); }
                                else { get_wo_line.problem_description = get_temp_issue.issue_description; }
                            }
                        }

                    }

                    if (get_wo_line != null)
                    {
                        get_wo_line.modified_at = DateTime.UtcNow;
                        var update_wo_line = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_wo_line);

                    }
                    var update = await _UoW.BaseGenericRepository<WOLineIssue>().Update(get_temp_issue);

                    response = (int)ResponseStatusNumber.Success;
                }

            }

            if (requestmodel.asset_issue_id != null && requestmodel.asset_issue_id.Count > 0) // 
            {
                var get_asset_issue_list = _UoW.WorkOrderRepository.GetAssetIssueByMultiId(requestmodel.asset_issue_id);
                foreach (var get_asset_issue in get_asset_issue_list)
                {
                    get_asset_issue.asset_form_id = requestmodel.asset_form_id;
                    get_asset_issue.wo_id = requestmodel.wo_id;
                    get_asset_issue.is_issue_linked = true;
                    get_asset_issue.woonboardingassets_id = requestmodel.woonboardingassets_id;
                    get_asset_issue.modified_at = DateTime.UtcNow;
                    get_asset_issue.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                    var update = await _UoW.BaseGenericRepository<AssetIssue>().Update(get_asset_issue);
                    WOOnboardingAssets get_wo_line = null;
                    if (requestmodel.woonboardingassets_id != null)
                    {
                        get_wo_line = _UoW.WorkOrderRepository.GetWOlineByIdForLinkIssue(requestmodel.woonboardingassets_id.Value);
                      //  get_wo_line.issue_title = get_asset_issue.issue_title;
                      //  get_wo_line.issue_priority = get_asset_issue.priority;

                        // new flow problem description will be saved from updateobwoassetdetails
                       /* if (!String.IsNullOrEmpty(get_wo_line.problem_description))
                        {
                            var description_array = get_wo_line.problem_description.Split(",").ToList();
                            description_array = description_array.Select(fruit => fruit.Trim()).ToList();
                            int index = description_array.IndexOf(get_asset_issue.issue_description);
                            if (index != -1)
                            {

                            }
                            else
                            {
                                // attach description to WO line
                                if (!String.IsNullOrEmpty(get_wo_line.problem_description))
                                { get_wo_line.problem_description = get_wo_line.problem_description + " , " + get_asset_issue.issue_description; }
                                else { get_wo_line.problem_description = get_asset_issue.issue_description; }
                            }
                        }
                        else
                        {
                            get_wo_line.problem_description = get_asset_issue.issue_description;
                        }
                        */
                    }


                    // add before photo and description in WO line from issue module if WO line is repair/replace/General
                    if (get_asset_issue.AssetIssueImagesMapping != null && get_asset_issue.AssetIssueImagesMapping.Count > 0)
                    {
                        if (requestmodel.woonboardingassets_id != null)
                        {
                            if (get_wo_line != null && (get_wo_line.inspection_type == (int)MWO_inspection_wo_type.Repair || get_wo_line.inspection_type == (int)MWO_inspection_wo_type.Replace || get_wo_line.inspection_type == (int)MWO_inspection_wo_type.Trouble_Call_Check))
                            {
                                if (get_wo_line.WOOnboardingAssetsImagesMapping != null && get_wo_line.WOOnboardingAssetsImagesMapping.Count > 0) { }
                                else { get_wo_line.WOOnboardingAssetsImagesMapping = new List<WOOnboardingAssetsImagesMapping>(); }

                                var issue_img = get_asset_issue.AssetIssueImagesMapping.Where(x => x.image_duration_type_id == (int)IssueImageDuration.before && !x.is_deleted).ToList();
                                foreach (var img in issue_img)
                                {
                                    var is_img_exist = get_wo_line.WOOnboardingAssetsImagesMapping.Where(x => x.asset_photo == img.image_file_name 
                                    && x.asset_photo_type == (int)IssueImageDuration.before
                                    ).FirstOrDefault();
                                    if (is_img_exist == null)
                                    {
                                        WOOnboardingAssetsImagesMapping WOOnboardingAssetsImagesMapping = new WOOnboardingAssetsImagesMapping();
                                        WOOnboardingAssetsImagesMapping.asset_photo = img.image_file_name;
                                        WOOnboardingAssetsImagesMapping.asset_thumbnail_photo = img.image_thumbnail_file_name;
                                        WOOnboardingAssetsImagesMapping.created_at = DateTime.UtcNow;
                                        WOOnboardingAssetsImagesMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                        WOOnboardingAssetsImagesMapping.asset_photo_type = (int)AssetPhotoType.Asset_Profile;
                                        WOOnboardingAssetsImagesMapping.image_duration_type_id = (int)IssueImageDuration.before;
                                        get_wo_line.WOOnboardingAssetsImagesMapping.Add(WOOnboardingAssetsImagesMapping);

                                        try
                                        {
                                            // copy image from Issue bucket to conduit-dev-assetimages
                                            s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["issue_photos_bucket"], ConfigurationManager.AppSettings["asset_bucket_name"], img.image_file_name);
                                            s3BucketService.CopyImagesToAnotherBucket(ConfigurationManager.AppSettings["AWS_ACCESS_KEY"], ConfigurationManager.AppSettings["AWS_SECRET_KEY"], ConfigurationManager.AppSettings["issue_photos_bucket"], ConfigurationManager.AppSettings["asset_bucket_name"], img.image_thumbnail_file_name);
                                        }
                                        catch (Exception ex)
                                        {

                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (get_wo_line != null)
                    {
                        get_wo_line.modified_at = DateTime.UtcNow;
                        var update_wo_line = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_wo_line);

                    }

                    // update Issue condition based on WO line 
                    await UpdateIssueStatusBasedonWOline(get_asset_issue.asset_issue_id);
                    // update asset condition based on issue condition 
                    await ChangeAssetConditionBasedOnIssue(get_asset_issue.asset_issue_id);

                    response = (int)ResponseStatusNumber.Success;
                }
            }

            if (requestmodel.wo_line_issue_id != null && requestmodel.wo_line_issue_id.Count > 0) //
            {
                var get_temp_issue_list = _UoW.WorkOrderRepository.GetTempIssueByMultiId(requestmodel.wo_line_issue_id);
                foreach (var get_temp_issue in get_temp_issue_list)
                {
                    get_temp_issue.asset_form_id = requestmodel.asset_form_id;
                    get_temp_issue.wo_id = requestmodel.wo_id;
                    get_temp_issue.woonboardingassets_id = requestmodel.woonboardingassets_id;
                    get_temp_issue.is_issue_linked_for_fix = true;
                    get_temp_issue.modified_at = DateTime.UtcNow;
                    get_temp_issue.original_asset_id = requestmodel.main_asset_id;
                    get_temp_issue.original_woonboardingassets_id = requestmodel.issues_temp_asset_id;
                    get_temp_issue.original_wo_id = requestmodel.wo_id;
                    get_temp_issue.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                    var update = await _UoW.BaseGenericRepository<WOLineIssue>().Update(get_temp_issue);

                    response = (int)ResponseStatusNumber.Success;
                }
            }

            // update issue status


            return response;
        }


        public async Task<int> UpdateIssueStatusBasedonWOline(Guid asset_issue_id)
        {
            var get_issue = _UoW.WorkOrderRepository.GetAssetIssueByIdForAssetupdate(asset_issue_id);
            int wo_line_status = 0;
            if (get_issue.AssetFormIO != null)
            {
                wo_line_status = get_issue.AssetFormIO.status;
            }
            else if (get_issue.WOOnboardingAssets != null)
            {
                wo_line_status = get_issue.WOOnboardingAssets.status;
            }

            if (wo_line_status > 0)
            {
                if (wo_line_status == (int)Status.open)
                {
                    get_issue.issue_status = (int)Status.Schedule;
                }
                else if (wo_line_status == (int)Status.InProgress || wo_line_status == (int)Status.Ready_for_review)
                {
                    get_issue.issue_status = (int)Status.InProgress;
                }
                else if (wo_line_status == (int)Status.Completed && get_issue.WorkOrders.status == (int)Status.Completed) //  issue will mark as a complete only when WO and WO line status will be completeed and based on resolution
                {
                    bool mark_issue_complete = CheckWOLineResolution(get_issue.AssetFormIO, get_issue.WOOnboardingAssets);
                    if (mark_issue_complete || get_issue.issue_status == (int)Status.Completed) // we checked issue status condition here bcoz in PM woline we dont have any verdict so when creating new issue in PM woline we marked asset issue status as completed
                    {
                        get_issue.issue_status = (int)Status.Completed;
                    }
                    else
                    {
                        get_issue.issue_status = (int)Status.open;
                    }

                }
                try
                {
                    var update = await _UoW.BaseGenericRepository<AssetIssue>().Update(get_issue);
                }
                catch (Exception ex)
                {

                }



                /// add activity feed notification if status is updated 
                /// 
                try
                {
                    AssetActivityLogs assetActivityLogs = new AssetActivityLogs();
                    assetActivityLogs.created_at = DateTime.UtcNow;
                    assetActivityLogs.activity_header = "Issue - " + get_issue.issue_title + " is " + Enum.GetName(typeof(Status), get_issue.issue_status) + " for Asset - " + get_issue.Asset.name + " in Workorder - " + get_issue.WorkOrders.manual_wo_number;
                    assetActivityLogs.activity_message = "Issue - " + get_issue.issue_title + " is " + Enum.GetName(typeof(Status), get_issue.issue_status) + " for Asset - " + get_issue.Asset.name + " in Workorder - " + get_issue.WorkOrders.manual_wo_number;
                    assetActivityLogs.activity_type = (int)ActivityTypes.IssueConditionChange;
                    assetActivityLogs.status = (int)Status.Active;
                    assetActivityLogs.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    assetActivityLogs.asset_id = get_issue.asset_id.Value;

                    var insert_activity_log = await _UoW.BaseGenericRepository<AssetActivityLogs>().Insert(assetActivityLogs);
                }
                catch (Exception ex)
                {

                }
            }
            return 1;
        }

        public bool CheckWOLineResolution(AssetFormIO assetformio, WOOnboardingAssets WOOnboardingAssets)
        {
            bool issue_resolve = false;
            if (assetformio != null)
            {
                if (assetformio.inspection_verdict == (int)inspectionVerdictnumber.acceptable)
                {
                    issue_resolve = true;
                }
                else
                {

                    issue_resolve = false;
                    // check repair/replace schedule if its i will repair today then mark issue as completed
                    try
                    {
                        dynamic dynamicform = Newtonsoft.Json.JsonConvert.DeserializeObject(assetformio.asset_form_data);
                        string repair_schedule_timing = dynamicform.data.footer.repairSchedule;
                        string replace_schedule_timing = dynamicform.data.footer.replacementSchedule;
                        if (!String.IsNullOrEmpty(repair_schedule_timing))
                        {
                            repair_schedule_timing = repair_schedule_timing.Trim().ToLower();
                            if (repair_schedule_timing == "today")
                            {
                                issue_resolve = true;
                            }
                        }
                        if (!String.IsNullOrEmpty(replace_schedule_timing))
                        {
                            replace_schedule_timing = replace_schedule_timing.Trim().ToLower();
                            if (replace_schedule_timing == "today")
                            {
                                issue_resolve = true;
                            }
                        }

                    }
                    catch (Exception ex)
                    {

                    }
                }

            }
            else if (WOOnboardingAssets != null)
            {
                if (WOOnboardingAssets.inspection_type == (int)MWO_inspection_wo_type.Repair)
                {
                    if (WOOnboardingAssets.repair_resolution == (int)MWO_inspection_Repair_resolution.Repair_completed_successfully)
                    {
                        issue_resolve = true;
                    }
                    else
                    {
                        issue_resolve = false;
                    }
                }
                else if (WOOnboardingAssets.inspection_type == (int)MWO_inspection_wo_type.Replace)
                {
                    if (WOOnboardingAssets.replacement_resolution == (int)MWO_inspection_replacement_resolution.Replacement_completed_successfully)
                    {
                        issue_resolve = true;
                    }
                    else
                    {
                        issue_resolve = false;
                    }
                }
                else if (WOOnboardingAssets.inspection_type == (int)MWO_inspection_wo_type.Trouble_Call_Check) // general issue resolution
                {
                    if (WOOnboardingAssets.general_issue_resolution == (int)MWO_inspection_general_issue_resolution.Issue_completed_successfully)
                    {
                        issue_resolve = true;
                    }
                    else
                    {
                        issue_resolve = false;
                    }
                }

            }
            return issue_resolve;
        }

        public async Task<int> DeleteAssetIssue(DeleteAssetIssueRequestmodel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;
            var get_issue = _UoW.WorkOrderRepository.GetAssetIssueById(requestmodel.asset_issue_id);
            if (get_issue.issue_status != (int)Status.open)
            {
                return (int)ResponseStatusNumber.issue_is_not_open;
            }
            if (get_issue.asset_form_id != null || get_issue.woonboardingassets_id != null)
            {
                return (int)ResponseStatusNumber.issue_is_assigned;
            }

            get_issue.is_deleted = true;
            get_issue.created_at = DateTime.UtcNow;
            get_issue.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

            var update = await _UoW.BaseGenericRepository<AssetIssue>().Update(get_issue);
            if (update)
            {
                _UoW.SaveChanges();
                response = (int)ResponseStatusNumber.Success;
            }


            return response;
        }
        public async Task<int> AddUpdateIssueComment(AddUpdateIssueCommentRequestmodel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;

            if (requestmodel.asset_issue_comments_id != null) // update
            {
                var get_comment = _UoW.WorkOrderRepository.GetIssueCommentById(requestmodel.asset_issue_comments_id.Value);
                if (get_comment != null)
                {
                    get_comment.comment = requestmodel.comment;
                    get_comment.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                    get_comment.modified_at = DateTime.UtcNow;
                    get_comment.is_deleted = requestmodel.is_deleted;

                    var update = await _UoW.BaseGenericRepository<AssetIssueComments>().Update(get_comment);

                    response = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    response = (int)ResponseStatusNumber.NotFound;
                }

            }
            else // insert
            {
                AssetIssueComments AssetIssueComments = new AssetIssueComments();
                AssetIssueComments.comment = requestmodel.comment;
                AssetIssueComments.created_at = DateTime.UtcNow;
                AssetIssueComments.asset_issue_id = requestmodel.asset_issue_id;
                AssetIssueComments.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                AssetIssueComments.comment_user_id = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                AssetIssueComments.comment_user_role_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.role_id);
                AssetIssueComments.is_deleted = false;

                var insert = await _UoW.BaseGenericRepository<AssetIssueComments>().Insert(AssetIssueComments);
                _UoW.SaveChanges();

                response = (int)ResponseStatusNumber.Success;
            }
            return response;
        }

        public ViewAssetIssueDetailsByIdResponsemodel ViewAssetIssueDetailsById(string asset_issue_id)
        {
            ViewAssetIssueDetailsByIdResponsemodel response = new ViewAssetIssueDetailsByIdResponsemodel();
            var asset_issue_details = _UoW.WorkOrderRepository.ViewAssetIssueDetailsById(Guid.Parse(asset_issue_id));
            if (asset_issue_details != null)
            {
                response = _mapper.Map<ViewAssetIssueDetailsByIdResponsemodel>(asset_issue_details);
            }
            return response;
        }

        public IssueListtoLinkWOlineResponsemodel IssueListtoLinkWOline(IssueListtoLinkWOlineRequestmodel requestmodel)
        {
            IssueListtoLinkWOlineResponsemodel response = new IssueListtoLinkWOlineResponsemodel();
            List<AssetIssue> main_issue_list = new List<AssetIssue>();
            if (requestmodel.asset_id != null)
            {
                main_issue_list = _UoW.WorkOrderRepository.GetMainIssueByAssetId(requestmodel.asset_id.Value);
            }
            var temp_issue_list = _UoW.WorkOrderRepository.GetIssuesIssueByAssetId(requestmodel);
            var temp_floted_issue_list = _UoW.WorkOrderRepository.GetFloatingTempIssueByAssetId(requestmodel , temp_issue_list.Select(x=>x.wo_line_issue_id).ToList()); // flated temp issue which are not linked to any other woline 
            if (main_issue_list != null && main_issue_list.Count > 0)
            {
                response.main_issue_list = new List<link_main_issue_list>();
                response.main_issue_list = _mapper.Map<List<link_main_issue_list>>(main_issue_list);
            }
            if (temp_issue_list != null && temp_issue_list.Count > 0)
            {
                response.temp_issue_list = new List<link_temp_issue_list>();
                response.temp_issue_list = _mapper.Map<List<link_temp_issue_list>>(temp_issue_list);
            }
            if (temp_floted_issue_list != null && temp_floted_issue_list.Count > 0)
            {
                if(response.temp_issue_list == null)
                {
                    response.temp_issue_list = new List<link_temp_issue_list>();
                }
                var floated_issue_response = _mapper.Map<List<link_temp_issue_list>>(temp_floted_issue_list);
                response.temp_issue_list.AddRange(floated_issue_response);
            }
            return response;
        }
        public GetWOLinkedIssueResponsemodel GetWOLinkedIssue(GetWOLinkedIssueRequestmodel requestmodel)
        {
            GetWOLinkedIssueResponsemodel response = new GetWOLinkedIssueResponsemodel();
            List<AssetIssue> main_issue_list = new List<AssetIssue>();
            List<WOLineIssue> temp_issue_list = new List<WOLineIssue>();

            if (requestmodel.asset_form_id != null)
            {
                main_issue_list = _UoW.WorkOrderRepository.GetMainIssueByAssetformid(requestmodel);
                temp_issue_list = _UoW.WorkOrderRepository.GetTempIssueByAssetformid(requestmodel);
            }
            else if (requestmodel.woonboardingassets_id != null)
            {
                main_issue_list = _UoW.WorkOrderRepository.GetMainIssueBywoobassetid(requestmodel);
                temp_issue_list = _UoW.WorkOrderRepository.GetTempIssueBywoobassetid(requestmodel);
            }
            if (main_issue_list != null && main_issue_list.Count > 0)
            {
                response.main_issue_list = new List<link_main_issue_list>();
                response.main_issue_list = _mapper.Map<List<link_main_issue_list>>(main_issue_list);
            }
            if (temp_issue_list != null && temp_issue_list.Count > 0)
            {
                response.temp_issue_list = new List<link_temp_issue_list>();
                response.temp_issue_list = _mapper.Map<List<link_temp_issue_list>>(temp_issue_list);
            }
            return response;
        }
        public GetAllIssueByWOidResponsemodel GetAllIssueByWOid(GetAllIssueByWOidRequestmodel requestmodel)
        {
            GetAllIssueByWOidResponsemodel response = new GetAllIssueByWOidResponsemodel();

            // temp issue
            var issueList = _UoW.WorkOrderRepository.GetAlltempIssuebyWOid(requestmodel);
            if (issueList != null)
            {
                response.temp_issue_list = _mapper.Map<List<GetAllWOLineTempIssuesResponsemodel>>(issueList);

                var distinct_wo_id = response.temp_issue_list.Where(x => x.origin_wo_id != null).Select(x => x.origin_wo_id.Value).Distinct().ToList();
                var get_wos = _UoW.WorkOrderRepository.GetwobyIdsforIssueList(distinct_wo_id);
                response.temp_issue_list.ForEach(q =>
                {
                    if (q.origin_wo_id != null)
                    {
                        q.origin_manual_wo_number = get_wos.Where(x => x.wo_id == q.origin_wo_id).FirstOrDefault().manual_wo_number;
                        q.origin_wo_type = get_wos.Where(x => x.wo_id == q.origin_wo_id).FirstOrDefault().wo_type;
                    }
                });
            }
            //main issue
            var main_issue_list = _UoW.WorkOrderRepository.GetAllmainIssuebyWOid(requestmodel);
            if (main_issue_list != null)
            {
                response.main_issue_list = _mapper.Map<List<link_main_issue_list>>(main_issue_list);
                var distinct_wo_id = response.main_issue_list.Where(x => x.origin_wo_id != null).Select(x => x.origin_wo_id.Value).Distinct().ToList();
                var get_wos = _UoW.WorkOrderRepository.GetwobyIdsforIssueList(distinct_wo_id);
                response.main_issue_list.ForEach(q =>
                {
                    if (q.origin_wo_id != null)
                    {
                        q.origin_manual_wo_number = get_wos.Where(x => x.wo_id == q.origin_wo_id).FirstOrDefault().manual_wo_number;
                        q.origin_wo_type = get_wos.Where(x => x.wo_id == q.origin_wo_id).FirstOrDefault().wo_type;
                    }
                });
            }
            return response;
        }
        public async Task<int> ChangeAssetConditionBasedOnIssue(Guid asset_issue_id)
        {
            var get_asset_issue = _UoW.WorkOrderRepository.GetAssetIssueByIdForAssetupdate(asset_issue_id);
            if (get_asset_issue.asset_id != null)
            {

                // string json = "{\"IssueStatus\":[{\"status_id\":68,\"status_name\":\"open\",\"issue_type\":[{\"issue_type_id\":1,\"issue_type_name\":\"Compliance\",\"asset_conditions\":{\"asset_condition_id\":2,\"thermal_appliance_id\":0,\"compliance_id\":2}},{\"issue_type_id\":2,\"issue_type_name\":\"Thermal_Anamoly\",\"asset_conditions\":{\"asset_condition_id\":2,\"thermal_appliance_id\":1,\"compliance_id\":0}},{\"issue_type_id\":3,\"issue_type_name\":\"Repair\",\"asset_conditions\":{\"asset_condition_id\":2,\"thermal_appliance_id\":0,\"compliance_id\":0}},{\"issue_type_id\":4,\"issue_type_name\":\"Replace\",\"asset_conditions\":{\"asset_condition_id\":3,\"thermal_appliance_id\":0,\"compliance_id\":0}}]},{\"status_id\":80,\"status_name\":\"Schedule\",\"issue_type\":[{\"issue_type_id\":1,\"issue_type_name\":\"Compliance\",\"asset_conditions\":{\"asset_condition_id\":4,\"thermal_appliance_id\":0,\"compliance_id\":2}},{\"issue_type_id\":2,\"issue_type_name\":\"Thermal_Anamoly\",\"asset_conditions\":{\"asset_condition_id\":4,\"thermal_appliance_id\":1,\"compliance_id\":0}},{\"issue_type_id\":3,\"issue_type_name\":\"Repair\",\"asset_conditions\":{\"asset_condition_id\":4,\"thermal_appliance_id\":0,\"compliance_id\":0}},{\"issue_type_id\":4,\"issue_type_name\":\"Replace\",\"asset_conditions\":{\"asset_condition_id\":5,\"thermal_appliance_id\":0,\"compliance_id\":0}}]},{\"status_id\":13,\"status_name\":\"Inprogress\",\"issue_type\":[{\"issue_type_id\":1,\"issue_type_name\":\"Compliance\",\"asset_conditions\":{\"asset_condition_id\":10,\"thermal_appliance_id\":0,\"compliance_id\":2}},{\"issue_type_id\":2,\"issue_type_name\":\"Thermal_Anamoly\",\"asset_conditions\":{\"asset_condition_id\":10,\"thermal_appliance_id\":1,\"compliance_id\":0}},{\"issue_type_id\":3,\"issue_type_name\":\"Repair\",\"asset_conditions\":{\"asset_condition_id\":10,\"thermal_appliance_id\":0,\"compliance_id\":0}},{\"issue_type_id\":4,\"issue_type_name\":\"Replace\",\"asset_conditions\":{\"asset_condition_id\":11,\"thermal_appliance_id\":0,\"compliance_id\":0}}]},{\"status_id\":15,\"status_name\":\"Completed\",\"issue_type\":[{\"issue_type_id\":1,\"issue_type_name\":\"Compliance\",\"asset_conditions\":{\"asset_condition_id\":1,\"thermal_appliance_id\":0,\"compliance_id\":1}},{\"issue_type_id\":2,\"issue_type_name\":\"Thermal_Anamoly\",\"asset_conditions\":{\"asset_condition_id\":1,\"thermal_appliance_id\":2,\"compliance_id\":0}},{\"issue_type_id\":3,\"issue_type_name\":\"Repair\",\"asset_conditions\":{\"asset_condition_id\":1,\"thermal_appliance_id\":0,\"compliance_id\":0}},{\"issue_type_id\":4,\"issue_type_name\":\"Replace\",\"asset_conditions\":{\"asset_condition_id\":6,\"thermal_appliance_id\":0,\"compliance_id\":0}}]}]}";
                string json = "{\"IssueStatus\":[{\"status_id\":68,\"status_name\":\"open\",\"issue_type\":[{\"issue_type_id\":1,\"issue_type_name\":\"Compliance\",\"asset_conditions\":{\"asset_condition_id\":2,\"thermal_appliance_id\":0,\"compliance_id\":2}},{\"issue_type_id\":2,\"issue_type_name\":\"Thermal_Anamoly\",\"asset_conditions\":{\"asset_condition_id\":2,\"thermal_appliance_id\":1,\"compliance_id\":0}},{\"issue_type_id\":3,\"issue_type_name\":\"Repair\",\"asset_conditions\":{\"asset_condition_id\":2,\"thermal_appliance_id\":0,\"compliance_id\":0}},{\"issue_type_id\":6,\"issue_type_name\":\"Other\",\"asset_conditions\":{\"asset_condition_id\":2,\"thermal_appliance_id\":0,\"compliance_id\":0}},{\"issue_type_id\":4,\"issue_type_name\":\"Replace\",\"asset_conditions\":{\"asset_condition_id\":3,\"thermal_appliance_id\":0,\"compliance_id\":0}}]},{\"status_id\":80,\"status_name\":\"Schedule\",\"issue_type\":[{\"issue_type_id\":1,\"issue_type_name\":\"Compliance\",\"asset_conditions\":{\"asset_condition_id\":4,\"thermal_appliance_id\":0,\"compliance_id\":2}},{\"issue_type_id\":2,\"issue_type_name\":\"Thermal_Anamoly\",\"asset_conditions\":{\"asset_condition_id\":4,\"thermal_appliance_id\":1,\"compliance_id\":0}},{\"issue_type_id\":3,\"issue_type_name\":\"Repair\",\"asset_conditions\":{\"asset_condition_id\":4,\"thermal_appliance_id\":0,\"compliance_id\":0}},{\"issue_type_id\":6,\"issue_type_name\":\"Other\",\"asset_conditions\":{\"asset_condition_id\":4,\"thermal_appliance_id\":0,\"compliance_id\":0}},{\"issue_type_id\":4,\"issue_type_name\":\"Replace\",\"asset_conditions\":{\"asset_condition_id\":5,\"thermal_appliance_id\":0,\"compliance_id\":0}}]},{\"status_id\":13,\"status_name\":\"Inprogress\",\"issue_type\":[{\"issue_type_id\":1,\"issue_type_name\":\"Compliance\",\"asset_conditions\":{\"asset_condition_id\":0,\"thermal_appliance_id\":0,\"compliance_id\":2}},{\"issue_type_id\":2,\"issue_type_name\":\"Thermal_Anamoly\",\"asset_conditions\":{\"asset_condition_id\":0,\"thermal_appliance_id\":1,\"compliance_id\":0}},{\"issue_type_id\":3,\"issue_type_name\":\"Repair\",\"asset_conditions\":{\"asset_condition_id\":0,\"thermal_appliance_id\":0,\"compliance_id\":0}},{\"issue_type_id\":6,\"issue_type_name\":\"Other\",\"asset_conditions\":{\"asset_condition_id\":0,\"thermal_appliance_id\":0,\"compliance_id\":0}},{\"issue_type_id\":4,\"issue_type_name\":\"Replace\",\"asset_conditions\":{\"asset_condition_id\":0,\"thermal_appliance_id\":0,\"compliance_id\":0}}]},{\"status_id\":15,\"status_name\":\"Completed\",\"issue_type\":[{\"issue_type_id\":1,\"issue_type_name\":\"Compliance\",\"asset_conditions\":{\"asset_condition_id\":1,\"thermal_appliance_id\":0,\"compliance_id\":1}},{\"issue_type_id\":2,\"issue_type_name\":\"Thermal_Anamoly\",\"asset_conditions\":{\"asset_condition_id\":1,\"thermal_appliance_id\":2,\"compliance_id\":0}},{\"issue_type_id\":3,\"issue_type_name\":\"Repair\",\"asset_conditions\":{\"asset_condition_id\":1,\"thermal_appliance_id\":0,\"compliance_id\":0}},{\"issue_type_id\":4,\"issue_type_name\":\"Replace\",\"asset_conditions\":{\"asset_condition_id\":6,\"thermal_appliance_id\":0,\"compliance_id\":0}},{\"issue_type_id\":6,\"issue_type_name\":\"Other\",\"asset_conditions\":{\"asset_condition_id\":1,\"thermal_appliance_id\":0,\"compliance_id\":0}}]}]}";
                var get_issue_json_obj = JsonSerializer.Deserialize<IssueAssetConditionHelper>(json);

                var get_issue_by_status = get_issue_json_obj.IssueStatus.Where(x => x.status_id == get_asset_issue.issue_status).FirstOrDefault();

                var get_issue_by_type = get_issue_by_status.issue_type.Where(x => x.issue_type_id == get_asset_issue.issue_type).FirstOrDefault();
                if (get_issue_by_type != null)
                {
                    int asset_condition_id = get_issue_by_type.asset_conditions.asset_condition_id;
                    int thermal_appliance_id = get_issue_by_type.asset_conditions.thermal_appliance_id;
                    int compliance_id = get_issue_by_type.asset_conditions.compliance_id;

                    if (get_asset_issue.issue_status != (int)Status.Completed)
                    {
                        if (asset_condition_id > 0)
                        {

                            /// if asset condition is anything as replacement than dont change its condition
                            if (get_asset_issue.Asset.asset_operating_condition_state != (int)AssetOperatingConduitionState.Replacement_Needed
                                && get_asset_issue.Asset.asset_operating_condition_state != (int)AssetOperatingConduitionState.Replace_Inprogress
                                && get_asset_issue.Asset.asset_operating_condition_state != (int)AssetOperatingConduitionState.Replacement_Scheduled
                                )
                            {
                                get_asset_issue.Asset.asset_operating_condition_state = asset_condition_id;
                            }

                            // if requested Asset condition is any of the replacement than change condition
                            if (asset_condition_id == (int)AssetOperatingConduitionState.Replacement_Needed
                               || asset_condition_id == (int)AssetOperatingConduitionState.Replace_Inprogress
                               || asset_condition_id == (int)AssetOperatingConduitionState.Replacement_Scheduled
                               )
                            {
                                get_asset_issue.Asset.asset_operating_condition_state = asset_condition_id;
                            }
                        }
                        if (compliance_id > 0)
                        {
                            get_asset_issue.Asset.code_compliance = compliance_id;
                        }
                        if (thermal_appliance_id > 0) // add thermal from form if its > 0
                        {
                            if (get_asset_issue.WOOnboardingAssets != null)
                            {
                                get_asset_issue.Asset.thermal_classification_id = get_asset_issue.WOOnboardingAssets.thermal_classification_id;
                            }
                        }
                    }
                    else  /// if Issue status is resolved or completed 
                    {
                        if (compliance_id > 0)
                        {
                            get_asset_issue.Asset.code_compliance = compliance_id;
                        }
                        if (thermal_appliance_id > 0) // add thermal from form if its > 0
                        {
                            get_asset_issue.Asset.thermal_classification_id = thermal_appliance_id;
                        }
                        if (asset_condition_id > 0) //  check if there are other issues or not for this asset
                        {
                            if (get_asset_issue.Asset.AssetIssue != null)
                            {
                                // check if any pending issue is there or not if there is no pending issue then keep asset_condition as normal/decommisioned
                                var total_asset_issues = get_asset_issue.Asset.AssetIssue.ToList();
                                var pending_issue = total_asset_issues.Where(x => !x.is_deleted && x.issue_status != (int)Status.Completed).FirstOrDefault();
                                if (pending_issue == null) // if there are no any pending issue then change asset condition based on condition json 
                                {
                                    get_asset_issue.Asset.asset_operating_condition_state = asset_condition_id;
                                }
                                else // if there are any issue then check if there is any open issue as replace then keep replace needed else repair needed
                                {
                                    var replace_issue_type = total_asset_issues.Any(x => !x.is_deleted && x.issue_status != (int)Status.Completed && x.issue_type == (int)WOLine_Temp_Issue_Type.Replace);
                                    if (replace_issue_type)
                                    {
                                        get_asset_issue.Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Replacement_Needed;
                                    }
                                    else
                                    {
                                        get_asset_issue.Asset.asset_operating_condition_state = (int)AssetOperatingConduitionState.Repair_Needed;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            var update_issue = await _UoW.BaseGenericRepository<AssetIssue>().Update(get_asset_issue);
            _UoW.SaveChanges();
            return 1;
        }
        public async Task<int> UnlinkIssueFromWO(UnlinkIssueFromWORequestmodel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;
            if (requestmodel.asset_issue_id != null && requestmodel.asset_issue_id.Count > 0)
            {
                var get_asset_issue = _UoW.WorkOrderRepository.GetAssetIssuebyIds(requestmodel.asset_issue_id);

                /// remove images and description from woline 
                /// 
                var distinct_woline = get_asset_issue.Where(x => x.woonboardingassets_id != null).Select(x => x.woonboardingassets_id.Value).Distinct().ToList();

                foreach (var issue in get_asset_issue)
                {
                    var remove_images = await RemoveImagesInWOline(issue);
                }

                get_asset_issue.ForEach(x =>
                {
                    x.wo_id = null;
                    x.asset_form_id = null;
                    x.woonboardingassets_id = null;
                    x.is_issue_linked = false;
                    x.issue_status = (int)Status.open;
                });

                var update = _UoW.BaseGenericRepository<AssetIssue>().UpdateList(get_asset_issue);

                // update asset condition 
                foreach(var issue in get_asset_issue)
                {
                    await ChangeAssetConditionBasedOnIssue(issue.asset_issue_id);

                }

                if (update)
                {
                    response = (int)ResponseStatusNumber.Success;
                }
            }
            if (requestmodel.wo_line_issue_id != null && requestmodel.wo_line_issue_id.Count > 0)
            {
                var get_wo_line_issue = _UoW.WorkOrderRepository.GetWOLineIssuebyIds(requestmodel.asset_issue_id);
                get_wo_line_issue.ForEach(x =>
                {
                    x.is_issue_linked_for_fix = false;
                });

                var update = _UoW.BaseGenericRepository<WOLineIssue>().UpdateList(get_wo_line_issue);
                if (update)
                {
                    response = (int)ResponseStatusNumber.Success;
                }
            }

            return response;
        }

        public async Task<int> RemoveDescriptionInWOline(List<Guid> distinct_woline)
        {
            foreach (var woline in distinct_woline)
            {
                var get_woline = _UoW.WorkOrderRepository.GetWOlineforUnlinkissue(woline);

                var issue_list = get_woline.AssetIssue.ToList();
                foreach (var issue in get_woline.AssetIssue.ToList())
                {
                    get_woline.problem_description = "";
                    if (!String.IsNullOrEmpty(get_woline.problem_description))
                    { get_woline.problem_description = get_woline.problem_description + " , " + issue.issue_description; }
                    else { get_woline.problem_description = issue.issue_description; }
                }

                var update = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_woline);
                if (update)
                {
                    _UoW.SaveChanges();
                    return 1;
                }

            }
            return 0;
        }
        public async Task<int> RemoveImagesInWOline(AssetIssue Asset_issue)
        {
            var get_woline = _UoW.WorkOrderRepository.GetWOlineforUnlinkissue(Asset_issue.woonboardingassets_id.Value);


            var description_array = get_woline.problem_description.Split(",").ToList();

            description_array = description_array.Select(fruit => fruit.Trim()).ToList();

            int index = description_array.IndexOf(Asset_issue.issue_description);

            if (index != -1)
            {
                description_array.RemoveAt(index);
            }
            get_woline.problem_description = string.Join(",", description_array);

            var issue_before_images = Asset_issue.AssetIssueImagesMapping.Where(x => x.image_duration_type_id == (int)IssueImageDuration.before && !x.is_deleted).Select(x => x.image_file_name).ToList();

            var woline_images = get_woline.WOOnboardingAssetsImagesMapping.Where(x => !x.is_deleted && x.image_duration_type_id == (int)IssueImageDuration.before).Select(x => x.asset_photo).ToList();

            var delete_image = woline_images.Where(x => issue_before_images.Contains(x)).ToList();

            get_woline.WOOnboardingAssetsImagesMapping.ToList().ForEach(x =>
            {
                var delete_img_exist = delete_image.Where(y => y == x.asset_photo).FirstOrDefault();
                if (!String.IsNullOrEmpty(delete_img_exist))
                {
                    x.is_deleted = true;
                }
            });

            var update = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_woline);
            if (update)
            {
                _UoW.SaveChanges();
                return 1;
            }
            return 0;

        }
        public async Task<int> RemoveTempIssueImagesInWOline(WOLineIssue woline_issue)
        {
            var get_woline = _UoW.WorkOrderRepository.GetWOlineforUnlinkissue(woline_issue.woonboardingassets_id.Value);


            var description_array = get_woline.problem_description.Split(",").ToList();

            description_array = description_array.Select(fruit => fruit.Trim()).ToList();

            int index = description_array.IndexOf(woline_issue.issue_description);

            if (index != -1)
            {
                description_array.RemoveAt(index);
            }
            get_woline.problem_description = string.Join(",", description_array);

            var issue_before_images = woline_issue.WOlineIssueImagesMapping.Where(x => x.image_duration_type_id == (int)IssueImageDuration.before && !x.is_deleted).Select(x => x.image_file_name).ToList();

            var woline_images = get_woline.WOOnboardingAssetsImagesMapping.Where(x => !x.is_deleted && x.image_duration_type_id == (int)IssueImageDuration.before).Select(x => x.asset_photo).ToList();

            var delete_image = woline_images.Where(x => issue_before_images.Contains(x)).ToList();

            get_woline.WOOnboardingAssetsImagesMapping.ToList().ForEach(x =>
            {
                var delete_img_exist = delete_image.Where(y => y == x.asset_photo).FirstOrDefault();
                if (!String.IsNullOrEmpty(delete_img_exist))
                {
                    x.is_deleted = true;
                }
            });

            var update = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_woline);
            if (update)
            {
                _UoW.SaveChanges();
                return 1;
            }
            return 0;

        }
        public async Task<LinkAssetPMToWOresponsemodel> LinkAssetPMToWO(LinkAssetPMToWORequestmodel requestmodel)
        {
            LinkAssetPMToWOresponsemodel response = new LinkAssetPMToWOresponsemodel();
            AddAssetPMWolineRequestmodel request = new AddAssetPMWolineRequestmodel();
            request.asset_pm_id = requestmodel.asset_pm_id;
            request.wo_id = requestmodel.wo_id;
            
            var res = await AddAssetPMWoline(request);
            if(res != null && res.Count>0)
            {
                response.response_status = (int)ResponseStatusNumber.Success;
            }
            else
            {
                response.response_status = (int)ResponseStatusNumber.Error;
            }
            return response;
            #region old flow : we were creating inspection woline and then attatch pm to that woline , new flow : now new woline will be create as "PM"
            /*  var get_asset_pms = _UoW.WorkOrderRepository.GetAssetPMsbyIds(requestmodel.asset_pm_id);
              var pms_asset_ids = get_asset_pms.Select(x => x.asset_id).ToList();
              var distinct_assets = pms_asset_ids.Distinct().ToList();
              var check_existing_asset_woline = _UoW.WorkOrderRepository.ExistingWolineForLinkPM(distinct_assets, requestmodel.wo_id);
              var non_existing_woline = distinct_assets.Where(x => !check_existing_asset_woline.Contains(x)).ToList();

              //List<string> asset_class_form_not_exist = new List<string>();
              string asset_class_form_not_exist_str = null;
              // check if there is any asset with no class or no maintenance form in class then stop the further process
              foreach (var asset_id in non_existing_woline)
              {
                  var get_classs = _UoW.WorkOrderRepository.GetAssetidForPMattch(asset_id);
                  if(get_classs.InspectionTemplateAssetClass!=null && get_classs.InspectionTemplateAssetClass.AssetClassFormIOMapping.Count > 0)
                  {
                      var maintenance_form = get_classs.InspectionTemplateAssetClass.AssetClassFormIOMapping.Where(x => x.wo_type == (int)Status.Maintenance_WO).FirstOrDefault().form_id;
                      if (maintenance_form == null)
                      {
                          //asset_class_form_not_exist.Add(get_classs.name);
                          if (String.IsNullOrEmpty(asset_class_form_not_exist_str))
                              asset_class_form_not_exist_str = get_classs.name;
                          else
                              asset_class_form_not_exist_str = asset_class_form_not_exist_str + " , " + get_classs.name;
                      }
                  }
              }

              if (!String.IsNullOrEmpty(asset_class_form_not_exist_str))
              {
                  response.asset_name = asset_class_form_not_exist_str;
                  response.response_status = (int)ResponseStatusNumber.Error;

                  return response;
              }

              if (non_existing_woline != null && non_existing_woline.Count > 0)
              {
                  AssignMultipleAssetClasstoWORequestmodel AssignMultipleAssetClasstoWO1 = new AssignMultipleAssetClasstoWORequestmodel();
                  AssignMultipleAssetClasstoWO1.assign_inspection_asset_class_list = new List<AssignAssetClasstoWOList>();
                  AssignMultipleAssetClasstoWO1.wo_id = requestmodel.wo_id;

                  foreach (var asset in non_existing_woline)
                  {
                      var asset_pm = get_asset_pms.Where(x => x.asset_id == asset).FirstOrDefault();

                      var form_id = asset_pm.Asset.InspectionTemplateAssetClass.AssetClassFormIOMapping.Where(x => x.wo_type == (int)Status.Maintenance_WO).Select(x => x.form_id).FirstOrDefault();

                      AssignAssetClasstoWOList AssignAssetClasstoWOList = new AssignAssetClasstoWOList();
                      AssignAssetClasstoWOList.asset_id = asset_pm.asset_id;
                      AssignAssetClasstoWOList.form_id = form_id;
                      AssignAssetClasstoWOList.inspection_type = 2;
                      AssignAssetClasstoWOList.inspectiontemplate_asset_class_id = asset_pm.Asset.inspectiontemplate_asset_class_id;
                      AssignAssetClasstoWOList.wo_id = requestmodel.wo_id;
                      AssignAssetClasstoWOList.wo_type = 67;
                      //AssignAssetClasstoWOList.asset_pm_id = asset_pm.asset_pm_id;

                      AssignMultipleAssetClasstoWO1.assign_inspection_asset_class_list.Add(AssignAssetClasstoWOList);
                  }
                  var insert_WO_lines = await AssignMultipleAssetClasstoWO(AssignMultipleAssetClasstoWO1);
              }

              // now assign PM to WOline
              if (distinct_assets != null && distinct_assets.Count > 0)
              {

                  foreach (var asset in distinct_assets)
                  {
                      var asset_form_io_id = _UoW.WorkOrderRepository.GetAssetformIOtoLinkPM(asset, requestmodel.wo_id);
                      var assing_asset_pm = get_asset_pms.Where(x => x.asset_id == asset).ToList();
                      //Check WorkOrder LINE Status
                      var get_woLine_status = _UoW.AssetPMsRepository.GetWOLineStatusByAssetFormId(asset_form_io_id);

                      var updatedPMStatus = (int)Status.open;

                      if (get_woLine_status == (int)Status.open) //open
                      {
                          updatedPMStatus = (int)Status.Schedule; //Schedule
                      }
                      else if (get_woLine_status == (int)Status.InProgress)//InProgress
                      {
                          updatedPMStatus = (int)Status.InProgress;
                      }


                      foreach (var assetpm in assing_asset_pm)
                      {
                          assetpm.asset_form_id = asset_form_io_id;
                          assetpm.wo_id = requestmodel.wo_id;
                          assetpm.modified_at = DateTime.UtcNow;
                          assetpm.modified_by = GenericRequestModel.requested_by.ToString();
                          assetpm.is_Asset_PM_fixed = true;
                          if (assetpm.status != (int)Status.Completed)
                          {
                              assetpm.status = updatedPMStatus;
                          }
                          var update_asset_pm = await _UoW.BaseGenericRepository<AssetPMs>().Update(assetpm);
                          if (update_asset_pm)
                          {
                              response.asset_name =null;
                              response.response_status = (int)ResponseStatusNumber.Success;

                          }
                      }
                  }

              }*/
            #endregion old flow : we were creating inspection woline and then attatch pm to that woline , new flow : now new woline will be create as "PM"

        }

        public GetWOCompletedThreadStatusResponsemodel GetWOCompletedThreadStatus(Guid wo_id)
        {
            GetWOCompletedThreadStatusResponsemodel Responsemodel = new GetWOCompletedThreadStatusResponsemodel();
            var get_wo = _UoW.WorkOrderRepository.GetWOByidforUpdateOffline(wo_id);
            var get_asset_form_io = _UoW.WorkOrderRepository.GetAssetformioThreadcount(wo_id);
            var get_WOline = _UoW.WorkOrderRepository.GetOBWOLineThreadcount(wo_id);


            Responsemodel.complete_wo_thread_status = get_wo.complete_wo_thread_status;
            Responsemodel.total_wo_line = get_asset_form_io.Item1 + get_WOline.Item1;
            Responsemodel.total_processed_wo_line = get_asset_form_io.Item2 + get_WOline.Item2;

            return Responsemodel;
        }

        public async Task<int> AddAssetLocationData(AddAssetLocationDataRequestmodel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;

            if (!String.IsNullOrEmpty(requestmodel.location_name))
            {
                if (requestmodel.location_type == (int)AddLocationType.Building)
                {
                    var db_building = _UoW.WorkOrderRepository.GetFormIOBuildingByName(requestmodel.building_name);
                    var get_temp_building = _UoW.WorkOrderRepository.GetTempFormIOBuildingByNameV2(requestmodel.building_name);
                    if (db_building != null || get_temp_building != null)
                    {
                        return (int)ResponseStatusNumber.AlreadyExists;
                    }
                    else
                    {
                        FormIOBuildings FormIOBuildings = new FormIOBuildings();
                        FormIOBuildings.formio_building_name = requestmodel.location_name;
                        FormIOBuildings.created_at = DateTime.UtcNow;
                        FormIOBuildings.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        FormIOBuildings.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                        var insertbuilding = await _UoW.BaseGenericRepository<FormIOBuildings>().Insert(FormIOBuildings);
                        _UoW.SaveChanges();
                        //if (insertbuilding)
                        //{
                        //    await Add100FloorsForBuilding(FormIOBuildings.formiobuilding_id);
                        //}
                        
                        response = (int)ResponseStatusNumber.Success;
                    }
                }
                else if (requestmodel.location_type == (int)AddLocationType.Floor)
                {
                    var db_floor = _UoW.WorkOrderRepository.GetFormIOFloorByName(requestmodel.floor_name, requestmodel.formiobuilding_id.Value);
                    var get_temp_floor = _UoW.WorkOrderRepository.GetTempFormIOFloorByNameV2(requestmodel.floor_name, requestmodel.building_name);
                    if (db_floor != null || get_temp_floor!=null)
                    {
                        return (int)ResponseStatusNumber.AlreadyExists;
                    }
                    else
                    {
                        FormIOFloors FormIOFloors = new FormIOFloors();
                        FormIOFloors.formio_floor_name = requestmodel.location_name;
                        FormIOFloors.formiobuilding_id = requestmodel.formiobuilding_id.Value;
                        FormIOFloors.created_at = DateTime.UtcNow;
                        FormIOFloors.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        FormIOFloors.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                        var insertfloor = await _UoW.BaseGenericRepository<FormIOFloors>().Insert(FormIOFloors);
                        _UoW.SaveChanges();
                        response = (int)ResponseStatusNumber.Success;
                    }
                }
                else if (requestmodel.location_type == (int)AddLocationType.Room)
                {
                    var db_room = _UoW.WorkOrderRepository.GetFormIORoomByName(requestmodel.room_name, requestmodel.formiofloor_id.Value);
                    var get_temp_room = _UoW.WorkOrderRepository.GetTempFormIORoomByNameV2(requestmodel.room_name, requestmodel.floor_name, requestmodel.building_name);
                    if (db_room != null || get_temp_room != null )
                    {
                        return (int)ResponseStatusNumber.AlreadyExists;
                    }
                    else
                    {
                        if (requestmodel.formiofloor_id == 0 || requestmodel.formiofloor_id == null)
                        {
                            FormIOFloors FormIOFloors = new FormIOFloors();
                            FormIOFloors.formio_floor_name = requestmodel.floor_name;
                            FormIOFloors.formiobuilding_id = requestmodel.formiobuilding_id.Value;
                            FormIOFloors.created_at = DateTime.UtcNow;
                            FormIOFloors.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            FormIOFloors.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var insertfloor = await _UoW.BaseGenericRepository<FormIOFloors>().Insert(FormIOFloors);
                            _UoW.SaveChanges(); 
                            requestmodel.formiofloor_id = FormIOFloors.formiofloor_id;
                        }
                        FormIORooms FormIORooms = new FormIORooms();
                        FormIORooms.formio_room_name = requestmodel.location_name;
                        FormIORooms.formiofloor_id = requestmodel.formiofloor_id.Value;
                        FormIORooms.room_conditions = requestmodel.room_conditions;
                        FormIORooms.access_notes = requestmodel.access_notes;
                        FormIORooms.issue = requestmodel.issue;
                        FormIORooms.created_at = DateTime.UtcNow;
                        FormIORooms.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                        FormIORooms.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                        var insertroom = await _UoW.BaseGenericRepository<FormIORooms>().Insert(FormIORooms);
                        _UoW.SaveChanges();
                        response = (int)ResponseStatusNumber.Success;
                    }
                }

            }

            return response;
        }

        public async Task<int> Add100FloorsForBuilding(int formiobuilding_id)
        {
            string floor = "Floor";
            for(int i = -1; i < 101; i++)
            {
                if (i == -1)
                    floor = "Basement " + floor;
                else if (i == 0)
                    floor = "Ground " + floor;
                else if (i == 1)
                    floor = "1st " + floor;
                else if (i == 2)
                    floor = "2nd " + floor;
                else if (i == 3)
                    floor = "3rd " + floor;
                else
                    floor = i+"th " + floor;

                FormIOFloors FormIOFloors = new FormIOFloors();
                FormIOFloors.formio_floor_name = floor;
                FormIOFloors.formiobuilding_id = formiobuilding_id;
                FormIOFloors.created_at = DateTime.UtcNow;
                FormIOFloors.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                FormIOFloors.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                var insertfloor = await _UoW.BaseGenericRepository<FormIOFloors>().Insert(FormIOFloors);
                _UoW.SaveChanges();
                floor = "Floor";
            }
            return 1;
        }

        public GetLocationHierarchyForWOResponsemodel GetLocationHierarchyForWO(GetLocationHierarchyForWORequestmodel request)
        {
            GetLocationHierarchyForWOResponsemodel response = new GetLocationHierarchyForWOResponsemodel();

            var get_locations = _UoW.WorkOrderRepository.GetLocationHierarchyForWO(request);

            response.buildings = _mapper.Map<List<WOlineBuilding>>(get_locations);

            var buildings_id = response.buildings.Select(x => x.formiobuilding_id).ToList();

            //var assets_list = _UoW.WorkOrderRepository.CountForBuildingAssets(buildings_id);

            int tot_room = 0;

            response.buildings.ForEach(x =>
            {
                //var assets_of_this_building = assets_list.Where(y => y.AssetFormIOBuildingMappings.formiobuilding_id == x.formiobuilding_id
                //    && y.AssetFormIOBuildingMappings.Asset.status == (int)Status.AssetActive
                //    && (y.component_level_type_id == (int)ComponentLevelTypes.ToplevelComponent
                //        || (y.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent
                //        && y.AssetTopLevelcomponentMapping.Where(x=>!x.is_deleted).Count() > 0))).ToList();


                //x.asset_count = assets_of_this_building.Count;
                x.asset_count = _UoW.WorkOrderRepository.GetAssetsCountByLocation(x.formiobuilding_id, -1, -1);
                x.floor_count = x.floors.Count();

                foreach (var floor in x.floors)
                {
                    floor.room_count = floor.rooms.Count();
                    tot_room += floor.rooms.Count();
                    //floor.asset_count = assets_of_this_building.Where(y => y.AssetFormIOBuildingMappings.formiofloor_id == floor.formiofloor_id).Count();
                    floor.asset_count = _UoW.WorkOrderRepository.GetAssetsCountByLocation(x.formiobuilding_id, floor.formiofloor_id, -1);

                    foreach (var room in floor.rooms)
                    {
                        //room.asset_count = assets_of_this_building.Where(y => y.AssetFormIOBuildingMappings.formioroom_id == room.formioroom_id).Count();
                        room.asset_count = _UoW.WorkOrderRepository.GetAssetsCountByLocation(x.formiobuilding_id, floor.formiofloor_id, room.formioroom_id);
                    }
                }
                x.room_count = tot_room;
                tot_room = 0;
            });

            return response;
        }


        public GetLocationHierarchyForWOResponsemodel GetLocationHierarchyForWO_Version2(GetLocationHierarchyForWORequestmodel request)
        {
            GetLocationHierarchyForWOResponsemodel response = new GetLocationHierarchyForWOResponsemodel();

            var get_locations = _UoW.WorkOrderRepository.GetLocationHierarchyForWO(request);

            response.buildings = _mapper.Map<List<WOlineBuilding>>(get_locations);
            
            /* Not requied now
            // add 1-100 floors explicitly 
            List<string> pre_floor_list = new List<string> { "Basement", "Ground" };
            for (int i = 1; i <= 100; i++)
            {
                pre_floor_list.Add("Floor - " + i.ToString());
            }
            foreach (var buiding in response.buildings)
            {
                if (buiding.floors != null)
                {
                    var existing_floor = buiding.floors.Select(x => x.formio_floor_name.ToLower()).ToList();
                    var missing_floors = pre_floor_list.Where(x => !String.IsNullOrEmpty(x) && !existing_floor.Contains(x.ToLower())).ToList();
                    foreach (var missing_floor in missing_floors)
                    {
                        WOlineFloors WOlineFloors = new WOlineFloors();
                        WOlineFloors.formio_floor_name = missing_floor;
                        WOlineFloors.formiobuilding_id = buiding.formiobuilding_id;
                        buiding.floors.Add(WOlineFloors);
                    }
                }
            }
            */

            /*//Commenting because not useful for dropdown API
            response.buildings.ForEach(x =>
            {
                //var assets_of_this_building = assets_list.Where(y => y.AssetFormIOBuildingMappings.formiobuilding_id == x.formiobuilding_id
                //    && y.AssetFormIOBuildingMappings.Asset.status == (int)Status.AssetActive
                //    && (y.component_level_type_id == (int)ComponentLevelTypes.ToplevelComponent
                //        || (y.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent
                //        && y.AssetTopLevelcomponentMapping.Where(x=>!x.is_deleted).Count() > 0))).ToList();


                //x.asset_count = assets_of_this_building.Count;
                x.asset_count = _UoW.WorkOrderRepository.GetAssetsCountByLocation(x.formiobuilding_id, -1, -1);
                x.floor_count = x.floors.Count();

                foreach (var floor in x.floors)
                {
                    if (floor.rooms != null)
                    {
                        floor.room_count = floor.rooms.Count();
                        tot_room += floor.rooms.Count();
                        //floor.asset_count = assets_of_this_building.Where(y => y.AssetFormIOBuildingMappings.formiofloor_id == floor.formiofloor_id).Count();
                        floor.asset_count = _UoW.WorkOrderRepository.GetAssetsCountByLocation(x.formiobuilding_id, floor.formiofloor_id, -1);

                        foreach (var room in floor.rooms)
                        {
                            //room.asset_count = assets_of_this_building.Where(y => y.AssetFormIOBuildingMappings.formioroom_id == room.formioroom_id).Count();
                            room.asset_count = _UoW.WorkOrderRepository.GetAssetsCountByLocation(x.formiobuilding_id, floor.formiofloor_id, room.formioroom_id);
                        }
                    }
                }
                x.room_count = tot_room;
                tot_room = 0;
            });
            */
            return response;
        }


        public async Task<int> updatesubassetlocationscript()
        {
            var get_all_toplevel = _UoW.WorkOrderRepository.Getalltoplevelforscript();

            foreach(var item in get_all_toplevel)
            {

                if(item.AssetSubLevelcomponentMapping!=null && item.AssetSubLevelcomponentMapping.Count > 0)
                {
                    var get_active_sublevel = item.AssetSubLevelcomponentMapping.Where(x => !x.is_deleted).ToList();
                    if (get_active_sublevel.Count > 0)
                    {
                        foreach(var sublevel in get_active_sublevel)
                        {
                            var get_asset = _UoW.WorkOrderRepository.GetSubLevelAssetById(sublevel.sublevelcomponent_asset_id);
                            if (get_asset.AssetFormIOBuildingMappings != null)
                            {
                                if (get_asset.AssetFormIOBuildingMappings.formiobuilding_id == item.AssetFormIOBuildingMappings.formiobuilding_id
                                    && get_asset.AssetFormIOBuildingMappings.formiofloor_id == item.AssetFormIOBuildingMappings.formiofloor_id
                                    && get_asset.AssetFormIOBuildingMappings.formioroom_id == item.AssetFormIOBuildingMappings.formioroom_id
                                    )
                                {
                                }
                                else
                                {
                                    get_asset.AssetFormIOBuildingMappings.formiobuilding_id = item.AssetFormIOBuildingMappings.formiobuilding_id;
                                    get_asset.AssetFormIOBuildingMappings.formiofloor_id = item.AssetFormIOBuildingMappings.formiofloor_id;
                                    get_asset.AssetFormIOBuildingMappings.formioroom_id = item.AssetFormIOBuildingMappings.formioroom_id;
                                    //get_asset.AssetFormIOBuildingMappings.created_at = DateTime.UtcNow;

                                    var update = await _UoW.BaseGenericRepository<Asset>().Update(get_asset);
                                    _UoW.SaveChanges();

                                }

                            }
                        }
                    }
                }
            }


            return 1;
        }



        public GetWOlinesByLocationResponsemodel GetWOlinesByLocation(GetWOlinesByLocationRequestmodel requestmodel)
        {
            GetWOlinesByLocationResponsemodel response = new GetWOlinesByLocationResponsemodel();

            var wo_lines = _UoW.WorkOrderRepository.GetWOlinesByLocation(requestmodel);

            if (wo_lines != null)
            {
                response.asset_details = _mapper.Map<List<OBWOAssetDetails>>(wo_lines);
            }
            else
            {
                /// not found
                response = null;
            }
            return response;
        }

        public async Task<int> ScriptforWOlinelocation()
        {

            var get_wolines = _UoW.WorkOrderRepository.ScriptforWOlinelocation();
            foreach (var woline in get_wolines)
            {
                try
                {
                    if (String.IsNullOrEmpty(woline.building))
                    {
                        woline.building = "Default";
                    }
                    if (String.IsNullOrEmpty(woline.floor))
                    {
                        woline.floor = "Default";
                    }
                    if (String.IsNullOrEmpty(woline.room))
                    {
                        woline.room = "Default";
                    }
                    if (String.IsNullOrEmpty(woline.section))
                    {
                        woline.section = "Default";
                    }
                    FormIOBuildings FormIOBuildings = null;
                    FormIOFloors FormIOFloors = null;
                    FormIORooms FormIORooms = null;
                    FormIOSections FormIOSections = null;
                    if (!String.IsNullOrEmpty(woline.building))
                    {
                        FormIOBuildings = _UoW.WorkOrderRepository.ScriptGetFormIOBuildingByName(woline.building, woline.site_id, woline.Sites.company_id);
                        if (FormIOBuildings == null)
                        {
                            FormIOBuildings = new FormIOBuildings();
                            FormIOBuildings.formio_building_name = woline.building;
                            FormIOBuildings.created_at = DateTime.UtcNow;
                            FormIOBuildings.site_id = woline.site_id;
                            FormIOBuildings.company_id = woline.Sites.company_id;

                            var insertbuilding = await _UoW.BaseGenericRepository<FormIOBuildings>().Insert(FormIOBuildings);
                            _UoW.SaveChanges();
                        }
                    }
                    if (!String.IsNullOrEmpty(woline.floor))
                    {
                        FormIOFloors = _UoW.WorkOrderRepository.ScriptGetFormIOFloorByName(woline.floor, FormIOBuildings.formiobuilding_id, woline.site_id, woline.Sites.company_id);
                        if (FormIOFloors == null)
                        {
                            FormIOFloors = new FormIOFloors();
                            FormIOFloors.formio_floor_name = woline.floor;
                            FormIOFloors.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                            FormIOFloors.created_at = DateTime.UtcNow;
                            FormIOFloors.site_id = woline.site_id;
                            FormIOFloors.company_id = woline.Sites.company_id;

                            var insertfloor = await _UoW.BaseGenericRepository<FormIOFloors>().Insert(FormIOFloors);
                            _UoW.SaveChanges();
                        }
                    }
                    if (!String.IsNullOrEmpty(woline.room))
                    {
                        FormIORooms = _UoW.WorkOrderRepository.ScriptGetFormIORoomByName(woline.room, FormIOFloors.formiofloor_id, woline.site_id, woline.Sites.company_id);
                        if (FormIORooms == null)
                        {
                            FormIORooms = new FormIORooms();
                            FormIORooms.formio_room_name = woline.room;
                            FormIORooms.formiofloor_id = FormIOFloors.formiofloor_id;
                            FormIORooms.created_at = DateTime.UtcNow;
                            FormIORooms.site_id = woline.site_id;
                            FormIORooms.company_id = woline.Sites.company_id;

                            var insertroom = await _UoW.BaseGenericRepository<FormIORooms>().Insert(FormIORooms);
                            _UoW.SaveChanges();
                        }
                    }
                    if (!String.IsNullOrEmpty(woline.section))
                    {
                        FormIOSections = _UoW.WorkOrderRepository.ScriptGetFormIOSectionByName(woline.section, FormIORooms.formioroom_id, woline.site_id, woline.Sites.company_id);
                        if (FormIOSections == null)
                        {
                            FormIOSections = new FormIOSections();
                            FormIOSections.formio_section_name = woline.section;
                            FormIOSections.formioroom_id = FormIORooms.formioroom_id;
                            FormIOSections.created_at = DateTime.UtcNow;
                            FormIOSections.site_id = woline.site_id;
                            FormIOSections.company_id = woline.Sites.company_id;

                            var insertroom = await _UoW.BaseGenericRepository<FormIOSections>().Insert(FormIOSections);
                            _UoW.SaveChanges();
                        }
                    }
                    woline.WOLineBuildingMapping = new WOLineBuildingMapping();
                    if (FormIOBuildings != null)
                        woline.WOLineBuildingMapping.formiobuilding_id = FormIOBuildings.formiobuilding_id;
                    if (FormIOFloors != null)
                        woline.WOLineBuildingMapping.formiofloor_id = FormIOFloors.formiofloor_id;
                    if (FormIORooms != null)
                        woline.WOLineBuildingMapping.formioroom_id = FormIORooms.formioroom_id;
                    if (FormIOSections != null)
                        woline.WOLineBuildingMapping.formiosection_id = FormIOSections.formiosection_id;
                    woline.WOLineBuildingMapping.created_at = DateTime.UtcNow;
                    var update = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(woline);

                    _UoW.SaveChanges();
                }
                catch (Exception ex)
                {

                }

            }

            return 1;
        }

        public async Task<int> Scriptforformandclass()
        {
            var get_forms = _UoW.WorkOrderRepository.Scriptforformandclass();
            //var get__formio_forms = _UoW.WorkOrderRepository.Scriptforformioform();

            //  var mapper = _mapper.Map<List<InspectionTemplateAssetClass>>(get_forms);
            //  var mapper_form = _mapper.Map<List<InspectionsTemplateFormIO>>(get__formio_forms);

            // foreach(var form in mapper_form)
            // {
            //      var insert = await _UoW.BaseGenericRepository<InspectionsTemplateFormIO>().Insert(form);
            //_UoW.SaveChanges();
            // }




            //
            //_UoW.BeginTransaction();
            foreach (var class_ in get_forms)
            {

                try
                {
                    if (class_.AssetClassFormIOMapping.Count > 0)
                    {
                        foreach (var mapping in class_.AssetClassFormIOMapping)
                        {
                            if (mapping.form_id != null && !mapping.isarchive)
                            {
                                var get_wp = _UoW.WorkOrderRepository.Scriptforformandclass_get_WPnyid(mapping.form_id.Value);
                                if (!String.IsNullOrEmpty(get_wp))
                                {
                                    var form = _UoW.WorkOrderRepository.Scriptforformandclass_get_idbyWP(get_wp);
                                    mapping.form_id = form;
                                }
                            }
                        }
                    }
                    var insert = await _UoW.BaseGenericRepository<InspectionTemplateAssetClass>().Update(class_);
                    _UoW.SaveChanges();
                }
                catch (Exception ex)
                {
                    _UoW.RollbackTransaction();
                }
            }

            //  _UoW.CommitTransaction();
            return 1;
        }

        public (GetOBWOAssetDetailsByIdResponsemodel,int) GetOBWOlineByQRCode(GetOBWOlineByQRCodeRequestmodel requestmodel)
        {
            int res = (int)ResponseStatusNumber.Error;

            GetOBWOAssetDetailsByIdResponsemodel response = null;
            var get_asset_details = _UoW.WorkOrderRepository.GetOBWOlineByQRCode(requestmodel);
            if (get_asset_details != null)
            {
                response = new GetOBWOAssetDetailsByIdResponsemodel();
                if (get_asset_details.WOOnboardingAssetsImagesMapping != null && get_asset_details.WOOnboardingAssetsImagesMapping.Count > 0)
                {
                    get_asset_details.WOOnboardingAssetsImagesMapping = get_asset_details.WOOnboardingAssetsImagesMapping.Where(x => !x.is_deleted).ToList();
                }
                if (get_asset_details.IRWOImagesLabelMapping != null && get_asset_details.IRWOImagesLabelMapping.Count > 0)
                {
                    get_asset_details.IRWOImagesLabelMapping = get_asset_details.IRWOImagesLabelMapping.Where(x => !x.is_deleted).OrderBy(x => x.created_at).ToList();
                }
                if (get_asset_details.WOOBAssetFedByMapping != null && get_asset_details.WOOBAssetFedByMapping.Count > 0)
                {
                    get_asset_details.WOOBAssetFedByMapping = get_asset_details.WOOBAssetFedByMapping.Where(x => !x.is_deleted).OrderBy(x => x.created_at).ToList();
                }
                if (get_asset_details.WOlineSubLevelcomponentMapping != null && get_asset_details.WOlineSubLevelcomponentMapping.Count > 0)
                {
                    get_asset_details.WOlineSubLevelcomponentMapping = get_asset_details.WOlineSubLevelcomponentMapping.Where(x => !x.is_deleted).OrderBy(x => x.created_at).ToList();
                }
                if (get_asset_details.WOlineTopLevelcomponentMapping != null && get_asset_details.WOlineTopLevelcomponentMapping.Count > 0)
                {
                    get_asset_details.WOlineTopLevelcomponentMapping = get_asset_details.WOlineTopLevelcomponentMapping.Where(x => !x.is_deleted).OrderBy(x => x.created_at).ToList();
                }
                if (get_asset_details.WOLineIssue != null && get_asset_details.WOLineIssue.Count > 0)
                {
                    get_asset_details.WOLineIssue = get_asset_details.WOLineIssue.Where(x => !x.is_deleted).OrderBy(x => x.created_at).ToList();
                }
                response = _mapper.Map<GetOBWOAssetDetailsByIdResponsemodel>(get_asset_details);


                if (response.wo_ob_asset_toplevelcomponent_mapping != null && response.wo_ob_asset_toplevelcomponent_mapping.Count > 0)
                {
                    foreach (var top_level_asset in response.wo_ob_asset_toplevelcomponent_mapping)
                    {
                        if (!top_level_asset.is_toplevelcomponent_from_ob_wo)
                        {
                            var get_assset = _UoW.WorkOrderRepository.GetAssetByID(top_level_asset.toplevelcomponent_asset_id);
                            if (get_assset != null)
                            {
                                top_level_asset.toplevelcomponent_asset_name = get_assset.name;
                            }
                        }
                        else
                        {
                            var get_assset = _UoW.WorkOrderRepository.GetFedByOBAssetByID(top_level_asset.toplevelcomponent_asset_id);
                            if (get_assset != null)
                            {
                                top_level_asset.toplevelcomponent_asset_name = get_assset.asset_name;
                            }
                        }
                    }
                }

                if (response.wo_ob_asset_sublevelcomponent_mapping != null && response.wo_ob_asset_sublevelcomponent_mapping.Count > 0)
                {
                    foreach (var sub_level_asset in response.wo_ob_asset_sublevelcomponent_mapping)
                    {
                        if (!sub_level_asset.is_sublevelcomponent_from_ob_wo)
                        {
                            var get_assset = _UoW.WorkOrderRepository.GetAssetByID(sub_level_asset.sublevelcomponent_asset_id);
                            if (get_assset != null)
                            {
                                sub_level_asset.sublevelcomponent_asset_name = get_assset.name;
                                sub_level_asset.sublevelcomponent_asset_class_id = get_assset.inspectiontemplate_asset_class_id.Value;
                                sub_level_asset.sublevelcomponent_asset_class_name = get_assset.InspectionTemplateAssetClass.asset_class_name;
                                sub_level_asset.sublevelcomponent_asset_class_code = get_assset.InspectionTemplateAssetClass.asset_class_code;
                            }
                        }
                        else
                        {
                            var get_assset = _UoW.WorkOrderRepository.GetFedByOBAssetByID(sub_level_asset.sublevelcomponent_asset_id);
                            if (get_assset != null)
                            {
                                sub_level_asset.sublevelcomponent_asset_name = get_assset.asset_name;
                                if (!String.IsNullOrEmpty(get_assset.asset_class_code))
                                {
                                    var get_assetclass = _UoW.WorkOrderRepository.GetAssetclassByCode(get_assset.asset_class_code.ToLower().Trim());
                                    if (get_assetclass != null)
                                    {
                                        sub_level_asset.sublevelcomponent_asset_class_name = get_assetclass.asset_class_name;
                                        sub_level_asset.sublevelcomponent_asset_class_id = get_assetclass.inspectiontemplate_asset_class_id;
                                        sub_level_asset.sublevelcomponent_asset_class_code = get_assetclass.asset_class_code;
                                    }
                                }
                            }
                        }
                    }
                }


                if (response.wo_ob_asset_fed_by_mapping != null && response.wo_ob_asset_fed_by_mapping.Count > 0)
                {
                    foreach (var parent_asset in response.wo_ob_asset_fed_by_mapping)
                    {
                        if (!parent_asset.is_parent_from_ob_wo)
                        {
                            var get_assset = _UoW.WorkOrderRepository.GetAssetByID(parent_asset.parent_asset_id);
                            if (get_assset != null)
                            {
                                parent_asset.parent_asset_name = get_assset.name;
                            }
                        }
                        else
                        {
                            var get_assset = _UoW.WorkOrderRepository.GetFedByOBAssetByID(parent_asset.parent_asset_id);
                            if (get_assset != null)
                            {
                                parent_asset.parent_asset_name = get_assset.asset_name;
                            }
                        }
                    }
                }
                if (response.ob_existing_asset_id != null)
                {
                    var get_assset = _UoW.WorkOrderRepository.GetAssetByID(response.ob_existing_asset_id.Value);
                    response.asset_name = get_assset.name;
                }
                if (response.replaced_asset_id != null && response.replaced_asset_id != Guid.Empty)
                {
                    if (response.is_replaced_asset_id_is_main)
                    {
                        var get_asssets = _UoW.AssetRepository.GetAssetByIDs(new List<Guid> { response.replaced_asset_id.Value });
                        response.replaced_asset_name = get_asssets.FirstOrDefault().name;
                    }
                    else
                    {
                        var get_ob_asset_name = _UoW.WorkOrderRepository.GetOBWOAssetNameByID(response.replaced_asset_id.Value);
                        response.replaced_asset_name = get_ob_asset_name;
                    }
                }

                if (response.issues_temp_asset_id != null)
                {
                    var get_main_temp_asset = _UoW.WorkOrderRepository.GetWOlineByIdForissueupdate(response.issues_temp_asset_id.Value);
                    if (get_main_temp_asset != null)
                    {
                        response.issues_temp_asset_name = get_main_temp_asset.asset_name;
                        response.asset_name = get_main_temp_asset.asset_name;

                    }
                }

                // override basic asset details from temp asset table 
                if (response.temp_asset_details != null)
                {
                    response.asset_name = response.temp_asset_details.asset_name;
                    response.qr_code = response.temp_asset_details.QR_code;
                    response.condition_index_type = response.temp_asset_details.condition_index_type;
                    response.criticality_index_type = response.temp_asset_details.criticality_index_type;
                    response.commisiion_date = response.temp_asset_details.commisiion_date;
                    response.form_nameplate_info = response.temp_asset_details.form_nameplate_info;
                    response.Component_level_type_id = response.temp_asset_details.component_level_type_id;
                    response.asset_operating_condition_state = response.temp_asset_details.asset_operating_condition_state;
                    response.code_compliance = response.temp_asset_details.code_compliance;
                    if (response.temp_asset_details.inspectiontemplate_asset_class_id != null)
                        response.inspectiontemplate_asset_class_id = response.temp_asset_details.inspectiontemplate_asset_class_id.Value;
                    if (!string.IsNullOrEmpty(response.temp_asset_details.asset_class_code)) 
                        response.asset_class_code = response.temp_asset_details.asset_class_code;
                    if (!string.IsNullOrEmpty(response.temp_asset_details.asset_class_name))
                        response.asset_class_name = response.temp_asset_details.asset_class_name;
                    response.building = response.temp_asset_details.temp_formio_building_name;
                    response.floor = response.temp_asset_details.temp_formio_floor_name;
                    response.room = response.temp_asset_details.temp_formio_room_name;
                    response.section = response.temp_asset_details.temp_formio_section_name;
                    response.temp_formiobuilding_id = response.temp_asset_details.temp_formiobuilding_id;
                    response.temp_formiofloor_id = response.temp_asset_details.temp_formiofloor_id;
                    response.temp_formioroom_id = response.temp_asset_details.temp_formioroom_id;
                    response.temp_formiosection_id = response.temp_asset_details.temp_formiosection_id;

                    response.temp_master_building = response.temp_asset_details.temp_master_building;
                    response.temp_master_floor = response.temp_asset_details.temp_master_floor;
                    response.temp_master_room = response.temp_asset_details.temp_master_room;
                    response.temp_master_section = response.temp_asset_details.temp_master_section;
                    response.temp_master_building_id = response.temp_asset_details.temp_master_building_id;
                    response.temp_master_floor_id = response.temp_asset_details.temp_master_floor_id;
                    response.temp_master_room_id = response.temp_asset_details.temp_master_room_id;
                }

                res = (int)ResponseStatusNumber.Success;
            }
            else
            {
                res = (int)ResponseStatusNumber.asset_in_different_location;
            }
            return (response,res);
        }

        public async Task<int> AssignExistingAssettoOBWO(AssignExistingAssettoOBWORequestmodel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;

            foreach (var asset_id in requestmodel.asset_id)
            {
                try
                {
                    var get_asset = _UoW.WorkOrderRepository.GetAssetByIdforExisting(asset_id);
                    get_asset.AssetProfileImages = get_asset.AssetProfileImages.Where(x => x.asset_photo_type == (int)AssetPhotoType.Asset_Profile || x.asset_photo_type == (int)AssetPhotoType.Nameplate_Photo).ToList();
                    get_asset.AssetTopLevelcomponentMapping = get_asset.AssetTopLevelcomponentMapping.Where(x => !x.is_deleted).ToList();
                    get_asset.AssetSubLevelcomponentMapping = get_asset.AssetSubLevelcomponentMapping.Where(x => !x.is_deleted).ToList();
                    get_asset.AssetParentHierarchyMapping = get_asset.AssetParentHierarchyMapping.Where(x => !x.is_deleted).ToList();

                    WOOnboardingAssets WOOnboardingAssets = null;
                    WOOnboardingAssets = _mapper.Map<WOOnboardingAssets>(get_asset);

                    // If SubComponents of Assigned Asset(Main) have images then Add imagee to OBWO-Asset's SubComponents
                    foreach (var item in WOOnboardingAssets.WOlineSubLevelcomponentMapping)
                    {
                        item.WOOnboardingAssetsImagesMapping = new List<WOOnboardingAssetsImagesMapping>();
                        var get_subcomp_imgs = _UoW.WorkOrderRepository.GetMainAssetImagesById(item.sublevelcomponent_asset_id);

                        foreach (var image in get_subcomp_imgs)
                        {
                            WOOnboardingAssetsImagesMapping WOOnboardingAssetsImagesMapping = new WOOnboardingAssetsImagesMapping();
                            WOOnboardingAssetsImagesMapping.asset_photo = image.asset_photo;
                            WOOnboardingAssetsImagesMapping.woline_sublevelcomponent_mapping_id = item.woline_sublevelcomponent_mapping_id;
                            WOOnboardingAssetsImagesMapping.asset_photo_type = image.asset_photo_type;
                            WOOnboardingAssetsImagesMapping.created_at = DateTime.UtcNow;

                            item.WOOnboardingAssetsImagesMapping.Add(WOOnboardingAssetsImagesMapping);
                        }
                    }

                    //WOOnboardingAssets.is_woline_from_other_inspection = requestmodel.is_woline_from_other_inspection;

                    if (requestmodel.temp_formiobuilding_id != null && requestmodel.temp_formiobuilding_id != null && requestmodel.temp_formiobuilding_id != null)
                    {
                        WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping = new WOOBAssetTempFormIOBuildingMapping();
                        WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id = requestmodel.temp_formiobuilding_id;
                        WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id = requestmodel.temp_formiofloor_id;
                        WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id = requestmodel.temp_formioroom_id;
                        WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.created_at = DateTime.UtcNow;

                        // check for section if exist or not 
                        /// add section data
                        ///  
                        if (get_asset.AssetFormIOBuildingMappings != null && get_asset.AssetFormIOBuildingMappings.FormIOSections != null)
                        {

                            if (String.IsNullOrEmpty(get_asset.AssetFormIOBuildingMappings.FormIOSections.formio_section_name))
                            {
                                get_asset.AssetFormIOBuildingMappings.FormIOSections.formio_section_name = "Default";
                            }
                            if (!String.IsNullOrEmpty(get_asset.AssetFormIOBuildingMappings.FormIOSections.formio_section_name))
                            {
                                TempFormIOSections TempFormIOSections = _UoW.WorkOrderRepository.GetTempSectionByName(get_asset.AssetFormIOBuildingMappings.FormIOSections.formio_section_name, requestmodel.temp_formioroom_id.Value);
                                if (TempFormIOSections == null)
                                {
                                    TempFormIOSections = new TempFormIOSections();
                                    TempFormIOSections.temp_formio_section_name = get_asset.AssetFormIOBuildingMappings.FormIOSections.formio_section_name;
                                    TempFormIOSections.temp_formioroom_id = requestmodel.temp_formioroom_id;
                                    TempFormIOSections.wo_id = requestmodel.wo_id;
                                    TempFormIOSections.created_at = DateTime.UtcNow;
                                    TempFormIOSections.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                    TempFormIOSections.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                    var insertsection = await _UoW.BaseGenericRepository<TempFormIOSections>().Insert(TempFormIOSections);
                                    _UoW.SaveChanges();
                                }
                                WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id = TempFormIOSections.temp_formiosection_id;
                            }
                        }
                    }
                    else // insert from Main Asset table in to temp table 
                    {
                        if (get_asset.AssetFormIOBuildingMappings != null)
                        {
                            /// new flow for building location hierarchy
                            TempFormIOBuildings get_building = null;
                            get_building = _UoW.WorkOrderRepository.GetTempFormIOBuildingByName(get_asset.AssetFormIOBuildingMappings.FormIOBuildings.formio_building_name, requestmodel.wo_id);
                            if (get_building == null)
                            {
                                get_building = new TempFormIOBuildings();
                                get_building.temp_formio_building_name = get_asset.AssetFormIOBuildingMappings.FormIOBuildings.formio_building_name;
                                get_building.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                get_building.wo_id = requestmodel.wo_id;
                                get_building.created_at = DateTime.UtcNow;
                                get_building.is_deleted = false;
                                get_building.formiobuilding_id = get_asset.AssetFormIOBuildingMappings.formiobuilding_id;
                                get_building.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                var insert_building = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Insert(get_building);
                                _UoW.SaveChanges();
                            }

                            TempFormIOFloors get_floor = null;
                            get_floor = _UoW.WorkOrderRepository.GetTempFormIOFloorByName(get_asset.AssetFormIOBuildingMappings.FormIOFloors.formio_floor_name, get_building.temp_formiobuilding_id, requestmodel.wo_id);
                            if (get_floor == null)
                            {
                                get_floor = new TempFormIOFloors();
                                get_floor.temp_formio_floor_name = get_asset.AssetFormIOBuildingMappings.FormIOFloors.formio_floor_name;
                                get_floor.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                get_floor.wo_id = requestmodel.wo_id;
                                get_floor.created_at = DateTime.UtcNow;
                                get_floor.is_deleted = false;
                                get_floor.temp_formiobuilding_id = get_building.temp_formiobuilding_id;
                                get_floor.formiofloor_id = get_asset.AssetFormIOBuildingMappings.formiofloor_id;
                                get_floor.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                var insert_floor = await _UoW.BaseGenericRepository<TempFormIOFloors>().Insert(get_floor);
                                _UoW.SaveChanges();
                            }

                            TempFormIORooms get_room = null;
                            get_room = _UoW.WorkOrderRepository.GetTempFormIORoomByName(get_asset.AssetFormIOBuildingMappings.FormIORooms.formio_room_name, get_floor.temp_formiofloor_id, requestmodel.wo_id);
                            if (get_room == null)
                            {
                                get_room = new TempFormIORooms();
                                get_room.temp_formio_room_name = get_asset.AssetFormIOBuildingMappings.FormIORooms.formio_room_name;
                                get_room.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                get_room.wo_id = requestmodel.wo_id;
                                get_room.created_at = DateTime.UtcNow;
                                get_room.is_deleted = false;
                                get_room.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                                get_room.temp_formiofloor_id = get_floor.temp_formiofloor_id;
                                get_room.formioroom_id = get_asset.AssetFormIOBuildingMappings.formioroom_id;
                                var insert_room = await _UoW.BaseGenericRepository<TempFormIORooms>().Insert(get_room);
                                _UoW.SaveChanges();
                            }

                            string section_name = null;
                            if (get_asset.AssetFormIOBuildingMappings.FormIOSections != null)
                                section_name = get_asset.AssetFormIOBuildingMappings.FormIOSections.formio_section_name;
                            else
                                section_name = "Default";

                            TempFormIOSections get_section = null;
                            get_section = _UoW.WorkOrderRepository.GetTempFormIOSectionByName(section_name, get_room.temp_formioroom_id, requestmodel.wo_id);
                            if (get_section == null)
                            {
                                get_section = new TempFormIOSections();
                                get_section.temp_formio_section_name = section_name;
                                get_section.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                get_section.wo_id = requestmodel.wo_id;
                                get_section.created_at = DateTime.UtcNow;
                                get_section.is_deleted = false;
                                get_section.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                                get_section.temp_formioroom_id = get_room.temp_formioroom_id;
                                get_section.formiosection_id = get_asset.AssetFormIOBuildingMappings.formiosection_id;
                                var insert_section = await _UoW.BaseGenericRepository<TempFormIOSections>().Insert(get_section);
                                _UoW.SaveChanges();
                            }
                            WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping = new WOOBAssetTempFormIOBuildingMapping();
                            WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id = get_building.temp_formiobuilding_id;
                            WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id = get_floor.temp_formiofloor_id;
                            WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id = get_room.temp_formioroom_id;
                            WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id = get_section.temp_formiosection_id;
                            WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.created_at = DateTime.UtcNow;

                        }
                    }

                    var get_wo_type = _UoW.WorkOrderRepository.GetWorkOrderTypeById(requestmodel.wo_id);

                    if (get_wo_type == (int)Status.IR_Scan_WO)
                    {
                        var get_ir_assetpm = _UoW.WorkOrderRepository.GetIRAssetPMsByAssetId(asset_id);
                        if (get_ir_assetpm != null) // update IR AssetPM status to Scheule 
                        {
                            get_ir_assetpm.status = (int)Status.Schedule;
                            if (get_ir_assetpm.wo_id == null || get_ir_assetpm.wo_id == Guid.Empty)
                                get_ir_assetpm.wo_id = requestmodel.wo_id;

                            get_ir_assetpm.modified_at = DateTime.UtcNow;
                            get_ir_assetpm.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                            var update2 = await _UoW.BaseGenericRepository<AssetPMs>().Update(get_ir_assetpm);
                        }
                    }

                    var get_visual_assetpm = _UoW.WorkOrderRepository.GetVisualAssetPMsByAssetId(asset_id);
                    if (get_visual_assetpm != null)
                    {
                        get_visual_assetpm.status = (int)Status.Schedule;
                        if (get_visual_assetpm.wo_id == null || get_visual_assetpm.wo_id == Guid.Empty)
                            get_visual_assetpm.wo_id = requestmodel.wo_id;

                        get_visual_assetpm.modified_at = DateTime.UtcNow;
                        get_visual_assetpm.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                        var update3 = await _UoW.BaseGenericRepository<AssetPMs>().Update(get_visual_assetpm);
                    }

                    /*
                    var get_ir_assetpm = _UoW.WorkOrderRepository.GetIRAssetPMsByAssetId(asset_id);
                    if (get_ir_assetpm != null) // update IR AssetPM status to Scheule 
                    {
                        get_ir_assetpm.status = (int)Status.Schedule;
                        get_ir_assetpm.modified_at = DateTime.UtcNow;
                        get_ir_assetpm.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                        var update2 = await _UoW.BaseGenericRepository<AssetPMs>().Update(get_ir_assetpm);
                    }
                    var get_visual_assetpm = _UoW.WorkOrderRepository.GetVisualAssetPMsByAssetId(asset_id);
                    if (get_visual_assetpm != null)
                    {
                        get_visual_assetpm.status = (int)Status.Schedule;
                        get_visual_assetpm.modified_at = DateTime.UtcNow;
                        get_visual_assetpm.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                        var update3 = await _UoW.BaseGenericRepository<AssetPMs>().Update(get_visual_assetpm);
                    }*/

                    if (requestmodel.status != null && requestmodel.status > 0)
                    {
                        WOOnboardingAssets.status = requestmodel.status.Value;
                    }
                    WOOnboardingAssets.wo_id = requestmodel.wo_id;
                    if (requestmodel.is_woline_for_issue)
                    {
                        WOOnboardingAssets.is_woline_from_other_inspection = true;
                    }

                    AddTempMasterLocationDataMainFunctionRequestModel req2 = new AddTempMasterLocationDataMainFunctionRequestModel();
                    req2.temp_building = get_asset.AssetFormIOBuildingMappings.FormIOBuildings.formio_building_name;
                    req2.temp_floor = get_asset.AssetFormIOBuildingMappings.FormIOFloors.formio_floor_name;
                    req2.temp_room = get_asset.AssetFormIOBuildingMappings.FormIORooms.formio_room_name;
                    req2.wo_id = requestmodel.wo_id;
                    var res_location = await AddTempMasterLocationDataMainFunction(req2);

                    #region insert temp asset data
                    // add temp asset data
                    var tempasset_request = new UpdateOBWOAssetDetailsRequestmodel();
                    tempasset_request.asset_name = WOOnboardingAssets.asset_name;
                    tempasset_request.QR_code = WOOnboardingAssets.QR_code;
                    tempasset_request.condition_index_type = WOOnboardingAssets.condition_index_type;
                    tempasset_request.criticality_index_type = WOOnboardingAssets.criticality_index_type;
                    tempasset_request.commisiion_date = WOOnboardingAssets.commisiion_date;
                    tempasset_request.form_nameplate_info = WOOnboardingAssets.form_nameplate_info;
                    tempasset_request.component_level_type_id = WOOnboardingAssets.component_level_type_id;
                    tempasset_request.asset_operating_condition_state = WOOnboardingAssets.asset_operating_condition_state;
                    tempasset_request.code_compliance = WOOnboardingAssets.code_compliance;
                    tempasset_request.asset_id = WOOnboardingAssets.asset_id;
                    tempasset_request.building = WOOnboardingAssets.building;
                    tempasset_request.floor = WOOnboardingAssets.floor;
                    tempasset_request.room = WOOnboardingAssets.room;
                    tempasset_request.temp_section = WOOnboardingAssets.section;
                    tempasset_request.wo_id = WOOnboardingAssets.wo_id;
                    tempasset_request.site_id = WOOnboardingAssets.site_id;
                    tempasset_request.section = WOOnboardingAssets.section;
                    tempasset_request.asset_class_code = WOOnboardingAssets.asset_class_code;
                    tempasset_request.asset_class_name = WOOnboardingAssets.asset_class_name;
                    tempasset_request.maintenance_index_type = get_asset.maintenance_index_type;
                    tempasset_request.panel_schedule = get_asset.panel_schedule;
                    tempasset_request.arc_flash_label_valid = get_asset.arc_flash_label_valid;
                    tempasset_request.temp_master_building_id = res_location.temp_master_building_id;
                    tempasset_request.temp_master_floor_id = res_location.temp_master_floor_id;
                    tempasset_request.temp_master_room_id = res_location.temp_master_room_id;
                    tempasset_request.asset_group_id = get_asset.asset_group_id;

                    if (WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping != null)
                    {
                        tempasset_request.temp_formiobuilding_id = WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id;
                        tempasset_request.temp_formiofloor_id = WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id;
                        tempasset_request.temp_formioroom_id = WOOnboardingAssets.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id;
                    }

                    var insert_temp_asset = await AddTempAssetData(tempasset_request, new TempAsset());
                    #endregion insert temp asset data

                    WOOnboardingAssets.tempasset_id = insert_temp_asset;

                    var update = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(WOOnboardingAssets);
                    response = (int)ResponseStatusNumber.Success;
                    _UoW.SaveChanges();

                    await AddUpdateWOOnboardingAssetsDateTimeTracking(WOOnboardingAssets.woonboardingassets_id, (int)WOLineActionsTypes.WorkStartDate, 0);


                    // Add active assetPM of existing asset into SitewalkthoughTempPMEstimation

                    var pmIdList = _UoW.WorkOrderRepository.GetPMIdList(asset_id);

                    if (pmIdList != null && pmIdList.Count() > 0)
                    {
                        foreach (var item in pmIdList)
                        {
                            var current_assetPM = _UoW.WorkOrderRepository.GetCurrentAssetPM(asset_id, item);
                            {

                                var get_pm_plan_id = _UoW.WorkOrderRepository.GetPMPlanIdByPMId(current_assetPM.pm_id.Value);
                                // Map and save to SitewalkthroughTempPmEstimation
                                SitewalkthroughTempPmEstimation tempEstimation = new SitewalkthroughTempPmEstimation();


                                tempEstimation.tempasset_id = WOOnboardingAssets.tempasset_id.Value;
                                tempEstimation.pm_plan_id = get_pm_plan_id;
                                tempEstimation.pm_id = current_assetPM.pm_id.Value;
                                tempEstimation.woonboardingassets_id = WOOnboardingAssets.woonboardingassets_id;
                                tempEstimation.estimation_time = current_assetPM.estimation_time;
                                tempEstimation.inspectiontemplate_asset_class_id = get_asset.inspectiontemplate_asset_class_id.Value;
                                tempEstimation.created_at = DateTime.UtcNow;
                                tempEstimation.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                tempEstimation.is_deleted = false;



                                // Save to database
                                var insert = await _UoW.BaseGenericRepository<SitewalkthroughTempPmEstimation>().Insert(tempEstimation);
                                _UoW.SaveChanges();

                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    response = (int)ResponseStatusNumber.Error;
                }

            }
            return response;
        }


        public async Task<AddIssuesDirectlyToMaintenanceWOServiceResponsemodel> AddIssuesDirectlyToMaintenanceWOService(AddIssuesDirectlyToMaintenanceWORequestModel request)
        {
            int response = (int)ResponseStatusNumber.Error;
            AddIssuesDirectlyToMaintenanceWOServiceResponsemodel responsemodel = new AddIssuesDirectlyToMaintenanceWOServiceResponsemodel();
            responsemodel.success = (int)ResponseStatusNumber.Error;
            //var res = _UoW.WorkOrderRepository.AddIssuesDirectlyToMaintenanceWORepo(request);

            //Create/Update WO
            if (request.asset_issue_id != null)
            {
                var get_asset_issue = _UoW.WorkOrderRepository.GetAssetIssueByAssetIssueIdRepo(request.asset_issue_id);

                UpdateOBWOAssetDetailsRequestmodel updateOBWOAssetDetailsRequestmodel = new UpdateOBWOAssetDetailsRequestmodel();
                if (get_asset_issue != null)
                {
                    updateOBWOAssetDetailsRequestmodel.asset_id = get_asset_issue.Asset.asset_id;
                    updateOBWOAssetDetailsRequestmodel.asset_name = get_asset_issue.Asset.name;
                    updateOBWOAssetDetailsRequestmodel.status = 68;
                    updateOBWOAssetDetailsRequestmodel.wo_id = request.wo_id;//(Guid)get_asset_issue.wo_id;
                    updateOBWOAssetDetailsRequestmodel.inspection_type = request.inspection_type;
                    updateOBWOAssetDetailsRequestmodel.is_wo_line_for_exisiting_asset = true;
                }
                var createWOLine = await UpdateOBWOAssetDetails(updateOBWOAssetDetailsRequestmodel);


                if (createWOLine != null)
                {
                    //Link Issue with WOLine
                    LinkIssueToWOLineRequestmodel linkIssueToWOLineReqmodel = new LinkIssueToWOLineRequestmodel();

                    linkIssueToWOLineReqmodel.asset_issue_id = new List<Guid>();
                    linkIssueToWOLineReqmodel.asset_issue_id.Add(request.asset_issue_id);
                    linkIssueToWOLineReqmodel.wo_id = request.wo_id;
                    linkIssueToWOLineReqmodel.woonboardingassets_id = createWOLine.woonboardingassets_id;

                    await LinkIssueToWOLine(linkIssueToWOLineReqmodel);
                    responsemodel.woonboardingassets_id = createWOLine.woonboardingassets_id;
                    responsemodel.success = (int)ResponseStatusNumber.Success;
                    response = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    responsemodel.success = (int)ResponseStatusNumber.NotFound;
                    response = (int)ResponseStatusNumber.NotFound;
                }
            }
            return responsemodel;
        }

        public async Task<AddIssuesDirectlyToMaintenanceWOServiceResponsemodel> AddIssuesDirectlyToMaintenanceWOServiceBySteps(AddIssuesDirectlyToMaintenanceWORequestModel request)
        {
            int response = (int)ResponseStatusNumber.Error;
            AddIssuesDirectlyToMaintenanceWOServiceResponsemodel responsemodel = new AddIssuesDirectlyToMaintenanceWOServiceResponsemodel();
            responsemodel.success = (int)ResponseStatusNumber.Error;

            var get_asset_issue = _UoW.WorkOrderRepository.GetAssetIssueByAssetIssueIdRepo(request.asset_issue_id);

            // check if there is any install woline with or not with this asset 
            var get_install_woline = _UoW.WorkOrderRepository.IsInstallWOlineExist(request.wo_id, get_asset_issue.asset_id.Value);
            if(get_install_woline == null) // if it is null then create install woline
            {
                AssignExistingAssettoOBWORequestmodel install_woline_request = new AssignExistingAssettoOBWORequestmodel();
                install_woline_request.asset_id = new List<Guid> { get_asset_issue.asset_id.Value };
                install_woline_request.wo_id = request.wo_id;
                install_woline_request.site_id = get_asset_issue.site_id.Value;
                install_woline_request.status =(int)Status.open;
                install_woline_request.is_woline_for_issue =true;
                install_woline_request.requested_by =UpdatedGenericRequestmodel.CurrentUser.requested_by;
                //install_woline_request.is_woline_from_other_inspection = true;

                await AssignExistingAssettoOBWO(install_woline_request);
            }

            get_install_woline = _UoW.WorkOrderRepository.IsInstallWOlineExist(request.wo_id, get_asset_issue.asset_id.Value);

            // create issue woline and attach issue 
            UpdateOBWOAssetDetailsRequestmodel updateOBWOAssetDetailsRequestmodel = new UpdateOBWOAssetDetailsRequestmodel();
            if (get_asset_issue != null)
            {
                updateOBWOAssetDetailsRequestmodel.asset_id = get_asset_issue.Asset.asset_id;
                updateOBWOAssetDetailsRequestmodel.asset_name = get_asset_issue.Asset.name;
                updateOBWOAssetDetailsRequestmodel.status = 68;
                updateOBWOAssetDetailsRequestmodel.wo_id = request.wo_id;//(Guid)get_asset_issue.wo_id;
                updateOBWOAssetDetailsRequestmodel.inspection_type = request.inspection_type;
                updateOBWOAssetDetailsRequestmodel.is_wo_line_for_exisiting_asset = true;
                updateOBWOAssetDetailsRequestmodel.is_request_from_issue_service = true;
                updateOBWOAssetDetailsRequestmodel.issue_title = get_asset_issue.issue_title;
                updateOBWOAssetDetailsRequestmodel.problem_description = get_asset_issue.issue_description;
                updateOBWOAssetDetailsRequestmodel.issue_priority = get_asset_issue.priority;
            }
            var createWOLine = await UpdateOBWOAssetDetails(updateOBWOAssetDetailsRequestmodel);

            // update temp asset 
            var get_issue_woline = _UoW.WorkOrderRepository.GetWOlineByIdForissueupdate(createWOLine.woonboardingassets_id);
            get_issue_woline.tempasset_id = get_install_woline.tempasset_id;
            await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_issue_woline);

            if (createWOLine != null)
            {
                //Link Issue with WOLine
                LinkIssueToWOLineRequestmodel linkIssueToWOLineReqmodel = new LinkIssueToWOLineRequestmodel();

                linkIssueToWOLineReqmodel.asset_issue_id = new List<Guid>();
                linkIssueToWOLineReqmodel.asset_issue_id.Add(request.asset_issue_id);
                linkIssueToWOLineReqmodel.wo_id = request.wo_id;
                linkIssueToWOLineReqmodel.woonboardingassets_id = createWOLine.woonboardingassets_id;

                await LinkIssueToWOLine(linkIssueToWOLineReqmodel);
                responsemodel.woonboardingassets_id = createWOLine.woonboardingassets_id;
                responsemodel.success = (int)ResponseStatusNumber.Success;
                response = (int)ResponseStatusNumber.Success;
            }


            return responsemodel;
        }


        public ListViewModel<GetAssetsToAssignOBWOResponsemodel> GetAssetsToAssignOBWO(GetAssetsToAssignOBWORequestmodel requestmodel)
        {

            ListViewModel<GetAssetsToAssignOBWOResponsemodel> response = new ListViewModel<GetAssetsToAssignOBWOResponsemodel>();

            try
            {
                var assetlist = _UoW.WorkOrderRepository.GetAssetsToAssignOBWO(requestmodel);
                if (assetlist.Item1 != null && assetlist.Item1.Count > 0)
                {
                    var map = _mapper.Map<List<GetAssetsToAssignOBWOResponsemodel>>(assetlist.Item1);
                    response.list = map;
                    response.listsize = assetlist.Item2;
                }
                response.pageIndex = requestmodel.pageindex;
                response.pageSize = requestmodel.pagesize;


            }
            catch (Exception ex)
            {

            }
            return response;

        }

        public GetComponantLevelAssetsResponsemodel GetComponantLevelAssets(GetComponantLevelAssetsRequestmodel requestmodel)
        {

            GetComponantLevelAssetsResponsemodel response = new GetComponantLevelAssetsResponsemodel();
            try
            {
                // main asset list
                var assetlist = _UoW.WorkOrderRepository.GetComponantLevelMainAssets(requestmodel);
                response.main_assets_list = _mapper.Map<List<MainAssets>>(assetlist);

                // temp asset list by woid

                var tempassetlist = _UoW.WorkOrderRepository.GetComponantLevelTempAssets(requestmodel);
                response.woline_assets = _mapper.Map<List<TempAssets>>(tempassetlist);

            }
            catch (Exception ex)
            {

            }
            return response;

        }
        public List<GetAssetPMConditionDataForExportResponsemodel> GetAssetPMConditionDataForExport(GetAssetPMConditionDataForExportRequestmodel requestmodel)
        {
            List<GetAssetPMConditionDataForExportResponsemodel> list = new List<GetAssetPMConditionDataForExportResponsemodel>();


            var get_asset_all_class = _UoW.WorkOrderRepository.GetAllAssetClassForExport();

            foreach (var item in get_asset_all_class)
            {
                GetAssetPMConditionDataForExportResponsemodel response = new GetAssetPMConditionDataForExportResponsemodel();
                response.asset_class_name = item.asset_class_name;
                response.asset_class_code = item.asset_class_code;
                response.condition_1_asset_count = 0;
                response.condition_2_asset_count = 0;
                response.condition_3_asset_count = 0;
                var get_assets = _UoW.WorkOrderRepository.GetAssetsByAssetClassId(item.inspectiontemplate_asset_class_id);

                AssetPMService pmservice = new AssetPMService(_mapper);

                foreach (var asset in get_assets)
                {
                    var condition = pmservice.GetConditionTypeForPM(asset);
                    if (condition == 1)
                    {
                        response.condition_1_asset_count = response.condition_1_asset_count + 1;
                    }
                    if (condition == 2)
                    {
                        response.condition_2_asset_count = response.condition_2_asset_count + 1;
                    }
                    if (condition == 3)
                    {
                        response.condition_3_asset_count = response.condition_3_asset_count + 1;
                    }

                }
                list.Add(response);
            }



            /*for (int i = 0; i <= 5; i++)
            {
                GetAssetPMConditionDataForExportResponsemodel GetAssetPMConditionDataForExportResponsemodel = new GetAssetPMConditionDataForExportResponsemodel();
                GetAssetPMConditionDataForExportResponsemodel.asset_class_code = "test_code" + i.ToString();
                GetAssetPMConditionDataForExportResponsemodel.asset_class_name = "test_name" + i.ToString();
                GetAssetPMConditionDataForExportResponsemodel.condition_1_asset_count = i + 10;
                GetAssetPMConditionDataForExportResponsemodel.condition_2_asset_count = i + 10;
                GetAssetPMConditionDataForExportResponsemodel.condition_3_asset_count = i + 10;
                list.Add(GetAssetPMConditionDataForExportResponsemodel);
            }*/


            return list;
        }



        public async Task<int> SetIssueNumberInAssetIssues()
        {

            ListViewModel<GetAllAssetIssuesResponsemodel> IssueList = new ListViewModel<GetAllAssetIssuesResponsemodel>();

            var siteList = _UoW.WorkOrderRepository.GetAllSitesIds();

            foreach (var item in siteList)
            {
                int issueNumber = 0;
                var issueList = _UoW.WorkOrderRepository.GetIssuesForIssueNumber(item.site_id);

                issueList.Item1.ForEach(async issue =>
                {
                    if (!String.IsNullOrEmpty(issue.issue_number))
                    {
                        ++issueNumber;
                        issue.issue_number = item.site_code + " Issue-" + (issueNumber);
                        var update = await _UoW.BaseGenericRepository<AssetIssue>().Update(issue);
                        _UoW.SaveChanges();
                    }

                });
            }
            return 1;
        }


        public int DeleteLinkOfAssetPMWithWOLine(DeleteLinkOfAssetPMWithWOLineRequestmodel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {
                var get_asset_pms_to_delete = _UoW.WorkOrderRepository.GetAssetPMsbyIds(requestmodel.asset_pm_id);

                foreach (var get_one_pm in get_asset_pms_to_delete)
                {
                    get_one_pm.wo_id = null;
                    get_one_pm.asset_form_id = null;
                    get_one_pm.is_Asset_PM_fixed = false;
                    get_one_pm.status = (int)Status.Active;
                    get_one_pm.modified_at = DateTime.UtcNow;
                    get_one_pm.modified_by = GenericRequestModel.requested_by.ToString();
                    _UoW.SaveChanges();
                }
                response = (int)ResponseStatusNumber.Success;
            }
            catch (Exception e)
            {
            }

            return response;
        }

        public ListViewModel<GetAssetsbyLocationHierarchyResponsemodel> GetAssetsbyLocationHierarchy(GetAssetsbyLocationHierarchyRequestmodel requestmodel)
        {

            ListViewModel<GetAssetsbyLocationHierarchyResponsemodel> response = new ListViewModel<GetAssetsbyLocationHierarchyResponsemodel>();

            try
            {
                var assetlist = _UoW.WorkOrderRepository.GetAssetsbyLocationHierarchy(requestmodel);
                if (assetlist.Item1 != null && assetlist.Item1.Count > 0)
                {
                    var toplevels = assetlist.Item1.Where(x => x.component_level_type_id == (int)ComponentLevelTypes.ToplevelComponent).ToList();
                    var map = _mapper.Map<List<GetAssetsbyLocationHierarchyResponsemodel>>(toplevels);
                    List<Guid> linked_sublevel_asset_ids = new List<Guid>();
                    foreach (var asset in map)
                    {
                        foreach (var subLevelAsset in asset.subLevel_components)
                        {
                            var get_subLevel_aseet = _UoW.WorkOrderRepository.GetSubLevelAssetById(subLevelAsset.sublevelcomponent_asset_id);
                            subLevelAsset.sublevelcomponent_asset_name = get_subLevel_aseet.name;
                            subLevelAsset.formiosection_id = get_subLevel_aseet.AssetFormIOBuildingMappings.formiosection_id;
                            subLevelAsset.formio_section_name = get_subLevel_aseet.AssetFormIOBuildingMappings.FormIOSections.formio_section_name;
                            if (get_subLevel_aseet != null && get_subLevel_aseet.InspectionTemplateAssetClass!=null && get_subLevel_aseet.InspectionTemplateAssetClass.FormIOType!=null)
                            {
                                subLevelAsset.asset_class_type = get_subLevel_aseet.InspectionTemplateAssetClass.FormIOType.form_type_name;
                            }
                        }
                        linked_sublevel_asset_ids.AddRange(asset.subLevel_components.Select(x => x.sublevelcomponent_asset_id).ToList());
                    }

                    // check if sublevel is there in this location then add those in dummy toplevel
                    var db_sublevel_asset_ids = assetlist.Item1.Where(x => x.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent).Select(x=>x.asset_id).ToList();
                    var not_linked_subasset = db_sublevel_asset_ids.Where(x => !linked_sublevel_asset_ids.Contains(x)).ToList();

                    GetAssetsbyLocationHierarchyResponsemodel dummytoplevel = new GetAssetsbyLocationHierarchyResponsemodel();
                    dummytoplevel.asset_name = "No Top level Asset";
                    dummytoplevel.subLevel_components = new List<SubLevelComponentAssets>();
                    dummytoplevel.is_top_level_dummy = true;
                    foreach (var item in not_linked_subasset)
                    {
                        SubLevelComponentAssets SubLevelComponentAssets = new SubLevelComponentAssets();
                        var get_subLevel_aseet = _UoW.WorkOrderRepository.GetSubLevelAssetById(item);
                        SubLevelComponentAssets.sublevelcomponent_asset_name = get_subLevel_aseet.name; 
                        SubLevelComponentAssets.sublevelcomponent_asset_id = item; 
                        SubLevelComponentAssets.formiosection_id = get_subLevel_aseet.AssetFormIOBuildingMappings.formiosection_id;
                        SubLevelComponentAssets.formio_section_name = get_subLevel_aseet.AssetFormIOBuildingMappings.FormIOSections.formio_section_name;

                        dummytoplevel.subLevel_components.Add(SubLevelComponentAssets);
                    }
                    
                    if(dummytoplevel.subLevel_components!=null && dummytoplevel.subLevel_components.Count > 0)
                    {
                        if (map == null)
                        {
                            map = new List<GetAssetsbyLocationHierarchyResponsemodel>();
                        }
                        map.Add(dummytoplevel);
                    }
                    
                    response.list = map;
                    response.listsize = assetlist.Item2;
                }
                response.pageIndex = requestmodel.pageindex;
                response.pageSize = requestmodel.pagesize;


            }
            catch (Exception ex)
            {

            }
            return response;

        }


        public async Task<List<AddAssetPMWolineResponsemodel>> AddAssetPMWoline(AddAssetPMWolineRequestmodel requestmodel)
        {
            List<AddAssetPMWolineResponsemodel> response = new List<AddAssetPMWolineResponsemodel>();

            var get_asset_pms = _UoW.WorkOrderRepository.GetAssetpmToaddWOline(requestmodel.asset_pm_id);

            foreach (var asset_pm in get_asset_pms)
            {
                WOOnboardingAssets WOOnboardingAssets = new WOOnboardingAssets();

                WOOnboardingAssets.asset_class_name = asset_pm.Asset.name;
                WOOnboardingAssets.asset_class_code = asset_pm.Asset.InspectionTemplateAssetClass.asset_class_code;
                WOOnboardingAssets.asset_class_name = asset_pm.Asset.InspectionTemplateAssetClass.asset_class_name;
                WOOnboardingAssets.QR_code = asset_pm.Asset.QR_code;
                WOOnboardingAssets.created_at = DateTime.UtcNow;
                WOOnboardingAssets.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                WOOnboardingAssets.is_deleted = false;
                WOOnboardingAssets.status = (int)Status.open;
                WOOnboardingAssets.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                WOOnboardingAssets.wo_id = requestmodel.wo_id;
                WOOnboardingAssets.inspection_type = (int)MWO_inspection_wo_type.PM;
                WOOnboardingAssets.asset_id = asset_pm.asset_id;
                WOOnboardingAssets.is_wo_line_for_exisiting_asset = true;


                if (asset_pm.Asset.AssetFormIOBuildingMappings != null)
                {
                    var buildingId = asset_pm.Asset.AssetFormIOBuildingMappings.formiobuilding_id;
                    if (buildingId != null)
                    {
                        var get_building = _UoW.AssetRepository.GetBuildingById(buildingId.Value);
                        if (get_building != null)
                        {
                            WOOnboardingAssets.building = get_building.formio_building_name;
                        }
                    }

                    var floorId = asset_pm.Asset.AssetFormIOBuildingMappings.formiofloor_id;
                    if (floorId != null)
                    {
                        var get_floor = _UoW.AssetRepository.GetFloorById(floorId.Value);
                        if (get_floor != null)
                        {
                            WOOnboardingAssets.floor = get_floor.formio_floor_name;
                        }
                    }

                    var roomId = asset_pm.Asset.AssetFormIOBuildingMappings.formioroom_id;
                    if (roomId != null)
                    {
                        var get_room = _UoW.AssetRepository.GetRoomById(roomId.Value);
                        if (get_room != null)
                        {
                            WOOnboardingAssets.room = get_room.formio_room_name;
                        }
                    }

                    var sectionId = asset_pm.Asset.AssetFormIOBuildingMappings.formiosection_id;
                    if (sectionId != null)
                    {
                        var get_section = _UoW.AssetRepository.GetSectionById(sectionId.Value);
                        if (get_section != null)
                        {
                            WOOnboardingAssets.section = get_section.formio_section_name;
                        }
                    }
                }

                if (requestmodel.is_request_from_assetpm_service)
                {
                    WOOnboardingAssets.tempasset_id = requestmodel.tempasset_id;
                }
                var insert = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Insert(WOOnboardingAssets);
                _UoW.SaveChanges();

                // update assset pm 
                asset_pm.woonboardingassets_id = WOOnboardingAssets.woonboardingassets_id;
                asset_pm.wo_id = WOOnboardingAssets.wo_id;
                asset_pm.status = (int)Status.Schedule;
                asset_pm.modified_at =DateTime.UtcNow;

                ActiveAssetPMWOlineMapping ActiveAssetPMWOlineMapping = new ActiveAssetPMWOlineMapping();
                ActiveAssetPMWOlineMapping.woonboardingassets_id = WOOnboardingAssets.woonboardingassets_id;
                ActiveAssetPMWOlineMapping.asset_pm_id = asset_pm.asset_pm_id;
                ActiveAssetPMWOlineMapping.is_active = true;
                ActiveAssetPMWOlineMapping.is_deleted = false;
                ActiveAssetPMWOlineMapping.created_at = DateTime.UtcNow;

                if (requestmodel.is_request_from_assetpm_service)
                {
                    ActiveAssetPMWOlineMapping.pm_form_output_data = requestmodel.pm_form_output_data;
                }

                if (asset_pm.title.ToLower().Trim().Replace(" ", "").Contains("mechanicalservicing"))
                {
                    var output_json = _UoW.AssetPMsRepository.GetLastCompletedAssetPMFormJson(asset_pm.pm_id.Value,asset_pm.asset_id);
                    if (!String.IsNullOrEmpty(output_json))
                    {
                        dynamic dynamicform1 = Newtonsoft.Json.JsonConvert.DeserializeObject(output_json);
                        object obj1 = dynamicform1.torqueDetails;

                        dynamic torqueDetails = new ExpandoObject();
                        torqueDetails.torqueDetails = obj1;

                        var torque_json_str = Newtonsoft.Json.JsonConvert.SerializeObject(torqueDetails);
                        ActiveAssetPMWOlineMapping.pm_form_output_data = output_json;//torque_json_str;
                    }
                }

                asset_pm.ActiveAssetPMWOlineMapping.Add(ActiveAssetPMWOlineMapping);

                var update = await _UoW.BaseGenericRepository<AssetPMs>().Update(asset_pm);
                _UoW.SaveChanges();

                var get_pm = _UoW.WorkOrderRepository.GetPMById(asset_pm.pm_id.Value);
                
                AddAssetPMWolineResponsemodel addAssetPMWolineResponsemodel = new AddAssetPMWolineResponsemodel();

                addAssetPMWolineResponsemodel.asset_pm_id = asset_pm.asset_pm_id;
                addAssetPMWolineResponsemodel.woonboardingassets_id = WOOnboardingAssets.woonboardingassets_id;
                if (get_pm != null)
                {
                    addAssetPMWolineResponsemodel.pm_inspection_type_id = get_pm.pm_inspection_type_id;
                }
                
                response.Add(addAssetPMWolineResponsemodel);

            }
            return response;
        }

        public GetAssetPMFormByIdResponsemodel GetAssetPMFormById(GetAssetPMFormByIdRequestmodel requestmodel)
        {
            GetAssetPMFormByIdResponsemodel response = new GetAssetPMFormByIdResponsemodel();
            if (requestmodel.asset_pm_id != null)
            {
            AssetPMs get_asset_pm = null;
            if (requestmodel.asset_pm_id != null)
            {
                get_asset_pm = _UoW.WorkOrderRepository.GetAssetPMsbyId(requestmodel.asset_pm_id.Value);
            }
            else
            {
                var get_assetpm_id = _UoW.WorkOrderRepository.GetAssetPMsbyWOLineId(requestmodel.woonboardingassets_id);
                get_asset_pm = _UoW.WorkOrderRepository.GetAssetPMsbyId(get_assetpm_id);
            }
            var get_master_pm = _UoW.WorkOrderRepository.GetpmPmid(get_asset_pm.pm_id.Value);
            if(get_master_pm.pm_inspection_type_id != (int)PMInspectionTypeId.IRThermography) // get pm form only if inspection type is not IR theremal
            {
                var get_master_form = _UoW.WorkOrderRepository.GetPMMasterFormByAssetpm(get_asset_pm.Asset.InspectionTemplateAssetClass.asset_class_code, get_master_pm.PMPlans.plan_name, get_master_pm.title.Replace(" ", ""));
                if (get_master_form != null)
                {
                    response.form_json = get_master_form.form_json;
                    response.asset_pm_id = get_asset_pm.asset_pm_id;

                    response.success = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    response.success = (int)ResponseStatusNumber.PM_Master_Form_not_available;
                }
            }
            else
            {
                response.asset_pm_id = get_asset_pm.asset_pm_id;
                response.success = (int)ResponseStatusNumber.Success;
            }
            
            response.pm_form_output_data = null;
            if (!String.IsNullOrEmpty(get_asset_pm.ActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().pm_form_output_data))
                response.pm_form_output_data = get_asset_pm.ActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().pm_form_output_data;

            }
            else if(requestmodel.temp_asset_pm_id != null)
            {
                TempAssetPMs get_temp_asset_pm = null;
                if (requestmodel.temp_asset_pm_id != null)
                {
                    get_temp_asset_pm = _UoW.WorkOrderRepository.GetTempAssetPMsbyId(requestmodel.temp_asset_pm_id.Value);
                }
                else
                {
                    var get_assetpm_id = _UoW.WorkOrderRepository.GetAssetPMsbyWOLineId(requestmodel.woonboardingassets_id);
                    get_temp_asset_pm = _UoW.WorkOrderRepository.GetTempAssetPMsbyId(get_assetpm_id);
                }
                var get_master_pm = _UoW.WorkOrderRepository.GetpmPmid(get_temp_asset_pm.pm_id.Value);
                if(get_master_pm.pm_inspection_type_id != (int)PMInspectionTypeId.IRThermography)// get pm form only if inspection type is not IR theremal
                {
                    var get_master_form = _UoW.WorkOrderRepository.GetPMMasterFormByAssetpm(get_temp_asset_pm.WOOnboardingAssets.asset_class_code, get_master_pm.PMPlans.plan_name, get_master_pm.title.Replace(" ", ""));
                    if (get_master_form != null)
                    {
                        response.form_json = get_master_form.form_json;

                        response.temp_asset_pm_id = get_temp_asset_pm.temp_asset_pm_id;
                        response.success = (int)ResponseStatusNumber.Success;
                    }
                    else
                    {
                        response.success = (int)ResponseStatusNumber.PM_Master_Form_not_available;
                    }
                }
                else
                {
                    response.temp_asset_pm_id = get_temp_asset_pm.temp_asset_pm_id;
                    response.success = (int)ResponseStatusNumber.Success;
                }
                response.pm_form_output_data = null;
                if (!String.IsNullOrEmpty(get_temp_asset_pm.TempActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().pm_form_output_data))
                    response.pm_form_output_data = get_temp_asset_pm.TempActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().pm_form_output_data;
            }
            return response;
        }
        public GetPMMasterFormByPMidRequestmodel GetPMMasterFormByPMid(Guid pm_id)
        {
            GetPMMasterFormByPMidRequestmodel response = new GetPMMasterFormByPMidRequestmodel();
            var get_master_pm = _UoW.WorkOrderRepository.GetpmPmid(pm_id);

            var get_master_form = _UoW.WorkOrderRepository.GetPMMasterFormByAssetpm(get_master_pm.PMPlans.PMCategory.InspectionTemplateAssetClass.asset_class_code, get_master_pm.PMPlans.plan_name, get_master_pm.title.Replace(" ", ""));

            if (get_master_form != null)
            {
                response.form_json = get_master_form.form_json;
                response.pm_id = pm_id;
                response.pmitemmasterform_id = get_master_form.pmitemmasterform_id;
                response.success = (int)ResponseStatusNumber.Success;
            }
            else
            {
                response.success = (int)ResponseStatusNumber.PM_Master_Form_not_available;
            }

            return response;
        }


        public async Task<int> SubmitPMFormJson(SubmitPMFormJsonRequestmodel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;
            //if pm inspection type is thermography then update IR/visual bucket name
            requestmodel.pm_form_output_data = requestmodel.pm_form_output_data.Replace("conduit-prod-obwoirphotos", "conduit-prod.obwoirphotos");

            if (requestmodel.asset_pm_id != null) // this is for main assetpms
            {
                var get_assetpm = _UoW.WorkOrderRepository.GetAssetPMsbyId(requestmodel.asset_pm_id.Value);

                var get_pm = _UoW.WorkOrderRepository.GetPMById(get_assetpm.pm_id.Value);
                /*if (get_pm != null && get_pm.pm_inspection_type_id!=null && get_pm.pm_inspection_type_id == (int)PMInspectionTypeId.IRThermography)
                {
                    requestmodel.pm_form_output_data = requestmodel.pm_form_output_data.Replace("conduit-prod-obwoirphotos", "conduit-prod.obwoirphotos");
                }*/
                try
                {
                        requestmodel.pm_form_output_data = ChnagePMIRscanImgExtension(get_assetpm.ActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().pm_form_output_data, requestmodel.pm_form_output_data);
                }
                catch(Exception ex)
                {

                }
                get_assetpm.pm_form_output_data = requestmodel.pm_form_output_data;
                get_assetpm.WOOnboardingAssets.status = requestmodel.status;
                get_assetpm.WOOnboardingAssets.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                get_assetpm.WOOnboardingAssets.technician_user_id = UpdatedGenericRequestmodel.CurrentUser.requested_by;
                get_assetpm.WOOnboardingAssets.modified_at = DateTime.UtcNow;
                get_assetpm.WOOnboardingAssets.inspected_at = DateTime.UtcNow;
                if (get_assetpm.status != (int)Status.Completed)
                {
                    get_assetpm.status = (int)Status.InProgress;
                }

            get_assetpm.ActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().pm_form_output_data = requestmodel.pm_form_output_data;
            get_assetpm.ActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().modified_at = DateTime.UtcNow;

                var update = await _UoW.BaseGenericRepository<AssetPMs>().Update(get_assetpm);
                if (update)
                {
                    _UoW.SaveChanges();
                    AddUpdateTempIssueFromWORequestmodel tempIssueRequest = OBWOMakeRequestmodelforWOlineIssue(get_assetpm.woonboardingassets_id.Value);
                    if (tempIssueRequest.list_temp_issue != null && tempIssueRequest.list_temp_issue.Count > 0)
                    {
                        await AddUpdateTempIssueFromWO(tempIssueRequest);
                    }

                    if (tempIssueRequest.is_pm_clear)
                        get_assetpm.is_Asset_PM_fixed = true;
                    else
                        get_assetpm.is_Asset_PM_fixed = false;

                // store additional images 
                if (tempIssueRequest.list_pm_additional_images!=null && tempIssueRequest.list_pm_additional_images.Count > 0)
                {
                    var db_additional_images = get_assetpm.ActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().WOlineAssetPMImagesMapping.ToList();
                    var requested_imges = tempIssueRequest.list_pm_additional_images.Select(x => x.image_name).ToList();
                    var db_images_names = db_additional_images.Select(x => x.image_name).ToList();

                        // insert images if new added
                        var new_imgs_names = requested_imges.Where(x => !db_images_names.Contains(x)).ToList();
                        var new_images = tempIssueRequest.list_pm_additional_images.Where(x => new_imgs_names.Contains(x.image_name)).ToList();
                        foreach (var item in new_images)
                        {
                            WOlineAssetPMImagesMapping WOlineAssetPMImagesMapping = new WOlineAssetPMImagesMapping();
                            WOlineAssetPMImagesMapping.image_name = item.image_name;
                            WOlineAssetPMImagesMapping.created_at = DateTime.UtcNow;
                            WOlineAssetPMImagesMapping.image_type = item.image_type;
                            WOlineAssetPMImagesMapping.pm_image_caption = item.pm_image_caption;
                            get_assetpm.ActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().WOlineAssetPMImagesMapping.Add(WOlineAssetPMImagesMapping);
                        }


                        // update existing image 
                        var exiting_imgs_names = requested_imges.Where(x => db_images_names.Contains(x)).ToList();
                        var existing_images = tempIssueRequest.list_pm_additional_images.Where(x => exiting_imgs_names.Contains(x.image_name)).ToList();
                        foreach (var item in existing_images)
                        {
                            get_assetpm.ActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().WOlineAssetPMImagesMapping.Where(x => x.image_name == item.image_name).FirstOrDefault().pm_image_caption = item.pm_image_caption;
                            get_assetpm.ActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().WOlineAssetPMImagesMapping.Where(x => x.image_name == item.image_name).FirstOrDefault().image_type = item.image_type;
                            get_assetpm.ActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().WOlineAssetPMImagesMapping.Where(x => x.image_name == item.image_name).FirstOrDefault().modified_at = DateTime.UtcNow;
                        }


                        // delete if any image is exist in db but not in request 
                        var delete_imgs_names = db_images_names.Where(x => !requested_imges.Contains(x)).ToList();
                        // var delete_images = db_images_names.Where(x => delete_imgs_names.Contains(x.image_name)).ToList();

                        foreach (var item in delete_imgs_names)
                        {
                            get_assetpm.ActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().WOlineAssetPMImagesMapping.Where(x => x.image_name == item).FirstOrDefault().is_deleted = true;
                            get_assetpm.ActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().WOlineAssetPMImagesMapping.Where(x => x.image_name == item).FirstOrDefault().modified_at = DateTime.UtcNow;
                        }
                    }

                    // store ir visual images if any
                    if (tempIssueRequest.list_pm_ir_scan_images != null && tempIssueRequest.list_pm_ir_scan_images.Count > 0)
                    {
                        // delete all image mapping and insert new 
                        if (get_assetpm.WOOnboardingAssets.IRWOImagesLabelMapping != null && get_assetpm.WOOnboardingAssets.IRWOImagesLabelMapping.Count > 0)
                        {
                            get_assetpm.WOOnboardingAssets.IRWOImagesLabelMapping.Where(x => !x.is_deleted).ToList().ForEach(x => {
                                x.updated_at = DateTime.UtcNow;
                                x.is_deleted = true;
                            });
                        }
                        foreach (var image in tempIssueRequest.list_pm_ir_scan_images)
                        {
                            IRWOImagesLabelMapping IRWOImagesLabelMapping = new IRWOImagesLabelMapping();
                            IRWOImagesLabelMapping.ir_image_label = image.ir_image_label;
                            IRWOImagesLabelMapping.visual_image_label = image.visual_image_label;
                            IRWOImagesLabelMapping.created_at = DateTime.UtcNow;
                            IRWOImagesLabelMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                            IRWOImagesLabelMapping.visual_image_label = image.visual_image_label;
                            IRWOImagesLabelMapping.site_id = get_assetpm.WorkOrders.site_id;
                            IRWOImagesLabelMapping.s3_image_folder_name = get_assetpm.WorkOrders.site_id.ToString() + "/" + get_assetpm.WorkOrders.manual_wo_number;

                            get_assetpm.WOOnboardingAssets.IRWOImagesLabelMapping.Add(IRWOImagesLabelMapping);
                        }
                    }

                    update = await _UoW.BaseGenericRepository<AssetPMs>().Update(get_assetpm);
                    response = (int)ResponseStatusNumber.Success;
                }
            }
            else if (requestmodel.temp_asset_pm_id != null) // this is for temp asset pms
            {
                response = await SubmitTempPMFormJson(requestmodel);
            }
            return response;
        }

        public string ChnagePMIRscanImgExtension(string old_json , string new_json)
        {
            var old_json_ir_scan = IRPMjsonparse(old_json);
            var new_json_ir_scan = IRPMjsonparse(new_json);
            dynamic jsonObject = JObject.Parse(new_json);

            foreach (var photo in new_json_ir_scan)
            {

                var old_ir_img = old_json_ir_scan.Where(x => x.ir_image_label == photo.ir_image_label).FirstOrDefault();
                if (old_ir_img != null)
                {
                    if (old_ir_img.img_extension.ToLower() == photo.img_extension.ToLower())
                    {
                        var old_full_img = old_ir_img.ir_image_label + old_ir_img.img_extension;
                        var new_full_img = photo.ir_image_label + photo.img_extension;

                        // update image name and type in new requested json
                        foreach (JProperty property in jsonObject)
                        {
                            string key = property.Name;
                            if (!String.IsNullOrEmpty(key) && key == "irScanPhotos") // IR/Visual photos
                            {
                                dynamic IRVisualImageListObj = property.Value; // thermalAnamolyDetected object
                                if (IRVisualImageListObj != null)
                                {
                                    foreach (var item in IRVisualImageListObj) // foreach on every images
                                    {
                                        // check IR image
                                        string ir_img = item.irPhoto.Value;
                                        string ir_img_extension = item.type.value;
                                        string ir_img_url = item.imageUrls.irPhoto.Value;
                                        if (old_ir_img.ir_image_label == ir_img && old_ir_img.img_extension.ToLower() == ir_img_extension.ToLower())
                                        {
                                            item.type.value = old_ir_img.img_extension;
                                            item.imageUrls.irPhoto = ir_img_url.Replace(new_full_img, old_full_img);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                var old_visual_img = old_json_ir_scan.Where(x => x.visual_image_label == photo.visual_image_label).FirstOrDefault();
                if (old_visual_img != null)
                {
                    if (old_visual_img.img_extension.ToLower() == photo.img_extension.ToLower())
                    {
                        var old_full_img = old_visual_img.visual_image_label + old_visual_img.img_extension;
                        var new_full_img = photo.ir_image_label + photo.img_extension;

                        // update image name and type in new requested json
                        foreach (JProperty property in jsonObject)
                        {
                            string key = property.Name;
                            if (!String.IsNullOrEmpty(key) && key == "irScanPhotos") // IR/Visual photos
                            {
                                dynamic IRVisualImageListObj = property.Value; // thermalAnamolyDetected object
                                if (IRVisualImageListObj != null)
                                {
                                    foreach (var item in IRVisualImageListObj) // foreach on every images
                                    {
                                        // check IR image
                                        string visual_img = item.visualPhoto.Value;
                                        string visual_img_extension = item.type.value;
                                        string visual_img_url = item.imageUrls.visualPhoto.Value;
                                        if (old_visual_img.ir_image_label == visual_img && old_visual_img.img_extension.ToLower() == visual_img_extension.ToLower())
                                        {
                                            item.type.value = old_visual_img.img_extension;
                                            item.imageUrls.visualPhoto = visual_img_url.Replace(new_full_img, old_full_img);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return Newtonsoft.Json.JsonConvert.SerializeObject(jsonObject);
        }

        public List<IRVisualScanImages> IRPMjsonparse(string json_data)
        {
            var list_pm_ir_scan_images = new List<IRVisualScanImages>();
            if (!String.IsNullOrEmpty(json_data))
            {
               
                try
                {
                    dynamic jsonObject = JObject.Parse(json_data);
                    
                    foreach (JProperty property in jsonObject)
                        {
                            string key = property.Name;
                            if (!String.IsNullOrEmpty(key) && key == "irScanPhotos") // IR/Visual photos
                            {
                                dynamic IRVisualImageListObj = property.Value; // thermalAnamolyDetected object
                                if (IRVisualImageListObj != null)
                                {
                                    
                                    foreach (var item in IRVisualImageListObj)
                                    {
                                        string irPhoto = item.irPhoto;
                                        string visualPhoto = item.visualPhoto;
                                        string img_extention_type = item.type.value;


                                        if (!String.IsNullOrEmpty(irPhoto) || !String.IsNullOrEmpty(visualPhoto))
                                        {
                                            IRVisualScanImages IRVisualScanImages = new IRVisualScanImages();
                                            if (!String.IsNullOrEmpty(irPhoto))
                                            {
                                                IRVisualScanImages.ir_image_label = irPhoto;
                                            }
                                            if (!String.IsNullOrEmpty(visualPhoto))
                                            {
                                                IRVisualScanImages.visual_image_label = visualPhoto;
                                            }
                                        IRVisualScanImages.img_extension = img_extention_type;
                                            list_pm_ir_scan_images.Add(IRVisualScanImages);
                                        }


                                    }
                                }
                            }
                        }
                    
                }
                catch (Exception ex)
                {

                }
            }
            return list_pm_ir_scan_images;
        }

        public async Task<int> SubmitTempPMFormJson(SubmitPMFormJsonRequestmodel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;
            var get_temp_assetpm = _UoW.WorkOrderRepository.GetTempAssetPMsbyIdForsubmit(requestmodel.temp_asset_pm_id.Value);
            get_temp_assetpm.TempActiveAssetPMWOlineMapping.FirstOrDefault().pm_form_output_data = requestmodel.pm_form_output_data;
            get_temp_assetpm.TempActiveAssetPMWOlineMapping.FirstOrDefault().WOOnboardingAssets.status = requestmodel.status;
            get_temp_assetpm.TempActiveAssetPMWOlineMapping.FirstOrDefault().WOOnboardingAssets.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
            get_temp_assetpm.TempActiveAssetPMWOlineMapping.FirstOrDefault().WOOnboardingAssets.technician_user_id = UpdatedGenericRequestmodel.CurrentUser.requested_by;
            get_temp_assetpm.TempActiveAssetPMWOlineMapping.FirstOrDefault().WOOnboardingAssets.modified_at = DateTime.UtcNow;
            get_temp_assetpm.TempActiveAssetPMWOlineMapping.FirstOrDefault().WOOnboardingAssets.inspected_at = DateTime.UtcNow;
            if (get_temp_assetpm.status != (int)Status.Completed)
            {
                get_temp_assetpm.status = (int)Status.InProgress;
            }

            get_temp_assetpm.TempActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().pm_form_output_data = requestmodel.pm_form_output_data;

            var update = await _UoW.BaseGenericRepository<TempAssetPMs>().Update(get_temp_assetpm);
            if (update)
            {
                _UoW.SaveChanges();
                AddUpdateTempIssueFromWORequestmodel tempIssueRequest = OBWOMakeRequestmodelforWOlineIssue(get_temp_assetpm.TempActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().woonboardingassets_id);
                if (tempIssueRequest.list_temp_issue != null && tempIssueRequest.list_temp_issue.Count > 0)
                {
                    await AddUpdateTempIssueFromWO(tempIssueRequest);
                }

                if (tempIssueRequest.is_pm_clear)
                    get_temp_assetpm.is_Asset_PM_fixed = true;
                else
                    get_temp_assetpm.is_Asset_PM_fixed = false;

                // store additional images 
                if (tempIssueRequest.list_pm_additional_images != null && tempIssueRequest.list_pm_additional_images.Count > 0)
                {
                    var db_additional_images = get_temp_assetpm.TempActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().WOlineAssetPMImagesMapping.ToList();
                    var requested_imges = tempIssueRequest.list_pm_additional_images.Select(x => x.image_name).ToList();
                    var db_images_names = db_additional_images.Select(x => x.image_name).ToList();

                    // insert images if new added
                    var new_imgs_names = requested_imges.Where(x => !db_images_names.Contains(x)).ToList();
                    var new_images = tempIssueRequest.list_pm_additional_images.Where(x => new_imgs_names.Contains(x.image_name)).ToList();
                    foreach (var item in new_images)
                    {
                        WOlineAssetPMImagesMapping WOlineAssetPMImagesMapping = new WOlineAssetPMImagesMapping();
                        WOlineAssetPMImagesMapping.image_name = item.image_name;
                        WOlineAssetPMImagesMapping.created_at = DateTime.UtcNow;
                        WOlineAssetPMImagesMapping.image_type = item.image_type;
                        WOlineAssetPMImagesMapping.pm_image_caption = item.pm_image_caption;
                        get_temp_assetpm.TempActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().WOlineAssetPMImagesMapping.Add(WOlineAssetPMImagesMapping);
                    }


                    // update existing image 
                    var exiting_imgs_names = requested_imges.Where(x => db_images_names.Contains(x)).ToList();
                    var existing_images = tempIssueRequest.list_pm_additional_images.Where(x => exiting_imgs_names.Contains(x.image_name)).ToList();
                    foreach (var item in existing_images)
                    {
                        get_temp_assetpm.TempActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().WOlineAssetPMImagesMapping.Where(x => x.image_name == item.image_name).FirstOrDefault().pm_image_caption = item.pm_image_caption;
                        get_temp_assetpm.TempActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().WOlineAssetPMImagesMapping.Where(x => x.image_name == item.image_name).FirstOrDefault().image_type = item.image_type;
                        get_temp_assetpm.TempActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().WOlineAssetPMImagesMapping.Where(x => x.image_name == item.image_name).FirstOrDefault().modified_at = DateTime.UtcNow;
                    }


                    // delete if any image is exist in db but not in request 
                    var delete_imgs_names = db_images_names.Where(x => !requested_imges.Contains(x)).ToList();
                    // var delete_images = db_images_names.Where(x => delete_imgs_names.Contains(x.image_name)).ToList();

                    foreach (var item in delete_imgs_names)
                    {
                        get_temp_assetpm.TempActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().WOlineAssetPMImagesMapping.Where(x => x.image_name == item).FirstOrDefault().is_deleted = true;
                        get_temp_assetpm.TempActiveAssetPMWOlineMapping.Where(x => x.woonboardingassets_id == requestmodel.woonboardingassets_id).FirstOrDefault().WOlineAssetPMImagesMapping.Where(x => x.image_name == item).FirstOrDefault().modified_at = DateTime.UtcNow;
                    }
                }

                // store ir visual images if any
                if (tempIssueRequest.list_pm_ir_scan_images != null && tempIssueRequest.list_pm_ir_scan_images.Count > 0)
                {
                    // delete all image mapping and insert new 
                    if (get_temp_assetpm.TempActiveAssetPMWOlineMapping.FirstOrDefault().WOOnboardingAssets.IRWOImagesLabelMapping != null && get_temp_assetpm.TempActiveAssetPMWOlineMapping.FirstOrDefault().WOOnboardingAssets.IRWOImagesLabelMapping.Count > 0)
                    {
                        get_temp_assetpm.TempActiveAssetPMWOlineMapping.FirstOrDefault().WOOnboardingAssets.IRWOImagesLabelMapping.Where(x => !x.is_deleted).ToList().ForEach(x => {
                            x.updated_at = DateTime.UtcNow;
                            x.is_deleted = true;
                        });
                    }
                    foreach (var image in tempIssueRequest.list_pm_ir_scan_images)
                    {
                        IRWOImagesLabelMapping IRWOImagesLabelMapping = new IRWOImagesLabelMapping();
                        IRWOImagesLabelMapping.ir_image_label = image.ir_image_label;
                        IRWOImagesLabelMapping.visual_image_label = image.visual_image_label;
                        IRWOImagesLabelMapping.created_at = DateTime.UtcNow;
                        IRWOImagesLabelMapping.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                        IRWOImagesLabelMapping.visual_image_label = image.visual_image_label;
                        IRWOImagesLabelMapping.site_id = get_temp_assetpm.TempActiveAssetPMWOlineMapping.FirstOrDefault().WOOnboardingAssets.WorkOrders.site_id;
                        IRWOImagesLabelMapping.s3_image_folder_name = get_temp_assetpm.TempActiveAssetPMWOlineMapping.FirstOrDefault().WOOnboardingAssets.WorkOrders.site_id.ToString() + "/" + get_temp_assetpm.TempActiveAssetPMWOlineMapping.FirstOrDefault().WOOnboardingAssets.WorkOrders.manual_wo_number;

                        get_temp_assetpm.TempActiveAssetPMWOlineMapping.FirstOrDefault().WOOnboardingAssets.IRWOImagesLabelMapping.Add(IRWOImagesLabelMapping);
                    }
                }

                update = await _UoW.BaseGenericRepository<TempAssetPMs>().Update(get_temp_assetpm);
                response = (int)ResponseStatusNumber.Success;
            }
            return response;



        }
        public async Task<int> CreateIssueFromPMJson(WOOnboardingAssets woline)
        {

            try
            {
                var json_data = woline.AssetPMs.pm_form_output_data;
                dynamic jsonObject = Newtonsoft.Json.Linq.JObject.Parse(json_data);

                // Iterate through all properties and retrieve their values
                foreach (Newtonsoft.Json.Linq.JProperty property in jsonObject)
                {
                    string key = property.Name;
                    if (key != "header" && key != "footer")
                    {
                        dynamic value = property.Value;

                        string test = value.test.value.ToString();
                        if (test == "notOk")
                        {
                            string issue_title = key;
                            string issue_desc = value.issueDescription;

                            string resolved_value = value.resolved.value.ToString();

                            dynamic before_photo_list = value.beforePhoto;
                            foreach (var item in before_photo_list)
                            {
                                string photo = item.ToString();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }

            return 1;
        }


        public async Task<int> AddTempLocationData(AddTempLocationDataRequestModel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {
                if (!String.IsNullOrEmpty(requestmodel.location_name))
                {
                    //Add Building Location
                    if (requestmodel.location_type == (int)AddLocationType.Building)
                    {
                        var get_temp_building = _UoW.WorkOrderRepository.GetTempFormIOBuildingByName(requestmodel.location_name, requestmodel.wo_id);
                        if (get_temp_building != null)
                        {
                            return (int)ResponseStatusNumber.AlreadyExists;
                        }
                        else
                        {
                            TempFormIOBuildings tempFormIOBuildings = new TempFormIOBuildings();
                            tempFormIOBuildings.temp_formio_building_name = requestmodel.location_name;
                            tempFormIOBuildings.wo_id = requestmodel.wo_id;
                            tempFormIOBuildings.created_at = DateTime.UtcNow;
                            tempFormIOBuildings.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            tempFormIOBuildings.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var inserttempbuilding = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Insert(tempFormIOBuildings);
                            _UoW.SaveChanges();
                            response = (int)ResponseStatusNumber.Success;
                        }
                    }//Add Floor Location
                    else if (requestmodel.location_type == (int)AddLocationType.Floor)
                    {
                        var get_temp_floor = _UoW.WorkOrderRepository.GetTempFormIOFloorByName(requestmodel.location_name, requestmodel.temp_formiobuilding_id.Value, requestmodel.wo_id);
                        if (get_temp_floor != null)
                        {
                            return (int)ResponseStatusNumber.AlreadyExists;
                        }
                        else
                        {
                            TempFormIOFloors tempFormIOFloors = new TempFormIOFloors();
                            tempFormIOFloors.temp_formio_floor_name = requestmodel.location_name;
                            tempFormIOFloors.temp_formiobuilding_id = requestmodel.temp_formiobuilding_id.Value;
                            tempFormIOFloors.wo_id = requestmodel.wo_id;
                            tempFormIOFloors.created_at = DateTime.UtcNow;
                            tempFormIOFloors.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            tempFormIOFloors.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var insertfloor = await _UoW.BaseGenericRepository<TempFormIOFloors>().Insert(tempFormIOFloors);
                            _UoW.SaveChanges();
                            response = (int)ResponseStatusNumber.Success;
                        }
                    }//Add Room Location
                    else if (requestmodel.location_type == (int)AddLocationType.Room)
                    {
                        var get_temp_room = _UoW.WorkOrderRepository.GetTempFormIORoomByName(requestmodel.location_name, requestmodel.temp_formiofloor_id.Value, requestmodel.wo_id);
                        if (get_temp_room != null)
                        {
                            return (int)ResponseStatusNumber.AlreadyExists;
                        }
                        else
                        {
                            TempFormIORooms tempFormIORooms = new TempFormIORooms();
                            tempFormIORooms.temp_formio_room_name = requestmodel.location_name;
                            tempFormIORooms.temp_formiofloor_id = requestmodel.temp_formiofloor_id.Value;
                            tempFormIORooms.wo_id = requestmodel.wo_id;
                            tempFormIORooms.created_at = DateTime.UtcNow;
                            tempFormIORooms.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            tempFormIORooms.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var insertroom = await _UoW.BaseGenericRepository<TempFormIORooms>().Insert(tempFormIORooms);
                            _UoW.SaveChanges();
                            response = (int)ResponseStatusNumber.Success;
                        }
                    }
                }
            }
            catch (Exception e)
            {
            }
            return response;
        }

        public async Task<int> AddTempLocationDataV2(AddTempLocationDataRequestModel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {
                if (!String.IsNullOrEmpty(requestmodel.location_name))
                {
                    //Add Building Location
                    if (requestmodel.location_type == (int)AddLocationType.Building)
                    {
                        var get_temp_building = _UoW.WorkOrderRepository.GetTempFormIOBuildingByNameV2(requestmodel.building_name);
                        var get_main_building = _UoW.WorkOrderRepository.GetMainFormIOBuildingByName(requestmodel.building_name);
                        if (get_temp_building != null || get_main_building != null)
                        {
                            return (int)ResponseStatusNumber.AlreadyExists;
                        }
                        else
                        {
                            TempFormIOBuildings tempFormIOBuildings = new TempFormIOBuildings();
                            tempFormIOBuildings.temp_formio_building_name = requestmodel.location_name;
                            tempFormIOBuildings.wo_id = requestmodel.wo_id;
                            tempFormIOBuildings.created_at = DateTime.UtcNow;
                            tempFormIOBuildings.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            tempFormIOBuildings.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var inserttempbuilding = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Insert(tempFormIOBuildings);
                            _UoW.SaveChanges();
                            response = (int)ResponseStatusNumber.Success;
                        }
                    }//Add Floor Location
                    else if (requestmodel.location_type == (int)AddLocationType.Floor)
                    {
                        // add building if it is selected from main location 
                        if(requestmodel.temp_formiobuilding_id == Guid.Empty || requestmodel.temp_formiobuilding_id == null)
                        {
                            TempFormIOBuildings tempFormIOBuildings = new TempFormIOBuildings();
                            tempFormIOBuildings.temp_formio_building_name = requestmodel.building_name;
                            tempFormIOBuildings.wo_id = requestmodel.wo_id;
                            tempFormIOBuildings.created_at = DateTime.UtcNow;
                            tempFormIOBuildings.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            tempFormIOBuildings.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var inserttempbuilding = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Insert(tempFormIOBuildings);
                            _UoW.SaveChanges();

                            requestmodel.temp_formiobuilding_id = tempFormIOBuildings.temp_formiobuilding_id;
                        }

                        var get_temp_floor = _UoW.WorkOrderRepository.GetTempFormIOFloorByNameV2(requestmodel.floor_name, requestmodel.building_name);
                        var get_main_floor = _UoW.WorkOrderRepository.GetMainFormIOFloorByName(requestmodel.floor_name, requestmodel.building_name);
                        if (get_temp_floor != null || get_main_floor != null)
                        {
                            return (int)ResponseStatusNumber.AlreadyExists;
                        }
                        else
                        {
                            TempFormIOFloors tempFormIOFloors = new TempFormIOFloors();
                            tempFormIOFloors.temp_formio_floor_name = requestmodel.floor_name;
                            tempFormIOFloors.temp_formiobuilding_id = requestmodel.temp_formiobuilding_id.Value;
                            tempFormIOFloors.wo_id = requestmodel.wo_id;
                            tempFormIOFloors.created_at = DateTime.UtcNow;
                            tempFormIOFloors.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            tempFormIOFloors.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var insertfloor = await _UoW.BaseGenericRepository<TempFormIOFloors>().Insert(tempFormIOFloors);
                            _UoW.SaveChanges();
                            response = (int)ResponseStatusNumber.Success;
                        }
                    }//Add Room Location
                    else if (requestmodel.location_type == (int)AddLocationType.Room)
                    {
                        if (requestmodel.temp_formiobuilding_id == Guid.Empty || requestmodel.temp_formiobuilding_id == null)
                        {
                            TempFormIOBuildings tempFormIOBuildings = new TempFormIOBuildings();
                            tempFormIOBuildings.temp_formio_building_name = requestmodel.building_name;
                            tempFormIOBuildings.wo_id = requestmodel.wo_id;
                            tempFormIOBuildings.created_at = DateTime.UtcNow;
                            tempFormIOBuildings.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            tempFormIOBuildings.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var inserttempbuilding = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Insert(tempFormIOBuildings);
                            _UoW.SaveChanges();

                            requestmodel.temp_formiobuilding_id = tempFormIOBuildings.temp_formiobuilding_id;
                        }
                        if (requestmodel.temp_formiofloor_id == Guid.Empty || requestmodel.temp_formiofloor_id == null)
                        {
                            TempFormIOFloors tempFormIOFloors = new TempFormIOFloors();
                            tempFormIOFloors.temp_formio_floor_name = requestmodel.floor_name;
                            tempFormIOFloors.temp_formiobuilding_id = requestmodel.temp_formiobuilding_id.Value;
                            tempFormIOFloors.wo_id = requestmodel.wo_id;
                            tempFormIOFloors.created_at = DateTime.UtcNow;
                            tempFormIOFloors.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            tempFormIOFloors.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var insertfloor = await _UoW.BaseGenericRepository<TempFormIOFloors>().Insert(tempFormIOFloors);
                            _UoW.SaveChanges();

                            requestmodel.temp_formiofloor_id = tempFormIOFloors.temp_formiofloor_id;
                        }


                        var get_temp_room = _UoW.WorkOrderRepository.GetTempFormIORoomByNameV2(requestmodel.room_name, requestmodel.floor_name, requestmodel.building_name);
                        var get_main_floor = _UoW.WorkOrderRepository.GetMainFormIORoomByName(requestmodel.room_name,requestmodel.floor_name, requestmodel.building_name);
                        if (get_temp_room != null || get_main_floor != null)
                        {
                            return (int)ResponseStatusNumber.AlreadyExists;
                        }
                        else
                        {
                            TempFormIORooms tempFormIORooms = new TempFormIORooms();
                            tempFormIORooms.temp_formio_room_name = requestmodel.room_name;
                            tempFormIORooms.temp_formiofloor_id = requestmodel.temp_formiofloor_id.Value;
                            tempFormIORooms.wo_id = requestmodel.wo_id;
                            tempFormIORooms.created_at = DateTime.UtcNow;
                            tempFormIORooms.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            tempFormIORooms.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                            var insertroom = await _UoW.BaseGenericRepository<TempFormIORooms>().Insert(tempFormIORooms);
                            _UoW.SaveChanges();
                            response = (int)ResponseStatusNumber.Success;
                        }
                    }
                }
            }
            catch (Exception e)
            {
            }
            return response;
        }

        public async Task<int> AddNewTempMasterLocationData(AddTempMasterLocationDataRequestModel requestModel)
        {
            int res = (int)ResponseStatusNumber.Error;
            try
            {
                if (requestModel.location_type == (int)AddLocationType.Building)
                {
                    //var get_main_building = _UoW.WorkOrderRepository.GetMainFormIOBuildingByName(requestModel.building_name);
                    var get_temp_masterbuilding = _UoW.WorkOrderRepository.GetTempMasterBuildingByName(requestModel.building_name);
                    if (get_temp_masterbuilding!=null)
                    {
                        requestModel.temp_master_building_id = get_temp_masterbuilding.temp_master_building_id;
                        //return (int)ResponseStatusNumber.AlreadyExists;
                    }
                    else
                    {
                        TempMasterBuilding TempMasterBuilding = new TempMasterBuilding();
                        TempMasterBuilding.temp_master_building_name = requestModel.location_name;
                        TempMasterBuilding.is_deleted = false;
                        TempMasterBuilding.created_at = DateTime.UtcNow;
                        TempMasterBuilding.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                        var inserttempbuilding = await _UoW.BaseGenericRepository<TempMasterBuilding>().Insert(TempMasterBuilding);
                        _UoW.SaveChanges();
                        requestModel.temp_master_building_id = TempMasterBuilding.temp_master_building_id;
                    }
                    var res2 = await AddTempMasterLocationWOMappings(requestModel.wo_id, requestModel.temp_master_building_id.Value, (int)AddLocationType.Building);
                    res = res2.Item2;
                }
                else if (requestModel.location_type == (int)AddLocationType.Floor)
                {
                    if (requestModel.temp_master_building_id == null || requestModel.temp_master_building_id==Guid.Empty)
                    {
                        TempMasterBuilding TempMasterBuilding = new TempMasterBuilding();
                        TempMasterBuilding.temp_master_building_name = requestModel.building_name;
                        TempMasterBuilding.is_deleted = false;
                        TempMasterBuilding.created_at = DateTime.UtcNow;
                        TempMasterBuilding.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                        var inserttempbuilding = await _UoW.BaseGenericRepository<TempMasterBuilding>().Insert(TempMasterBuilding);
                        _UoW.SaveChanges();

                        requestModel.temp_master_building_id = TempMasterBuilding.temp_master_building_id;
                    }

                    await AddTempMasterLocationWOMappings(requestModel.wo_id, requestModel.temp_master_building_id.Value, (int)AddLocationType.Building);

                    //var get_main_floor = _UoW.WorkOrderRepository.GetMainFormIOFloorByName(requestModel.floor_name, requestModel.building_name);
                    var get_temp_masterfloor = _UoW.WorkOrderRepository.GetTempMasterFloorByName(requestModel.floor_name, requestModel.building_name);
                    if (get_temp_masterfloor!=null)
                    {
                        requestModel.temp_master_floor_id = get_temp_masterfloor.temp_master_floor_id;
                        //return (int)ResponseStatusNumber.AlreadyExists;
                    }
                    else
                    {
                        TempMasterFloor TempMasterFloor = new TempMasterFloor();
                        TempMasterFloor.temp_master_floor_name = requestModel.location_name;
                        TempMasterFloor.temp_master_building_id = requestModel.temp_master_building_id.Value;
                        TempMasterFloor.is_deleted = false;
                        TempMasterFloor.created_at = DateTime.UtcNow;
                        TempMasterFloor.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                        var insert_tempmasterfloor = await _UoW.BaseGenericRepository<TempMasterFloor>().Insert(TempMasterFloor);
                        _UoW.SaveChanges();
                        requestModel.temp_master_floor_id = TempMasterFloor.temp_master_floor_id;
                    }
                    var res2 = await AddTempMasterLocationWOMappings(requestModel.wo_id, requestModel.temp_master_floor_id.Value, (int)AddLocationType.Floor);
                    res = res2.Item2;
                }
                else if (requestModel.location_type == (int)AddLocationType.Room)
                {
                    if (requestModel.temp_master_building_id == null || requestModel.temp_master_building_id == Guid.Empty)
                    {
                        TempMasterBuilding TempMasterBuilding = new TempMasterBuilding();
                        TempMasterBuilding.temp_master_building_name = requestModel.building_name;
                        TempMasterBuilding.is_deleted = false;
                        TempMasterBuilding.created_at = DateTime.UtcNow;
                        TempMasterBuilding.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                        var inserttempbuilding = await _UoW.BaseGenericRepository<TempMasterBuilding>().Insert(TempMasterBuilding);
                        _UoW.SaveChanges();

                        requestModel.temp_master_building_id = TempMasterBuilding.temp_master_building_id;
                    }

                    await AddTempMasterLocationWOMappings(requestModel.wo_id, requestModel.temp_master_building_id.Value, (int)AddLocationType.Building);

                    if (requestModel.temp_master_floor_id == null || requestModel.temp_master_floor_id == Guid.Empty)
                    {
                        TempMasterFloor TempMasterFloor = new TempMasterFloor();
                        TempMasterFloor.temp_master_floor_name = requestModel.floor_name;
                        TempMasterFloor.temp_master_building_id = requestModel.temp_master_building_id.Value;
                        TempMasterFloor.is_deleted = false;
                        TempMasterFloor.created_at = DateTime.UtcNow;
                        TempMasterFloor.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                        var insert_tempmasterfloor = await _UoW.BaseGenericRepository<TempMasterFloor>().Insert(TempMasterFloor);
                        _UoW.SaveChanges();

                        requestModel.temp_master_floor_id = TempMasterFloor.temp_master_floor_id;
                    }

                    await AddTempMasterLocationWOMappings(requestModel.wo_id, requestModel.temp_master_floor_id.Value, (int)AddLocationType.Floor);

                    //var get_main_room = _UoW.WorkOrderRepository.GetMainFormIORoomByName(requestModel.room_name, requestModel.floor_name, requestModel.building_name);
                    var get_temp_masterroom = _UoW.WorkOrderRepository.GetTempMasterRoomByName(requestModel.room_name, requestModel.floor_name, requestModel.building_name);
                    if (get_temp_masterroom != null)
                    {
                        requestModel.temp_master_room_id = get_temp_masterroom.temp_master_room_id;
                        //return (int)ResponseStatusNumber.AlreadyExists;
                    }
                    else
                    {
                        TempMasterRoom TempMasterRoom = new TempMasterRoom();
                        TempMasterRoom.temp_master_room_name = requestModel.location_name;
                        TempMasterRoom.temp_master_floor_id = requestModel.temp_master_floor_id.Value;
                        TempMasterRoom.room_conditions = requestModel.room_conditions;
                        TempMasterRoom.access_notes = requestModel.access_notes;
                        TempMasterRoom.issue = requestModel.issue; 
                        TempMasterRoom.is_deleted = false;
                        TempMasterRoom.created_at = DateTime.UtcNow;
                        TempMasterRoom.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                        var insert_tempmasterroom = await _UoW.BaseGenericRepository<TempMasterRoom>().Insert(TempMasterRoom);
                        _UoW.SaveChanges();
                        requestModel.temp_master_room_id = TempMasterRoom.temp_master_room_id;
                    }
                    var res2 = await AddTempMasterLocationWOMappings(requestModel.wo_id, requestModel.temp_master_room_id.Value, (int)AddLocationType.Room);
                    res = res2.Item2;
                }
            }
            catch (Exception e)
            {
            }
            return res;
        }

        public async Task<int> AddExistingTempMasterLocation(AddExistingtoTempLocationRequestmodel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;
            Guid temp_master_building_id = Guid.Empty;
            Guid temp_master_floor_id = Guid.Empty;
            try
            {
                if (!String.IsNullOrEmpty(requestmodel.formio_building_name))
                {
                    AddTempMasterLocationByNameRequestModel _AddTempMasterLocationByNameRequestModel = new AddTempMasterLocationByNameRequestModel();
                    _AddTempMasterLocationByNameRequestModel.wo_id = requestmodel.wo_id;
                    _AddTempMasterLocationByNameRequestModel.location_name = requestmodel.formio_building_name;
                    _AddTempMasterLocationByNameRequestModel.formiobuilding_id = requestmodel.formiobuilding_id;
                    _AddTempMasterLocationByNameRequestModel.location_type = (int)AddLocationType.Building;

                    var res = await AddTempMasterLocationByName(_AddTempMasterLocationByNameRequestModel);
                    temp_master_building_id = Guid.Parse(res.Item1);
                    response = res.Item2;
                }
                if (!String.IsNullOrEmpty(requestmodel.formio_floor_name))
                {
                    AddTempMasterLocationByNameRequestModel _AddTempMasterLocationByNameRequestModel = new AddTempMasterLocationByNameRequestModel();
                    _AddTempMasterLocationByNameRequestModel.wo_id = requestmodel.wo_id;
                    _AddTempMasterLocationByNameRequestModel.temp_master_building_id = temp_master_building_id;
                    _AddTempMasterLocationByNameRequestModel.building_name = requestmodel.formio_building_name;
                    _AddTempMasterLocationByNameRequestModel.location_name = requestmodel.formio_floor_name;
                    _AddTempMasterLocationByNameRequestModel.formiofloor_id = requestmodel.formiofloor_id;
                    _AddTempMasterLocationByNameRequestModel.location_type = (int)AddLocationType.Floor;

                    var res = await AddTempMasterLocationByName(_AddTempMasterLocationByNameRequestModel);
                    temp_master_floor_id = Guid.Parse(res.Item1);
                    response = res.Item2;
                }
                if (!String.IsNullOrEmpty(requestmodel.formio_room_name))
                {
                    AddTempMasterLocationByNameRequestModel _AddTempMasterLocationByNameRequestModel = new AddTempMasterLocationByNameRequestModel();
                    _AddTempMasterLocationByNameRequestModel.wo_id = requestmodel.wo_id;
                    _AddTempMasterLocationByNameRequestModel.temp_master_floor_id = temp_master_floor_id;
                    _AddTempMasterLocationByNameRequestModel.building_name = requestmodel.formio_building_name;
                    _AddTempMasterLocationByNameRequestModel.floor_name = requestmodel.formio_floor_name;
                    _AddTempMasterLocationByNameRequestModel.location_name = requestmodel.formio_room_name;
                    _AddTempMasterLocationByNameRequestModel.formioroom_id = requestmodel.formioroom_id;
                    _AddTempMasterLocationByNameRequestModel.location_type = (int)AddLocationType.Room;

                    var res = await AddTempMasterLocationByName(_AddTempMasterLocationByNameRequestModel);
                    //temp_master_room_id = Guid.Parse(res.Item1);
                    response = res.Item2;
                }
                //response = (int)ResponseStatusNumber.Success;
            }
            catch (Exception e)
            {
            }
            return response;
        }

        public async Task<(string,int)> AddTempMasterLocationWOMappings(Guid wo_id,Guid location_id,int location_type)
        {
            string res_id = location_id.ToString();
            int res_int = (int)ResponseStatusNumber.Error;

            try
            {
                if (location_type == (int)AddLocationType.Building)
                {
                    var masterTempBuilding = _UoW.WorkOrderRepository.GetTempMasterBuildingWOMappingById(location_id, wo_id);
                    if (masterTempBuilding == null)
                    {
                        TempMasterBuildingWOMapping TempMasterBuildingWOMapping = new TempMasterBuildingWOMapping();
                        TempMasterBuildingWOMapping.temp_master_building_id = location_id;
                        TempMasterBuildingWOMapping.wo_id = wo_id;
                        TempMasterBuildingWOMapping.is_deleted = false;
                        TempMasterBuildingWOMapping.created_at = DateTime.UtcNow;

                        var insert = await _UoW.BaseGenericRepository<TempMasterBuildingWOMapping>().Insert(TempMasterBuildingWOMapping);
                        _UoW.SaveChanges();
                        res_id = TempMasterBuildingWOMapping.temp_master_building_id.ToString();
                        res_int = (int)ResponseStatusNumber.Success;
                    }
                    else
                    {
                        res_int = (int)ResponseStatusNumber.AlreadyExists;
                    }
                }
                else if (location_type == (int)AddLocationType.Floor)
                {
                    var masterTempFloor = _UoW.WorkOrderRepository.GetTempMasterFloorWOMappingById(location_id, wo_id);
                    if (masterTempFloor == null)
                    {
                        TempMasterFloorWOMapping TempMasterFloorWOMapping = new TempMasterFloorWOMapping();
                        TempMasterFloorWOMapping.temp_master_floor_id = location_id;
                        TempMasterFloorWOMapping.wo_id = wo_id;
                        TempMasterFloorWOMapping.is_deleted = false;
                        TempMasterFloorWOMapping.created_at = DateTime.UtcNow;

                        var insert = await _UoW.BaseGenericRepository<TempMasterFloorWOMapping>().Insert(TempMasterFloorWOMapping);
                        _UoW.SaveChanges();
                        res_id = TempMasterFloorWOMapping.temp_master_floor_id.ToString();
                        res_int = (int)ResponseStatusNumber.Success;
                    }
                    else
                    {
                        res_int = (int)ResponseStatusNumber.AlreadyExists;
                    }
                }
                else if (location_type == (int)AddLocationType.Room)
                {
                    var masterTempRoom = _UoW.WorkOrderRepository.GetTempMasterRoomWOMappingById(location_id, wo_id);
                    if (masterTempRoom == null)
                    {
                        TempMasterRoomWOMapping TempMasterRoomWOMapping = new TempMasterRoomWOMapping();
                        TempMasterRoomWOMapping.temp_master_room_id = location_id;
                        TempMasterRoomWOMapping.wo_id = wo_id;
                        TempMasterRoomWOMapping.is_deleted = false;
                        TempMasterRoomWOMapping.created_at = DateTime.UtcNow;

                        var insert = await _UoW.BaseGenericRepository<TempMasterRoomWOMapping>().Insert(TempMasterRoomWOMapping);
                        _UoW.SaveChanges();
                        res_id = TempMasterRoomWOMapping.temp_master_room_id.ToString();
                        res_int = (int)ResponseStatusNumber.Success;
                    }
                    else
                    {
                        res_int = (int)ResponseStatusNumber.AlreadyExists;
                    }
                }
            }
            catch(Exception e)
            {
            }
            return (res_id, res_int);
        }
        public async Task<(string, int)> AddTempMasterLocationByName(AddTempMasterLocationByNameRequestModel requestModel)
        {
            string response = null;
            Guid? location_id = null;
            int res_int = (int)ResponseStatusNumber.Success;

            try
            {
                if (requestModel.location_type == (int)AddLocationType.Building)
                {
                    var get_temp_masterbuilding = _UoW.WorkOrderRepository.GetTempMasterBuildingByName(requestModel.location_name);
                    if (get_temp_masterbuilding != null)
                    {
                        location_id = get_temp_masterbuilding.temp_master_building_id;
                    }
                    else
                    {
                        TempMasterBuilding TempMasterBuilding = new TempMasterBuilding();
                        TempMasterBuilding.temp_master_building_name = requestModel.location_name;
                        TempMasterBuilding.formiobuilding_id = requestModel.formiobuilding_id;
                        TempMasterBuilding.is_deleted = false;
                        TempMasterBuilding.created_at = DateTime.UtcNow;
                        TempMasterBuilding.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                        var inserttempbuilding = await _UoW.BaseGenericRepository<TempMasterBuilding>().Insert(TempMasterBuilding);
                        _UoW.SaveChanges();

                        location_id = TempMasterBuilding.temp_master_building_id;
                    }
                    response = location_id.ToString();

                    var res2 = await AddTempMasterLocationWOMappings(requestModel.wo_id, location_id.Value, (int)AddLocationType.Building);
                    res_int = res2.Item2;
                }
                else if (requestModel.location_type == (int)AddLocationType.Floor)
                {
                    var get_temp_masterfloor = _UoW.WorkOrderRepository.GetTempMasterFloorByName(requestModel.location_name, requestModel.building_name);
                    if (get_temp_masterfloor != null)
                    {
                        location_id = get_temp_masterfloor.temp_master_floor_id;
                    }
                    else
                    {
                        TempMasterFloor TempMasterFloor = new TempMasterFloor();
                        TempMasterFloor.temp_master_building_id = requestModel.temp_master_building_id.Value;
                        TempMasterFloor.temp_master_floor_name = requestModel.location_name;
                        TempMasterFloor.formiofloor_id = requestModel.formiofloor_id;
                        TempMasterFloor.is_deleted = false;
                        TempMasterFloor.created_at = DateTime.UtcNow;
                        TempMasterFloor.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                        var inserttempfloor = await _UoW.BaseGenericRepository<TempMasterFloor>().Insert(TempMasterFloor);
                        _UoW.SaveChanges();

                        location_id = TempMasterFloor.temp_master_floor_id;
                    }
                    response = location_id.ToString();

                    var res2 = await AddTempMasterLocationWOMappings(requestModel.wo_id, location_id.Value, (int)AddLocationType.Floor);
                    res_int = res2.Item2;
                }
                else if (requestModel.location_type == (int)AddLocationType.Room)
                {
                    var get_temp_masterroom = _UoW.WorkOrderRepository.GetTempMasterRoomByName(requestModel.location_name, requestModel.floor_name, requestModel.building_name);
                    if (get_temp_masterroom != null)
                    {
                        location_id = get_temp_masterroom.temp_master_room_id;
                    }
                    else
                    {
                        TempMasterRoom TempMasterRoom = new TempMasterRoom();
                        TempMasterRoom.temp_master_floor_id = requestModel.temp_master_floor_id.Value;
                        TempMasterRoom.temp_master_room_name = requestModel.location_name;
                        TempMasterRoom.formioroom_id = requestModel.formioroom_id;
                        TempMasterRoom.is_deleted = false;
                        TempMasterRoom.created_at = DateTime.UtcNow;
                        TempMasterRoom.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                        var inserttemproom = await _UoW.BaseGenericRepository<TempMasterRoom>().Insert(TempMasterRoom);
                        _UoW.SaveChanges();

                        location_id = TempMasterRoom.temp_master_room_id;
                    }
                    response = location_id.ToString();

                    var res2 = await AddTempMasterLocationWOMappings(requestModel.wo_id, location_id.Value, (int)AddLocationType.Room);
                    res_int = res2.Item2;
                }

            }
            catch (Exception e)
            {
            }
            return (response, res_int);
        }

        public async Task<string> AddTempMasterLocationByName_V2Script(AddTempMasterLocationByNameRequestModel requestModel,Guid site_id)
        {
            string response = null;
            Guid? location_id = null;

            try
            {
                if (requestModel.location_type == (int)AddLocationType.Building)
                {
                    var get_temp_masterbuilding = _UoW.WorkOrderRepository.GetTempMasterBuildingByName_V2Script(requestModel.location_name,site_id);
                    if (get_temp_masterbuilding != null)
                    {
                        location_id = get_temp_masterbuilding.temp_master_building_id;
                    }
                    else
                    {
                        TempMasterBuilding TempMasterBuilding = new TempMasterBuilding();
                        TempMasterBuilding.temp_master_building_name = requestModel.location_name;
                        TempMasterBuilding.formiobuilding_id = requestModel.formiobuilding_id;
                        TempMasterBuilding.is_deleted = false;
                        TempMasterBuilding.created_at = DateTime.UtcNow;
                        TempMasterBuilding.site_id = site_id;//Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                        var inserttempbuilding = await _UoW.BaseGenericRepository<TempMasterBuilding>().Insert(TempMasterBuilding);
                        _UoW.SaveChanges();

                        location_id = TempMasterBuilding.temp_master_building_id;
                    }
                    response = location_id.ToString();

                    await AddTempMasterLocationWOMappings(requestModel.wo_id, location_id.Value, (int)AddLocationType.Building);
                }
                else if (requestModel.location_type == (int)AddLocationType.Floor)
                {
                    var get_temp_masterfloor = _UoW.WorkOrderRepository.GetTempMasterFloorByName_V2Script(requestModel.location_name, requestModel.building_name,site_id);
                    if (get_temp_masterfloor != null)
                    {
                        location_id = get_temp_masterfloor.temp_master_floor_id;
                    }
                    else
                    {
                        TempMasterFloor TempMasterFloor = new TempMasterFloor();
                        TempMasterFloor.temp_master_building_id = requestModel.temp_master_building_id.Value;
                        TempMasterFloor.temp_master_floor_name = requestModel.location_name;
                        TempMasterFloor.formiofloor_id = requestModel.formiofloor_id;
                        TempMasterFloor.is_deleted = false;
                        TempMasterFloor.created_at = DateTime.UtcNow;
                        TempMasterFloor.site_id = site_id;//Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                        var inserttempfloor = await _UoW.BaseGenericRepository<TempMasterFloor>().Insert(TempMasterFloor);
                        _UoW.SaveChanges();

                        location_id = TempMasterFloor.temp_master_floor_id;
                    }
                    response = location_id.ToString();

                    await AddTempMasterLocationWOMappings(requestModel.wo_id, location_id.Value, (int)AddLocationType.Floor);
                }
                else if (requestModel.location_type == (int)AddLocationType.Room)
                {
                    var get_temp_masterroom = _UoW.WorkOrderRepository.GetTempMasterRoomByName_V2Script(requestModel.location_name, requestModel.floor_name, requestModel.building_name,site_id);
                    if (get_temp_masterroom != null)
                    {
                        location_id = get_temp_masterroom.temp_master_room_id;
                    }
                    else
                    {
                        TempMasterRoom TempMasterRoom = new TempMasterRoom();
                        TempMasterRoom.temp_master_floor_id = requestModel.temp_master_floor_id.Value;
                        TempMasterRoom.temp_master_room_name = requestModel.location_name;
                        TempMasterRoom.formioroom_id = requestModel.formioroom_id;
                        TempMasterRoom.is_deleted = false;
                        TempMasterRoom.created_at = DateTime.UtcNow;
                        TempMasterRoom.site_id = site_id;//Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                        var inserttemproom = await _UoW.BaseGenericRepository<TempMasterRoom>().Insert(TempMasterRoom);
                        _UoW.SaveChanges();

                        location_id = TempMasterRoom.temp_master_room_id;
                    }
                    response = location_id.ToString();

                    await AddTempMasterLocationWOMappings(requestModel.wo_id, location_id.Value, (int)AddLocationType.Room);
                }

            }
            catch (Exception e)
            {
            }
            return response;
        }

        public async Task<int> AddExistingtoTempLocation(AddExistingtoTempLocationRequestmodel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;
            if (requestmodel.formiobuilding_id != null && requestmodel.formiobuilding_id > 0)
            {
                var check_building_exist = _UoW.WorkOrderRepository.IsExistTempBuildingToAdd(requestmodel.wo_id, requestmodel.formiobuilding_id.Value);
                if (check_building_exist == null) // if building is not added then insert
                {
                    TempFormIOBuildings TempFormIOBuildings = new TempFormIOBuildings();
                    TempFormIOBuildings.wo_id = requestmodel.wo_id;
                    TempFormIOBuildings.temp_formio_building_name = requestmodel.formio_building_name;
                    TempFormIOBuildings.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    TempFormIOBuildings.formiobuilding_id = requestmodel.formiobuilding_id;
                    TempFormIOBuildings.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                    TempFormIOBuildings.created_at = DateTime.UtcNow;
                    var insert = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Insert(TempFormIOBuildings);
                    _UoW.SaveChanges();
                    response = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    response = (int)ResponseStatusNumber.AlreadyExists;
                }

            }
            if (requestmodel.formiofloor_id != null && requestmodel.formiofloor_id > 0)
            {
                var check_floor_exist = _UoW.WorkOrderRepository.IsExistTempFloorToAdd(requestmodel.wo_id, requestmodel.formiofloor_id.Value);
                if (check_floor_exist == null) // if building is not added then insert
                {
                    var check_building_exist = _UoW.WorkOrderRepository.IsExistTempBuildingToAdd(requestmodel.wo_id, requestmodel.formiobuilding_id.Value);

                    TempFormIOFloors TempFormIOFloors = new TempFormIOFloors();
                    TempFormIOFloors.wo_id = requestmodel.wo_id;
                    TempFormIOFloors.temp_formio_floor_name = requestmodel.formio_floor_name;
                    TempFormIOFloors.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    TempFormIOFloors.formiofloor_id = requestmodel.formiofloor_id;
                    TempFormIOFloors.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                    TempFormIOFloors.temp_formiobuilding_id = check_building_exist.temp_formiobuilding_id;
                    TempFormIOFloors.created_at = DateTime.UtcNow;
                    var insert = await _UoW.BaseGenericRepository<TempFormIOFloors>().Insert(TempFormIOFloors);
                    _UoW.SaveChanges();
                    response = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    response = (int)ResponseStatusNumber.AlreadyExists;
                }
            }
            if (requestmodel.formioroom_id != null && requestmodel.formioroom_id > 0)
            {
                var check_room_exist = _UoW.WorkOrderRepository.IsExistTempRoomsToAdd(requestmodel.wo_id, requestmodel.formioroom_id.Value);
                if (check_room_exist == null) // if building is not added then insert
                {
                    var get_floor = _UoW.WorkOrderRepository.IsExistTempFloorToAdd(requestmodel.wo_id, requestmodel.formiofloor_id.Value);

                    TempFormIORooms TempFormIORooms = new TempFormIORooms();
                    TempFormIORooms.wo_id = requestmodel.wo_id;
                    TempFormIORooms.temp_formio_room_name = requestmodel.formio_room_name;
                    TempFormIORooms.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    TempFormIORooms.formioroom_id = requestmodel.formioroom_id;
                    TempFormIORooms.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                    TempFormIORooms.temp_formiofloor_id = get_floor.temp_formiofloor_id;
                    TempFormIORooms.created_at = DateTime.UtcNow;
                    var insert = await _UoW.BaseGenericRepository<TempFormIORooms>().Insert(TempFormIORooms);
                    _UoW.SaveChanges();
                    response = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    response = (int)ResponseStatusNumber.AlreadyExists;
                }
            }

            return response;
        }
        public GetTempLocationHierarchyForWOResponseModel GetTempLocationHierarchyForWO(Guid wo_id, string search_string)
        {
            GetTempLocationHierarchyForWOResponseModel response = new GetTempLocationHierarchyForWOResponseModel();
            try
            {
                var get_temp_locations = _UoW.WorkOrderRepository.GetTempLocationHierarchyForWO(wo_id, search_string);
                response.temp_buildings = _mapper.Map<List<temp_WOlineBuildings>>(get_temp_locations);
            }
            catch (Exception e)
            {
            }
            return response;
        }

        public GetTempLocationHierarchyForWOResponseModel GetTempLocationHierarchyForWOV2(Guid wo_id, string search_string)
        {
            GetTempLocationHierarchyForWOResponseModel response = new GetTempLocationHierarchyForWOResponseModel();
            try
            {
                var get_temp_buildings = _UoW.WorkOrderRepository.GetTempBuildingv2();
                var get_main_buildings = _UoW.WorkOrderRepository.GetMainBuildingv2(get_temp_buildings.Select(x=>x.temp_formio_building_name).ToList());
                response.temp_buildings = _mapper.Map<List<temp_WOlineBuildings>>(get_temp_buildings);
                var main_to_temp_mapping = _mapper.Map<List<temp_WOlineBuildings>>(get_main_buildings);
                response.temp_buildings.AddRange(main_to_temp_mapping);

                response.temp_buildings.ForEach(x =>
                {
                    // get floors by building name
                    // get temp floors 
                    var get_temp_floors = _UoW.WorkOrderRepository.GetTempFloorsv2(x.temp_formio_building_name);
                    var get_main_floors = _UoW.WorkOrderRepository.GetMainFloorsv2(x.temp_formio_building_name, get_temp_floors.Select(x => x.temp_formio_floor_name).ToList());
                    x.temp_floors = _mapper.Map<List<temp_WOlineFloors>>(get_temp_floors);
                    var main_floor_to_temp = _mapper.Map<List<temp_WOlineFloors>>(get_main_floors);
                    x.temp_floors.AddRange(main_floor_to_temp);

                    /// get rooms by floors
                    x.temp_floors.ForEach(floor =>
                    {
                        floor.temp_formio_building_name = x.temp_formio_building_name;
                        var get_temp_rooms = _UoW.WorkOrderRepository.GetTempRoomsv2(floor.temp_formio_floor_name, x.temp_formio_building_name);
                        var get_main_roomss = _UoW.WorkOrderRepository.GetMainRoomsv2(floor.temp_formio_floor_name, x.temp_formio_building_name, get_temp_rooms.Select(x => x.temp_formio_room_name).ToList());
                        floor.temp_rooms = _mapper.Map<List<temp_WOlineRooms>>(get_temp_rooms);
                        var main_rooms_to_temp = _mapper.Map<List<temp_WOlineRooms>>(get_main_roomss);
                        floor.temp_rooms.AddRange(main_rooms_to_temp);
                        floor.temp_rooms.ForEach(room =>
                        {
                            room.temp_formio_floor_name = floor.temp_formio_floor_name;
                            room.temp_formio_building_name = x.temp_formio_building_name;
                        });
                    });
                });


                // remove defualt location as new requiremtn we will only show active location in which wolines are exist
                /*
                var is_default_building_exist = response.temp_buildings.Where(x => x.temp_formio_building_name.ToLower().Trim() == "default").FirstOrDefault();
                if(is_default_building_exist == null) // if building is not there then insert 
                {
                    temp_WOlineBuildings temp_WOlineBuildings = new temp_WOlineBuildings();
                    temp_WOlineBuildings.temp_formio_building_name = "Default";
                    temp_WOlineBuildings.temp_floors = new List<temp_WOlineFloors>();
                    response.temp_buildings.Add(temp_WOlineBuildings);
                }
                var is_default_floor_exist = response.temp_buildings.Where(x => x.temp_formio_building_name.ToLower().Trim() == "default").FirstOrDefault().temp_floors.Where(x => x.temp_formio_floor_name.ToLower().Trim() == "default").FirstOrDefault();
                if (is_default_floor_exist == null) // if building is not there then insert 
                {
                    temp_WOlineFloors temp_WOlineFloors = new temp_WOlineFloors();
                    temp_WOlineFloors.temp_formio_building_name = "Default";
                    temp_WOlineFloors.temp_rooms = new List<temp_WOlineRooms>();
                    response.temp_buildings.Where(x => x.temp_formio_building_name.ToLower().Trim() == "default").FirstOrDefault().temp_floors.Add(temp_WOlineFloors);
                }
                var is_default_room_exist = response.temp_buildings.Where(x => x.temp_formio_building_name.ToLower().Trim() == "default").FirstOrDefault()
                    .temp_floors.Where(x => x.temp_formio_floor_name.ToLower().Trim() == "default").FirstOrDefault()
                    .temp_rooms.Where(x=>x.temp_formio_room_name.ToLower().Trim() == "default");
                if (is_default_room_exist == null) // if building is not there then insert 
                {
                    temp_WOlineRooms temp_WOlineRooms = new temp_WOlineRooms();
                    temp_WOlineRooms.temp_formio_room_name = "Default";
                    response.temp_buildings.Where(x => x.temp_formio_building_name.ToLower().Trim() == "default").FirstOrDefault()
                   .temp_floors.Where(x => x.temp_formio_floor_name.ToLower().Trim() == "default").FirstOrDefault()
                   .temp_rooms.Add(temp_WOlineRooms);
                }
                */


                // add 1-100 floors explicitly 
                List<string> pre_floor_list = new List<string> { "Basement", "Ground" };
                for (int i = 1; i <= 100; i++)
                {
                    pre_floor_list.Add("Floor - " + i.ToString());
                }
                foreach (var buiding in response.temp_buildings)
                {
                    if (buiding.temp_floors != null)
                    {
                        var existing_floor = buiding.temp_floors.Where(x => !String.IsNullOrEmpty(x.temp_formio_building_name)).Select(x => x.temp_formio_floor_name.ToLower()).ToList();
                        var missing_floors = pre_floor_list.Where(x => !String.IsNullOrEmpty(x) && !existing_floor.Contains(x.ToLower())).ToList();
                        foreach (var missing_floor in missing_floors)
                        {
                            temp_WOlineFloors temp_WOlineFloors = new temp_WOlineFloors();
                            temp_WOlineFloors.temp_formio_floor_name = missing_floor;
                            temp_WOlineFloors.temp_formio_building_name = buiding.temp_formio_building_name;
                            buiding.temp_floors.Add(temp_WOlineFloors);
                        }
                    }
                }

                response.temp_buildings = response.temp_buildings.OrderBy(x => x.temp_formio_building_name).ToList();
                response.temp_buildings.ForEach(building =>
                {
                    if(building.temp_floors!=null && building.temp_floors.Count > 0)
                    {
                        building.temp_floors = building.temp_floors.OrderBy(x => x.temp_formio_floor_name).ToList();
                        building.temp_floors.ForEach(floor =>
                        {
                            if(floor.temp_rooms !=null && floor.temp_rooms.Count > 0)
                            {
                                floor.temp_rooms = floor.temp_rooms.OrderBy(x => x.temp_formio_room_name).ToList();
                            }
                        });
                    }
                });

            }
            catch (Exception e)
            {
            }
            return response;
        }

        public GetTempLocationHierarchyForWOResponseModel GetTempLocationHierarchyForWO_V3(Guid wo_id, string search_string)
        {
            // This is API is for Location Dropdown list in Add OB Asset in WO without 0-100 Floors
            GetTempLocationHierarchyForWOResponseModel response = new GetTempLocationHierarchyForWOResponseModel();
            try
            {
                var get_temp_buildings = _UoW.WorkOrderRepository.GetTempBuildingv2();
                var get_main_buildings = _UoW.WorkOrderRepository.GetMainBuildingv2(get_temp_buildings.Select(x => x.temp_formio_building_name).ToList());
                response.temp_buildings = _mapper.Map<List<temp_WOlineBuildings>>(get_temp_buildings);
                var main_to_temp_mapping = _mapper.Map<List<temp_WOlineBuildings>>(get_main_buildings);
                response.temp_buildings.AddRange(main_to_temp_mapping);

                response.temp_buildings.ForEach(x =>
                {
                    // get floors by building name
                    // get temp floors 
                    var get_temp_floors = _UoW.WorkOrderRepository.GetTempFloorsv2(x.temp_formio_building_name);
                    var get_main_floors = _UoW.WorkOrderRepository.GetMainFloorsv2(x.temp_formio_building_name, get_temp_floors.Select(x => x.temp_formio_floor_name).ToList());
                    x.temp_floors = _mapper.Map<List<temp_WOlineFloors>>(get_temp_floors);
                    var main_floor_to_temp = _mapper.Map<List<temp_WOlineFloors>>(get_main_floors);
                    x.temp_floors.AddRange(main_floor_to_temp);

                    /// get rooms by floors
                    x.temp_floors.ForEach(floor =>
                    {
                        floor.temp_formio_building_name = x.temp_formio_building_name;
                        var get_temp_rooms = _UoW.WorkOrderRepository.GetTempRoomsv2(floor.temp_formio_floor_name, x.temp_formio_building_name);
                        var get_main_roomss = _UoW.WorkOrderRepository.GetMainRoomsv2(floor.temp_formio_floor_name, x.temp_formio_building_name, get_temp_rooms.Select(x => x.temp_formio_room_name).ToList());
                        floor.temp_rooms = _mapper.Map<List<temp_WOlineRooms>>(get_temp_rooms);
                        var main_rooms_to_temp = _mapper.Map<List<temp_WOlineRooms>>(get_main_roomss);
                        floor.temp_rooms.AddRange(main_rooms_to_temp);
                        floor.temp_rooms.ForEach(room =>
                        {
                            room.temp_formio_floor_name = floor.temp_formio_floor_name;
                            room.temp_formio_building_name = x.temp_formio_building_name;
                        });
                    });
                });

                // remove defualt location as new requiremtn we will only show active location in which wolines are exist
                /*
                var is_default_building_exist = response.temp_buildings.Where(x => x.temp_formio_building_name.ToLower().Trim() == "default").FirstOrDefault();
                if(is_default_building_exist == null) // if building is not there then insert 
                {
                    temp_WOlineBuildings temp_WOlineBuildings = new temp_WOlineBuildings();
                    temp_WOlineBuildings.temp_formio_building_name = "Default";
                    temp_WOlineBuildings.temp_floors = new List<temp_WOlineFloors>();
                    response.temp_buildings.Add(temp_WOlineBuildings);
                }
                var is_default_floor_exist = response.temp_buildings.Where(x => x.temp_formio_building_name.ToLower().Trim() == "default").FirstOrDefault().temp_floors.Where(x => x.temp_formio_floor_name.ToLower().Trim() == "default").FirstOrDefault();
                if (is_default_floor_exist == null) // if building is not there then insert 
                {
                    temp_WOlineFloors temp_WOlineFloors = new temp_WOlineFloors();
                    temp_WOlineFloors.temp_formio_building_name = "Default";
                    temp_WOlineFloors.temp_rooms = new List<temp_WOlineRooms>();
                    response.temp_buildings.Where(x => x.temp_formio_building_name.ToLower().Trim() == "default").FirstOrDefault().temp_floors.Add(temp_WOlineFloors);
                }
                var is_default_room_exist = response.temp_buildings.Where(x => x.temp_formio_building_name.ToLower().Trim() == "default").FirstOrDefault()
                    .temp_floors.Where(x => x.temp_formio_floor_name.ToLower().Trim() == "default").FirstOrDefault()
                    .temp_rooms.Where(x=>x.temp_formio_room_name.ToLower().Trim() == "default");
                if (is_default_room_exist == null) // if building is not there then insert 
                {
                    temp_WOlineRooms temp_WOlineRooms = new temp_WOlineRooms();
                    temp_WOlineRooms.temp_formio_room_name = "Default";
                    response.temp_buildings.Where(x => x.temp_formio_building_name.ToLower().Trim() == "default").FirstOrDefault()
                   .temp_floors.Where(x => x.temp_formio_floor_name.ToLower().Trim() == "default").FirstOrDefault()
                   .temp_rooms.Add(temp_WOlineRooms);
                }
                */


                response.temp_buildings = response.temp_buildings.OrderBy(x => x.temp_formio_building_name).ToList();
                response.temp_buildings.ForEach(building =>
                {
                    if (building.temp_floors != null && building.temp_floors.Count > 0)
                    {
                        building.temp_floors = building.temp_floors.OrderBy(x => x.temp_formio_floor_name).ToList();
                        building.temp_floors.ForEach(floor =>
                        {
                            if (floor.temp_rooms != null && floor.temp_rooms.Count > 0)
                            {
                                floor.temp_rooms = floor.temp_rooms.OrderBy(x => x.temp_formio_room_name).ToList();
                            }
                        });
                    }
                });

            }
            catch (Exception e)
            {
            }
            return response;
        }

        public GetAllTempMasterLocationForWOResponseModel GetAllTempMasterLocationDropdownList(GetAllTempMasterLocationForWORequestModel requestModel)
        {
            GetAllTempMasterLocationForWOResponseModel response = new GetAllTempMasterLocationForWOResponseModel();
            try
            {
                var get_temp_buildings = _UoW.WorkOrderRepository.GetTempMasterBuilding(requestModel);
                var get_main_buildings = _UoW.WorkOrderRepository.GetMainBuildingv2(get_temp_buildings.Select(x => x.temp_master_building_name).ToList());
                response.temp_master_buildings = _mapper.Map<List<temp_master_building_class>>(get_temp_buildings);
                var main_to_temp_mapping = _mapper.Map<List<temp_master_building_class>>(get_main_buildings);
                response.temp_master_buildings.AddRange(main_to_temp_mapping);

                response.temp_master_buildings.ForEach(x =>
                {
                    // get floors by building name
                    // get temp floors 
                    var get_temp_floors = _UoW.WorkOrderRepository.GetTempMasterFloor(requestModel,x.building_name);
                    var get_main_floors = _UoW.WorkOrderRepository.GetMainFloorsv2(x.building_name, get_temp_floors.Select(x => x.temp_master_floor_name).ToList());
                    x.temp_master_floor = _mapper.Map<List<temp_master_floor_class>>(get_temp_floors);
                    var main_floor_to_temp = _mapper.Map<List<temp_master_floor_class>>(get_main_floors);
                    x.temp_master_floor.AddRange(main_floor_to_temp);

                    /// get rooms by floors
                    x.temp_master_floor.ForEach(floor =>
                    {
                        floor.building_name = x.building_name;
                        var get_temp_rooms = _UoW.WorkOrderRepository.GetTempMasterRoom(requestModel,floor.floor_name, x.building_name);
                        var get_main_roomss = _UoW.WorkOrderRepository.GetMainRoomsv2(floor.floor_name, x.building_name, get_temp_rooms.Select(x => x.temp_master_room_name).ToList());
                        floor.temp_master_rooms = _mapper.Map<List<temp_master_room_class>>(get_temp_rooms);
                        var main_rooms_to_temp = _mapper.Map<List<temp_master_room_class>>(get_main_roomss);
                        floor.temp_master_rooms.AddRange(main_rooms_to_temp);
                        floor.temp_master_rooms.ForEach(room =>
                        {
                            room.floor_name = floor.floor_name;
                            room.building_name = x.building_name;
                        });
                    });
                });

                if (requestModel.is_100_floors_required)
                {
                    // add 1-100 floors explicitly 
                    List<string> pre_floor_list = new List<string> { "Basement", "Ground" };
                    for (int i = 1; i <= 100; i++)
                    {
                        pre_floor_list.Add("Floor - " + i.ToString());
                    }
                    foreach (var buiding in response.temp_master_buildings)
                    {
                        if (buiding.temp_master_floor != null)
                        {
                            var existing_floor = buiding.temp_master_floor.Where(x => !String.IsNullOrEmpty(x.building_name)).Select(x => x.floor_name.ToLower()).ToList();
                            var missing_floors = pre_floor_list.Where(x => !String.IsNullOrEmpty(x) && !existing_floor.Contains(x.ToLower())).ToList();
                            foreach (var missing_floor in missing_floors)
                            {
                                temp_master_floor_class temp_master_floor_class = new temp_master_floor_class();
                                temp_master_floor_class.floor_name = missing_floor;
                                temp_master_floor_class.building_name = buiding.building_name;
                                buiding.temp_master_floor.Add(temp_master_floor_class);
                            }
                        }
                    }
                }

            }
            catch (Exception e)
            {
            }
            return response;
        }

        public GetTempLocationHierarchyForWOResponseModel GetActiveLocationByWO(Guid wo_id, string search_string)
        {
            GetTempLocationHierarchyForWOResponseModel response = new GetTempLocationHierarchyForWOResponseModel();

            var get_woline_location = _UoW.WorkOrderRepository.GetActiveWOlineLocations(wo_id , search_string);

            response.temp_buildings = new List<temp_WOlineBuildings>();
            var distinct_buildng = get_woline_location.Where(x=>x.TempFormIOBuildings!=null).Select(x => x.TempFormIOBuildings.temp_formio_building_name).Distinct().ToList();
            distinct_buildng.Sort();
            foreach (var builing in distinct_buildng)
            {
                temp_WOlineBuildings temp_WOlineBuildings = new temp_WOlineBuildings();
                temp_WOlineBuildings.temp_formio_building_name = builing;
                temp_WOlineBuildings.temp_formiobuilding_id = get_woline_location.Where(x => x.TempFormIOBuildings!=null && x.TempFormIOBuildings.temp_formio_building_name.ToLower().Trim() == builing.ToLower().Trim()).Select(x => x.temp_formiobuilding_id.Value).FirstOrDefault();
                // floor
                temp_WOlineBuildings.temp_floors = new List<temp_WOlineFloors>();
                var distinct_floor = get_woline_location.Where(x => x.TempFormIOBuildings!=null&& x.TempFormIOBuildings.temp_formio_building_name.ToLower().Trim() == builing.ToLower().Trim()).Select(x => x.TempFormIOFloors.temp_formio_floor_name.Trim()).Distinct().ToList();
                distinct_floor.Sort();
                foreach (var floor in distinct_floor)
                {
                    temp_WOlineFloors temp_WOlineFloors = new temp_WOlineFloors();
                    temp_WOlineFloors.temp_formio_floor_name = floor;
                    temp_WOlineFloors.temp_formio_building_name = builing;
                     
                    temp_WOlineFloors.temp_formiobuilding_id = get_woline_location.Where(x => x.TempFormIOBuildings != null&& x.TempFormIOBuildings.temp_formio_building_name == builing).Select(x=>x.TempFormIOBuildings.temp_formiobuilding_id).FirstOrDefault();
                    temp_WOlineFloors.temp_formiofloor_id = get_woline_location.Where(x => x.TempFormIOFloors.temp_formio_floor_name.ToLower().Trim() == floor.ToLower().Trim()).Select(x => x.temp_formiofloor_id.Value).FirstOrDefault();

                    // room 
                    var distinct_room = get_woline_location.Where(x => x.TempFormIOBuildings !=null && x.TempFormIOFloors!=null && x.TempFormIOBuildings.temp_formio_building_name.ToLower().Trim() == builing.ToLower().Trim() 
                                                            && x.TempFormIOFloors.temp_formio_floor_name.ToLower().Trim() == floor.ToLower().Trim()).Select(x => x.TempFormIORooms.temp_formio_room_name.Trim())
                                                            .Distinct().ToList();
                    distinct_room.Sort();
                    temp_WOlineFloors.temp_rooms = new List<temp_WOlineRooms>();
                    foreach (var room in distinct_room)
                    {
                        temp_WOlineRooms temp_WOlineRooms = new temp_WOlineRooms();
                        temp_WOlineRooms.temp_formio_room_name = room;
                        temp_WOlineRooms.temp_formio_floor_name = floor;
                        temp_WOlineRooms.temp_formiofloor_id = get_woline_location.Where(x => x.TempFormIOBuildings != null && x.TempFormIOFloors != null && x.TempFormIOBuildings.temp_formio_building_name.ToLower().Trim() == builing.ToLower().Trim()
                                                            && x.TempFormIOFloors.temp_formio_floor_name.ToLower().Trim() == floor.ToLower().Trim()).Select(x => x.TempFormIORooms.temp_formiofloor_id.Value).FirstOrDefault();
                        temp_WOlineRooms.temp_formio_building_name = builing;
                        temp_WOlineRooms.temp_formioroom_id = get_woline_location.Where(x => x.TempFormIORooms!=null && x.TempFormIORooms.temp_formio_room_name.ToLower().Trim() == room.ToLower().Trim()).Select(x => x.temp_formioroom_id.Value).FirstOrDefault();

                        temp_WOlineFloors.temp_rooms.Add(temp_WOlineRooms);
                    }
                    temp_WOlineBuildings.temp_floors.Add(temp_WOlineFloors);
                }
                response.temp_buildings.Add(temp_WOlineBuildings);
            }


            var get_temp_locations = _UoW.WorkOrderRepository.GetTempLocationHierarchyForWO(wo_id, search_string);
            var mapped_temp_location = _mapper.Map<List<temp_WOlineBuildings>>(get_temp_locations);

            var existing_buildings = response.temp_buildings.Where(x => !String.IsNullOrEmpty(x.temp_formio_building_name)).Select(x => x.temp_formio_building_name.ToLower()).ToList();
            var missing_buildings = get_temp_locations.Select(x => x.temp_formio_building_name).Where(x => !String.IsNullOrEmpty(x) && !existing_buildings.Contains(x.ToLower())).ToList();
            foreach (var missing_build in missing_buildings)
            {
                response.temp_buildings.Add(mapped_temp_location.Where(x => x.temp_formio_building_name == missing_build).FirstOrDefault());
            }
            response.temp_buildings = response.temp_buildings.OrderBy(x=>x.temp_formio_building_name).ToList();

            // we are not giving default location in 
            /*
            if (!distinct_buildng.Contains("Default"))
            {
                var get_default_room = _UoW.WorkOrderRepository.GetDefaultTempLocation();
                temp_WOlineBuildings temp_WOlineBuildings = new temp_WOlineBuildings();
                temp_WOlineBuildings.temp_formio_building_name = get_default_room.TempFormIOFloors.TempFormIOBuildings.temp_formio_building_name;
                temp_WOlineBuildings.temp_formiobuilding_id = get_default_room.TempFormIOFloors.temp_formiobuilding_id.Value;
                temp_WOlineBuildings.temp_floors = new List<temp_WOlineFloors>();

                temp_WOlineFloors temp_WOlineFloors = new temp_WOlineFloors();
                temp_WOlineFloors.temp_formio_floor_name = get_default_room.TempFormIOFloors.temp_formio_floor_name;
                temp_WOlineFloors.temp_formio_building_name = get_default_room.TempFormIOFloors.TempFormIOBuildings.temp_formio_building_name;
                temp_WOlineFloors.temp_formiofloor_id = get_default_room.temp_formiofloor_id.Value;
                temp_WOlineFloors.temp_formiobuilding_id = get_default_room.TempFormIOFloors.temp_formiobuilding_id.Value;
                temp_WOlineFloors.temp_rooms = new List<temp_WOlineRooms>();
                
                temp_WOlineRooms temp_WOlineRooms = new temp_WOlineRooms();
                temp_WOlineRooms.temp_formio_room_name = get_default_room.temp_formio_room_name;
                temp_WOlineRooms.temp_formio_floor_name = get_default_room.TempFormIOFloors.temp_formio_floor_name;
                temp_WOlineRooms.temp_formio_building_name = get_default_room.TempFormIOFloors.TempFormIOBuildings.temp_formio_building_name;
                temp_WOlineRooms.temp_formioroom_id = get_default_room.temp_formioroom_id;
                temp_WOlineRooms.temp_formiofloor_id = get_default_room.temp_formiofloor_id.Value;
               
                temp_WOlineFloors.temp_rooms.Add(temp_WOlineRooms);
                temp_WOlineBuildings.temp_floors.Add(temp_WOlineFloors);
                response.temp_buildings.Add(temp_WOlineBuildings);
            }*/

            return response;
        }

        public GetAllTempMasterLocationForWOResponseModel GetAllTempMasterLocationsListForWO(GetAllTempMasterLocationForWORequestModel requestModel)
        {
            GetAllTempMasterLocationForWOResponseModel response = new GetAllTempMasterLocationForWOResponseModel();
            try
            {
                /*
                var get_woline_location = _UoW.WorkOrderRepository.GetTempAssetsWithTempMasterLocations(requestModel);

                response.temp_master_buildings = new List<temp_master_building_class>();
                var distinct_buildng = get_woline_location.Select(x => x.TempMasterBuilding.temp_master_building_name).Distinct().ToList();
                foreach (var builing in distinct_buildng)
                {
                    temp_master_building_class temp_master_building_class = new temp_master_building_class();
                    temp_master_building_class.building_name = builing;
                    temp_master_building_class.temp_master_building_id = get_woline_location.Where(x => x.TempMasterBuilding.temp_master_building_name.ToLower().Trim() == builing.ToLower().Trim()).Select(x => x.temp_master_building_id.Value).FirstOrDefault();
                    // floor
                    temp_master_building_class.temp_master_floor = new List<temp_master_floor_class>();
                    var distinct_floor = get_woline_location.Where(x => x.TempMasterBuilding.temp_master_building_name.ToLower().Trim() == builing.ToLower().Trim()).Select(x => x.TempMasterFloor.temp_master_floor_name).Distinct().ToList();
                    foreach (var floor in distinct_floor)
                    {
                        temp_master_floor_class temp_master_floor_class = new temp_master_floor_class();
                        temp_master_floor_class.floor_name = floor;
                        temp_master_floor_class.building_name = builing;
                        temp_master_floor_class.temp_master_floor_id = get_woline_location.Where(x => x.TempMasterFloor.temp_master_floor_name.ToLower().Trim() == floor.ToLower().Trim()).Select(x => x.temp_master_floor_id.Value).FirstOrDefault();

                        // room 
                        var distinct_room = get_woline_location.Where(x => x.TempMasterBuilding.temp_master_building_name.ToLower().Trim() == builing.ToLower().Trim()
                                                                && x.TempMasterFloor.temp_master_floor_name.ToLower().Trim() == floor.ToLower().Trim()).Select(x => x.TempMasterRoom.temp_master_room_name)
                                                                .Distinct().ToList();

                        temp_master_floor_class.temp_master_rooms = new List<temp_master_room_class>();
                        foreach (var room in distinct_room)
                        {
                            temp_master_room_class temp_master_room_class = new temp_master_room_class();
                            temp_master_room_class.room_name = room;
                            temp_master_room_class.floor_name = floor;
                            temp_master_room_class.building_name = builing;
                            temp_master_room_class.temp_master_room_id = get_woline_location.Where(x => x.TempMasterRoom.temp_master_room_name.ToLower().Trim() == room.ToLower().Trim()).Select(x => x.temp_master_room_id.Value).FirstOrDefault();

                            temp_master_floor_class.temp_master_rooms.Add(temp_master_room_class);
                        }
                        temp_master_building_class.temp_master_floor.Add(temp_master_floor_class);
                    }
                    response.temp_master_buildings.Add(temp_master_building_class);
                }
                */

                var get_buildings = _UoW.WorkOrderRepository.GetAllTempMasterBuildingsListForWO(requestModel);
                var get_floors = _UoW.WorkOrderRepository.GetAllTempMasterFloorsListForWO(requestModel);
                var get_rooms = _UoW.WorkOrderRepository.GetAllTempMasterRoomsListForWO(requestModel);
                response.temp_master_buildings = _mapper.Map<List<temp_master_building_class>>(get_buildings);

                foreach(var building in response.temp_master_buildings)
                {
                    building.temp_master_floor = new List<temp_master_floor_class>();
                    var floors = get_floors.Where(x => x.temp_master_building_id == building.temp_master_building_id).ToList();

                    foreach(var this_floor in floors)
                    {
                        temp_master_floor_class temp_master_floor_class = new temp_master_floor_class();
                        temp_master_floor_class.temp_master_floor_id = this_floor.temp_master_floor_id;
                        temp_master_floor_class.floor_name = this_floor.temp_master_floor_name;
                        temp_master_floor_class.building_name = building.building_name;

                        temp_master_floor_class.temp_master_rooms = new List<temp_master_room_class>();
                        var rooms = get_rooms.Where(x => x.temp_master_floor_id == this_floor.temp_master_floor_id).ToList();
                        foreach (var this_room in rooms)
                        {
                            temp_master_room_class temp_master_room_class = new temp_master_room_class();
                            temp_master_room_class.room_name = this_room.temp_master_room_name;
                            temp_master_room_class.floor_name = this_floor.temp_master_floor_name;
                            temp_master_room_class.building_name = building.building_name;
                            temp_master_room_class.temp_master_room_id = this_room.temp_master_room_id;

                            var get_assets = _UoW.WorkOrderRepository.GetTotalOBWOAssetRoomWise(requestModel.wo_id.Value, this_room.temp_master_room_name);
                            if (get_assets.Item1 != null && get_assets.Item1.Count() > 0)
                            {
                                temp_master_room_class.room_assets_count = get_assets.Item2;
                            }
                            temp_master_floor_class.temp_master_rooms.Add(temp_master_room_class);
                        }
                        building.temp_master_floor.Add(temp_master_floor_class);
                    }
                }

            }
            catch(Exception e)
            {
            }
            return response;
        }

        public ListViewModel<GetWOOBAssetsbyLocationHierarchyResponseModel> GetWOOBAssetsbyLocationHierarchy(GetWOOBAssetsbyLocationHierarchyRequestModel requestmodel)
        {
            ListViewModel<GetWOOBAssetsbyLocationHierarchyResponseModel> response = new ListViewModel<GetWOOBAssetsbyLocationHierarchyResponseModel>();

            try
            {
                // we will get wolines by names of location now
                var get_building = _UoW.WorkOrderRepository.GettempBuildingNameById(requestmodel.temp_formiobuilding_id.Value);
                var get_floor = _UoW.WorkOrderRepository.GettempFloorNameById(requestmodel.temp_formiofloor_id.Value);
                var get_room = _UoW.WorkOrderRepository.GettempRoomNameById(requestmodel.temp_formioroom_id.Value);
                requestmodel.buildig_name = get_building;
                requestmodel.floor_name = get_floor;
                requestmodel.room_name = get_room;
                //var get_OBWOAssets = _UoW.WorkOrderRepository.GetWOOBAssetsbyLocationHierarchy(requestmodel);
                var get_OBWOAssets = _UoW.WorkOrderRepository.GetWOOBAssetsbyLocationHierarchyV2(requestmodel);
                if (get_OBWOAssets.Item1 != null && get_OBWOAssets.Item1.Count > 0)
                {
                    var map = _mapper.Map<List<GetWOOBAssetsbyLocationHierarchyResponseModel>>(get_OBWOAssets.Item1);

                    foreach (var asset in map)
                    {
                        if (asset.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent)
                        {
                            var get_topLevel_id = _UoW.WorkOrderRepository.GetTopLevelWOOBAsset(asset.woonboardingassets_id);
                            if (get_topLevel_id != null)
                            {
                                asset.toplevelcomponent_asset_id = get_topLevel_id;
                            }
                        }
                        if (String.IsNullOrEmpty(asset.asset_class_type) && !String.IsNullOrEmpty(asset.asset_class_code))
                        {
                            // get from db
                            var get_class = _UoW.WorkOrderRepository.GetAssetClassByClasscode(asset.asset_class_code);
                            if (get_class != null && get_class.FormIOType != null)
                            {
                                asset.asset_class_type = get_class.FormIOType.form_type_name;
                            }
                        }

                        asset.temp_issues_count = _UoW.WorkOrderRepository.GetIssuesCountByOBWOAssetId(asset.woonboardingassets_id);

                    }

                    response.list = map;
                }
                response.listsize = get_OBWOAssets.Item2;
                response.pageIndex = requestmodel.pageindex;
                response.pageSize = requestmodel.pagesize;
            }
            catch (Exception ex)
            {
            }

            return response;
        }

        public ListViewModel<GetWOOBAssetsbyLocationHierarchyResponseModel> GetWOOBAssetsbyTempMasterLocationHierarchy(GetWOOBAssetsbyLocationHierarchyRequestModel requestmodel)
        {
            ListViewModel<GetWOOBAssetsbyLocationHierarchyResponseModel> response = new ListViewModel<GetWOOBAssetsbyLocationHierarchyResponseModel>();

            try
            {
                // we will get wolines by names of location now
                //var get_building = _UoW.WorkOrderRepository.GettempBuildingNameById(requestmodel.temp_formiobuilding_id.Value);
                //var get_floor = _UoW.WorkOrderRepository.GettempFloorNameById(requestmodel.temp_formiofloor_id.Value);
                //requestmodel.buildig_name = get_building;
                //requestmodel.floor_name = get_floor;
                var get_room = _UoW.WorkOrderRepository.GetTempMasterRoomNameById(requestmodel.temp_master_room_id.Value);
               // requestmodel.room_name = get_room;
                
                //var get_OBWOAssets = _UoW.WorkOrderRepository.GetWOOBAssetsbyLocationHierarchy(requestmodel);
                var get_OBWOAssets = _UoW.WorkOrderRepository.GetWOOBAssetsbyLocationHierarchyV3(requestmodel);
                if (get_OBWOAssets.Item1 != null && get_OBWOAssets.Item1.Count > 0)
                {
                    var map = _mapper.Map<List<GetWOOBAssetsbyLocationHierarchyResponseModel>>(get_OBWOAssets.Item1);

                    foreach (var asset in map)
                    {
                        if (asset.component_level_type_id == (int)ComponentLevelTypes.SublevelComponent)
                        {
                            var get_topLevel_id = _UoW.WorkOrderRepository.GetTopLevelWOOBAsset(asset.woonboardingassets_id);
                            if (get_topLevel_id != null)
                            {
                                asset.toplevelcomponent_asset_id = get_topLevel_id;
                            }
                        }
                        if (String.IsNullOrEmpty(asset.asset_class_type) && !String.IsNullOrEmpty(asset.asset_class_code))
                        {
                            // get from db
                            var get_class = _UoW.WorkOrderRepository.GetAssetClassByClasscode(asset.asset_class_code);
                            if (get_class != null && get_class.FormIOType != null)
                            {
                                asset.asset_class_type = get_class.FormIOType.form_type_name;
                            }
                        }

                        asset.temp_issues_count = _UoW.WorkOrderRepository.GetIssuesCountByOBWOAssetId(asset.woonboardingassets_id);

                    }

                    response.list = map;
                }
                response.listsize = get_OBWOAssets.Item2;
                response.pageIndex = requestmodel.pageindex;
                response.pageSize = requestmodel.pagesize;
            }
            catch (Exception ex)
            {
            }

            return response;
        }

        public async Task<int> DeleteTempLocationDetails(DeleteTempLocationDetailsRequestModel requestmodel)
        {
            int response = (int)ResponseStatusNumber.Error;

            if (requestmodel.temp_formiobuilding_id != null && requestmodel.temp_formiobuilding_id != Guid.Empty)
            {
                var temp_building = _UoW.WorkOrderRepository.GetTempBuildingForDelete(requestmodel.temp_formiobuilding_id.Value);
                if (temp_building != null)
                {
                    temp_building.created_at = DateTime.UtcNow;
                    temp_building.is_deleted = true;
                    if(temp_building.TempFormIOFloors!= null && temp_building.TempFormIOFloors.Count > 0)
                    {
                        temp_building.TempFormIOFloors.ToList().ForEach(floor =>
                        {
                            floor.is_deleted = true;
                            floor.created_at = DateTime.UtcNow;

                            if(floor.TempFormIORooms!=null && floor.TempFormIORooms.Count > 0) // delete rooms
                            {
                                floor.TempFormIORooms.ToList().ForEach(rooms => // delete rooms
                                {
                                    rooms.is_deleted = true;
                                    rooms.created_at = DateTime.UtcNow;

                                    if(rooms.TempFormIOSections!=null && rooms.TempFormIOSections.Count > 0)
                                    {
                                        rooms.TempFormIOSections.ToList().ForEach(section =>
                                        {
                                            section.is_deleted = true;
                                            section.created_at = DateTime.UtcNow;
                                        });

                                    }
                                });
                            }
                        });
                    }

                    var update = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Update(temp_building);
                    _UoW.SaveChanges();
                    response = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    response = (int)ResponseStatusNumber.AlreadyExists;
                }
            }

            if (requestmodel.temp_formiofloor_id != null && requestmodel.temp_formiofloor_id != Guid.Empty)
            {
                var temp_floor = _UoW.WorkOrderRepository.GetTempFloorForDelete(requestmodel.temp_formiofloor_id.Value);
                if (temp_floor != null)
                {
                    temp_floor.is_deleted = true;
                    temp_floor.created_at = DateTime.UtcNow;

                    if(temp_floor.TempFormIORooms!=null && temp_floor.TempFormIORooms.Count > 0)
                    {
                        temp_floor.TempFormIORooms.ToList().ForEach(rooms => // delete rooms
                        {
                            rooms.is_deleted = true;
                            rooms.created_at = DateTime.UtcNow;

                            if (rooms.TempFormIOSections != null && rooms.TempFormIOSections.Count > 0)
                            {
                                rooms.TempFormIOSections.ToList().ForEach(section =>
                                {
                                    section.is_deleted = true;
                                    section.created_at = DateTime.UtcNow;
                                });

                            }
                        });
                    }
                    var update = await _UoW.BaseGenericRepository<TempFormIOFloors>().Update(temp_floor);
                    _UoW.SaveChanges();
                    response = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    response = (int)ResponseStatusNumber.AlreadyExists;
                }
            }

            if (requestmodel.temp_formioroom_id != null && requestmodel.temp_formioroom_id != Guid.Empty)
            {
                var temp_room = _UoW.WorkOrderRepository.GetTempRoomForDelete(requestmodel.temp_formioroom_id.Value);
                if (temp_room != null)
                {
                    temp_room.is_deleted = true;
                    temp_room.created_at = DateTime.UtcNow;

                    if (temp_room.TempFormIOSections != null && temp_room.TempFormIOSections.Count > 0)
                    {
                        temp_room.TempFormIOSections.ToList().ForEach(section =>
                        {
                            section.is_deleted = true;
                            section.created_at = DateTime.UtcNow;
                        });

                    }

                    var update = await _UoW.BaseGenericRepository<TempFormIORooms>().Update(temp_room);
                    _UoW.SaveChanges();
                    response = (int)ResponseStatusNumber.Success;
                }
                else
                {
                    response = (int)ResponseStatusNumber.AlreadyExists;
                }
            }

            return response;
        }


        public async Task<int> AddDataToEquipment()
        {
            int response = (int)ResponseStatusNumber.Error;
            try
            {

                string equipJson = "[{\"E3 ID#\":\"0048\",\"Description\":\"Full Function Test Kit\",\"Manufacturer\":\"Square D\",\"Model Number\":\"S33595\",\"Serial Number\":\"48155-330-50\",\"Cal Interval\":\"24\",\"Cal Date\":\"05/06/2016\"},{\"E3 ID#\":\"0052\",\"Description\":\"Automatic Ground Fault Analyzer\",\"Manufacturer\":\"Multi-Tech\",\"Model Number\":\"760\",\"Serial Number\":\"217H\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/16/2016\"},{\"E3 ID#\":\"0053\",\"Description\":\"ATS Solid State Tester\",\"Manufacturer\":\"Westinghouse/Cutler-Hammer\",\"Model Number\":\"\",\"Serial Number\":\"\",\"Cal Interval\":\"12\",\"Cal Date\":\"09/30/2019\"},{\"E3 ID#\":\"0054\",\"Description\":\"Hand Held Circuit Breaker Test Kit\",\"Manufacturer\":\"Square D\",\"Model Number\":\"S33594\",\"Serial Number\":\"0403433594\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/03/2016\"},{\"E3 ID#\":\"0055\",\"Description\":\"Full Function Test Kit\",\"Manufacturer\":\"Square D\",\"Model Number\":\"S33595\",\"Serial Number\":\"48155-330-50\",\"Cal Interval\":\"24\",\"Cal Date\":\"12/01/2014\"},{\"E3 ID#\":\"0057\",\"Description\":\"Seltronic Test Kit\",\"Manufacturer\":\"Cutler Hammer\",\"Model Number\":\"1232C50G10\",\"Serial Number\":\"N/A\",\"Cal Interval\":\"12\",\"Cal Date\":\"12/20/2016\"},{\"E3 ID#\":\"0057A\",\"Description\":\"Seltronic Test Kit\",\"Manufacturer\":\"Cutler Hammer\",\"Model Number\":\"1232C50G10\",\"Serial Number\":\"N/A\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/21/2016\"},{\"E3 ID#\":\"0058\",\"Description\":\"Microversa Trip Test Kit\",\"Manufacturer\":\"General Electric\",\"Model Number\":\"TVRMS2\",\"Serial Number\":\"\",\"Cal Interval\":\"12\",\"Cal Date\":\"04/05/2017\"},{\"E3 ID#\":\"0069\",\"Description\":\"Eaton Secondary Injection Test Set\",\"Manufacturer\":\"Eaton\",\"Model Number\":\"MTST230V / 70C1056\",\"Serial Number\":\"NP5720B54H14\",\"Cal Interval\":\"12\",\"Cal Date\":\"12/01/2016\"},{\"E3 ID#\":\"0081\",\"Description\":\"AVO Bite Battery Tester\",\"Manufacturer\":\"Biddle\",\"Model Number\":\"246002\",\"Serial Number\":\"6174\",\"Cal Interval\":\"12\",\"Cal Date\":\"12/01/2016\"},{\"E3 ID#\":\"0095\",\"Description\":\"Universal Test Set\",\"Manufacturer\":\"Square D\",\"Model Number\":\"UTS3\",\"Serial Number\":\"N/A\",\"Cal Interval\":\"24\",\"Cal Date\":\"05/27/2016\"},{\"E3 ID#\":\"0103\",\"Description\":\"Fluke 1550C 5 kV Insulation\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"1550C\",\"Serial Number\":\"57020014\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/15/2022\"},{\"E3 ID#\":\"0104\",\"Description\":\"15 kV Megger\",\"Manufacturer\":\"Megger\",\"Model Number\":\"MIT-1525\",\"Serial Number\":\"1002911102127077\",\"Cal Interval\":\"12\",\"Cal Date\":\"09/01/2022\"},{\"E3 ID#\":\"0105\",\"Description\":\"Megger\",\"Manufacturer\":\"AVO\",\"Model Number\":\"BM21\",\"Serial Number\":\"981002/1420\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/09/2022\"},{\"E3 ID#\":\"0106\",\"Description\":\"Megger\",\"Manufacturer\":\"AVO\",\"Model Number\":\"BM21\",\"Serial Number\":\"981002/1422\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/04/2022\"},{\"E3 ID#\":\"0107\",\"Description\":\"Megger\",\"Manufacturer\":\"Megger\",\"Model Number\":\"BM21\",\"Serial Number\":\"981002/1424\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/14/2020\"},{\"E3 ID#\":\"0108\",\"Description\":\"Megger\",\"Manufacturer\":\"AVO\",\"Model Number\":\"BM21\",\"Serial Number\":\"981002/1431\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/05/2016\"},{\"E3 ID#\":\"0109\",\"Description\":\"Megger\",\"Manufacturer\":\"AVO\",\"Model Number\":\"BM21\",\"Serial Number\":\"290814\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/19/2020\"},{\"E3 ID#\":\"0110\",\"Description\":\"Insulation Tester Calibration Box\",\"Manufacturer\":\"Megger\",\"Model Number\":\"CB101\",\"Serial Number\":\"10164401\",\"Cal Interval\":\"60\",\"Cal Date\":\"08/01/2017\"},{\"E3 ID#\":\"0111\",\"Description\":\"Megger\",\"Manufacturer\":\"Megger\",\"Model Number\":\"BM11D\",\"Serial Number\":\"02901075\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/21/2023\"},{\"E3 ID#\":\"0112\",\"Description\":\"5kV Megger\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"1550C\",\"Serial Number\":\"40220021\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/22/2023\"},{\"E3 ID#\":\"0113\",\"Description\":\"Megger\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"1550C\",\"Serial Number\":\"2394012\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/18/2020\"},{\"E3 ID#\":\"0114\",\"Description\":\"Megger\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"1550C\",\"Serial Number\":\"2476031\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/04/2022\"},{\"E3 ID#\":\"0115\",\"Description\":\"Megger\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"1550C\",\"Serial Number\":\"2931026\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/23/2023\"},{\"E3 ID#\":\"0116\",\"Description\":\"Megger\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"1550C\",\"Serial Number\":\"50370012\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/27/2023\"},{\"E3 ID#\":\"0117\",\"Description\":\"Megger\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"1550C\",\"Serial Number\":\"54450008\",\"Cal Interval\":\"12\",\"Cal Date\":\"05/19/2021\"},{\"E3 ID#\":\"0118\",\"Description\":\"Megger\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"1550C\",\"Serial Number\":\"54510010\",\"Cal Interval\":\"12\",\"Cal Date\":\"05/19/2022\"},{\"E3 ID#\":\"0119\",\"Description\":\"Fluke 1550C 5 kV Insulation\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"1550C\",\"Serial Number\":\"57020011\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/15/2022\"},{\"E3 ID#\":\"0120\",\"Description\":\"D.C. Hypot\",\"Manufacturer\":\"Associated Research\",\"Model Number\":\"5321A\",\"Serial Number\":\"1528\",\"Cal Interval\":\"12\",\"Cal Date\":\"12/17/2021\"},{\"E3 ID#\":\"0121\",\"Description\":\"D.C. Hypot\",\"Manufacturer\":\"Associated Research\",\"Model Number\":\"5321A\",\"Serial Number\":\"1530\",\"Cal Interval\":\"12\",\"Cal Date\":\"08/18/2021\"},{\"E3 ID#\":\"0130\",\"Description\":\"AC Hypot 100 kV Set\",\"Manufacturer\":\"Hipotronics\",\"Model Number\":\"v\",\"Serial Number\":\"34650\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/10/2022\"},{\"E3 ID#\":\"0131\",\"Description\":\"AC Hypot 60 kV Set\",\"Manufacturer\":\"Hipotronics\",\"Model Number\":\"60HVT-A\",\"Serial Number\":\"M9810036\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/07/2022\"},{\"E3 ID#\":\"0132\",\"Description\":\"100 kV AC/DC Voltmeter\",\"Manufacturer\":\"Hipotronics\",\"Model Number\":\"KVM100-A\",\"Serial Number\":\"0312054\",\"Cal Interval\":\"60\",\"Cal Date\":\"03/01/2022\"},{\"E3 ID#\":\"0134\",\"Description\":\"50 kV AC Hypot (Single Piece)\",\"Manufacturer\":\"High Voltage, Inc.\",\"Model Number\":\"PFT-503CM\",\"Serial Number\":\"902\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/21/2023\"},{\"E3 ID#\":\"0135\",\"Description\":\"50 kV AC Hypot (Single Piece)\",\"Manufacturer\":\"High Voltage, Inc.\",\"Model Number\":\"PFT-503CM\",\"Serial Number\":\"1286\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/10/2022\"},{\"E3 ID#\":\"0137\",\"Description\":\"HVA60 VLF AC/DC High Voltage Test\",\"Manufacturer\":\"HV Diagnostics Inc.\",\"Model Number\":\"706-001\",\"Serial Number\":\"\",\"Cal Interval\":\"\",\"Cal Date\":\"\"},{\"E3 ID#\":\"0138\",\"Description\":\"VLF DC Test System w/ Tan Delta\",\"Manufacturer\":\"HV Diagnostics\",\"Model Number\":\"HVA45TD\",\"Serial Number\":\"GH0219.21A037\",\"Cal Interval\":\"12\",\"Cal Date\":\"06/01/2021\"},{\"E3 ID#\":\"0150\",\"Description\":\"Megger Insulation Tester\",\"Manufacturer\":\"Megger\",\"Model Number\":\"MIT515-US\",\"Serial Number\":\"1001936102136467\",\"Cal Interval\":\"12\",\"Cal Date\":\"08/25/2021\"},{\"E3 ID#\":\"0151\",\"Description\":\"Megger Insulation Tester\",\"Manufacturer\":\"Megger\",\"Model Number\":\"MIT515-US\",\"Serial Number\":\"1001936102136473\",\"Cal Interval\":\"12\",\"Cal Date\":\"08/25/2021\"},{\"E3 ID#\":\"0152\",\"Description\":\"Megger Insulation Tester\",\"Manufacturer\":\"Megger\",\"Model Number\":\"MIT515-US\",\"Serial Number\":\"1001936102114113\",\"Cal Interval\":\"12\",\"Cal Date\":\"06/07/2021\"},{\"E3 ID#\":\"0153\",\"Description\":\"Megger Insulation Tester\",\"Manufacturer\":\"Megger\",\"Model Number\":\"MIT515-US\",\"Serial Number\":\"1001936102142507\",\"Cal Interval\":\"12\",\"Cal Date\":\"09/16/2021\"},{\"E3 ID#\":\"0154\",\"Description\":\"Megger Insulation Tester\",\"Manufacturer\":\"Megger\",\"Model Number\":\"MIT515-US\",\"Serial Number\":\"1001936102312273\",\"Cal Interval\":\"12\",\"Cal Date\":\"12/19/2022\"},{\"E3 ID#\":\"0155\",\"Description\":\"Megger Insulation Tester\",\"Manufacturer\":\"Megger\",\"Model Number\":\"MIT515-US\",\"Serial Number\":\"1001936102306474\",\"Cal Interval\":\"12\",\"Cal Date\":\"12/05/2022\"},{\"E3 ID#\":\"0156\",\"Description\":\"Megger Insulation Tester\",\"Manufacturer\":\"Megger\",\"Model Number\":\"MIT515-US\",\"Serial Number\":\"1001936102306497\",\"Cal Interval\":\"12\",\"Cal Date\":\"12/06/2022\"},{\"E3 ID#\":\"0200\",\"Description\":\"Digital Low Resistance Ohm Meter\",\"Manufacturer\":\"AVO\",\"Model Number\":\"247000\",\"Serial Number\":\"42365\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/22/2023\"},{\"E3 ID#\":\"0201\",\"Description\":\"Digital Low Resistance Ohm Meter\",\"Manufacturer\":\"Megger\",\"Model Number\":\"247000\",\"Serial Number\":\"42369\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/11/2022\"},{\"E3 ID#\":\"0202\",\"Description\":\"Digital Low Resistance Ohm Meter\",\"Manufacturer\":\"AVO\",\"Model Number\":\"247000\",\"Serial Number\":\"539230817\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/27/2023\"},{\"E3 ID#\":\"0203\",\"Description\":\"Digital Low Resistance Ohm Meter\",\"Manufacturer\":\"AVO\",\"Model Number\":\"247000\",\"Serial Number\":\"45218\",\"Cal Interval\":\"12\",\"Cal Date\":\"04/04/2022\"},{\"E3 ID#\":\"0204\",\"Description\":\"Digital Low Resistance Ohm Meter\",\"Manufacturer\":\"AVO\",\"Model Number\":\"247000\",\"Serial Number\":\"47739\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/11/2022\"},{\"E3 ID#\":\"0205\",\"Description\":\"Micro-Ohm Meter\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"6240\",\"Serial Number\":\"00007682 / 103696RCDV\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/09/2023\"},{\"E3 ID#\":\"0207\",\"Description\":\"Digital Low Resistance Ohmmeter\",\"Manufacturer\":\"Megger\",\"Model Number\":\"247000\",\"Serial Number\":\"534941014\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/22/2021\"},{\"E3 ID#\":\"0208\",\"Description\":\"Micro-Ohmmeter & Kelvin Probes\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"6240 / 2118.73\",\"Serial Number\":\"105506RHDV\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/21/2023\"},{\"E3 ID#\":\"0209\",\"Description\":\"Micro-Ohmmeter & Kelvin Probes\",\"Manufacturer\":\"AEMC / 2129.80\",\"Model Number\":\"6240\",\"Serial Number\":\"116346SEDV\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/18/2020\"},{\"E3 ID#\":\"0210\",\"Description\":\"Micro-Ohmmeter & Kelvin Probes\",\"Manufacturer\":\"AEMC / 2118.77\",\"Model Number\":\"6292 / 2118.77\",\"Serial Number\":\"100018TKTH\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/22/2021\"},{\"E3 ID#\":\"0211\",\"Description\":\"Micro-Ohm Meter & Kelvin Clips\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"6240\",\"Serial Number\":\"142508UDDV\",\"Cal Interval\":\"12\",\"Cal Date\":\"05/19/2021\"},{\"E3 ID#\":\"0212\",\"Description\":\"Micro-Ohm Meter & Kelvin Clips\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"6240\",\"Serial Number\":\"142511UDDV\",\"Cal Interval\":\"12\",\"Cal Date\":\"05/19/2021\"},{\"E3 ID#\":\"0213\",\"Description\":\"Micro-Ohmmeter 6240\",\"Manufacturer\":\"AEMC Instruments\",\"Model Number\":\"6240\",\"Serial Number\":\"143995ULDV\",\"Cal Interval\":\"12\",\"Cal Date\":\"04/27/2022\"},{\"E3 ID#\":\"0214\",\"Description\":\"Micro-Ohmmeter 6240\",\"Manufacturer\":\"AEMC Instruments\",\"Model Number\":\"6240\",\"Serial Number\":\"144007ULDV\",\"Cal Interval\":\"12\",\"Cal Date\":\"12/23/2021\"},{\"E3 ID#\":\"0215\",\"Description\":\"Micro-Ohmmeter 6240\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"6240\",\"Serial Number\":\"150828WADV\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/27/2023\"},{\"E3 ID#\":\"0216\",\"Description\":\"Micro-Ohmmeter 6240\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"6240\",\"Serial Number\":\"150826WADV\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/25/2022\"},{\"E3 ID#\":\"0217\",\"Description\":\"Micro-Ohmmeter AEMC 6240\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"6240\",\"Serial Number\":\"150830WADV\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/23/2023\"},{\"E3 ID#\":\"0220\",\"Description\":\"Earth Resistivity Test Set  with (2) Cable Reels\",\"Manufacturer\":\"Associated Research\",\"Model Number\":\"293A\",\"Serial Number\":\"5422\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/23/2016\"},{\"E3 ID#\":\"0221\",\"Description\":\"Earth Resistance Test Set with (2) Cable Reels\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"6470-B\",\"Serial Number\":\"186093QDDV\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/02/2020\"},{\"E3 ID#\":\"0222\",\"Description\":\"Ground resistance test set\",\"Manufacturer\":\"Megger\",\"Model Number\":\"DET4TCR2\",\"Serial Number\":\"1000-405/091209/1173\",\"Cal Interval\":\"12\",\"Cal Date\":\"10/29/2019\"},{\"E3 ID#\":\"0223-1\",\"Description\":\"Ground resistance test set\",\"Manufacturer\":\"Megger\",\"Model Number\":\"DET4TCR2\",\"Serial Number\":\"T2421 & 1000346101560362\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/18/2022\"},{\"E3 ID#\":\"0224\",\"Description\":\"Earth Resistance Test Set with (2) Cable Reels\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"6471 / Cat# 2135.48 / 2135.37\",\"Serial Number\":\"150247WADV\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/25/2022\"},{\"E3 ID#\":\"0225\",\"Description\":\"Earth Resistance Test Set with (2) Cable Reels\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"6471\",\"Serial Number\":\"149227UKDV\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/23/2021\"},{\"E3 ID#\":\"0230\",\"Description\":\"Transformer Winding Resistance\",\"Manufacturer\":\"AVO\",\"Model Number\":\"830280\",\"Serial Number\":\"9839\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/22/2023\"},{\"E3 ID#\":\"0231\",\"Description\":\"Transformer Winding Resistance\",\"Manufacturer\":\"AVO\",\"Model Number\":\"830280\",\"Serial Number\":\"9836\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/09/2023\"},{\"E3 ID#\":\"0232\",\"Description\":\"Transformer Winding Resistance\",\"Manufacturer\":\"AVO\",\"Model Number\":\"830280\",\"Serial Number\":\"44178\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/24/2023\"},{\"E3 ID#\":\"0233\",\"Description\":\"Transformer Winding Resistance\",\"Manufacturer\":\"AVO\",\"Model Number\":\"830280\",\"Serial Number\":\"47091\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/22/2021\"},{\"E3 ID#\":\"0234\",\"Description\":\"Transformer Winding Resistance\",\"Manufacturer\":\"Megger\",\"Model Number\":\"MTO210\",\"Serial Number\":\"10301009\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/23/2023\"},{\"E3 ID#\":\"0235\",\"Description\":\"Transformer Winding Resistance\",\"Manufacturer\":\"Megger\",\"Model Number\":\"MTO210\",\"Serial Number\":\"MV 6153/1506\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/14/2021\"},{\"E3 ID#\":\"0236\",\"Description\":\"Transformer Winding Resistance\",\"Manufacturer\":\"Megger\",\"Model Number\":\"MTO210\",\"Serial Number\":\"45971021\",\"Cal Interval\":\"12\",\"Cal Date\":\"10/15/2021\"},{\"E3 ID#\":\"0250\",\"Description\":\"Low Resistance Calibration Board (Shop Standard)\",\"Manufacturer\":\"AVO\",\"Model Number\":\"Various\",\"Serial Number\":\"Various\",\"Cal Interval\":\"60\",\"Cal Date\":\"01/14/2015\"},{\"E3 ID#\":\"0296\",\"Description\":\"Three Phase Transformer Ratiometer\",\"Manufacturer\":\"Megger\",\"Model Number\":\"TTRU3-ADV\",\"Serial Number\":\"15820523\",\"Cal Interval\":\"12\",\"Cal Date\":\"05/04/2023\"},{\"E3 ID#\":\"0297\",\"Description\":\"Three Phase Transformer Ratiometer\",\"Manufacturer\":\"Megger\",\"Model Number\":\"TTRU3-ADV\",\"Serial Number\":\"15840523\",\"Cal Interval\":\"12\",\"Cal Date\":\"05/04/2023\"},{\"E3 ID#\":\"0298\",\"Description\":\"Three Phase Transformer Ratiometer\",\"Manufacturer\":\"Megger\",\"Model Number\":\"TTRU3-ADV\",\"Serial Number\":\"15810523\",\"Cal Interval\":\"12\",\"Cal Date\":\"05/04/2023\"},{\"E3 ID#\":\"0299\",\"Description\":\"Three Phase Transformer Ratiometer\",\"Manufacturer\":\"Megger\",\"Model Number\":\"TTRU3-ADV\",\"Serial Number\":\"15830523\",\"Cal Interval\":\"12\",\"Cal Date\":\"05/04/2023\"},{\"E3 ID#\":\"0300\",\"Description\":\"Transformer Ratio Meter\",\"Manufacturer\":\"MultiAmp\",\"Model Number\":\"820130\",\"Serial Number\":\"9436\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/22/2023\"},{\"E3 ID#\":\"0301\",\"Description\":\"Transformer Turns Ratio\",\"Manufacturer\":\"AVO\",\"Model Number\":\"550005\",\"Serial Number\":\"14463\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/03/2020\"},{\"E3 ID#\":\"0302\",\"Description\":\"Transformer Turns Ratio, 3 Phase\",\"Manufacturer\":\"AVO\",\"Model Number\":\"550100\",\"Serial Number\":\"15393\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/24/2023\"},{\"E3 ID#\":\"0303\",\"Description\":\"Transformer Turns Ratio, 3 Phase\",\"Manufacturer\":\"AVO\",\"Model Number\":\"550100\",\"Serial Number\":\"16500\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/20/2023\"},{\"E3 ID#\":\"0304\",\"Description\":\"Transformer Turns Ratio Meter\",\"Manufacturer\":\"AVO\",\"Model Number\":\"550005\",\"Serial Number\":\"16740\",\"Cal Interval\":\"6\",\"Cal Date\":\"03/09/2022\"},{\"E3 ID#\":\"0305\",\"Description\":\"Handheld transformer turns ratio test set\",\"Manufacturer\":\"Megger\",\"Model Number\":\"TTR100-NA0-ENG\",\"Serial Number\":\"0311015\",\"Cal Interval\":\"12\",\"Cal Date\":\"04/20/2021\"},{\"E3 ID#\":\"0306\",\"Description\":\"Transformer Turns Ratio, 3 Phase\",\"Manufacturer\":\"Megger\",\"Model Number\":\"TTR310\",\"Serial Number\":\"500891209\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/23/2023\"},{\"E3 ID#\":\"0307\",\"Description\":\"Transformer Turns Ratio, 3 Phase\",\"Manufacturer\":\"Megger\",\"Model Number\":\"TTR330\",\"Serial Number\":\"606050213\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/23/2023\"},{\"E3 ID#\":\"0308\",\"Description\":\"Megger Handheld Transformer Turns Ratio\",\"Manufacturer\":\"Megger\",\"Model Number\":\"TTR 20-1\",\"Serial Number\":\"202242 1121\",\"Cal Interval\":\"12\",\"Cal Date\":\"12/23/2021\"},{\"E3 ID#\":\"0309\",\"Description\":\"Transformer Turns Ratio\",\"Manufacturer\":\"Biddle Instruments\",\"Model Number\":\"550100-39\",\"Serial Number\":\"13335\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/10/2023\"},{\"E3 ID#\":\"0310\",\"Description\":\"Three Phase Transformer Ratiometer\",\"Manufacturer\":\"Megger\",\"Model Number\":\"TTRU3-ADV\",\"Serial Number\":\"13460722\",\"Cal Interval\":\"12\",\"Cal Date\":\"08/02/2022\"},{\"E3 ID#\":\"0311\",\"Description\":\"Three Phase Transformer Ratiometer\",\"Manufacturer\":\"Megger\",\"Model Number\":\"TTRU3-ADV\",\"Serial Number\":\"13440722\",\"Cal Interval\":\"12\",\"Cal Date\":\"08/03/2022\"},{\"E3 ID#\":\"0312\",\"Description\":\"Current Transformer Excitation Test Set\",\"Manufacturer\":\"AVO\",\"Model Number\":\"CTER-91\",\"Serial Number\":\"101827-002/1\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/20/2023\"},{\"E3 ID#\":\"0313\",\"Description\":\"Current Transformer Excitation Test Set\",\"Manufacturer\":\"AVO\",\"Model Number\":\"CTER-91\",\"Serial Number\":\"120072-001/1\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/28/2017\"},{\"E3 ID#\":\"0314\",\"Description\":\"Current Transformer Excitation Test Set\",\"Manufacturer\":\"Megger\",\"Model Number\":\"CTER-91-115\",\"Serial Number\":\"200912050006\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/20/2023\"},{\"E3 ID#\":\"0315\",\"Description\":\"Current Transformer Excitation Test Set\",\"Manufacturer\":\"Megger\",\"Model Number\":\"CTER-91-115\",\"Serial Number\":\"201409050048\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/20/2023\"},{\"E3 ID#\":\"0401\",\"Description\":\"Infrared Camera & Accessories\",\"Manufacturer\":\"Flir\",\"Model Number\":\"Flir T420\",\"Serial Number\":\"62117603\",\"Cal Interval\":\"12\",\"Cal Date\":\"09/14/2021\"},{\"E3 ID#\":\"0403\",\"Description\":\"Infrared Camera & Accessories\",\"Manufacturer\":\"Flir\",\"Model Number\":\"T360\",\"Serial Number\":\"1196827\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/17/2017\"},{\"E3 ID#\":\"0404\",\"Description\":\"Infrared Camera & Accessories\",\"Manufacturer\":\"Flir\",\"Model Number\":\"T420 Flir-T62101\",\"Serial Number\":\"62101805\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/09/2023\"},{\"E3 ID#\":\"0405\",\"Description\":\"Infrared Camera & Accessories\",\"Manufacturer\":\"Flir\",\"Model Number\":\"T420 Flir-T62101\",\"Serial Number\":\"62101807\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/14/2016\"},{\"E3 ID#\":\"0406\",\"Description\":\"Infrared Camera\",\"Manufacturer\":\"FLIR\",\"Model Number\":\"T530\",\"Serial Number\":\"79316856\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/04/2021\"},{\"E3 ID#\":\"0407\",\"Description\":\"Infrared Camera & Accessories\",\"Manufacturer\":\"FLIR\",\"Model Number\":\"T530 24\",\"Serial Number\":\"79320657\",\"Cal Interval\":\"12\",\"Cal Date\":\"12/05/2022\"},{\"E3 ID#\":\"0489\",\"Description\":\"SMRT Relay Test Set & Accessories\",\"Manufacturer\":\"Megger\",\"Model Number\":\"SMRT410-41P0F0A0S1\",\"Serial Number\":\"201611070001\",\"Cal Interval\":\"12\",\"Cal Date\":\"10/31/2019\"},{\"E3 ID#\":\"0499\",\"Description\":\"Static Trip Test Set\",\"Manufacturer\":\"Allis Chalmers\",\"Model Number\":\"71-142-388-501\",\"Serial Number\":\"N/A\",\"Cal Interval\":\"12\",\"Cal Date\":\"09/23/2021\"},{\"E3 ID#\":\"0500\",\"Description\":\"(Pulsar) Relay Test Set & Accessories\",\"Manufacturer\":\"AVO\",\"Model Number\":\"10L3T3N-1/60\",\"Serial Number\":\"754240001\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/16/2015\"},{\"E3 ID#\":\"0502\",\"Description\":\"MPRT Relay test set\",\"Manufacturer\":\"Megger\",\"Model Number\":\"MPRT8430H4T6A2\",\"Serial Number\":\"MPRT080612\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/05/2015\"},{\"E3 ID#\":\"0503\",\"Description\":\"Pulsar Relay Test Set & Accessories\",\"Manufacturer\":\"AVO/Meggar\",\"Model Number\":\"10L3T3N-1/60\",\"Serial Number\":\"121568B-001/1\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/20/2018\"},{\"E3 ID#\":\"0504\",\"Description\":\"SMRT Relay Test Set & Accessories\",\"Manufacturer\":\"Megger\",\"Model Number\":\"SMRT410-40P0F0A0T1\",\"Serial Number\":\"201409070030\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/20/2023\"},{\"E3 ID#\":\"0505\",\"Description\":\"(Pulsar) Relay Test Set & Accessories\",\"Manufacturer\":\"AVO\",\"Model Number\":\"10L3T3N-1/60\",\"Serial Number\":\"9912020017\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/18/2015\"},{\"E3 ID#\":\"0506\",\"Description\":\"Static Trip 3 Secondary Injection Test Set\",\"Manufacturer\":\"Siemens\",\"Model Number\":\"PTS-4\",\"Serial Number\":\"012105008\",\"Cal Interval\":\"12\",\"Cal Date\":\"12/01/2016\"},{\"E3 ID#\":\"0509\",\"Description\":\"Circuit Breaker Test Set & Accessories\",\"Manufacturer\":\"AVO\",\"Model Number\":\"CB-8160\",\"Serial Number\":\"123174-001/1\",\"Cal Interval\":\"12\",\"Cal Date\":\"04/04/2022\"},{\"E3 ID#\":\"0510\",\"Description\":\"Circuit Breaker Test Set & Accessories\",\"Manufacturer\":\"AVO\",\"Model Number\":\"CB-8960\",\"Serial Number\":\"90110-001-1\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/19/2021\"},{\"E3 ID#\":\"0512\",\"Description\":\"Microversa Trip Unit Set\",\"Manufacturer\":\"General Electric\",\"Model Number\":\"TVRMS\",\"Serial Number\":\"182797\",\"Cal Interval\":\"12\",\"Cal Date\":\"09/21/2017\"},{\"E3 ID#\":\"0514\",\"Description\":\"Secondary Injection Test Set\",\"Manufacturer\":\"Siemens\",\"Model Number\":\"PTS-4\",\"Serial Number\":\"N/A\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/14/2016\"},{\"E3 ID#\":\"0515\",\"Description\":\"Secondary Injection Test Set\",\"Manufacturer\":\"Siemens\",\"Model Number\":\"PTS-4\",\"Serial Number\":\"90115014\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/31/2017\"},{\"E3 ID#\":\"0516\",\"Description\":\"TVRMS Micro Versa Trip Test Set\",\"Manufacturer\":\"General Electric\",\"Model Number\":\"TVRMS2\",\"Serial Number\":\"N/A\",\"Cal Interval\":\"12\",\"Cal Date\":\"09/23/2021\"},{\"E3 ID#\":\"0518\",\"Description\":\"DS Breaker Test Kit\",\"Manufacturer\":\"Cutler Hammer/Westinghouse\",\"Model Number\":\"DS\",\"Serial Number\":\"A970319-1\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/31/2017\"},{\"E3 ID#\":\"0520\",\"Description\":\"Circuit Breaker & Overload Relay Test Set\",\"Manufacturer\":\"AVO\",\"Model Number\":\"MS-2-115\",\"Serial Number\":\"90110-003/1\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/11/2022\"},{\"E3 ID#\":\"0521\",\"Description\":\"Circuit Breaker & Overload Relay Test Set\",\"Manufacturer\":\"AVO\",\"Model Number\":\"MS-2-115\",\"Serial Number\":\"126523-001-1\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/11/2022\"},{\"E3 ID#\":\"0522\",\"Description\":\"Circuit Breaker & Overload Relay Test Set\",\"Manufacturer\":\"AVO\",\"Model Number\":\"MS-2-115\",\"Serial Number\":\"145755-007/2\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/11/2022\"},{\"E3 ID#\":\"0523\",\"Description\":\"Circuit Breaker & Overload Relay Test Set\",\"Manufacturer\":\"AVO\",\"Model Number\":\"MS-2-115\",\"Serial Number\":\"145755-007/1\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/20/2023\"},{\"E3 ID#\":\"0524\",\"Description\":\"Circuit Breaker and Overload Relay Test Set\",\"Manufacturer\":\"AVO\",\"Model Number\":\"MS-2-115\",\"Serial Number\":\"0103010005\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/20/2023\"},{\"E3 ID#\":\"0525\",\"Description\":\"Universal Circuit Breaker Test Set includes CBTMB, M-N-P-S, & Self Test Modules Series B & M-N-P-S Adapters, & Series B Trip Unit Memory Reset Module\",\"Manufacturer\":\"Square D\",\"Model Number\":\"UTS3\",\"Serial Number\":\"N/A\",\"Cal Interval\":\"12\",\"Cal Date\":\"12/20/2016\"},{\"E3 ID#\":\"0526\",\"Description\":\"Circuit Breaker & Overload Relay Test Set\",\"Manufacturer\":\"AVO\",\"Model Number\":\"CB-832-115\",\"Serial Number\":\"0204040002\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/23/2021\"},{\"E3 ID#\":\"0539\",\"Description\":\"TVRMS Micro Versa Trip Test Set\",\"Manufacturer\":\"General Electric\",\"Model Number\":\"TVRMS\",\"Serial Number\":\"\",\"Cal Interval\":\"12\",\"Cal Date\":\"09/23/2021\"},{\"E3 ID#\":\"0545\",\"Description\":\"Hand Held Circuit Breaker Test Kit\",\"Manufacturer\":\"Square D\",\"Model Number\":\"S33594\",\"Serial Number\":\"48155-334-50/J840: 1237533594\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/03/2016\"},{\"E3 ID#\":\"0546\",\"Description\":\"Entelliguard Secondary Injection Test set\",\"Manufacturer\":\"GE\",\"Model Number\":\"GTUTK20\",\"Serial Number\":\"002108\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/03/2016\"},{\"E3 ID#\":\"0549\",\"Description\":\"Full Function Test Kit\",\"Manufacturer\":\"Square D\",\"Model Number\":\"S33595\",\"Serial Number\":\"48155-330-50\",\"Cal Interval\":\"24\",\"Cal Date\":\"05/27/2016\"},{\"E3 ID#\":\"0550\",\"Description\":\"Circuit Breaker & Overload Relay Test Set\",\"Manufacturer\":\"Megger\",\"Model Number\":\"CB-832-115\",\"Serial Number\":\"0507040011\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/20/2023\"},{\"E3 ID#\":\"0551\",\"Description\":\"Circuit Breaker & Overload Relay Test Set\",\"Manufacturer\":\"Megger\",\"Model Number\":\"CB-832-115\",\"Serial Number\":\"200912040005\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/04/2019\"},{\"E3 ID#\":\"0552\",\"Description\":\"Circuit Breaker & Overload Relay Test Set\",\"Manufacturer\":\"Megger\",\"Model Number\":\"CB-832-115\",\"Serial Number\":\"201409040014\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/20/2023\"},{\"E3 ID#\":\"0554\",\"Description\":\"Circuit Breaker & Overload Relay Test Set\",\"Manufacturer\":\"Megger\",\"Model Number\":\"CB-832-115\",\"Serial Number\":\"202202040028\",\"Cal Interval\":\"12\",\"Cal Date\":\"09/28/2022\"},{\"E3 ID#\":\"0555\",\"Description\":\"Three Phase Relay Test Set\",\"Manufacturer\":\"Omicron\",\"Model Number\":\"CRC 353\",\"Serial Number\":\"KC404D\",\"Cal Interval\":\"12\",\"Cal Date\":\"07/17/2018\"},{\"E3 ID#\":\"0560\",\"Description\":\"Circuit Breaker & Overload Relay Test Set\",\"Manufacturer\":\"Megger\",\"Model Number\":\"MS-2A\",\"Serial Number\":\"202106010006\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/23/2023\"},{\"E3 ID#\":\"0575\",\"Description\":\"Circuit Breaker Test Set & Accessories\",\"Manufacturer\":\"ETI\",\"Model Number\":\"PI-6000\",\"Serial Number\":\"21-M67497\",\"Cal Interval\":\"12\",\"Cal Date\":\"04/20/2021\"},{\"E3 ID#\":\"0591\",\"Description\":\"Digital Multi Meter, True RMS - Mike Smith\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87\",\"Serial Number\":\"54430263\",\"Cal Interval\":\"12\",\"Cal Date\":\"\"},{\"E3 ID#\":\"0592\",\"Description\":\"87 True RMS Multimeter\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87V / IMSK\",\"Serial Number\":\"57310047\",\"Cal Interval\":\"6\",\"Cal Date\":\"10/28/2022\"},{\"E3 ID#\":\"0593\",\"Description\":\"87 True RMS Multimeter\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87V / IMSK\",\"Serial Number\":\"57190005\",\"Cal Interval\":\"6\",\"Cal Date\":\"10/28/2022\"},{\"E3 ID#\":\"0594\",\"Description\":\"87 True RMS Multimeter\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87V / IMSK\",\"Serial Number\":\"56890001\",\"Cal Interval\":\"6\",\"Cal Date\":\"10/28/2022\"},{\"E3 ID#\":\"0595\",\"Description\":\"87 True RMS Multimeter\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87V / IMSK\",\"Serial Number\":\"56910236\",\"Cal Interval\":\"6\",\"Cal Date\":\"01/25/2022\"},{\"E3 ID#\":\"0596\",\"Description\":\"87 True RMS Multimeter\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87V / IMSK\",\"Serial Number\":\"56910214\",\"Cal Interval\":\"6\",\"Cal Date\":\"01/25/2022\"},{\"E3 ID#\":\"0597\",\"Description\":\"87 True RMS Multimeter\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87V / IMSK\",\"Serial Number\":\"56910337\",\"Cal Interval\":\"6\",\"Cal Date\":\"01/25/2022\"},{\"E3 ID#\":\"0598\",\"Description\":\"87 True RMS Multimeter\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87V / IMSK\",\"Serial Number\":\"56910233\",\"Cal Interval\":\"6\",\"Cal Date\":\"01/25/2022\"},{\"E3 ID#\":\"0599\",\"Description\":\"87 True RMS Multimeter\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87V / IMSK\",\"Serial Number\":\"56910300\",\"Cal Interval\":\"6\",\"Cal Date\":\"01/25/2022\"},{\"E3 ID#\":\"0600\",\"Description\":\"Digital Multi-Meter, True RMS\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87-V\",\"Serial Number\":\"10910158\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/19/2020\"},{\"E3 ID#\":\"0601\",\"Description\":\"Digital Multi-Meter, True RMS\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87\",\"Serial Number\":\"62860947\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/19/2019\"},{\"E3 ID#\":\"0602\",\"Description\":\"Digital Multi Meter, True RMS\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87\",\"Serial Number\":\"58460473\",\"Cal Interval\":\"12\",\"Cal Date\":\"08/14/2020\"},{\"E3 ID#\":\"0603\",\"Description\":\"Digital Multi Meter, True RMS\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87\",\"Serial Number\":\"61210016\",\"Cal Interval\":\"12\",\"Cal Date\":\"04/27/2017\"},{\"E3 ID#\":\"0604\",\"Description\":\"Digital Multi Meter, True RMS\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87\",\"Serial Number\":\"64630345\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/29/2016\"},{\"E3 ID#\":\"0605\",\"Description\":\"Digital Amp Clamp (Infrared 0405 Box Contents)\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"335\",\"Serial Number\":\"13080486\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/30/2016\"},{\"E3 ID#\":\"0606\",\"Description\":\"Digital Amp Clamp (Infrared 0404 Box Contents)\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"502\",\"Serial Number\":\"05L1456CT\",\"Cal Interval\":\"12\",\"Cal Date\":\"06/12/2018\"},{\"E3 ID#\":\"0607\",\"Description\":\"Digital Multi Meter, True RMS\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87V\",\"Serial Number\":\"98360048\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/16/2022\"},{\"E3 ID#\":\"0608\",\"Description\":\"Digital Multi Meter, True RMS\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87\",\"Serial Number\":\"73920003\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/11/2022\"},{\"E3 ID#\":\"0609\",\"Description\":\"Fluke True RMS Multimeter\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87 V\",\"Serial Number\":\"36110351\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/22/2019\"},{\"E3 ID#\":\"0610\",\"Description\":\"Open Jaw Current Clamp (Infrared 0405 Box Contents)\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"T5-600\",\"Serial Number\":\"90610314\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/30/2016\"},{\"E3 ID#\":\"0612\",\"Description\":\"Digital Multimeter, True RMS\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87-3\",\"Serial Number\":\"77600449\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/20/2023\"},{\"E3 ID#\":\"0613\",\"Description\":\"Digital Multi-Meter, True RMS\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87\",\"Serial Number\":\"58460471\",\"Cal Interval\":\"12\",\"Cal Date\":\"08/10/2020\"},{\"E3 ID#\":\"0614\",\"Description\":\"Digital Multi-Meter, True RMS\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87-V\",\"Serial Number\":\"89950250\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/04/2015\"},{\"E3 ID#\":\"0615\",\"Description\":\"VCPW Sec Inj Adapter 300/3000A flexible current clamp\",\"Manufacturer\":\"AEMC Instruments\",\"Model Number\":\"3000-36-2-1 (1153 test leads)\",\"Serial Number\":\"09L 28618Dv\",\"Cal Interval\":\"12\",\"Cal Date\":\"06/16/2017\"},{\"E3 ID#\":\"0616\",\"Description\":\"Digital Multimeter\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"187\",\"Serial Number\":\"87880032\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/19/2020\"},{\"E3 ID#\":\"0617\",\"Description\":\"Digital Multi Meter, True RMS (Infrared 0404 Box Contents)\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87\",\"Serial Number\":\"67200295\",\"Cal Interval\":\"12\",\"Cal Date\":\"06/12/2018\"},{\"E3 ID#\":\"0618\",\"Description\":\"Digital Multi-Meter, True RMS\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87-V\",\"Serial Number\":\"22320108\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/28/2021\"},{\"E3 ID#\":\"0619\",\"Description\":\"Multimeter - Cal Box\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87V\",\"Serial Number\":\"29180018\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/28/2017\"},{\"E3 ID#\":\"0620\",\"Description\":\"Voltage Detector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"4544\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/24/2023\"},{\"E3 ID#\":\"0622\",\"Description\":\"Voltage Detector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"4544\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/24/2023\"},{\"E3 ID#\":\"0623\",\"Description\":\"Voltage Detector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"4544\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/21/2023\"},{\"E3 ID#\":\"0624\",\"Description\":\"Voltage Detector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"4244\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"03/17/2017\"},{\"E3 ID#\":\"0625\",\"Description\":\"Voltage Detector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"4544\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/23/2023\"},{\"E3 ID#\":\"0626\",\"Description\":\"Voltage Detector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"4244\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"04/04/2022\"},{\"E3 ID#\":\"0627\",\"Description\":\"Digital Amp Clamp (Infrared 0404 Box Contents)\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"374\",\"Serial Number\":\"29370708WS\",\"Cal Interval\":\"12\",\"Cal Date\":\"06/12/2018\"},{\"E3 ID#\":\"0628\",\"Description\":\"Voltage Detector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"4544\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"11/20/2020\"},{\"E3 ID#\":\"0629\",\"Description\":\"Voltage Detector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"4244\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/21/2023\"},{\"E3 ID#\":\"0630\",\"Description\":\"Voltage Detector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"4544\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"11/30/2020\"},{\"E3 ID#\":\"0631\",\"Description\":\"Fluke True RMS Multimeter Combo Kit\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87-5 / E2KIT (5520A)\",\"Serial Number\":\"35760193\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/26/2016\"},{\"E3 ID#\":\"0632\",\"Description\":\"Fluke True RMS Multimeter Combo Kit\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87V\",\"Serial Number\":\"36180054\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/20/2023\"},{\"E3 ID#\":\"0633\",\"Description\":\"Fluke Industrial True-rms Multimeter\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87V\",\"Serial Number\":\"42850029\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/16/2020\"},{\"E3 ID#\":\"0634\",\"Description\":\"Fluke Industrial True-rms Multimeter\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87V\",\"Serial Number\":\"42850026\",\"Cal Interval\":\"12\",\"Cal Date\":\"\"},{\"E3 ID#\":\"0635\",\"Description\":\"87 True RMS Multimeter\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87V / IMSK\",\"Serial Number\":\"60980320\",\"Cal Interval\":\"6\",\"Cal Date\":\"01/25/2022\"},{\"E3 ID#\":\"0636\",\"Description\":\"87 True RMS Multimeter\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87V / IMSK\",\"Serial Number\":\"60980321\",\"Cal Interval\":\"6\",\"Cal Date\":\"\"},{\"E3 ID#\":\"0637\",\"Description\":\"87 True RMS Multimeter\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87V / IMSK\",\"Serial Number\":\"60980318\",\"Cal Interval\":\"6\",\"Cal Date\":\"\"},{\"E3 ID#\":\"0651\",\"Description\":\"Phasing Voltmeter with (2) 4' hot sticks\",\"Manufacturer\":\"H.J. Hirtzer\",\"Model Number\":\"86649\",\"Serial Number\":\"2783\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/04/2017\"},{\"E3 ID#\":\"0661\",\"Description\":\"Current Probe 0-200A  A/C\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"Y8101 (spare ct bag)\",\"Serial Number\":\"63262184\",\"Cal Interval\":\"12\",\"Cal Date\":\"04/19/2019\"},{\"E3 ID#\":\"0663\",\"Description\":\"Current Probe 600A\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"80i-600A\",\"Serial Number\":\"N/A\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/19/2019\"},{\"E3 ID#\":\"0665\",\"Description\":\"Current Probe 600A\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"80i-600A\",\"Serial Number\":\"N/A\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/22/2019\"},{\"E3 ID#\":\"0666\",\"Description\":\"Digital Multi-Meter, True RMS (Infrared 0404 Box Contents)\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"87-3\",\"Serial Number\":\"73910322\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/12/2016\"},{\"E3 ID#\":\"0666a\",\"Description\":\"Current Probe 90-150 Amp\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"Y8101A (spare ct bag)\",\"Serial Number\":\"N/A\",\"Cal Interval\":\"12\",\"Cal Date\":\"04/19/2019\"},{\"E3 ID#\":\"0667\",\"Description\":\"Current Probe, 150A\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"Y8101A (spare ct bag)\",\"Serial Number\":\"\",\"Cal Interval\":\"12\",\"Cal Date\":\"04/19/2019\"},{\"E3 ID#\":\"0667a\",\"Description\":\"AC Current Probe 600A\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"80i-600A\",\"Serial Number\":\"\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/30/2016\"},{\"E3 ID#\":\"0668\",\"Description\":\"Current Probe\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"80i-600A\",\"Serial Number\":\"\",\"Cal Interval\":\"12\",\"Cal Date\":\"04/27/2017\"},{\"E3 ID#\":\"0669\",\"Description\":\"Current Probe - Spare CT Bag\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"i400\",\"Serial Number\":\"97970061\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/29/2016\"},{\"E3 ID#\":\"0670\",\"Description\":\"True-rms Clamp Meter\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"324\",\"Serial Number\":\"39280096WS\",\"Cal Interval\":\"12\",\"Cal Date\":\"09/08/2017\"},{\"E3 ID#\":\"0671\",\"Description\":\"AC Current Probe 600 A\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"80i-600A\",\"Serial Number\":\"77550038\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/05/2015\"},{\"E3 ID#\":\"0672\",\"Description\":\"AC Current Probe 600A\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"80i-600A\",\"Serial Number\":\"\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/29/2016\"},{\"E3 ID#\":\"0674\",\"Description\":\"400A AC Current Clamp\",\"Manufacturer\":\"Fluke\",\"Model Number\":\"80i-400\",\"Serial Number\":\"8741-81979\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/30/2016\"},{\"E3 ID#\":\"0675\",\"Description\":\"12A current clamp\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"MN307 (1153 test leads)\",\"Serial Number\":\"04M39160Dv\",\"Cal Interval\":\"12\",\"Cal Date\":\"06/16/2017\"},{\"E3 ID#\":\"0676\",\"Description\":\"12A current clamp\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"MN307 (1153 test leads)\",\"Serial Number\":\"04M39162Dv\",\"Cal Interval\":\"12\",\"Cal Date\":\"06/16/2017\"},{\"E3 ID#\":\"0677\",\"Description\":\"12A current clamp\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"MN307 (1153 test leads)\",\"Serial Number\":\"04M39165Dv\",\"Cal Interval\":\"12\",\"Cal Date\":\"06/16/2017\"},{\"E3 ID#\":\"0678\",\"Description\":\"300/3000A flexible current clamp\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"3000-36-2-1 (1153 test leads)\",\"Serial Number\":\"131194CCDV\",\"Cal Interval\":\"12\",\"Cal Date\":\"06/16/2017\"},{\"E3 ID#\":\"0679\",\"Description\":\"300/3000A flexible current clamp\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"3000-36-2-1 (1153 test leads)\",\"Serial Number\":\"128966CCDV\",\"Cal Interval\":\"12\",\"Cal Date\":\"06/16/2017\"},{\"E3 ID#\":\"0680\",\"Description\":\"Watt Hour Meter Test Set\",\"Manufacturer\":\"AVO\",\"Model Number\":\"SSS-30\",\"Serial Number\":\"92414-0001/1\",\"Cal Interval\":\"12\",\"Cal Date\":\"10/25/2017\"},{\"E3 ID#\":\"0681\",\"Description\":\"Watt Hour Standard\",\"Manufacturer\":\"Radian Research\",\"Model Number\":\"RD-20-232\",\"Serial Number\":\"208979\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/25/2020\"},{\"E3 ID#\":\"0683\",\"Description\":\"2/200 A current clamp\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"MN373\",\"Serial Number\":\"222986GJDV\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/16/2016\"},{\"E3 ID#\":\"0691\",\"Description\":\"Phase Sequence/Motor Rotation Tester\",\"Manufacturer\":\"Amprobe\",\"Model Number\":\"PRM-1\",\"Serial Number\":\"\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/04/2015\"},{\"E3 ID#\":\"0692\",\"Description\":\"Phase Sequence/Motor Rotation Tester\",\"Manufacturer\":\"Amprobe\",\"Model Number\":\"PRM-1\",\"Serial Number\":\"\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/22/2019\"},{\"E3 ID#\":\"0693\",\"Description\":\"300/3000A flexible current probe\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"3000-36-2-1\",\"Serial Number\":\"158251DEDV\",\"Cal Interval\":\"12\",\"Cal Date\":\"06/16/2017\"},{\"E3 ID#\":\"0694\",\"Description\":\"300/3000A flexible current probe\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"3000-36-2-1\",\"Serial Number\":\"158248DEDV\",\"Cal Interval\":\"12\",\"Cal Date\":\"06/16/2017\"},{\"E3 ID#\":\"0700\",\"Description\":\"Phase Rotation Meter\",\"Manufacturer\":\"Wempco\",\"Model Number\":\"4600\",\"Serial Number\":\"N/A\",\"Cal Interval\":\"12\",\"Cal Date\":\"07/12/2016\"},{\"E3 ID#\":\"0701\",\"Description\":\"Phase Rotation Meter\",\"Manufacturer\":\"Associated Research\",\"Model Number\":\"46\",\"Serial Number\":\"N/A\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/04/2015\"},{\"E3 ID#\":\"0719\",\"Description\":\"Surge Protector Test Set\",\"Manufacturer\":\"Joslyn\",\"Model Number\":\"4010-01\",\"Serial Number\":\"757\",\"Cal Interval\":\"12\",\"Cal Date\":\"09/23/2021\"},{\"E3 ID#\":\"0720\",\"Description\":\"Lim Test Set\",\"Manufacturer\":\"Bender\",\"Model Number\":\"LT-120\",\"Serial Number\":\"N/A\",\"Cal Interval\":\"12\",\"Cal Date\":\"06/16/2017\"},{\"E3 ID#\":\"0721\",\"Description\":\"Lim\\\\GFIC 120V Test Set\",\"Manufacturer\":\"Bender\",\"Model Number\":\"LT-3000\",\"Serial Number\":\"N/A\",\"Cal Interval\":\"12\",\"Cal Date\":\"03/18/2022\"},{\"E3 ID#\":\"0730\",\"Description\":\"Power Recloser Test Set\",\"Manufacturer\":\"Cooper\",\"Model Number\":\"MET\",\"Serial Number\":\"1634\",\"Cal Interval\":\"12\",\"Cal Date\":\"09/23/2021\"},{\"E3 ID#\":\"0731\",\"Description\":\"AC Current Probe, 10/100A\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"MN05\",\"Serial Number\":\"105836\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/22/2019\"},{\"E3 ID#\":\"0732\",\"Description\":\"AC Current Probe, 10/100A\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"MN05\",\"Serial Number\":\"105843\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/18/2019\"},{\"E3 ID#\":\"0733\",\"Description\":\"AC Current Probe, 10/100A\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"MN05\",\"Serial Number\":\"105839\",\"Cal Interval\":\"12\",\"Cal Date\":\"04/27/2017\"},{\"E3 ID#\":\"0734\",\"Description\":\"AC Current Probe, 10/100A\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"MN05\",\"Serial Number\":\"105835\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/16/2016\"},{\"E3 ID#\":\"0735\",\"Description\":\"AC Current Probe, 10/100A\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"MN05\",\"Serial Number\":\"105832\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/30/2016\"},{\"E3 ID#\":\"0736\",\"Description\":\"AC Current Probe, 10/100A\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"MN05\",\"Serial Number\":\"105846\",\"Cal Interval\":\"12\",\"Cal Date\":\"08/12/2020\"},{\"E3 ID#\":\"0737\",\"Description\":\"AC Current Probe, 10/100A\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"MN05\",\"Serial Number\":\"105842\",\"Cal Interval\":\"12\",\"Cal Date\":\"08/14/2020\"},{\"E3 ID#\":\"0738\",\"Description\":\"AC Current Probe, 10/100A\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"MN05\",\"Serial Number\":\"105840\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/29/2016\"},{\"E3 ID#\":\"0739\",\"Description\":\"AC Current Probe, 10/100A\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"MN05\",\"Serial Number\":\"105925KEDV\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/11/2019\"},{\"E3 ID#\":\"0740\",\"Description\":\"AC Current Clamp, 200A\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"MN373\",\"Serial Number\":\"136314MADV\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/11/2019\"},{\"E3 ID#\":\"1151\",\"Description\":\"Three phase power quality meter\",\"Manufacturer\":\"AEMC\",\"Model Number\":\"3945\",\"Serial Number\":\"00200472\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/18/2020\"},{\"E3 ID#\":\"1153\",\"Description\":\"8-channel waveform recorder\",\"Manufacturer\":\"Astro-Med\",\"Model Number\":\"Dash-8Xe\",\"Serial Number\":\"05A0088\",\"Cal Interval\":\"12\",\"Cal Date\":\"02/19/2014\"},{\"E3 ID#\":\"1154\",\"Description\":\"Power Quality Recorder\",\"Manufacturer\":\"Dranetz-BMI\",\"Model Number\":\"PX5-XFAST\",\"Serial Number\":\"PX50FA047\",\"Cal Interval\":\"12\",\"Cal Date\":\"08/26/2014\"},{\"E3 ID#\":\"1155\",\"Description\":\"Power Quality Recorder\",\"Manufacturer\":\"Dranetz-BMI\",\"Model Number\":\"PX5-XFAST\",\"Serial Number\":\"PX50FA240\",\"Cal Interval\":\"12\",\"Cal Date\":\"06/06/2017\"},{\"E3 ID#\":\"1156\",\"Description\":\"Power Quality Recorder\",\"Manufacturer\":\"Dranetz-BMI\",\"Model Number\":\"PX5-XFAST\",\"Serial Number\":\"PX50HA042\",\"Cal Interval\":\"12\",\"Cal Date\":\"12/14/2022\"},{\"E3 ID#\":\"1200\",\"Description\":\"High Voltage Gloves With Bag #1\",\"Manufacturer\":\"W.H. Salisbury\",\"Model Number\":\"17 kV\",\"Serial Number\":\"2TS25\",\"Cal Interval\":\"6\",\"Cal Date\":\"07/03/2019\"},{\"E3 ID#\":\"1201\",\"Description\":\"High Voltage Gloves\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"D120 Type 1\",\"Serial Number\":\"3445011\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/22/2021\"},{\"E3 ID#\":\"1210\",\"Description\":\"High Voltage Gloves with Bag #2\",\"Manufacturer\":\"North\",\"Model Number\":\"17 kV\",\"Serial Number\":\"F0796\",\"Cal Interval\":\"6\",\"Cal Date\":\"11/20/2020\"},{\"E3 ID#\":\"1224\",\"Description\":\"Low Voltage Glove w/ protector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"E011Y11\",\"Serial Number\":\"1425, 1426\",\"Cal Interval\":\"6\",\"Cal Date\":\"01/10/2023\"},{\"E3 ID#\":\"1230\",\"Description\":\"High Voltage Gloves with bag #4\",\"Manufacturer\":\"W.H. Salisbury\",\"Model Number\":\"E214YB/11\",\"Serial Number\":\"10172287\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/19/2022\"},{\"E3 ID#\":\"1232\",\"Description\":\"High Voltage Gloves Class 2\",\"Manufacturer\":\"Marigold\",\"Model Number\":\"ANS-123743\",\"Serial Number\":\"C2S10HF0041F (L&R)\",\"Cal Interval\":\"6\",\"Cal Date\":\"01/10/2023\"},{\"E3 ID#\":\"1235\",\"Description\":\"High Voltage Gloves with bag\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"E418CRB10.5\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"11/18/2020\"},{\"E3 ID#\":\"1236\",\"Description\":\"High Voltage Gloves with Leather Protector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"17 kV\",\"Serial Number\":\"9933629\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/22/2021\"},{\"E3 ID#\":\"1237\",\"Description\":\"High Voltage Gloves with Leather Protector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"17 kV\",\"Serial Number\":\"9940059\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/14/2022\"},{\"E3 ID#\":\"1238\",\"Description\":\"High Voltage Gloves Class 4 / 36kV\",\"Manufacturer\":\"Honeywell / Salisbury\",\"Model Number\":\"D120 Type 1\",\"Serial Number\":\"12474633\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/21/2021\"},{\"E3 ID#\":\"1240\",\"Description\":\"High Voltage Gloves w/ Protector (Tony Paul-9.5)\",\"Manufacturer\":\"Honeywell Salisbury\",\"Model Number\":\"Class 2\",\"Serial Number\":\"12302692 / 12546285\",\"Cal Interval\":\"6\",\"Cal Date\":\"11/05/2021\"},{\"E3 ID#\":\"1241\",\"Description\":\"Low Voltage Gloves w/ Protector (Tony Paul-9.5)\",\"Manufacturer\":\"Honeywell Salisbury\",\"Model Number\":\"Class 0\",\"Serial Number\":\"13893836 / 13893836\",\"Cal Interval\":\"6\",\"Cal Date\":\"11/05/2021\"},{\"E3 ID#\":\"1243\",\"Description\":\"High Voltage Gloves w/ Protector (Mike Smith-10)\",\"Manufacturer\":\"Marigold\",\"Model Number\":\"Class 2\",\"Serial Number\":\"CS210 G0031F\",\"Cal Interval\":\"6\",\"Cal Date\":\"10/01/2020\"},{\"E3 ID#\":\"1244\",\"Description\":\"High Voltage Gloves w/ Protector (Steve Rev - 11)\",\"Manufacturer\":\"Marigold\",\"Model Number\":\"ASTM D120\",\"Serial Number\":\"C2S11 G0031F\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/24/2021\"},{\"E3 ID#\":\"1245\",\"Description\":\"High Voltage Gloves w/ Protector (Vince Nuccio - 10.5)\",\"Manufacturer\":\"Marigold\",\"Model Number\":\"ASTM D120\",\"Serial Number\":\"C2S10H F0011F\",\"Cal Interval\":\"6\",\"Cal Date\":\"03/07/2022\"},{\"E3 ID#\":\"1246\",\"Description\":\"High Voltage Gloves - Size 10.5 (Spare)\",\"Manufacturer\":\"Marigold\",\"Model Number\":\"ASTM D120\",\"Serial Number\":\"C2S10H F0011F\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/22/2021\"},{\"E3 ID#\":\"1250\",\"Description\":\"Low Voltage Glove with Protector\",\"Manufacturer\":\"W.H. Salisbury\",\"Model Number\":\"1000V\",\"Serial Number\":\"30W36\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/22/2021\"},{\"E3 ID#\":\"1251\",\"Description\":\"Low Voltage Gloves w/ Protector (Ladd Frank - 10)\",\"Manufacturer\":\"Honeywell / Salisbury\",\"Model Number\":\"E011B/10\",\"Serial Number\":\"14649959\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/09/2022\"},{\"E3 ID#\":\"1252\",\"Description\":\"LV Gloves w/ Protector (Matt Grajczyk - 9)\",\"Manufacturer\":\"Honeywell / Salisbury\",\"Model Number\":\"E011B/9\",\"Serial Number\":\"18239049\",\"Cal Interval\":\"6\",\"Cal Date\":\"\"},{\"E3 ID#\":\"1253\",\"Description\":\"LV Gloves w/ Protectors (Ben Loose-10.5)\",\"Manufacturer\":\"Marigold Industrial\",\"Model Number\":\"Class 0\",\"Serial Number\":\"C0s10HH0121F\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/09/2022\"},{\"E3 ID#\":\"1255\",\"Description\":\"Low Voltage Glove with Protector\",\"Manufacturer\":\"W.H. Salisbury\",\"Model Number\":\"1000V\",\"Serial Number\":\"30W36\",\"Cal Interval\":\"6\",\"Cal Date\":\"11/20/2020\"},{\"E3 ID#\":\"1260\",\"Description\":\"Low Voltage Glove with Protector\",\"Manufacturer\":\"W.H. Salisbury\",\"Model Number\":\"D120\",\"Serial Number\":\"G7528\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/09/2022\"},{\"E3 ID#\":\"1265\",\"Description\":\"Low Voltage Glove with Protector\",\"Manufacturer\":\"W.H. Salisbury\",\"Model Number\":\"1000V\",\"Serial Number\":\"30W36\",\"Cal Interval\":\"6\",\"Cal Date\":\"11/03/2021\"},{\"E3 ID#\":\"1269\",\"Description\":\"High Voltage Glove with Protector - Size 10 Spare\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"17kV\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"11/03/2017\"},{\"E3 ID#\":\"1270\",\"Description\":\"Low Voltage Glove with Protector\",\"Manufacturer\":\"W.H. Salisbury\",\"Model Number\":\"1000V\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/14/2022\"},{\"E3 ID#\":\"1275\",\"Description\":\"Low Voltage Glove with Prot.(safety equip box)\",\"Manufacturer\":\"W.H. Salisbury\",\"Model Number\":\"D120\",\"Serial Number\":\"4LS30\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/22/2021\"},{\"E3 ID#\":\"1280\",\"Description\":\"Low Voltage Glove with Protector\",\"Manufacturer\":\"W.H. Salisbury\",\"Model Number\":\"WLS23\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/24/2021\"},{\"E3 ID#\":\"1283\",\"Description\":\"Low Voltage Glove with Protector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"E010Y10.5\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"11/20/2020\"},{\"E3 ID#\":\"1285\",\"Description\":\"Low Voltage Glove with Protector\",\"Manufacturer\":\"W.H. Salisbury\",\"Model Number\":\"\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/22/2021\"},{\"E3 ID#\":\"1290\",\"Description\":\"Low Voltage Glove with Protector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"1000V\",\"Serial Number\":\"30W36\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/12/2022\"},{\"E3 ID#\":\"1291\",\"Description\":\"Low Voltage Glove with Protector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"E010Y10.5\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/22/2021\"},{\"E3 ID#\":\"1292\",\"Description\":\"High Voltage Glove with Protector & Bag\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"E214YB/11\",\"Serial Number\":\"10172289\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/22/2021\"},{\"E3 ID#\":\"1293\",\"Description\":\"High Voltage Glove with Protector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"D120\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/09/2022\"},{\"E3 ID#\":\"1294\",\"Description\":\"High Voltage Glove with Protector\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"E418CRB10.5\",\"Serial Number\":\"7931875\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/22/2021\"},{\"E3 ID#\":\"1295\",\"Description\":\"High Voltage Gloves w/Protectors (CW)\",\"Manufacturer\":\"Marigold Industrial\",\"Model Number\":\"ASTM D120 (Size 11)  / 113898\",\"Serial Number\":\"R: C2S11K80201 / L:C2S11K9161F\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/22/2021\"},{\"E3 ID#\":\"1296\",\"Description\":\"High Voltage Gloves (SPARE)\",\"Manufacturer\":\"Marigold Industrial\",\"Model Number\":\"ASTM D120 (Size 11)\",\"Serial Number\":\"EN60903\",\"Cal Interval\":\"6\",\"Cal Date\":\"11/03/2021\"},{\"E3 ID#\":\"1297\",\"Description\":\"HV Gloves w/ Protectros (Matt Grajczyk - 9)\",\"Manufacturer\":\"Marigold Industrial\",\"Model Number\":\"Class 2\",\"Serial Number\":\"C2S9H0121F\",\"Cal Interval\":\"6\",\"Cal Date\":\"09/14/2022\"},{\"E3 ID#\":\"1298\",\"Description\":\"HV Gloves w/ Protectors\",\"Manufacturer\":\"Marigold Industrial\",\"Model Number\":\"Class 2\",\"Serial Number\":\"C2S10H0301F20K\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/09/2022\"},{\"E3 ID#\":\"1299\",\"Description\":\"HV Gloves w/ Protectors\",\"Manufacturer\":\"Marigold Industrial\",\"Model Number\":\"Class 2\",\"Serial Number\":\"C2S11G0031F\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/12/2022\"},{\"E3 ID#\":\"1612\",\"Description\":\"Battery Tester\",\"Manufacturer\":\"Midtronics\",\"Model Number\":\"Micro Celltron\",\"Serial Number\":\"611576\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/30/2016\"},{\"E3 ID#\":\"1613\",\"Description\":\"Digital Hydrometer\",\"Manufacturer\":\"Storage Battery Systems, Inc.\",\"Model Number\":\"SBS-2002\",\"Serial Number\":\"0003182\",\"Cal Interval\":\"12\",\"Cal Date\":\"11/30/2016\"},{\"E3 ID#\":\"1631\",\"Description\":\"Confined Space 4-gas detector\",\"Manufacturer\":\"MSA - Altair 4X\",\"Model Number\":\"10107602\",\"Serial Number\":\"346244\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/20/2016\"},{\"E3 ID#\":\"BK-FSEEXT\",\"Description\":\"Fuse Stick Extendable\",\"Manufacturer\":\"Hastings\",\"Model Number\":\"5467\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"06/16/2020\"},{\"E3 ID#\":\"BK-HVBLNK\",\"Description\":\"(2) High Voltage Blankets\",\"Manufacturer\":\"W.H. Salisbury\",\"Model Number\":\"900E\",\"Serial Number\":\"40 kV, orange\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/30/2015\"},{\"E3 ID#\":\"BK-SAFEGND\",\"Description\":\"Safety Grounds\",\"Manufacturer\":\"\",\"Model Number\":\"\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/21/2019\"},{\"E3 ID#\":\"BK-SHOTGUN\",\"Description\":\"Shot Gun\",\"Manufacturer\":\"Hastings\",\"Model Number\":\"8104\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"06/16/2020\"},{\"E3 ID#\":\"BL-FSEEXT\",\"Description\":\"Fuse Stick Extendable\",\"Manufacturer\":\"Hastings\",\"Model Number\":\"\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/21/2023\"},{\"E3 ID#\":\"BL-FSEFIXD\",\"Description\":\"Fuse Stick Fixed\",\"Manufacturer\":\"Hastings\",\"Model Number\":\"\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/21/2023\"},{\"E3 ID#\":\"BL-HVBLNK1\",\"Description\":\"(2) High Voltage Blanket\",\"Manufacturer\":\"W.H. Salisbury\",\"Model Number\":\"900E\",\"Serial Number\":\"40 kV, orange\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/30/2015\"},{\"E3 ID#\":\"BL-HVBLNK2\",\"Description\":\"(1) High Voltage Blankets\",\"Manufacturer\":\"Voltguard\",\"Model Number\":\"\",\"Serial Number\":\"20 kV, yellow\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/30/2015\"},{\"E3 ID#\":\"BL-SAFEGND\",\"Description\":\"Safety Grounds\",\"Manufacturer\":\"\",\"Model Number\":\"\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/19/2019\"},{\"E3 ID#\":\"BL-SHOTGUN\",\"Description\":\"Shot Gun\",\"Manufacturer\":\"A.B Chance\",\"Model Number\":\"C4031534\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/21/2023\"},{\"E3 ID#\":\"M4000\",\"Description\":\"10 kV Doble Transformer & Computer & Transport\",\"Manufacturer\":\"Doble\",\"Model Number\":\"M4100\",\"Serial Number\":\"019500389\",\"Cal Interval\":\"60\",\"Cal Date\":\"04/29/2022\"},{\"E3 ID#\":\"M4001\",\"Description\":\"10kV Power Factor Test Set ( E3-16099)\",\"Manufacturer\":\"Doble\",\"Model Number\":\"M4100\",\"Serial Number\":\"050910409\",\"Cal Interval\":\"60\",\"Cal Date\":\"02/23/2023\"},{\"E3 ID#\":\"M4002\",\"Description\":\"10kV Power Factor Test Set\",\"Manufacturer\":\"Doble\",\"Model Number\":\"M4100\",\"Serial Number\":\"091431763\",\"Cal Interval\":\"60\",\"Cal Date\":\"12/03/2021\"},{\"E3 ID#\":\"M4003\",\"Description\":\"M4100 Insulation Analyzer/ Computer\",\"Manufacturer\":\"Doble\",\"Model Number\":\"M4100\",\"Serial Number\":\"051832631\",\"Cal Interval\":\"60\",\"Cal Date\":\"04/29/2022\"},{\"E3 ID#\":\"MEU-3250\",\"Description\":\"2.5kV Doble Transformer & Cables\",\"Manufacturer\":\"Doble\",\"Model Number\":\"MEU\",\"Serial Number\":\"1347\",\"Cal Interval\":\"12\",\"Cal Date\":\"01/10/2016\"},{\"E3 ID#\":\"RD-FSEEXT\",\"Description\":\"Fuse Stick Extendable\",\"Manufacturer\":\"Hastings\",\"Model Number\":\"\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/24/2023\"},{\"E3 ID#\":\"RD-SAFEGND\",\"Description\":\"Safety Grounds\",\"Manufacturer\":\"\",\"Model Number\":\"\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/03/2020\"},{\"E3 ID#\":\"RD-SHOTGUN\",\"Description\":\"Shot Gun\",\"Manufacturer\":\"Hastings\",\"Model Number\":\"8104\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/24/2023\"},{\"E3 ID#\":\"SHGN-01\",\"Description\":\"Fixed Shotgun, Extension Rod\",\"Manufacturer\":\"Hastings\",\"Model Number\":\"8106\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"06/19/2022\"},{\"E3 ID#\":\"SHGN-02\",\"Description\":\"Fixed Shotgun, Extension Rod\",\"Manufacturer\":\"Hastings\",\"Model Number\":\"8106\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"06/19/2022\"},{\"E3 ID#\":\"SHGN-03\",\"Description\":\"Fixed Shotgun, Extension Rod\",\"Manufacturer\":\"Hastings\",\"Model Number\":\"8106\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"06/19/2022\"},{\"E3 ID#\":\"SHGN-04\",\"Description\":\"Fixed Shotgun, Extension Rod\",\"Manufacturer\":\"Hastings\",\"Model Number\":\"8106\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/21/2023\"},{\"E3 ID#\":\"SHOP-FS\",\"Description\":\"Fuse Stick\",\"Manufacturer\":\"\",\"Model Number\":\"\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"04/04/2022\"},{\"E3 ID#\":\"TELO25FT-01\",\"Description\":\"Pole, HV-Telescopic 25'\",\"Manufacturer\":\"Hastings\",\"Model Number\":\"HV-225\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"06/19/2022\"},{\"E3 ID#\":\"TELO25FT-02\",\"Description\":\"Pole, HV-Telescopic 25'\",\"Manufacturer\":\"Hastings\",\"Model Number\":\"HV-225\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/21/2023\"},{\"E3 ID#\":\"TELO25FT-03\",\"Description\":\"Pole, HV-Telescopic 25'\",\"Manufacturer\":\"Hastings\",\"Model Number\":\"HV-225\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"06/19/2022\"},{\"E3 ID#\":\"TELO25FT-04\",\"Description\":\"Pole, HV-Telescopic 25'\",\"Manufacturer\":\"Hastings\",\"Model Number\":\"HV-225\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"06/19/2022\"},{\"E3 ID#\":\"TLR1-FSEEXT\",\"Description\":\"Fuse Stick Extendable\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"4045\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/21/2023\"},{\"E3 ID#\":\"TLR1-SAFEGND\",\"Description\":\"Safety Grounds\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"2138\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"11/21/2016\"},{\"E3 ID#\":\"TLR1-SHOTGUN\",\"Description\":\"Shot Gun\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"4007\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/21/2023\"},{\"E3 ID#\":\"TLR-FSEPLR\",\"Description\":\"Fuse Puller\",\"Manufacturer\":\"\",\"Model Number\":\"\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"03/17/2017\"},{\"E3 ID#\":\"TRL2-HVBLKT\",\"Description\":\"High Voltage Blanket\",\"Manufacturer\":\"Salisbury\",\"Model Number\":\"900E\",\"Serial Number\":\"36kV, orange\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/30/2015\"},{\"E3 ID#\":\"WT-FSEEXT\",\"Description\":\"Fuse Stick Extendable\",\"Manufacturer\":\"Hastings\",\"Model Number\":\"\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/24/2023\"},{\"E3 ID#\":\"WT-HVBLNK\",\"Description\":\"(2) High Voltage Blankets\",\"Manufacturer\":\"W.H. Salisbury\",\"Model Number\":\"900E\",\"Serial Number\":\"40kV, orange\",\"Cal Interval\":\"6\",\"Cal Date\":\"07/13/2016\"},{\"E3 ID#\":\"WT-SAFEGND\",\"Description\":\"Safety Grounds\",\"Manufacturer\":\"\",\"Model Number\":\"\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"12/04/2020\"},{\"E3 ID#\":\"WT-SHOTGUN\",\"Description\":\"Shot Gun\",\"Manufacturer\":\"Hastings\",\"Model Number\":\"\",\"Serial Number\":\"\",\"Cal Interval\":\"6\",\"Cal Date\":\"02/24/2023\"}]";
                    var list = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Root>>(equipJson,
                   new Newtonsoft.Json.Converters.IsoDateTimeConverter { DateTimeFormat = "MM/dd/yyyy" });

                var site_list = _UoW.WorkOrderRepository.GetAllSites();

                foreach (var site in site_list)
                {
                    foreach (var item in list)
                    {
                        
                        Equipment equipment = new Equipment();
                        equipment.site_id = site;
                        equipment.equipment_number = item.E3ID;
                        equipment.equipment_name = item.Description;
                        equipment.manufacturer = item.Manufacturer;
                        equipment.model_number = item.ModelNumber;
                        equipment.serial_number = item.SerialNumber;
                        try
                        {
                            equipment.calibration_interval = int.Parse(item.CalInterval);

                        }
                        catch (Exception ex)
                        {
                            equipment.calibration_interval = 0;
                        }
                        try
                        {
                            if (!String.IsNullOrEmpty(item.CalDate))
                            {
                                equipment.calibration_date = DateTime.Parse(item.CalDate);
                            }
                        }
                        catch(Exception ex)
                        {
                            equipment.calibration_date = DateTime.UtcNow;
                        }
                        equipment.created_at = DateTime.UtcNow;
                        equipment.calibration_status = 3;
                        var insert = await _UoW.BaseGenericRepository<Equipment>().Insert(equipment);
                        _UoW.SaveChanges();
                    }
                    
                }
                response = (int)ResponseStatusNumber.Success;
            }
            catch (Exception ex)
            {
            }
            

            return response;
        }


        public List<GetOBIRImagesByWOIdResponseModel> GetIRImagesByWOId(Guid wo_id)
        {
            List<GetOBIRImagesByWOIdResponseModel> response = new List<GetOBIRImagesByWOIdResponseModel>();

            try
            {
                var get_OBWOAssets = _UoW.WorkOrderRepository.GetWOOBAssetsByWOId(wo_id);
                if (get_OBWOAssets != null && get_OBWOAssets.Count > 0)
                {
                    get_OBWOAssets = get_OBWOAssets.Where(x => !x.is_deleted).ToList();
                    var map = _mapper.Map<List<GetOBIRImagesByWOIdResponseModel>>(get_OBWOAssets);
                    response = map.OrderBy(x=>x.ob_ir_Image_label_list.FirstOrDefault()?.ir_image_label).ToList();
                }
            }
            catch (Exception ex)
            {
            }

            return response;
        }
        public ListViewModel<GetOBIRImagesByWOIdResponseModel> GetIRImagesByWOId_V2(GetOBIRImagesByWOId_V2RequestModel requestModel)
        {
            ListViewModel<GetOBIRImagesByWOIdResponseModel> response = new ListViewModel<GetOBIRImagesByWOIdResponseModel>();
            try
            {
                var get_OBWOAssets = _UoW.WorkOrderRepository.GetWOOBAssetsByWOId_v2(requestModel);
                if (get_OBWOAssets.Item1 != null && get_OBWOAssets.Item1.Count > 0)
                {
                    //get_OBWOAssets.Item1 = get_OBWOAssets.Item1.Where(x => !x.is_deleted).ToList();
                    //var map = _mapper.Map<List<GetOBIRImagesByWOIdResponseModel>>(get_OBWOAssets.Item1);
                    //response.list = get_OBWOAssets.Item1.OrderBy(x => x.ob_ir_Image_label_list.FirstOrDefault()?.ir_image_label).ToList();
                    response.list = get_OBWOAssets.Item1;
                    response.listsize = get_OBWOAssets.Item2;
                }
            }
            catch (Exception ex)
            {
            }
            return response;
        }
        public async Task<AddPMtoNewWolineResponsemodel> AddPMtoNewWoline(AddPMtoNewWolineRequestmodel requst)
        {
            AddPMtoNewWolineResponsemodel response = new AddPMtoNewWolineResponsemodel();
            response.WolinePMlist = new List<WOlinePMList>();
            var get_main_asset_woline = _UoW.WorkOrderRepository.GetMainAssetWOlineforPM(requst.woonboardingassets_id);
            // get woline by id 
            foreach(var pm in requst.pm_ids)
            {
                WOlinePMList WOlinePMList = new WOlinePMList();

                TempAssetPMs TempAssetPMs = new TempAssetPMs();
                TempAssetPMs.pm_id = pm;
                TempAssetPMs.woonboardingassets_id = requst.woonboardingassets_id;
                TempAssetPMs.status = (int)Status.Active;
                TempAssetPMs.created_at = DateTime.UtcNow;
                TempAssetPMs.is_archive = false;

                var insert = await _UoW.BaseGenericRepository<TempAssetPMs>().Insert(TempAssetPMs);
                _UoW.SaveChanges();

                WOOnboardingAssets WOOnboardingAssets = new WOOnboardingAssets();
                WOOnboardingAssets.asset_name = get_main_asset_woline.asset_name;
                WOOnboardingAssets.asset_class_code = get_main_asset_woline.asset_class_code;
                WOOnboardingAssets.asset_class_name = get_main_asset_woline.asset_class_name;
                WOOnboardingAssets.QR_code = get_main_asset_woline.QR_code;
                WOOnboardingAssets.created_at = DateTime.UtcNow;
                WOOnboardingAssets.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                WOOnboardingAssets.is_deleted = false;
                WOOnboardingAssets.status = (int)Status.open;
                WOOnboardingAssets.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                WOOnboardingAssets.wo_id = requst.wo_id;
                WOOnboardingAssets.inspection_type = (int)MWO_inspection_wo_type.PM;
                // WOOnboardingAssets.asset_id = asset_pm.asset_id;
                // WOOnboardingAssets.is_wo_line_for_exisiting_asset = true;
                WOOnboardingAssets.building = get_main_asset_woline.building;
                WOOnboardingAssets.floor = get_main_asset_woline.floor;
                WOOnboardingAssets.room = get_main_asset_woline.room;
                WOOnboardingAssets.section = get_main_asset_woline.section;


                var insert_pm_woline = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Insert(WOOnboardingAssets);
                _UoW.SaveChanges();

                // update assset pm 
               // asset_pm.woonboardingassets_id = WOOnboardingAssets.woonboardingassets_id;
               // asset_pm.wo_id = WOOnboardingAssets.wo_id;
              //  asset_pm.status = (int)Status.Schedule;
              //  asset_pm.modified_at = DateTime.UtcNow;

                TempActiveAssetPMWOlineMapping TempActiveAssetPMWOlineMapping = new TempActiveAssetPMWOlineMapping();
                TempActiveAssetPMWOlineMapping.woonboardingassets_id = WOOnboardingAssets.woonboardingassets_id;
                TempActiveAssetPMWOlineMapping.temp_asset_pm_id = TempAssetPMs.temp_asset_pm_id;
                TempActiveAssetPMWOlineMapping.is_active = true;
                TempActiveAssetPMWOlineMapping.is_deleted = false;
                TempActiveAssetPMWOlineMapping.created_at = DateTime.UtcNow;

                var insert_temp_pm_active_data = await _UoW.BaseGenericRepository<TempActiveAssetPMWOlineMapping>().Insert(TempActiveAssetPMWOlineMapping);
                _UoW.SaveChanges();

                WOlinePMList.temp_asset_pm_id = TempAssetPMs.temp_asset_pm_id;
                WOlinePMList.woonboardingassets_id = WOOnboardingAssets.woonboardingassets_id;

                // get master pm
                var getpm = _UoW.WorkOrderRepository.GetpmPmid(pm);
                WOlinePMList.pm_inspection_type_id = getpm.pm_inspection_type_id;

                response.WolinePMlist.Add(WOlinePMList);
            }
            return response;
        }

        public async Task<CreateTempIssueResponsemodel> CreateTempIssue(CreateTempIssueRequestmodel requestmodel)
        {
            CreateTempIssueResponsemodel response = new CreateTempIssueResponsemodel();
            response.success = (int)ResponseStatusNumber.Error;
            try
            {
                // create woline to link an issue
                WOOnboardingAssets CreateWOline = new WOOnboardingAssets();
                string asset_name = "";
                if (requestmodel.asset_id != null) // if temp issue is for existing asset
                {
                    var get_main_asset = _UoW.WorkOrderRepository.GetMainAssetforTempIssue(requestmodel.asset_id.Value);
                    asset_name = get_main_asset.name;
                    CreateWOline.asset_id = requestmodel.asset_id;
                    CreateWOline.issues_temp_asset_id = null;// if wline is for main asset then keep this key null
                    CreateWOline.asset_class_code = get_main_asset.InspectionTemplateAssetClass.asset_class_code;
                    CreateWOline.asset_class_name = get_main_asset.InspectionTemplateAssetClass.asset_class_name;
                    CreateWOline.is_wo_line_for_exisiting_asset = true;
                    // add location data
                    if (get_main_asset.AssetFormIOBuildingMappings != null)
                    {
                        CreateWOline.building = get_main_asset.AssetFormIOBuildingMappings.FormIOBuildings.formio_building_name;
                        CreateWOline.floor = get_main_asset.AssetFormIOBuildingMappings.FormIOFloors.formio_floor_name;
                        CreateWOline.room = get_main_asset.AssetFormIOBuildingMappings.FormIORooms.formio_room_name;
                        CreateWOline.section = get_main_asset.AssetFormIOBuildingMappings.FormIOSections.formio_section_name;
                    }
                }
                else if(requestmodel.woonboardingassets_id != null) // if temp issue is for temp asset 
                {
                    var get_woline = _UoW.WorkOrderRepository.GetwolineForTempIssue(requestmodel.woonboardingassets_id.Value);
                    asset_name = get_woline.asset_name;
                    CreateWOline.asset_name = asset_name;
                    CreateWOline.asset_class_code = get_woline.asset_class_code;
                    CreateWOline.asset_class_name = get_woline.asset_class_name;
                    CreateWOline.is_wo_line_for_exisiting_asset = false;
                    CreateWOline.issues_temp_asset_id = requestmodel.woonboardingassets_id; // main temp asset/woline id 
                    CreateWOline.asset_id = null;

                    CreateWOline.building = CreateWOline.building;
                    CreateWOline.floor = CreateWOline.floor;
                    CreateWOline.room = CreateWOline.room;
                    CreateWOline.section = CreateWOline.section;

                }
                CreateWOline.problem_description = requestmodel.problem_description;
                CreateWOline.wo_id = requestmodel.wo_id;
                CreateWOline.inspection_type = requestmodel.inspection_type;
                CreateWOline.created_at = DateTime.UtcNow;
                CreateWOline.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                CreateWOline.status = (int)Status.open;

                // insert woline
                var insert_woline = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Insert(CreateWOline);
                _UoW.SaveChanges();

                if (insert_woline)
                {
                    // create temp issue
                    WOLineIssue TempIssue = new WOLineIssue();
                    TempIssue.issue_type = requestmodel.issue_type;
                    TempIssue.issue_status = (int)Status.open;
                    TempIssue.woonboardingassets_id = CreateWOline.woonboardingassets_id;
                    TempIssue.wo_id = requestmodel.wo_id;
                    TempIssue.issue_title = requestmodel.issue_title;
                    TempIssue.issue_description = requestmodel.problem_description;
                    TempIssue.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                    TempIssue.wo_id = requestmodel.wo_id;
                    TempIssue.form_retrived_asset_name = asset_name;
                    TempIssue.is_issue_linked_for_fix = true;
                    TempIssue.original_wo_id = requestmodel.wo_id;
                    TempIssue.original_woonboardingassets_id = requestmodel.woonboardingassets_id; // irigin asset from woline as temp asset
                    TempIssue.original_asset_id = requestmodel.asset_id; // origin asset from main asset
                    if (requestmodel.asset_id != null)
                    {
                        TempIssue.original_asset_id = requestmodel.asset_id;
                    }
                    else
                    {
                        TempIssue.original_woonboardingassets_id = requestmodel.woonboardingassets_id;
                    }

                    // insert images in issue 
                    if(requestmodel.issue_images!=null && requestmodel.issue_images.Count > 0)
                    {
                        TempIssue.WOlineIssueImagesMapping = new List<WOlineIssueImagesMapping>();
                        foreach(var item in requestmodel.issue_images)
                        {
                            WOlineIssueImagesMapping WOlineIssueImagesMapping = new WOlineIssueImagesMapping();
                            WOlineIssueImagesMapping.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                            WOlineIssueImagesMapping.image_file_name = item.image_file_name;
                            WOlineIssueImagesMapping.image_thumbnail_file_name = item.image_thumbnail_file_name;
                            WOlineIssueImagesMapping.image_duration_type_id = item.image_duration_type_id;
                            WOlineIssueImagesMapping.created_at = DateTime.UtcNow;

                            TempIssue.WOlineIssueImagesMapping.Add(WOlineIssueImagesMapping);
                        }
                    }

                    // insert temp issue
                    var insert_temp_issue = await _UoW.BaseGenericRepository<WOLineIssue>().Update(TempIssue);
                    _UoW.SaveChanges();

                    response.woonboardingassets_id = CreateWOline.woonboardingassets_id;
                    response.success = (int)ResponseStatusNumber.Success;
                }

            }
            catch (Exception ex)
            {

            }
            
            return response;
        }

        public GetAssetListForIssueResponsemodel GetAssetListForIssue(GetAssetListForIssueRequestmodel request)
        {
            GetAssetListForIssueResponsemodel response = new GetAssetListForIssueResponsemodel();
            var get_main_assets = _UoW.WorkOrderRepository.GetMainAssetstoAddIssue(request);
            var get_temp_assets = _UoW.WorkOrderRepository.GetTempAssetstoAddissue(request);

            response.main_assets = _mapper.Map<List<MainAssetListtoAddIssue>>(get_main_assets);
            response.temp_assets = _mapper.Map<List<TempAssetListtoAddIssue>>(get_temp_assets);

            return response;
        }



        public ListViewModel<GetAllCalanderWorkordersResponseModel> GetAllCalendarWorkorders(GetAllCalanderWorkordersRequestModel requestModel)
        {
            ListViewModel<GetAllCalanderWorkordersResponseModel> response = new ListViewModel<GetAllCalanderWorkordersResponseModel>();

            var WO = _UoW.WorkOrderRepository.GetAllCalendarWorkorders(requestModel);

            var mappedlist = _mapper.Map<List<GetAllCalanderWorkordersResponseModel>>(WO);

            if (mappedlist != null && mappedlist.Count > 0)
            {
                response.list = mappedlist;
                response.listsize = WO.Count;
                response.list.ForEach(s =>
                {
                    if (s.due_date == DateTime.MinValue)
                    {
                        s.due_date = null;
                    }
                    /*if (s.wo_type == (int)Status.Acceptance_Test_WO)
                    {
                        s.wo_number = "AT" + s.wo_number;
                    }
                    else if (s.wo_type == (int)Status.Maintenance_WO)
                    {
                        s.wo_number = "WO" + s.wo_number;
                    }*/

                    /*if (s.due_date != null && s.due_date != DateTime.MinValue)
                    {
                        var due_timing = DateTimeUtil.GetDueOverdueTimingByDueDate(s.due_date.Value);

                        string due_in = due_timing.Item1;
                        bool is_overdue = due_timing.Item2;

                        s.is_overdue = is_overdue;

                        if (due_in != null)
                        {
                            s.due_in = due_in;

                            if(s.status == (int)Status.Completed && s.completed_date!=null && s.completed_date.Value.Date > s.due_date.Value.Date)
                            {
                                s.due_in = "OverDue";
                                s.is_overdue = true;
                            }
                        }
                    }*/

                    s.status_wise_asset_count_obj = new status_wise_asset_count_obj();
                    var status_wise_asset_count_obj = GetStatusWiseWOLineCountByWOId(s.wo_id);
                    if (status_wise_asset_count_obj != null)
                    {
                        s.status_wise_asset_count_obj = status_wise_asset_count_obj;
                    }
                    /*
                    int open_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(s.wo_id, (int)Status.open);
                    int open_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(s.wo_id, (int)Status.open);
                    int inprogress_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(s.wo_id, (int)Status.InProgress);
                    int inprogress_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(s.wo_id, (int)Status.InProgress);
                    int completed_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(s.wo_id, (int)Status.Completed);
                    int completed_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(s.wo_id, (int)Status.Completed);
                    int hold_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(s.wo_id, (int)Status.Hold);
                    int hold_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(s.wo_id, (int)Status.Hold);
                    int readyforReview_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(s.wo_id, (int)Status.Ready_for_review);
                    int readyforReview_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(s.wo_id, (int)Status.Ready_for_review);
                    int recheck_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(s.wo_id, (int)Status.Recheck);
                    int recheck_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(s.wo_id, (int)Status.Recheck);

                    s.status_wise_asset_count_obj = new status_wise_asset_count_obj();

                    s.status_wise_asset_count_obj.open_obwo_asset = open_asset + open_asset_formIO;
                    s.status_wise_asset_count_obj.inprogress_obwo_asset = inprogress_asset + inprogress_asset_formIO;
                    s.status_wise_asset_count_obj.completed_obwo_asset = completed_asset + completed_asset_formIO;
                    s.status_wise_asset_count_obj.hold_obwo_asset = hold_asset + hold_asset_formIO;
                    s.status_wise_asset_count_obj.ready_for_review_obwo_asset = readyforReview_asset + readyforReview_asset_formIO;
                    s.status_wise_asset_count_obj.recheck_obwo_asset = recheck_asset + recheck_asset_formIO;*/
                });
            }
            return response;
        }


        public GetWOTypeWiseSubmittedAssetsCountResponseModel GetWOTypeWiseSubmittedAssetsCount()
        {
            GetWOTypeWiseSubmittedAssetsCountResponseModel response = new GetWOTypeWiseSubmittedAssetsCountResponseModel();
            try
            {
                int acceptanceWO_form_count = _UoW.WorkOrderRepository.GetAssetFormIOCountByWOType((int)Status.Acceptance_Test_WO);

                int mwo_asset_count = _UoW.WorkOrderRepository.GetOBWOAssetCountByWOType((int)Status.Maintenance_WO);
                int mwo_form_count = _UoW.WorkOrderRepository.GetAssetFormIOCountByWOType((int)Status.Maintenance_WO);

                int ob_wo_asset_count = _UoW.WorkOrderRepository.GetOBWOAssetCountByWOType((int)Status.Onboarding_WO);
                int ir_wo_asset_count = _UoW.WorkOrderRepository.GetOBWOAssetCountByWOType((int)Status.IR_Scan_WO);

                int asset_count = _UoW.WorkOrderRepository.GetAssetCount();
                int equipment_count = _UoW.WorkOrderRepository.GetEquipmentCount();
                int asset_pm_count = _UoW.AssetPMsRepository.GetAssetPMCountBySite();
                int asset_issue_count = _UoW.WorkOrderRepository.GetAssetIssueCountBySite();
                int workorder_count = _UoW.WorkOrderRepository.GetWorkorderCountBySite();

                response.acceptance_wo_submitted_assets_count = acceptanceWO_form_count;
                response.maintenance_wo_submitted_assets_count = mwo_asset_count + mwo_form_count;
                response.ob_wo_submitted_assets_count = ob_wo_asset_count;
                response.ir_wo_submitted_assets_count = ir_wo_asset_count;

                response.maintenance_wo_neta_inspection_count = mwo_form_count;
                response.maintenance_wo_other_inspection_count = mwo_asset_count;

                response.mwo_ob_ir_wo_total_submitted_count = mwo_asset_count + mwo_form_count + ob_wo_asset_count + ir_wo_asset_count;

                response.asset_count = asset_count;
                response.equipment_count = equipment_count;
                response.asset_pm_count = asset_pm_count;
                response.asset_issue_count = asset_issue_count;
                response.workorder_count = workorder_count;
            }
            catch (Exception e)
            {
            }
            return response;
        }

        public async Task<int> SendNotificationsForDueOverdueWorkorders()
        {
            NotificationService notificationService = new NotificationService(_mapper);
            int response = (int)ResponseStatusNumber.Error;
            try
            {
                var get_all_workorders = _UoW.WorkOrderRepository.GetAllWorkordersForScheduler();

                foreach (var wo in get_all_workorders)
                {
                    var due_date = wo.due_at;
                    
                    if((due_date.Date > DateTime.UtcNow.Date || due_date.Date == DateTime.UtcNow.Date)
                    && (due_date.AddDays(-3).Date < DateTime.UtcNow.Date || due_date.AddDays(-3).Date == DateTime.UtcNow.Date) )
                    {
                        // Send Notifications to Technician-Users and Watcher of this Workorder  
                        var ref_wo_id = new List<string> { wo.wo_id.ToString() };
                        await notificationService.SendNotificationGenericNewFlow((int)NotificationType_Version_2.AssignedWorkorderIsDue, ref_wo_id, null);
                    }
                    else if(due_date.Date < DateTime.UtcNow.Date && (DateTime.UtcNow.Date - due_date.Date).Days == 1)
                    {
                        // Send Notifications to Technician-Users and Watcher of this Workorder  
                        var ref_wo_id = new List<string> { wo.wo_id.ToString() };
                        await notificationService.SendNotificationGenericNewFlow((int)NotificationType_Version_2.WorkorderIsOverDue, ref_wo_id, null);
                    }
                    
                    var due_timing = DateTimeUtil.GetDueOverdueTimingByDueDate(due_date);
                    wo.wo_due_time_duration = due_timing.Item1;

                    if (due_timing.Item2)
                    {
                        wo.wo_due_overdue_flag = (int)wo_due_overdue_flag.WO_Overdue; 
                    }
                    else if (due_date.Date == DateTime.UtcNow.Date)
                    {
                        wo.wo_due_overdue_flag = (int)wo_due_overdue_flag.WO_Due;
                    }
                    else
                    {
                        wo.wo_due_overdue_flag = (int)wo_due_overdue_flag.WO_OnTrack;
                    }

                    var update_wo = await _UoW.BaseGenericRepository<WorkOrders>().Update(wo);
                    if (update_wo)
                    {
                        _UoW.SaveChanges();
                        response = (int)ResponseStatusNumber.Success;
                    }
                }
            }
            catch (Exception e)
            {
            }
            return response;
        }

        public  GetIssueWOlineDetailsByIdResponsemodel GetIssueWOlineDetailsById(string woonboardingassets_id)
        {
            GetIssueWOlineDetailsByIdResponsemodel response = new GetIssueWOlineDetailsByIdResponsemodel();

            // get issue woline details
            var issue_woline_details = GetOBWOAssetDetailsById(woonboardingassets_id);

            // explicitly get linked issue list
            GetWOLinkedIssueRequestmodel getWOLinkedIssueRequestmodel = new GetWOLinkedIssueRequestmodel();
            getWOLinkedIssueRequestmodel.woonboardingassets_id = Guid.Parse(woonboardingassets_id);
            getWOLinkedIssueRequestmodel.is_request_from_issue_service = true;
            var get_linked_issues = GetWOLinkedIssue(getWOLinkedIssueRequestmodel);
            
            issue_woline_details.linked_issues = get_linked_issues;

            response.issue_woline_details = issue_woline_details;
            
            // get install woline details 
            if (issue_woline_details.temp_asset_details != null)
            {
                // get install woline from temp asset
                var get_db_install_woline = _UoW.WorkOrderRepository.GetInstallWOlinefromTempAssetId(issue_woline_details.temp_asset_details.tempasset_id);

                if (get_db_install_woline != null)
                {
                    var get_install_woline_details = GetOBWOAssetDetailsById(get_db_install_woline.woonboardingassets_id.ToString());
                    response.install_woline_details = get_install_woline_details;
                }
            }

            // get issue details
            if(issue_woline_details.linked_issues != null)
            {
                response.issue_details = new IssueDetailsForView();
                response.issue_details.inspection_type = response.issue_woline_details.inspection_type;
                if (response.issue_woline_details.linked_issues.main_issue_list != null && response.issue_woline_details.linked_issues.main_issue_list.Count > 0) // if selected issue is main Issue
                {
                    var get_issue = response.issue_woline_details.linked_issues.main_issue_list.FirstOrDefault();
                    response.issue_details.issue_title = get_issue.issue_title;
                    response.issue_details.problem_description = issue_woline_details.problem_description;
                    response.issue_details.issue_type = get_issue.issue_type;
                    response.issue_details.priority = issue_woline_details.issue_priority;
                    response.issue_details.inspection_further_details = issue_woline_details.inspection_further_details;
                    response.issue_details.issue_type = get_issue.issue_type;
                  
                    response.issue_details.resolution_description = issue_woline_details.solution_description;
                    if (issue_woline_details.inspection_type == (int)MWO_inspection_wo_type.Repair)
                    {
                        response.issue_details.resolution_type = issue_woline_details.repair_resolution;
                    }
                    if (issue_woline_details.inspection_type == (int)MWO_inspection_wo_type.Replace)
                    {
                        response.issue_details.resolution_type = issue_woline_details.replacement_resolution;
                    }
                    if (issue_woline_details.inspection_type == (int)MWO_inspection_wo_type.Trouble_Call_Check)
                    {
                        response.issue_details.resolution_type = issue_woline_details.general_issue_resolution;
                    }

                    response.issue_details.asset_issue_id = get_issue.asset_issue_id;
                    response.issue_details.selected_asset_id = issue_woline_details.asset_id;
                    if (issue_woline_details.temp_asset_details != null)
                    {
                        response.issue_details.selected_asset_name = issue_woline_details.temp_asset_details.asset_name;
                    }
                    
                    response.issue_details.is_selected_asset_id_main = true;
                    response.issue_details.issue_creation_type = (int)IssueCreationtype.existing_issue;
                }

                else if (response.issue_woline_details.linked_issues.temp_issue_list != null && response.issue_woline_details.linked_issues.temp_issue_list.Count > 0) // if selected issue is temp Issue
                {
                    var get_issue = response.issue_woline_details.linked_issues.temp_issue_list.FirstOrDefault();
                    response.issue_details.issue_title = issue_woline_details.issue_title;
                    response.issue_details.problem_description = issue_woline_details.problem_description;
                    response.issue_details.issue_type = get_issue.issue_type;
                    response.issue_details.priority = issue_woline_details.issue_priority;
                    response.issue_details.resolution_description = issue_woline_details.solution_description;

                    if (issue_woline_details.inspection_type == (int)MWO_inspection_wo_type.Repair)
                    {
                        response.issue_details.resolution_type = issue_woline_details.repair_resolution;
                    }
                    if (issue_woline_details.inspection_type == (int)MWO_inspection_wo_type.Replace)
                    {
                        response.issue_details.resolution_type = issue_woline_details.replacement_resolution;
                    }
                    if (issue_woline_details.inspection_type == (int)MWO_inspection_wo_type.Trouble_Call_Check)
                    {
                        response.issue_details.resolution_type = issue_woline_details.general_issue_resolution;
                    }

                    response.issue_details.asset_issue_id = null;
                    if (issue_woline_details.asset_id !=null)
                    {
                        response.issue_details.selected_asset_id = issue_woline_details.asset_id;
                        response.issue_details.is_selected_asset_id_main = true;
                    }
                    else if (issue_woline_details.issues_temp_asset_id != null)
                    {
                        response.issue_details.selected_asset_id = issue_woline_details.issues_temp_asset_id;
                        response.issue_details.is_selected_asset_id_main = false;
                    }

                    if (response.issue_details.selected_asset_id != null && response.issue_details.is_selected_asset_id_main)
                    {
                        var get_main_asset = _UoW.WorkOrderRepository.GetTempAssetByMainAssetId(response.issue_details.selected_asset_id.Value, response.issue_woline_details.wo_id);
                        response.issue_details.selected_asset_name = get_main_asset.asset_name;
                    }
                    else
                    {
                        if (response.issue_details.selected_asset_id != null)
                        {
                            var get_main_asset = _UoW.WorkOrderRepository.GetTempAssetBywoline(response.issue_details.selected_asset_id.Value);
                            response.issue_details.selected_asset_name = get_main_asset.asset_name;
                        }
                    }
                    response.issue_details.new_issue_asset_type = issue_woline_details.new_issue_asset_type;
                    response.issue_details.issue_creation_type = (int)IssueCreationtype.new_issue;
                }
                else
                {
                    // if temp or main issue is not linked then take issue details from woline 


                    response.issue_details.issue_title = response.issue_woline_details.issue_title;
                    response.issue_details.priority = response.issue_woline_details.issue_priority;
                    response.issue_details.selected_asset_name = response.issue_woline_details.temp_asset_details.asset_name;
                    response.issue_details.problem_description = response.issue_woline_details.problem_description;

                    response.issue_woline_details.linked_issues = new GetWOLinkedIssueResponsemodel();
                    response.issue_woline_details.linked_issues.main_issue_list = new List<link_main_issue_list>();
                    link_main_issue_list link_main_issue_list = new link_main_issue_list();
                    link_main_issue_list.issue_title = response.issue_woline_details.issue_title;
                    link_main_issue_list.priority = response.issue_woline_details.issue_priority;
                    link_main_issue_list.asset_name = response.issue_woline_details.temp_asset_details.asset_name;
                    link_main_issue_list.issue_description = response.issue_woline_details.problem_description;

                    response.issue_woline_details.linked_issues.main_issue_list.Add(link_main_issue_list);
                }
            }
            return response;
        }
        public async Task<int> ChangeCalibrationStatusScript()
        {
            int res = (int)ResponseStatusNumber.Error;

            var site_list = _UoW.WorkOrderRepository.GetAllSites();
            
            foreach(var site in site_list)
            {
                var get_all_equipment = _UoW.WorkOrderRepository.GetAllEquipment(site);

                foreach(var equipment in get_all_equipment)
                {
                    if (equipment.calibration_date != null && equipment.calibration_interval >= 0)
                    {
                        var get_calib_date = equipment.calibration_date;

                        var updated_calib_date = get_calib_date.AddMonths(equipment.calibration_interval);

                        if (updated_calib_date > DateTime.UtcNow)
                        {
                            equipment.calibration_status = (int)CalibrationStatus.Calibrated;
                        }
                        else
                        {
                            equipment.calibration_status = (int)CalibrationStatus.NotCalibrated;
                        }
                    }
                    var update = await _UoW.BaseGenericRepository<Equipment>().Update(equipment);
                    _UoW.SaveChanges();
                }
            }

            return res;
        }
        public async Task<List<GetWODetilsForReportResponsemodel>> GetWODetilsForReport()
        {

            var get_wos = _UoW.WorkOrderRepository.GetWODetilsForReport();
            var get_compaletd_wos = _UoW.WorkOrderRepository.GetCompletedWODetilsForReport();

            get_wos.AddRange(get_compaletd_wos);
            List<GetWODetilsForReportResponsemodel> list = new List<GetWODetilsForReportResponsemodel>();
            foreach(var item in get_wos)
            {
                GetWODetilsForReportResponsemodel resposne = new GetWODetilsForReportResponsemodel();
                resposne.manual_wo_number = item.manual_wo_number;
                resposne.site_name = item.Sites.site_name;
                resposne.client_company_name = item.Sites.ClientCompany.client_company_name;
                resposne.company_name = item.Sites.Company.company_code;
                resposne.status = item.StatusMaster.status_name;
                resposne.start_date = item.start_date.Date;
                if(item.due_at!= DateTime.MinValue)
                {
                    resposne.due_date = item.due_at.Date;
                }
                if (item.status == (int)Status.Completed)
                {
                    resposne.modified_at = item.modified_at;
                }

                // issue count 
                if (item.WOLineIssue!=null&& item.WOLineIssue.Count > 0)
                {
                    resposne.new_issue_open_count = item.WOLineIssue.Where(x => x.issue_status == (int)Status.open && !x.is_deleted).Count();
                    resposne.new_issue_resolved_count = item.WOLineIssue.Where(x => x.issue_status == (int)Status.Completed && !x.is_deleted).Count();

                }

                int open_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(item.wo_id, (int)Status.open);
                int open_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(item.wo_id, (int)Status.open);
                int inprogress_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(item.wo_id, (int)Status.InProgress);
                int inprogress_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(item.wo_id, (int)Status.InProgress);
                int completed_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(item.wo_id, (int)Status.Completed);
                int completed_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(item.wo_id, (int)Status.Completed);
                int hold_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(item.wo_id, (int)Status.Hold);
                int hold_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(item.wo_id, (int)Status.Hold);
                int readyforReview_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(item.wo_id, (int)Status.Ready_for_review);
                int readyforReview_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(item.wo_id, (int)Status.Ready_for_review);
                int recheck_asset = _UoW.WorkOrderRepository.GetOBWOAssetCountByStatus(item.wo_id, (int)Status.Recheck);
                int recheck_asset_formIO = _UoW.WorkOrderRepository.GetAssetFormIOCountByStatus(item.wo_id, (int)Status.Recheck);

                resposne.open_obwo_asset = open_asset + open_asset_formIO;
                resposne.inprogress_obwo_asset = inprogress_asset + inprogress_asset_formIO;
                resposne.completed_obwo_asset = completed_asset + completed_asset_formIO;
                resposne.hold_obwo_asset = hold_asset + hold_asset_formIO;
                resposne.ready_for_review_obwo_asset = readyforReview_asset + readyforReview_asset_formIO;
                resposne.recheck_obwo_asset = recheck_asset + recheck_asset_formIO;

                if(item.WorkOrderTechnicianMapping!=null && item.WorkOrderTechnicianMapping.Count > 0)
                {
                    var active_user = item.WorkOrderTechnicianMapping.Where(x => !x.is_deleted).ToList();
                    if (active_user.Count > 0)
                    {
                        foreach(var tech in active_user)
                        {
                            resposne.technician_users = resposne.technician_users + "," + (tech.TechnicianUser.firstname + " " + tech.TechnicianUser.lastname);
                        }
                    }
                }
                list.Add(resposne);
            }

            return list;
        }

        public async Task<List<GetIssueDetailsForReportResponsemodel>> GetIssueDetailsForReport()
        {
            List<GetIssueDetailsForReportResponsemodel> list = new List<GetIssueDetailsForReportResponsemodel>();
            var get_sites = _UoW.WorkOrderRepository.GetsitesForReport();
            foreach( var site in get_sites)
            {
                var main_issue = _UoW.WorkOrderRepository.GetIssueDetailsForReport(site.site_id);

                GetIssueDetailsForReportResponsemodel resposne = new GetIssueDetailsForReportResponsemodel();
                resposne.site_name = site.site_name;
                resposne.client_company_name = site.ClientCompany.client_company_name;
                resposne.company_name = site.Company.company_code;

                resposne.schedual_issue_count = main_issue.Where(x => x.issue_status == (int)Status.Schedule).Count();
                resposne.open_issue_count = main_issue.Where(x => x.issue_status == (int)Status.open).Count();
                resposne.inprogress_issue_count = main_issue.Where(x => x.issue_status == (int)Status.InProgress).Count();
                resposne.completed_issue_count = main_issue.Where(x => x.issue_status == (int)Status.Completed).Count();

                list.Add(resposne);
            }
            return list;
        }
        public async Task<int> WorkorderTempAssetScriptForInstallWOline()
        {
            try
            {
                var get_allwos = _UoW.WorkOrderRepository.GetAllWOforTempassetscript();

               foreach (var item in get_allwos)
                {
                    try
                    {
                        var get_all_wolines = _UoW.WorkOrderRepository.GetAllwolinesforScript(item.wo_id);
                        if (get_all_wolines.Count > 0)
                        {
                            foreach (var woline_item in get_all_wolines)
                            {
                                if (woline_item.inspection_type == (int)MWO_inspection_wo_type.OnBoarding)
                                {
                                    try
                                    {
                                        if (woline_item.tempasset_id == null)
                                        {
                                            // check if temp asset is created or not for asset id
                                            TempAsset temp_asset = null;
                                            if (woline_item.asset_id != null)
                                            {
                                                temp_asset = _UoW.WorkOrderRepository.GetTempAssetbyAssetid(woline_item.asset_id.Value, item.wo_id);
                                            }

                                            if (temp_asset == null) // if temp asset is not available then insert 
                                            {
                                                temp_asset = new TempAsset();
                                                temp_asset.asset_name = woline_item.asset_name;
                                                temp_asset.QR_code = woline_item.QR_code;
                                                temp_asset.condition_index_type = woline_item.condition_index_type;
                                                temp_asset.criticality_index_type = woline_item.criticality_index_type;
                                                temp_asset.commisiion_date = woline_item.commisiion_date;
                                                temp_asset.form_nameplate_info = woline_item.form_nameplate_info;
                                                temp_asset.asset_operating_condition_state = woline_item.asset_operating_condition_state;
                                                temp_asset.code_compliance = woline_item.code_compliance;
                                                temp_asset.asset_id = woline_item.asset_id;  // pending
                                                temp_asset.wo_id = item.wo_id;  // pending
                                                temp_asset.site_id = item.site_id;  // pending
                                                temp_asset.created_at = DateTime.UtcNow;

                                                // get asset class id from class name
                                                if (!String.IsNullOrEmpty(woline_item.asset_class_code))
                                                {
                                                    var get_class = _UoW.WorkOrderRepository.GetAssetclassbycodefroscript(woline_item.asset_class_code, woline_item.Sites.company_id);
                                                    if (get_class != null)
                                                    {
                                                        temp_asset.inspectiontemplate_asset_class_id = get_class.inspectiontemplate_asset_class_id;
                                                    }
                                                }

                                                // insert temp location 
                                                if (woline_item.WOOBAssetTempFormIOBuildingMapping != null)
                                                {
                                                    temp_asset.temp_formiobuilding_id = woline_item.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id;
                                                    temp_asset.temp_formiofloor_id = woline_item.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id;
                                                    temp_asset.temp_formioroom_id = woline_item.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id;
                                                    temp_asset.temp_formiosection_id = woline_item.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id;
                                                }
                                                else
                                                {
                                                    if (String.IsNullOrEmpty(woline_item.building))
                                                        woline_item.building = "Default";
                                                    if (String.IsNullOrEmpty(woline_item.floor))
                                                        woline_item.floor = "Default";
                                                    if (String.IsNullOrEmpty(woline_item.room))
                                                        woline_item.room = "Default";
                                                    if (String.IsNullOrEmpty(woline_item.section))
                                                        woline_item.section = "Default";

                                                    // insert temp building in wo
                                                    TempFormIOBuildings get_building = null;
                                                    get_building = _UoW.WorkOrderRepository.GetTempFormIOBuildingByNameForScript(woline_item.building, item.wo_id);
                                                    if (get_building == null)
                                                    {
                                                        get_building = new TempFormIOBuildings();
                                                        get_building.temp_formio_building_name = woline_item.building;
                                                        get_building.site_id = woline_item.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                                        get_building.wo_id = item.wo_id;
                                                        get_building.created_at = DateTime.UtcNow;
                                                        get_building.is_deleted = false;
                                                        get_building.company_id = woline_item.Sites.company_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                                        var insert_building = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Insert(get_building);
                                                        _UoW.SaveChanges();
                                                    }

                                                    TempFormIOFloors get_floor = null;
                                                    get_floor = _UoW.WorkOrderRepository.GetTempFormIOFloorByNameForScript(woline_item.floor, get_building.temp_formiobuilding_id, item.wo_id);
                                                    if (get_floor == null)
                                                    {
                                                        get_floor = new TempFormIOFloors();
                                                        get_floor.temp_formio_floor_name = woline_item.floor;
                                                        get_floor.site_id = woline_item.site_id;//// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                                        get_floor.wo_id = item.wo_id;
                                                        get_floor.created_at = DateTime.UtcNow;
                                                        get_floor.is_deleted = false;
                                                        get_floor.temp_formiobuilding_id = get_building.temp_formiobuilding_id;
                                                        get_floor.company_id = woline_item.Sites.company_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                                        var insert_floors = await _UoW.BaseGenericRepository<TempFormIOFloors>().Insert(get_floor);
                                                        _UoW.SaveChanges();
                                                    }

                                                    TempFormIORooms get_room = null;
                                                    get_room = _UoW.WorkOrderRepository.GetTempFormIORoomByNameForScript(woline_item.room, get_floor.temp_formiofloor_id, item.wo_id);
                                                    if (get_room == null)
                                                    {
                                                        get_room = new TempFormIORooms();
                                                        get_room.temp_formio_room_name = woline_item.room;
                                                        get_room.site_id = woline_item.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                                        get_room.wo_id = item.wo_id;
                                                        get_room.created_at = DateTime.UtcNow;
                                                        get_room.is_deleted = false;
                                                        get_room.temp_formiofloor_id = get_floor.temp_formiofloor_id;
                                                        get_room.company_id = woline_item.Sites.company_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                                        var insert_rooms = await _UoW.BaseGenericRepository<TempFormIORooms>().Insert(get_room);
                                                        _UoW.SaveChanges();
                                                    }

                                                    TempFormIOSections get_section = null;
                                                    get_section = _UoW.WorkOrderRepository.GetTempFormIOSectionByNameForScript(woline_item.section, get_room.temp_formioroom_id, item.wo_id);
                                                    if (get_section == null)
                                                    {
                                                        get_section = new TempFormIOSections();
                                                        get_section.temp_formio_section_name = woline_item.section;
                                                        get_section.site_id = woline_item.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                                        get_section.wo_id = item.wo_id;
                                                        get_section.created_at = DateTime.UtcNow;
                                                        get_section.is_deleted = false;
                                                        get_section.temp_formioroom_id = get_room.temp_formioroom_id;
                                                        get_section.company_id = woline_item.Sites.company_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                                        var insert_section = await _UoW.BaseGenericRepository<TempFormIOSections>().Insert(get_section);
                                                        _UoW.SaveChanges();
                                                    }
                                                    temp_asset.temp_formiobuilding_id = get_building.temp_formiobuilding_id;
                                                    temp_asset.temp_formiofloor_id = get_floor.temp_formiofloor_id;
                                                    temp_asset.temp_formioroom_id = get_room.temp_formioroom_id;
                                                    temp_asset.temp_formiosection_id = get_section.temp_formiosection_id;
                                                }

                                                var insert_temp_asset = await _UoW.BaseGenericRepository<TempAsset>().Insert(temp_asset);
                                                _UoW.SaveChanges();
                                            }

                                            // update temp asset to woline
                                            woline_item.tempasset_id = temp_asset.tempasset_id;
                                            await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(woline_item);

                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        _logger.LogError("error inside foreach 2st woline id : " + woline_item.woonboardingassets_id + ex.Message);
                                    }
                                }
                            }

                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError("error inside foreach 1st wo number : " + item.manual_wo_number + ex.Message);
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("GetAllWOforTempassetscript " + ex.Message);
            }

            return 1;
        }

        public async Task<int> WorkorderTempAssetScriptForIssueWOline()
        {
            try
            {
                var get_allwos = _UoW.WorkOrderRepository.GetAllWOforTempassetscript();

                foreach (var item in get_allwos)
                {
                    try
                    {
                        var get_all_wolines = _UoW.WorkOrderRepository.GetAllissuewolinesforScript(item.wo_id);
                        if (get_all_wolines.Count > 0)
                        {
                            try
                            {
                                foreach (var woline_item in get_all_wolines)
                                {
                                    if (woline_item.inspection_type == (int)MWO_inspection_wo_type.Repair ||
                                        woline_item.inspection_type == (int)MWO_inspection_wo_type.Replace ||
                                        woline_item.inspection_type == (int)MWO_inspection_wo_type.Trouble_Call_Check)
                                    {
                                        if (woline_item.asset_id != null) // main asset id needs to be there for issue woline
                                        {
                                            // check if install woline is created for this asset in wo
                                            var install_woline = _UoW.WorkOrderRepository.GetInstallwOlinebyassetid(woline_item.asset_id.Value, item.wo_id);
                                            if (install_woline == null) // if install woline is not exist then create install wolinr and temp asset
                                            {
                                                try
                                                {
                                                    var get_asset = _UoW.WorkOrderRepository.GetAssetByIdforExistingScript(woline_item.asset_id.Value);
                                                    get_asset.AssetProfileImages = get_asset.AssetProfileImages.Where(x => x.asset_photo_type == (int)AssetPhotoType.Asset_Profile || x.asset_photo_type == (int)AssetPhotoType.Nameplate_Photo).ToList();
                                                    get_asset.AssetTopLevelcomponentMapping = get_asset.AssetTopLevelcomponentMapping.Where(x => !x.is_deleted).ToList();
                                                    get_asset.AssetSubLevelcomponentMapping = get_asset.AssetSubLevelcomponentMapping.Where(x => !x.is_deleted).ToList();

                                                    install_woline = _mapper.Map<WOOnboardingAssets>(get_asset);
                                                    install_woline.is_woline_from_other_inspection = true;
                                                    // insert temp asset data
                                                    TempAsset temp_asset = new TempAsset();
                                                    temp_asset.asset_name = get_asset.name;
                                                    temp_asset.QR_code = get_asset.QR_code;
                                                    temp_asset.condition_index_type = get_asset.condition_index_type;
                                                    temp_asset.criticality_index_type = get_asset.criticality_index_type;
                                                    temp_asset.form_nameplate_info = get_asset.form_retrived_nameplate_info;
                                                    temp_asset.component_level_type_id = get_asset.component_level_type_id;
                                                    temp_asset.asset_operating_condition_state = get_asset.asset_operating_condition_state;
                                                    temp_asset.code_compliance = get_asset.code_compliance;
                                                    temp_asset.asset_id = get_asset.asset_id;
                                                    temp_asset.inspectiontemplate_asset_class_id = get_asset.inspectiontemplate_asset_class_id;
                                                    temp_asset.wo_id = item.wo_id;
                                                    temp_asset.site_id = get_asset.site_id;
                                                    temp_asset.inspectiontemplate_asset_class_id = get_asset.inspectiontemplate_asset_class_id;
                                                    if (get_asset.AssetFormIOBuildingMappings != null)
                                                    {
                                                        /// new flow for building location hierarchy
                                                        TempFormIOBuildings get_building = null;
                                                        get_building = _UoW.WorkOrderRepository.GetTempFormIOBuildingByNameForScript(get_asset.AssetFormIOBuildingMappings.FormIOBuildings.formio_building_name, item.wo_id);
                                                        if (get_building == null)
                                                        {
                                                            get_building = new TempFormIOBuildings();
                                                            get_building.temp_formio_building_name = get_asset.AssetFormIOBuildingMappings.FormIOBuildings.formio_building_name;
                                                            get_building.site_id = woline_item.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                                            get_building.wo_id = item.wo_id;
                                                            get_building.created_at = DateTime.UtcNow;
                                                            get_building.is_deleted = false;
                                                            get_building.company_id = woline_item.Sites.company_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                                            var insert_building = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Insert(get_building);
                                                            _UoW.SaveChanges();
                                                        }

                                                        TempFormIOFloors get_floor = null;
                                                        get_floor = _UoW.WorkOrderRepository.GetTempFormIOFloorByNameForScript(get_asset.AssetFormIOBuildingMappings.FormIOFloors.formio_floor_name, get_building.temp_formiobuilding_id, item.wo_id);
                                                        if (get_floor == null)
                                                        {
                                                            get_floor = new TempFormIOFloors();
                                                            get_floor.temp_formio_floor_name = get_asset.AssetFormIOBuildingMappings.FormIOFloors.formio_floor_name;
                                                            get_floor.site_id = woline_item.site_id;//// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                                            get_floor.wo_id = item.wo_id;
                                                            get_floor.created_at = DateTime.UtcNow;
                                                            get_floor.is_deleted = false;
                                                            get_floor.temp_formiobuilding_id = get_building.temp_formiobuilding_id;
                                                            get_floor.company_id = woline_item.Sites.company_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                                            var insert_floors = await _UoW.BaseGenericRepository<TempFormIOFloors>().Insert(get_floor);
                                                            _UoW.SaveChanges();
                                                        }

                                                        TempFormIORooms get_room = null;
                                                        get_room = _UoW.WorkOrderRepository.GetTempFormIORoomByNameForScript(get_asset.AssetFormIOBuildingMappings.FormIORooms.formio_room_name, get_floor.temp_formiofloor_id, item.wo_id);
                                                        if (get_room == null)
                                                        {
                                                            get_room = new TempFormIORooms();
                                                            get_room.temp_formio_room_name = get_asset.AssetFormIOBuildingMappings.FormIORooms.formio_room_name;
                                                            get_room.site_id = woline_item.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                                            get_room.wo_id = item.wo_id;
                                                            get_room.created_at = DateTime.UtcNow;
                                                            get_room.is_deleted = false;
                                                            get_room.temp_formiofloor_id = get_floor.temp_formiofloor_id;
                                                            get_room.company_id = woline_item.Sites.company_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                                            var insert_rooms = await _UoW.BaseGenericRepository<TempFormIORooms>().Insert(get_room);
                                                            _UoW.SaveChanges();
                                                        }

                                                        TempFormIOSections get_section = null;
                                                        get_section = _UoW.WorkOrderRepository.GetTempFormIOSectionByNameForScript(get_asset.AssetFormIOBuildingMappings.FormIOSections.formio_section_name, get_room.temp_formioroom_id, item.wo_id);
                                                        if (get_section == null)
                                                        {
                                                            get_section = new TempFormIOSections();
                                                            get_section.temp_formio_section_name = get_asset.AssetFormIOBuildingMappings.FormIOSections.formio_section_name;
                                                            get_section.site_id = woline_item.site_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                                                            get_section.wo_id = item.wo_id;
                                                            get_section.created_at = DateTime.UtcNow;
                                                            get_section.is_deleted = false;
                                                            get_section.temp_formioroom_id = get_room.temp_formioroom_id;
                                                            get_section.company_id = woline_item.Sites.company_id;// Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                                                            var insert_section = await _UoW.BaseGenericRepository<TempFormIOSections>().Insert(get_section);
                                                            _UoW.SaveChanges();
                                                        }
                                                        install_woline.WOOBAssetTempFormIOBuildingMapping = new WOOBAssetTempFormIOBuildingMapping();
                                                        install_woline.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id = get_building.temp_formiobuilding_id;
                                                        install_woline.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id = get_floor.temp_formiofloor_id;
                                                        install_woline.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id = get_room.temp_formioroom_id;
                                                        install_woline.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id = get_section.temp_formiosection_id;
                                                        install_woline.WOOBAssetTempFormIOBuildingMapping.created_at = DateTime.UtcNow;
                                                        install_woline.building = get_building.temp_formio_building_name;
                                                        install_woline.floor = get_floor.temp_formio_floor_name;
                                                        install_woline.room = get_room.temp_formio_room_name;
                                                        install_woline.section = get_section.temp_formio_section_name;

                                                        // add location details in temp asset 
                                                        temp_asset.temp_formiobuilding_id = get_building.temp_formiobuilding_id;
                                                        temp_asset.temp_formiofloor_id = get_floor.temp_formiofloor_id;
                                                        temp_asset.temp_formioroom_id = get_room.temp_formioroom_id;
                                                        temp_asset.temp_formiosection_id = get_section.temp_formiosection_id;

                                                    }

                                                    install_woline.status = woline_item.status;
                                                    install_woline.wo_id = item.wo_id;
                                                    install_woline.is_woline_from_other_inspection = true;

                                                    // first insert temp asset in wo
                                                    var insert_tempasset = await _UoW.BaseGenericRepository<TempAsset>().Insert(temp_asset);
                                                    _UoW.SaveChanges();

                                                    install_woline.tempasset_id = temp_asset.tempasset_id;
                                                    var update = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(install_woline);
                                                    _UoW.SaveChanges();
                                                }
                                                catch (Exception ex)
                                                {

                                                }
                                            }

                                            AssetIssue? took_fiesr_issue = null;
                                            woline_item.tempasset_id = install_woline.tempasset_id;
                                            if (woline_item.AssetIssue != null && woline_item.AssetIssue.Count > 0)
                                            {
                                                took_fiesr_issue = woline_item.AssetIssue.FirstOrDefault();
                                                install_woline.issue_title = took_fiesr_issue.issue_title;
                                                install_woline.issue_priority = took_fiesr_issue.priority;
                                            }

                                            //update issue woline 
                                            await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(woline_item);
                                            _UoW.SaveChanges();

                                            // check if linked issue is more than one or not if its more than one then create separate issue woline for each issue
                                            if (woline_item.AssetIssue != null && woline_item.AssetIssue.Count > 0)
                                            {
                                                var issue_count = woline_item.AssetIssue.Where(x => !x.is_deleted).Count();
                                                if (issue_count > 1)
                                                {
                                                    // get main issue woline by id for mapper
                                                    var get_main_isssue_woline = _UoW.WorkOrderRepository.GetMainIssueWOlineForScript(woline_item.woonboardingassets_id);

                                                    var extra_issue = woline_item.AssetIssue.Where(x => x.asset_issue_id != took_fiesr_issue.asset_issue_id).ToList();
                                                    foreach (var extra_issue_item in extra_issue)
                                                    {
                                                        var new_issue_woline = _mapper.Map<WOOnboardingAssets>(get_main_isssue_woline);
                                                        new_issue_woline.issue_title = extra_issue_item.issue_title;
                                                        new_issue_woline.issue_priority = extra_issue_item.priority;
                                                        var inert_ = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Insert(new_issue_woline);
                                                        _UoW.SaveChanges();

                                                        // update issue details 
                                                        extra_issue_item.woonboardingassets_id = new_issue_woline.woonboardingassets_id;
                                                        await _UoW.BaseGenericRepository<AssetIssue>().Update(extra_issue_item);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            catch(Exception ex)
                            {

                            }
                            

                        }
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {

            }

            return 1;
        }
        public async Task<int> AddUpdateTimeMaterial(AddUpdateTimeMaterialRequestModel requestModel)
        {
            int res = (int)ResponseStatusNumber.Error;
            try
            {
                if(requestModel.time_material_id == null) //-- Insert TimeMaterials
                {
                    TimeMaterials timeMaterials = new TimeMaterials();

                    timeMaterials.wo_id = requestModel.wo_id;
                    timeMaterials.time_material_category_type = requestModel.time_material_category_type;
                    timeMaterials.description = requestModel.description;
                    timeMaterials.quantity = requestModel.quantity;
                    timeMaterials.quantity_unit_type = requestModel.quantity_unit_type;
                    timeMaterials.rate = requestModel.rate;
                    timeMaterials.amount = (requestModel.quantity * requestModel.rate);
                    timeMaterials.markup = requestModel.markup;
                    timeMaterials.item_code = requestModel.item_code;
                    timeMaterials.no_sub_flag = requestModel.no_sub_flag;
                    timeMaterials.burden_type = requestModel.burden_type;
                    timeMaterials.burden = requestModel.burden!=null? requestModel.burden.Value:0;
                    timeMaterials.is_markup_enabled = requestModel.is_markup_enabled;
                    timeMaterials.is_burden_enabled = requestModel.is_burden_enabled;

                    double? burden_in_dollar = null;
                    if (requestModel.burden != null && requestModel.burden > 0)
                    {
                        if (timeMaterials.burden_type == (int)BurdenType.Percentage)
                            burden_in_dollar = (timeMaterials.burden / 100) * timeMaterials.rate;
                        else if (timeMaterials.burden_type == (int)BurdenType.Dollar)
                            burden_in_dollar = timeMaterials.burden.Value;
                    }

                    if (burden_in_dollar != null && burden_in_dollar > 0 && requestModel.is_burden_enabled)
                    {
                        timeMaterials.amount = (requestModel.rate + burden_in_dollar.Value) * requestModel.quantity;
                        timeMaterials.total_of_burden = (timeMaterials.rate + burden_in_dollar.Value) * timeMaterials.quantity;
                    }
                    else
                    {
                        timeMaterials.total_of_burden = timeMaterials.amount;
                    }
                    if (requestModel.is_markup_enabled)
                    {                        
                        var markup_val = (timeMaterials.markup / 100) * timeMaterials.total_of_burden.Value;
                        timeMaterials.total_of_markup = (timeMaterials.total_of_burden.Value + markup_val);
                    }
                    else
                    {
                        timeMaterials.total_of_markup = timeMaterials.total_of_burden.Value;
                    }

                    timeMaterials.no_sub_flag = requestModel.no_sub_flag;
                    timeMaterials.is_deleted = false;
                    timeMaterials.created_at = DateTime.UtcNow;
                    timeMaterials.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                    var insert = await _UoW.BaseGenericRepository<TimeMaterials>().Insert(timeMaterials);
                    if (insert)
                    {
                        _UoW.SaveChanges();
                        res = (int)ResponseStatusNumber.Success;
                    }
                }
                else   
                {
                    var get_time_material = _UoW.WorkOrderRepository.GetTimeMaterialById(requestModel.time_material_id.Value);
                    if (get_time_material != null)
                    {
                        if (requestModel.is_deleted == true) //-- Delete TimeMaterial
                        {
                            get_time_material.is_deleted = true;
                            get_time_material.modified_at = DateTime.UtcNow;
                            get_time_material.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                        }
                        else //-- Update TimeMaterials
                        {
                            get_time_material.time_material_category_type = requestModel.time_material_category_type;
                            get_time_material.description = requestModel.description;
                            get_time_material.quantity = requestModel.quantity;
                            get_time_material.quantity_unit_type = requestModel.quantity_unit_type;
                            get_time_material.rate = requestModel.rate;
                            get_time_material.amount = (requestModel.quantity * requestModel.rate);
                            get_time_material.markup = requestModel.markup;
                            get_time_material.item_code = requestModel.item_code;
                            get_time_material.no_sub_flag = requestModel.no_sub_flag;
                            get_time_material.burden_type = requestModel.burden_type;
                            get_time_material.burden = requestModel.burden != null ? requestModel.burden.Value : 0;
                            get_time_material.is_markup_enabled = requestModel.is_markup_enabled;
                            get_time_material.is_burden_enabled = requestModel.is_burden_enabled;

                            double? burden_in_dollar = null;
                            if (requestModel.burden!=null && requestModel.burden > 0)
                            {
                                if (get_time_material.burden_type == (int)BurdenType.Percentage)
                                    burden_in_dollar = (get_time_material.burden / 100) * get_time_material.rate; 
                                else if (get_time_material.burden_type == (int)BurdenType.Dollar)
                                    burden_in_dollar = get_time_material.burden.Value;
                            }

                            if (burden_in_dollar != null && burden_in_dollar > 0 && requestModel.is_burden_enabled)
                            {
                                get_time_material.amount = (requestModel.rate + burden_in_dollar.Value) * requestModel.quantity;   
                                get_time_material.total_of_burden = (get_time_material.rate + burden_in_dollar.Value) * get_time_material.quantity;
                            }
                            else
                            {
                                get_time_material.total_of_burden = get_time_material.amount;
                            }

                            if (requestModel.is_markup_enabled)
                            {
                                var markup_val = (get_time_material.markup / 100) * get_time_material.total_of_burden.Value;
                                get_time_material.total_of_markup = (get_time_material.total_of_burden.Value + markup_val);
                            }
                            else
                            {
                                get_time_material.total_of_markup = get_time_material.total_of_burden.Value;
                            }

                            get_time_material.modified_at = DateTime.UtcNow;
                            get_time_material.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                        }

                        var update = await _UoW.BaseGenericRepository<TimeMaterials>().Update(get_time_material);
                        if (update)
                        {
                            _UoW.SaveChanges();
                            res = (int)ResponseStatusNumber.Success;
                        }

                    }
                }
            }
            catch(Exception e)
            {
                res = (int)ResponseStatusNumber.Error;
                return res;
            }
            return res;
        }


        public GetAllTimeMaterialsForWOResponseModel GetAllTimeMaterialsForWO(GetAllTimeMaterialsForWORequestModel requestModel)
        {
            GetAllTimeMaterialsForWOResponseModel response = new GetAllTimeMaterialsForWOResponseModel();
            try
            {
                var get_all_timematerials = _UoW.WorkOrderRepository.GetAllTimeMaterialsForWO(requestModel);

                if (get_all_timematerials.Item1 != null)
                {
                    var map = _mapper.Map<List<TimeMaterials_Data>>(get_all_timematerials.Item1);

                    var labor_count = _UoW.WorkOrderRepository.GetTimeMaterialCountByType(requestModel.wo_id, (int)TimeMaterials_Category_Type.Labor);
                    var material_count = _UoW.WorkOrderRepository.GetTimeMaterialCountByType(requestModel.wo_id, (int)TimeMaterials_Category_Type.Materials);
                    var miscellaneous_count = _UoW.WorkOrderRepository.GetTimeMaterialCountByType(requestModel.wo_id, (int)TimeMaterials_Category_Type.Miscellaneous);

                    response.time_materials_list = map;
                    response.listsize = get_all_timematerials.Item2;
                    response.sum_of_all_markup_amount = get_all_timematerials.Item3;
                    
                    response.labor_count = labor_count;
                    response.material_count = material_count;
                    response.miscellaneous_count = miscellaneous_count;
                }
            }
            catch(Exception e)
            {
            }

            return response;
        }

        public async Task<int> BulkCreateTimeMaterialsForWO(BulkCreateTimeMaterialsForWORequestmodel requestmodel)
        {
            int res = (int)ResponseStatusNumber.Error;
            try
            {
                if(requestmodel.time_materials_list != null && requestmodel.time_materials_list.Count > 0)
                {
                    foreach (var time_material in requestmodel.time_materials_list)
                    {
                        int insert = await AddUpdateTimeMaterial(time_material);
                        if (insert == (int)ResponseStatusNumber.Success)
                        {
                            res = (int)ResponseStatusNumber.Success;
                        }
                    }
                }
            }
            catch(Exception e)
            {
                res = (int)ResponseStatusNumber.Error;
                return res;
            }
            return res;
        }
        public GetImageInfoByTextRactServiceResponsemodel GetImageInfoByTextRact(GetImageInfoByTextRactRequestmodel requestmodel)
        {
            GetImageInfoByTextRactServiceResponsemodel response = new GetImageInfoByTextRactServiceResponsemodel();
            string raw_question = "";
            if (requestmodel.inspectiontemplate_asset_class_id != null)
            {
                // get asset class type by class id
                var get_class_type = _UoW.WorkOrderRepository.GetAssetClassTypeById(requestmodel.inspectiontemplate_asset_class_id.Value);

                if (!String.IsNullOrEmpty(get_class_type))
                {
                    try
                    {
                        raw_question = GlobalConstants.ImageRectQueryQuestion(get_class_type.ToUpper().Trim());
                    }
                    catch(Exception ex)
                    {
                        raw_question = GlobalConstants.ImageRectQueryQuestion("Default Questions");
                    }
                    
                }
                else // if class type is null or empty then return default questions
                {
                    raw_question = GlobalConstants.ImageRectQueryQuestion("Default Questions");
                }
            }
            else //if requested class is null then give default questions 
            {
                raw_question = GlobalConstants.ImageRectQueryQuestion("Default Questions");
            }
            response.question_list = raw_question.Split("|").ToList();

            return response;
        }

        public async Task<int> ChangeIRPhotosExtention(List<string> file_url, string wo_id)
        {
            int response = (int)ResponseStatusNumber.Error;
            foreach(var file in file_url)
            {
                var requeted_image = string.Concat("https://s3-us-east-2.amazonaws.com/",
                       "/", "conduit-prod-userprofile",
                         "/", file);
                Uri uri = new Uri(requeted_image);
                string requested_img_file_name = Path.GetFileName(requeted_image);

                var get_from_db = _UoW.WorkOrderRepository.GetIRImageByname(requested_img_file_name.ToLower().Trim() , Guid.Parse(wo_id));

                foreach(var item in get_from_db)
                {
                    bool is_update = false;
                    var requested_img_extentation = Path.GetExtension(requested_img_file_name);
                    if (!String.IsNullOrEmpty(item.ir_image_label))
                    {
                        if (requested_img_file_name.ToLower().Trim() == item.ir_image_label.ToLower().Trim()) // check in ir image if requested image extension is different then only update 
                        {
                            var db_ir_img_extentation = Path.GetExtension(item.ir_image_label);
                            if (db_ir_img_extentation != requested_img_extentation)
                            {
                                var db_ir_filename = Path.GetFileNameWithoutExtension(item.ir_image_label);
                                item.ir_image_label = db_ir_filename + requested_img_extentation;
                                is_update = true;
                            }
                        }
                    }
                    if (!String.IsNullOrEmpty(item.visual_image_label))
                    {
                        if (requested_img_file_name.ToLower().Trim() == item.visual_image_label.ToLower().Trim()) // check in ir image
                        {
                            var db_visual_img_extentation = Path.GetExtension(item.visual_image_label);

                            if (db_visual_img_extentation != requested_img_extentation)
                            {
                                var db_visual_filename = Path.GetFileNameWithoutExtension(item.visual_image_label);
                                item.visual_image_label = db_visual_filename + requested_img_extentation;
                                is_update = true;
                            }
                        }
                        string Flir_Visual_image_name = requested_img_file_name.Insert(requested_img_file_name.LastIndexOf('.'), "-visual");
                        if (Flir_Visual_image_name.ToLower().Trim() == item.visual_image_label.ToLower().Trim()) // check in ir image
                        {
                            var db_visual_img_extentation = Path.GetExtension(item.visual_image_label);

                            if (db_visual_img_extentation != requested_img_extentation)
                            {
                                var db_visual_filename = Path.GetFileNameWithoutExtension(item.visual_image_label);
                                item.visual_image_label = db_visual_filename + requested_img_extentation;
                                is_update = true;
                            }
                        }
                    }
                    if (is_update)
                    {
                        await _UoW.BaseGenericRepository<IRWOImagesLabelMapping>().Update(item);
                        _UoW.SaveChanges();
                    }
                }
            }
            return response;
        }

        public async Task<int> ChangeIRPMPhotosExtention(List<string> file_url, string wo_id)
        {
            var all_ir_pm_wolines = _UoW.WorkOrderRepository.GetAllIRPMWOline(Guid.Parse(wo_id));
            foreach(var obwoline in all_ir_pm_wolines)
            {
                bool is_update = false;
                bool is_json_from_temp = false;
                foreach(var requested_file in file_url)
                {
                    string req_file_without_extension = Path.GetFileNameWithoutExtension(requested_file);
                    string req_file_extension = Path.GetExtension(requested_file);
                    PMs get_pm = null;
                    string json_data = null;
                    if (obwoline.ActiveAssetPMWOlineMapping != null && !String.IsNullOrEmpty(obwoline.ActiveAssetPMWOlineMapping.pm_form_output_data))
                    {
                        json_data = obwoline.ActiveAssetPMWOlineMapping.pm_form_output_data;
                        get_pm = _UoW.WorkOrderRepository.GetPMById(obwoline.ActiveAssetPMWOlineMapping.AssetPMs.pm_id.Value);

                    }
                    else if (obwoline.TempActiveAssetPMWOlineMapping != null && !String.IsNullOrEmpty(obwoline.TempActiveAssetPMWOlineMapping.pm_form_output_data))
                    {
                        json_data = obwoline.TempActiveAssetPMWOlineMapping.pm_form_output_data;
                        get_pm = _UoW.WorkOrderRepository.GetPMById(obwoline.TempActiveAssetPMWOlineMapping.TempAssetPMs.pm_id.Value);
                        is_json_from_temp = true;
                    }
                    if (!String.IsNullOrEmpty(json_data))
                    {
                        if (get_pm.pm_inspection_type_id == (int)PMInspectionTypeId.IRThermography) /// if pm is IR thermography then only check
                        {
                            dynamic jsonObject = JObject.Parse(json_data);
                            foreach (JProperty property in jsonObject)
                            {
                                string key = property.Name;
                                if (!String.IsNullOrEmpty(key) && key == "irScanPhotos") // IR/Visual photos
                                {
                                    dynamic IRVisualImageListObj = property.Value; // thermalAnamolyDetected object
                                    if (IRVisualImageListObj != null)
                                    {
                                        foreach (var item in IRVisualImageListObj)
                                        {
                                            string irPhoto = item.irPhoto;
                                            string visualPhoto = item.visualPhoto;
                                            string img_extention_type = item.type.value;
                                            string ir_image_url = item.imageUrls.irPhoto;
                                            string visual_image_url = item.imageUrls.visualPhoto;

                                            /// check for ir photo
                                            /// 
                                            if(req_file_without_extension == irPhoto)
                                            {
                                                if(req_file_extension.ToLower() == img_extention_type.ToLower())
                                                {
                                                    item.imageUrls.irPhoto = ir_image_url.Replace(irPhoto+ img_extention_type, req_file_without_extension + req_file_extension);
                                                    item.type.value = req_file_extension;
                                                    is_update = true;
                                                }
                                            }

                                            // check for visual photo
                                            if (req_file_without_extension == visualPhoto)
                                            {
                                                if (req_file_extension.ToLower() == img_extention_type.ToLower())
                                                {
                                                    item.imageUrls.visualPhoto = visual_image_url.Replace(visualPhoto + img_extention_type, req_file_without_extension + req_file_extension);
                                                    item.type.value = req_file_extension;
                                                    is_update = true;
                                                }
                                            }
                                        }
                                    }
                                }

                                
                            }
                            var new_json = Newtonsoft.Json.JsonConvert.SerializeObject(jsonObject);
                            if (is_json_from_temp)
                            {
                                obwoline.TempActiveAssetPMWOlineMapping.pm_form_output_data = new_json;
                                obwoline.AssetPMs.pm_form_output_data = new_json;
                            }
                            else
                            {
                                obwoline.ActiveAssetPMWOlineMapping.pm_form_output_data = new_json;
                            }

                        }
                    }

                }
                if (is_update)
                {
                    var update = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(obwoline);
                    _UoW.SaveChanges();
                }
            }
            return 1;
        }



        public async Task<int> ChangeToplevelsSubcomponentsLocation(Guid toplevel_woonboardingassets_id)
        {
            try
            {
                var get_top_asset = _UoW.WorkOrderRepository.GetOBWOAssetforLocation(toplevel_woonboardingassets_id);

                if (get_top_asset!=null && get_top_asset.WOlineSubLevelcomponentMapping != null && get_top_asset.WOlineSubLevelcomponentMapping.Count > 0)
                {
                    var get_subcomp_list = get_top_asset.WOlineSubLevelcomponentMapping.Where(x => !x.is_deleted).ToList();

                    foreach (var sub_asset in get_subcomp_list)
                    {
                        var get_sub = _UoW.WorkOrderRepository.GetOBSublevelAssetById(sub_asset.sublevelcomponent_asset_id);

                        if (get_sub != null)
                        {
                            get_sub.building = get_top_asset.building;
                            get_sub.floor = get_top_asset.floor;
                            get_sub.room = get_top_asset.room;
                            get_sub.section = get_top_asset.section;

                            if (get_sub.WOLineBuildingMapping != null && get_top_asset.WOLineBuildingMapping != null)
                            {
                                get_sub.WOLineBuildingMapping.formiobuilding_id = get_top_asset.WOLineBuildingMapping.formiobuilding_id;
                                get_sub.WOLineBuildingMapping.formiofloor_id = get_top_asset.WOLineBuildingMapping.formiofloor_id;
                                get_sub.WOLineBuildingMapping.formioroom_id = get_top_asset.WOLineBuildingMapping.formioroom_id;
                                get_sub.WOLineBuildingMapping.formiosection_id = get_top_asset.WOLineBuildingMapping.formiosection_id;
                            }

                            if (get_sub.WOOBAssetTempFormIOBuildingMapping != null && get_top_asset.WOOBAssetTempFormIOBuildingMapping != null)
                            {
                                get_sub.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id = get_top_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiobuilding_id;
                                get_sub.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id = get_top_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiofloor_id;
                                get_sub.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id = get_top_asset.WOOBAssetTempFormIOBuildingMapping.temp_formioroom_id;
                                get_sub.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id = get_top_asset.WOOBAssetTempFormIOBuildingMapping.temp_formiosection_id;
                            }

                            if (get_sub.TempAsset != null && get_top_asset.TempAsset != null)
                            {
                                get_sub.TempAsset.temp_formiobuilding_id = get_top_asset.TempAsset.temp_formiobuilding_id;
                                get_sub.TempAsset.temp_formiofloor_id = get_top_asset.TempAsset.temp_formiofloor_id;
                                get_sub.TempAsset.temp_formioroom_id = get_top_asset.TempAsset.temp_formioroom_id;
                                get_sub.TempAsset.temp_formiosection_id = get_top_asset.TempAsset.temp_formiosection_id;
                            }

                            var update = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_sub);
                            _UoW.SaveChanges();
                        }
                    }
                }
            }
            catch (Exception e)
            {
            }
            return 1;
        }

        public List<GetIRImageFilePathExclude> GetImagesFilePaths(List<string> file_names, string wo_id)
        {
            return _UoW.WorkOrderRepository.GetImagesFilePaths(file_names, wo_id);

        }
        public async Task<UpdateMultiOBWOAssetsStatusResponseModel> UpdateMultiOBWOAssetsStatus(UpdateMultiOBWOAssetsStatusRequestModel requestModel)
        {

            UpdateMultiOBWOAssetsStatusResponseModel response = new UpdateMultiOBWOAssetsStatusResponseModel();
            var _assets_with_error_list = new List<string>();
            DateTime? completed_at = null;
            List<Guid> ids_with_error = new List<Guid>();
            try
            {
                var get_obwo_assets = _UoW.WorkOrderRepository.GetOBWOAssetsByIDs(requestModel.woonboardingassets_id_list);
                if (get_obwo_assets != null && get_obwo_assets.Count > 0)
                {
                    //if bulk completing wolines then check for duplicate qr
                    if (requestModel.status == (int)Status.Completed && !requestModel.is_requested_for_delete)
                    {
                        foreach (var get_asset in get_obwo_assets)
                        {
                            if (!get_asset.is_wo_line_for_exisiting_asset)
                            {
                                if (get_asset.inspection_type == (int)MWO_inspection_wo_type.OnBoarding)
                                {
                                    if (!String.IsNullOrEmpty(get_asset.QR_code))
                                    {
                                        var get_ob_asset_same_qr = _UoW.WorkOrderRepository.GetWOLineByQRcode(get_asset.QR_code.ToLower().Trim(), get_asset.woonboardingassets_id);
                                        var get_asset_by_internal_id = _UoW.WorkOrderRepository.GetAssetByQRCodeForOBWO(get_asset.QR_code.ToLower().Trim(),get_asset.asset_id);

                                        if (get_ob_asset_same_qr != null || get_asset_by_internal_id != null)
                                        {
                                            response.status = (int)ResponseStatusNumber.qr_code_must_be_unique;
                                            _assets_with_error_list.Add($"OB-Asset : \"{get_asset.asset_name}\" - QR-Code : \"{get_asset.QR_code}\"");
                                            ids_with_error.Add(get_asset.woonboardingassets_id);
                                        }
                                    }
                                }
                            }
                            else // check db assets
                            {
                                if (!String.IsNullOrEmpty(get_asset.QR_code) && get_asset.asset_id!=null)
                                {
                                    var get_asset_by_qr = _UoW.WorkOrderRepository.GetAssetByQRCodeExist(new List<string> { get_asset.QR_code }, new List<Guid> { get_asset.asset_id.Value });
                                    if (get_asset_by_qr != null)
                                    {
                                        response.status = (int)ResponseStatusNumber.qr_code_must_be_unique;
                                        _assets_with_error_list.Add($"Asset : \"{get_asset.asset_name}\" - QR-Code : \"{get_asset.QR_code}\"");
                                        ids_with_error.Add(get_asset.woonboardingassets_id);
                                    }
                                }
                            }
                        }
                        completed_at = DateTime.UtcNow;
                    }

                    //if bulk deleting wolines then check for top-sub & fedby mappings
                    if (requestModel.is_requested_for_delete && requestModel.status == null)
                    {
                        foreach(var get_asset in get_obwo_assets)
                        {
                            var ob_fed_by = _UoW.WorkOrderRepository.GetWOLineFedByMappingsById(get_asset.woonboardingassets_id);
                            var get_subcomponent = _UoW.WorkOrderRepository.GetWOLineSublevelMappingsById(get_asset.woonboardingassets_id);
                            var get_topcomponent = _UoW.WorkOrderRepository.GetWOLineToplevelMappingsById(get_asset.woonboardingassets_id);

                            /*if (ob_fed_by != null || get_subcomponent != null || get_topcomponent != null)
                            {
                                response.status = (int)ResponseStatusNumber.can_not_delete_toplevel_woline;
                                _assets_with_error_list.Add(get_asset.asset_name);
                                ids_with_error.Add(get_asset.woonboardingassets_id);
                            }*/
                            //Now we are also deleting mappings of selected assets

                            foreach (var item in ob_fed_by)
                            {
                                item.is_deleted = true;
                                item.updated_at = DateTime.UtcNow;
                                item.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                                var update = await _UoW.BaseGenericRepository<WOOBAssetFedByMapping>().Update(item);
                                _UoW.SaveChanges();
                            }
                            foreach (var item in get_topcomponent)
                            {
                                item.is_deleted = true;
                                item.updated_at = DateTime.UtcNow;
                                item.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                var update = await _UoW.BaseGenericRepository<WOlineTopLevelcomponentMapping>().Update(item);
                                _UoW.SaveChanges();
                            }
                            foreach (var item in get_subcomponent)
                            {
                                item.is_deleted = true;
                                item.updated_at = DateTime.UtcNow;
                                item.updated_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                                var update = await _UoW.BaseGenericRepository<WOlineSubLevelcomponentMapping>().Update(item);
                                _UoW.SaveChanges();
                            }
                        }
                    }

                    //--if found assets with error then return error message with names in 1 string
                    if (_assets_with_error_list != null && _assets_with_error_list.Count > 0)
                    {
                        if(requestModel.is_requested_for_delete && requestModel.status == null)
                            response.assets_with_error = "These assets could not be deleted due to active toplevel-sublevel or fedby mappings :- " + String.Join(",", _assets_with_error_list);
                        else if(!requestModel.is_requested_for_delete && requestModel.status != null)
                            response.assets_with_error = "These assets contains same QR-Code could not be completed :- " + String.Join(",", _assets_with_error_list);
                    }

                    //remove assets which are having error 
                    if (ids_with_error.Count > 0)
                    {
                        get_obwo_assets = get_obwo_assets.Where(x => !ids_with_error.Contains(x.woonboardingassets_id)).ToList();
                    }
                    else
                    {
                        response.status = (int)ResponseStatusNumber.Success;
                    }

                    if (requestModel.is_requested_for_delete && requestModel.status == null)
                    {   // Delete WOLines
                        foreach (var obasset in get_obwo_assets)
                        {
                            DeleteOBWOAssetRequestmodel deleteOBWOAssetRequestmodel = new DeleteOBWOAssetRequestmodel();
                            deleteOBWOAssetRequestmodel.woonboardingassets_id = obasset.woonboardingassets_id;

                            await DeleteOBWOAsset(deleteOBWOAssetRequestmodel);
                        }
                    }
                    else if(!requestModel.is_requested_for_delete && requestModel.status != null && requestModel.status > 0)
                    { 
                        // Update status 
                        foreach (var get_asset in get_obwo_assets)
                        {
                            await AddUpdateWOOnboardingAssetsDateTimeTracking(get_asset.woonboardingassets_id,(int)WOLineActionsTypes.Submit,0);
                            get_asset.status = requestModel.status.Value;
                            get_asset.modified_at = DateTime.UtcNow;
                            get_asset.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
                            get_asset.completed_at = completed_at;

                            var update = await _UoW.BaseGenericRepository<WOOnboardingAssets>().Update(get_asset);
                            _UoW.SaveChanges();

                            await updateOBWOStatusForStatusManagement(get_asset.wo_id);
                        }
                    }

                }
            }
            catch (Exception e)
            {
            }
            return response;
        }


        public GetAllResponsiblePartyListResponseModel GetAllResponsiblePartyList()
        {
            GetAllResponsiblePartyListResponseModel response = new GetAllResponsiblePartyListResponseModel();
            try
            {
                var get_res_party_list = _UoW.WorkOrderRepository.GetAllResponsiblePartyList();

                if (get_res_party_list != null)
                {
                    response.list = _mapper.Map<List<GetAllResponsibleParty_Data>>(get_res_party_list);
                }
            }
            catch(Exception e)
            {
            }
            return response;
        }

        public async Task<int> ChangeQuoteStatus(ChangeQuoteStatusRequestModel requestModel)
        {
            int res = (int)ResponseStatusNumber.Error;
            try
            {
                var get_wo = _UoW.WorkOrderRepository.GetWOByidforUpdateOffline(requestModel.wo_id);

                if (get_wo != null)
                {
                    get_wo.quote_status = requestModel.quote_status;
                    get_wo.modified_at = DateTime.UtcNow;
                    get_wo.modified_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();

                    if(get_wo.quote_status == (int)Status.QuoteAccepted) // if quote_status is Accepted then change WO Status to Released-Open
                    {
                        get_wo.status = (int)Status.ReleasedOpenWO;
                    }
                    else if (get_wo.quote_status == (int)Status.open) // if quote_status is open then change WO Status to planed
                    {
                        get_wo.status = (int)Status.PlannedWO;
                    }


                    var update_wo = await _UoW.BaseGenericRepository<WorkOrders>().Update(get_wo);
                    if (update_wo)
                    {
                        res = (int)ResponseStatusNumber.Success;
                        _UoW.SaveChanges();
                    }
                }
            }
            catch (Exception e)
            {
            }
            return res;
        }


        public GetAllOBAssetsWithQRCodeByWOIdResponseModel GetAllOBAssetsWithQRCodeByWOId(string wo_id)
        {
            GetAllOBAssetsWithQRCodeByWOIdResponseModel responseModel = new GetAllOBAssetsWithQRCodeByWOIdResponseModel();
            try
            {
                var get_ob_assets = _UoW.WorkOrderRepository.GetAllOBAssetsWithQRCodeByWOId(wo_id);
                if (get_ob_assets != null)
                {
                    responseModel.assets_list = _mapper.Map<List<GetOBAssetWithQRCode_Class>>(get_ob_assets);
                }
            }
            catch(Exception e)
            {
            }
            return responseModel;
        }


        public async Task<(AddExistingAssetToWorkorderByQRCodeResponsemodel, int)> AddExistingAssetToWorkorderByQRCode(AddExistingAssetToWorkorderByQRCodeRequestModel requestModel)
        {
            int res = (int)ResponseStatusNumber.Error;string woonboardingassets_id = null;
            AddExistingAssetToWorkorderByQRCodeResponsemodel AddExistingAssetToWorkorderByQRCodeResponsemodel = new AddExistingAssetToWorkorderByQRCodeResponsemodel();
            try
            {
                var get_asset = _UoW.WorkOrderRepository.GetAssetByQRCodeForOBWO(requestModel.qr_code.ToLower().Trim(),Guid.Empty);
                if (get_asset != null)
                {
                    var isAssetAdded = _UoW.WorkOrderRepository.CheckWOLineExistOrNot(requestModel.wo_id,get_asset.asset_id);
                    if (isAssetAdded)
                    {
                        res = (int)ResponseStatusNumber.AlreadyExists;
                        return (null, res);
                    }
                    else
                    {
                        // check if asset's location matches with requested location if not then return error
                        if(!String.IsNullOrEmpty(requestModel.temp_formio_building_name) && !String.IsNullOrEmpty(requestModel.temp_formio_floor_name) && !String.IsNullOrEmpty(requestModel.temp_formio_room_name))
                        {
                            if (get_asset.AssetFormIOBuildingMappings != null)
                            {
                                if (get_asset.AssetFormIOBuildingMappings.FormIOBuildings.formio_building_name.ToLower() != requestModel.temp_formio_building_name.ToLower()
                                  || get_asset.AssetFormIOBuildingMappings.FormIOFloors.formio_floor_name.ToLower() != requestModel.temp_formio_floor_name.ToLower()
                                  || get_asset.AssetFormIOBuildingMappings.FormIORooms.formio_room_name.ToLower() != requestModel.temp_formio_room_name.ToLower()
                                    )
                                {
                                    res = (int)ResponseStatusNumber.asset_in_different_location;
                                    return (null, res);
                                }
                            }
                        }

                        AssignExistingAssettoOBWORequestmodel req = new AssignExistingAssettoOBWORequestmodel();
                        req.asset_id = new List<Guid> { get_asset.asset_id };
                        req.wo_id = requestModel.wo_id;
                        req.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);

                        res = await AssignExistingAssettoOBWO(req);

                        woonboardingassets_id = _UoW.WorkOrderRepository.GetWOLineByAssetIdQRCodeWOId(requestModel.wo_id, get_asset.asset_id,requestModel.qr_code.ToLower().Trim());
                    }
                }
                else
                {
                    res = (int)ResponseStatusNumber.asset_in_different_location;
                }

            }catch(Exception e)
            {
            }
            AddExistingAssetToWorkorderByQRCodeResponsemodel.woonboardingassets_id = woonboardingassets_id;
            return (AddExistingAssetToWorkorderByQRCodeResponsemodel, res);
        }


        public GetQuoteListStatusWiseResponsemodel GetQuoteListStatusWise(string search_string, List<string>? site_id)
        {
            GetQuoteListStatusWiseResponsemodel response = new GetQuoteListStatusWiseResponsemodel();
            NewFlowWorkorderListRequestModel NewFlowWorkorderListRequestModel = new NewFlowWorkorderListRequestModel();
            NewFlowWorkorderListRequestModel.search_string = search_string;
            NewFlowWorkorderListRequestModel.site_id = site_id;

            NewFlowWorkorderListRequestModel.quote_status = new List<int> { (int)Status.open };
            NewFlowWorkorderListRequestModel.is_request_for_backlogcards = true;
            NewFlowWorkorderListRequestModel.is_requested_from_workorders_tab = false;
            var open_quotes = GetAllWorkOrdersNewflowOptimized(NewFlowWorkorderListRequestModel);

            NewFlowWorkorderListRequestModel.quote_status = new List<int> { (int)Status.Submitted };
            NewFlowWorkorderListRequestModel.is_request_for_backlogcards = true;
            NewFlowWorkorderListRequestModel.is_requested_from_workorders_tab = false;
            var submitted_quote = GetAllWorkOrdersNewflowOptimized(NewFlowWorkorderListRequestModel);

            NewFlowWorkorderListRequestModel.quote_status = new List<int> { (int)Status.Defered };
            NewFlowWorkorderListRequestModel.is_request_for_backlogcards = true;
            NewFlowWorkorderListRequestModel.is_requested_from_workorders_tab = false;
            var deffered_quotes = GetAllWorkOrdersNewflowOptimized(NewFlowWorkorderListRequestModel);

            NewFlowWorkorderListRequestModel.quote_status = new List<int> { (int)Status.QuoteRejected };
            NewFlowWorkorderListRequestModel.is_request_for_backlogcards = true;
            NewFlowWorkorderListRequestModel.is_requested_from_workorders_tab = false;
            var rejected_quotes = GetAllWorkOrdersNewflowOptimized(NewFlowWorkorderListRequestModel);

            NewFlowWorkorderListRequestModel.quote_status = new List<int> { (int)Status.QuoteAccepted };
            NewFlowWorkorderListRequestModel.is_request_for_backlogcards = true;
            NewFlowWorkorderListRequestModel.is_requested_from_workorders_tab = false;
            var accepted_quotes = GetAllWorkOrdersNewflowOptimized(NewFlowWorkorderListRequestModel);

            response.open = open_quotes.list;
            response.submitted = submitted_quote.list;
            response.deferred = deffered_quotes.list;
            response.rejected = rejected_quotes.list;
            response.accepted = accepted_quotes.list;

            return response;
        }

        public GetAllTempAssetDataForWOResponseModel GetAllTempAssetDataForWO(Guid wo_id)
        {
            GetAllTempAssetDataForWOResponseModel response = new GetAllTempAssetDataForWOResponseModel();
            try
            {
                var get_tempassets = _UoW.WorkOrderRepository.GetAllWOOnboardingAssetsByWOId(wo_id);
                response.asset_data = get_tempassets;

                var get_fedby_mappings = _UoW.WorkOrderRepository.GetWOOBFedByMappingsByWOId(wo_id);
                response.assets_fedby_mappings = get_fedby_mappings;

                var get_subcomponent_mappings = _UoW.WorkOrderRepository.GetTopSubComponentMappingsByWOId(wo_id);
                response.asset_subcomponents_mappings = get_subcomponent_mappings;

                //remove subcomponents asssets from first tab otherwise it will add duplicates
                var subcom_names = response.asset_subcomponents_mappings.Where(x=>!String.IsNullOrEmpty(x.subcomponent_asset_name)).Select(x=>x.subcomponent_asset_name).ToList();
                response.asset_data = response.asset_data.Where(x => !subcom_names.Contains(x.asset_name)).ToList();
            }
            catch (Exception e)
            {
            }
            return response;
        }

        public (int?,int?) GetIRWOCameraTypeFlags(Guid wo_id)
        {
            var wo = _UoW.WorkOrderRepository.GetWOByidforUpdateOffline(wo_id);
            return (wo.ir_visual_camera_type, wo.ir_visual_image_type);
        }


        public async Task<GenerateOnboardingWOReportResponseModel> GenerateOnboardingWOReport(GenerateOnboardingWOReportRequestModel_2 requestModel)
        {
            GenerateOnboardingWOReportResponseModel responseModel = new GenerateOnboardingWOReportResponseModel();
            try
            {
                HttpClient client = new HttpClient();

                string base_url = ConfigurationManager.AppSettings["eg_ai_nameplate_info_url"] + "onboarding-reporting/generate-onboarding-report";

                GenerateOnboardingWOReportRequestModel req_model = new GenerateOnboardingWOReportRequestModel();
                req_model.workOrderId = requestModel.wo_id;
                req_model.reportType = requestModel.report_type;
                req_model.companyId = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                req_model.siteId = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                var getuser = _UoW.UserRepository.GetUserByUserID(UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString());
                req_model.userEmail = getuser!=null ? getuser.email : null;

                // Set a timeout for 1 minute
                //var timeout = TimeSpan.FromSeconds(45);
                //var startTime = DateTime.UtcNow;
                var content = new StringContent(JsonConvert.SerializeObject(req_model), Encoding.UTF8, "application/json");

                HttpResponseMessage response = client.PostAsync(base_url, content).Result;
                if (response.IsSuccessStatusCode)
                {
                    string responseData = response.Content.ReadAsStringAsync().Result.ToString();
                    RootObj_GenerateReport_API json = Newtonsoft.Json.JsonConvert.DeserializeObject<RootObj_GenerateReport_API>(responseData);
                    var task_id = json.data.taskId;
                    if (task_id > 0)
                    {
                        responseModel.status = (int)Status.Completed;
                    }
                }


                /*
                 * while (DateTime.UtcNow - startTime < timeout)
                {
                    if (response.IsSuccessStatusCode)
                    {
                        string responseData = response.Content.ReadAsStringAsync().Result.ToString();
                        RootObj_GenerateReport_API json = Newtonsoft.Json.JsonConvert.DeserializeObject<RootObj_GenerateReport_API>(responseData);
                        var task_id = json.data.taskId;
                        var response_getapi = await CallPythonAPI_GenerateOBReport(client, task_id);
                        responseModel.status = response_getapi.status;

                        if (response_getapi.status == (int)Status.Completed)
                            return response_getapi;
                        else if (response_getapi.status == (int)Status.running)
                            await Task.Delay(5000);
                        else
                            break;
                    }
                    else
                    {
                        break;
                    }
                }*/

                // Check if the loop ended due to timeout
                //if (DateTime.UtcNow - startTime >= timeout)
                //{
                //    responseModel.status = (int)ResponseStatusNumber.TimedOut;
                //}
            }
            catch (Exception e)
            {
            }
            return responseModel;
        }

        public async Task<GenerateOnboardingWOReportResponseModel> GenerateMaintenanceWOReport(GenerateOnboardingWOReportRequestModel_2 requestModel)
        {
            GenerateOnboardingWOReportResponseModel responseModel = new GenerateOnboardingWOReportResponseModel();
            try
            {
                HttpClient client = new HttpClient();
                string base_url = null;

                if (requestModel.is_requested_for_wo)
                    base_url = ConfigurationManager.AppSettings["eg_ai_nameplate_info_url"] + "maintenance-reporting/generate-maintenance-report";
                else
                    base_url = ConfigurationManager.AppSettings["eg_ai_nameplate_info_url"] + "maintenance-reporting/generate-maintenance-quote";

                GenerateOnboardingWOReportRequestModel req_model = new GenerateOnboardingWOReportRequestModel();
                req_model.workOrderId = requestModel.wo_id;
                req_model.reportType = requestModel.report_type;
                req_model.companyId = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);
                req_model.siteId = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id);
                var getuser = _UoW.UserRepository.GetUserByUserID(UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString());
                req_model.userEmail = getuser != null ? getuser.email : null;

                req_model.attachments = requestModel.attachments;//_UoW.WorkOrderRepository.GetWOAttachmentsById(req_model.workOrderId);

                var content = new StringContent(JsonConvert.SerializeObject(req_model), Encoding.UTF8, "application/json");

                HttpResponseMessage response = client.PostAsync(base_url, content).Result;
                if (response.IsSuccessStatusCode)
                {
                    string responseData = response.Content.ReadAsStringAsync().Result.ToString();
                    RootObj_GenerateReport_API json = Newtonsoft.Json.JsonConvert.DeserializeObject<RootObj_GenerateReport_API>(responseData);
                    var task_id = json.data.taskId;
                    if (task_id > 0)
                    {
                        responseModel.status = (int)Status.Completed;
                    }
                }
            }
            catch (Exception e)
            {
            }
            return responseModel;
        }


        public async Task<GenerateOnboardingWOReportResponseModel> CallPythonAPI_GenerateOBReport(HttpClient client, int task_id)
        {
            GenerateOnboardingWOReportResponseModel responsemodel = new GenerateOnboardingWOReportResponseModel();
            int res = (int)ResponseStatusNumber.Error;
            string report_url = null;
            try
            {
                string base_url = ConfigurationManager.AppSettings["eg_ai_nameplate_info_url"] + "task/status/" + task_id;

                HttpResponseMessage response = await client.GetAsync(base_url);

                if (response.IsSuccessStatusCode)
                {
                    string responseData = await response.Content.ReadAsStringAsync();
                    RootObj_Status_API json = Newtonsoft.Json.JsonConvert.DeserializeObject<RootObj_Status_API>(responseData);

                    if (json.data.status == "completed")
                    {
                        res = (int)Status.Completed;
                        report_url = json.data.result;//Newtonsoft.Json.JsonConvert.SerializeObject();
                    }
                    else if (json.data.status == "running")
                    {
                        res = (int)Status.running;
                    }
                    else if (json.data.status == "failed")
                    {
                        res = (int)Status.ReportFailed;
                    }
                }
                else
                {
                }
            }
            catch (Exception e)
            {
            }
            responsemodel.status = res;
            responsemodel.report_url = report_url;
            return responsemodel;
        }

        public async Task<CreateQuoteFromEstimatorResponsemodel> CreateQuoteFromEstimator(CreateQuoteFromEstimatorRequestmodel requestmodel)
        {
            CreateQuoteFromEstimatorResponsemodel response = new CreateQuoteFromEstimatorResponsemodel();

            var get_cc_from_site_id = _UoW.WorkOrderRepository.GetCCFromSiteId(requestmodel.site_id);
            var get_comapnyid_from_site_id = _UoW.WorkOrderRepository.GetCompanyIdFromSiteId(requestmodel.site_id);

            NewFlowCreateWORequestModel NewFlowCreateWORequestModel = new NewFlowCreateWORequestModel();
            NewFlowCreateWORequestModel.client_company_id = get_cc_from_site_id;
            NewFlowCreateWORequestModel.site_id = requestmodel.site_id;
            NewFlowCreateWORequestModel.Description = requestmodel.quote_description;
            NewFlowCreateWORequestModel.due_date = requestmodel.start_date.Value.AddDays(14);
            NewFlowCreateWORequestModel.manual_wo_number = requestmodel.quote_number;
            NewFlowCreateWORequestModel.quote_status = (int)Status.open;
            NewFlowCreateWORequestModel.start_date = requestmodel.start_date.Value;
            NewFlowCreateWORequestModel.wo_status = (int)Status.PlannedWO;
            NewFlowCreateWORequestModel.wo_type = requestmodel.quote_type;
            UpdatedGenericRequestmodel.CurrentUser = new RequestInfo();
            UpdatedGenericRequestmodel.CurrentUser.site_id = requestmodel.site_id.ToString();
            UpdatedGenericRequestmodel.CurrentUser.company_id = get_comapnyid_from_site_id.ToString();
            var create_quote = await CreateQuoteFromEstimatorHelperMethod(NewFlowCreateWORequestModel);

            // add line items 
            if(NewFlowCreateWORequestModel.wo_type == (int)Status.Onboarding_WO || NewFlowCreateWORequestModel.wo_type == (int)Status.IR_Scan_WO)
            {
                AssignExistingAssettoOBWORequestmodel AssignExistingAssettoOBWORequestmodel = new AssignExistingAssettoOBWORequestmodel();
                AssignExistingAssettoOBWORequestmodel.asset_id = new List<Guid>();
                requestmodel.quote_Line_Items.ForEach(x =>
                {
                    AssignExistingAssettoOBWORequestmodel.asset_id.Add(x.asset_id);
                });
                AssignExistingAssettoOBWORequestmodel.site_id = requestmodel.site_id;
                AssignExistingAssettoOBWORequestmodel.wo_id = create_quote.wo_id;

                await AssignExistingAssettoOBWO(AssignExistingAssettoOBWORequestmodel);
            }
            else if(NewFlowCreateWORequestModel.wo_type == (int)Status.Maintenance_WO)
            {
                AddAssetPMWolineRequestmodel AddAssetPMWolineRequestmodel = new AddAssetPMWolineRequestmodel();
                AddAssetPMWolineRequestmodel.wo_id = create_quote.wo_id;
                AddAssetPMWolineRequestmodel.asset_pm_id = new List<Guid>();
                requestmodel.quote_Line_Items.ForEach(x =>
                {
                    if (x.asset_pm_id != null)
                    {
                        AddAssetPMWolineRequestmodel.asset_pm_id.Add(x.asset_pm_id.Value);
                    }
                });

                await AddAssetPMWoline(AddAssetPMWolineRequestmodel);
            }
            response.quote_id = create_quote.wo_id;
            return response;
        }

        public async Task<CreateWorkorderNewflowResponsemodel> CreateQuoteFromEstimatorHelperMethod(NewFlowCreateWORequestModel requestModel)
        {
            CreateWorkorderNewflowResponsemodel response = new CreateWorkorderNewflowResponsemodel();

            WorkOrders WO = new WorkOrders();
            WO.client_company_id = requestModel.client_company_id;
            WO.description = requestModel.Description;
            WO.po_number = requestModel.po_number;
            WO.site_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.site_id); //requestModel.site_id;
            WO.technician_user_id = requestModel.technician_user_id;
            WO.start_date = requestModel.start_date;
            WO.is_archive = false;
            WO.created_at = DateTime.UtcNow;
            WO.modified_at = DateTime.UtcNow;
            //WO.created_by = UpdatedGenericRequestmodel.CurrentUser.requested_by.ToString();
            WO.wo_type = requestModel.wo_type;
            WO.status = requestModel.wo_status;
            WO.responsible_party_id = requestModel.responsible_party_id;
            WO.ir_visual_camera_type = requestModel.ir_visual_camera_type;
            WO.ir_visual_image_type = requestModel.ir_visual_image_type;

            if (requestModel.quote_status != null)
            {
                WO.quote_status = requestModel.quote_status;
                WO.status = (int)Status.QuoteWO;
            }

            var is_WO_number_valid = _UoW.WorkOrderRepository.IsWONumberValidFromEstimator(null, requestModel.manual_wo_number , requestModel.site_id);
            if (!is_WO_number_valid)
            {
                response = new CreateWorkorderNewflowResponsemodel();
                response.response_status = (int)ResponseStatusNumber.duplicate_wo_number;
                return response;
            }
            WO.manual_wo_number = requestModel.manual_wo_number;
            WO.due_at = requestModel.due_date;

            if (DateTime.UtcNow.Date == WO.due_at.Date)
            {
                WO.wo_due_overdue_flag = (int)wo_due_overdue_flag.WO_Due;
            }
            else if (DateTime.UtcNow.Date > WO.due_at.Date)
            {
                WO.wo_due_overdue_flag = (int)wo_due_overdue_flag.WO_Overdue;
            }
            else
            {
                WO.wo_due_overdue_flag = (int)wo_due_overdue_flag.WO_OnTrack;
            }
            var due_timing = DateTimeUtil.GetDueOverdueTimingByDueDate(WO.due_at);
            WO.wo_due_time_duration = due_timing.Item1;


            var insert = await _UoW.BaseGenericRepository<WorkOrders>().Insert(WO);
            if (insert)
            {
                if (requestModel.wo_type == (int)Status.IR_Scan_WO || requestModel.wo_type == (int)Status.Onboarding_WO)
                {
                    //Add Default Building Location
                    TempFormIOBuildings tempFormIOBuildings = new TempFormIOBuildings();
                    tempFormIOBuildings.temp_formio_building_name = "Default";
                    tempFormIOBuildings.wo_id = WO.wo_id;
                    tempFormIOBuildings.created_at = DateTime.UtcNow;
                    tempFormIOBuildings.site_id = requestModel.site_id;
                    //tempFormIOBuildings.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                    var inserttempbuilding = await _UoW.BaseGenericRepository<TempFormIOBuildings>().Insert(tempFormIOBuildings);

                    //Add Default Floors Location
                    TempFormIOFloors tempFormIOFloors = new TempFormIOFloors();
                    tempFormIOFloors.temp_formio_floor_name = "Default";
                    tempFormIOFloors.temp_formiobuilding_id = tempFormIOBuildings.temp_formiobuilding_id;
                    tempFormIOFloors.wo_id = WO.wo_id;
                    tempFormIOFloors.created_at = DateTime.UtcNow;
                    tempFormIOFloors.site_id = requestModel.site_id;
                    //tempFormIOFloors.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                    var insertfloor = await _UoW.BaseGenericRepository<TempFormIOFloors>().Insert(tempFormIOFloors);

                    //Add Default Room Location
                    TempFormIORooms tempFormIORooms = new TempFormIORooms();
                    tempFormIORooms.temp_formio_room_name = "Default";
                    tempFormIORooms.temp_formiofloor_id = tempFormIOFloors.temp_formiofloor_id;
                    tempFormIORooms.wo_id = WO.wo_id;
                    tempFormIORooms.created_at = DateTime.UtcNow;
                    tempFormIORooms.site_id = requestModel.site_id; 
                    //tempFormIORooms.company_id = Guid.Parse(UpdatedGenericRequestmodel.CurrentUser.company_id);

                    var insertroom = await _UoW.BaseGenericRepository<TempFormIORooms>().Insert(tempFormIORooms);
                    _UoW.SaveChanges();
                }

                _UoW.SaveChanges();
                if (String.IsNullOrEmpty(requestModel.manual_wo_number))
                {
                    WO.manual_wo_number = WO.wo_number.ToString();
                    var update = await _UoW.BaseGenericRepository<WorkOrders>().Update(WO);
                    _UoW.SaveChanges();
                }
                response.wo_id = WO.wo_id;
                response.response_status = (int)ResponseStatusNumber.Success;
            }
            return response;
        }

        public GetPMEstimationResponseModel GetPMEstimation(GetPMEstimationRequestModel requestModel)
        {
            GetPMEstimationResponseModel response = new GetPMEstimationResponseModel();
            try
            {
                 response = _UoW.WorkOrderRepository.GetPMEstimation(requestModel);
               
            }
            catch (Exception e)
            {
                
            }
            return response;
        }


        public class PrepareModelForOfflineLambda
        {
            public object data { get; set; }
            public string requested_by { get; set; }
        }
        public class Root
        {
            [Newtonsoft.Json.JsonProperty("E3 ID#")]
            public string E3ID { get; set; }
            public string Description { get; set; }
            public string Manufacturer { get; set; }

            [Newtonsoft.Json.JsonProperty("Model Number")]
            public string ModelNumber { get; set; }

            [Newtonsoft.Json.JsonProperty("Serial Number")]
            public string SerialNumber { get; set; }

            [Newtonsoft.Json.JsonProperty("Cal Interval")]
            public string CalInterval { get; set; }

            [Newtonsoft.Json.JsonProperty("Cal Date")]
            public string CalDate { get; set; }
        }




        public class ParseUpdateHierarchyandLevelForPythonscript
        {
            public Header header { get; set; }
        }
        public class Header
        {
            public string workOrderType { get; set; }
            public string customer { get; set; }
            public string customerAddress { get; set; }
            public string owner { get; set; }
            public string ownerAddress { get; set; }
            public string date { get; set; }
            public string workOrder { get; set; }
            public string temperature { get; set; }
            public string humidity { get; set; }
            public string identification { get; set; }
            public string parent { get; set; }
            public string assetId { get; set; }
            public string building { get; set; }
            public string floor { get; set; }
            public string room { get; set; }
            public string section { get; set; }
        }
        public class AssetBuildingHierarchy
        {
            public string building_name { get; set; }
            public string floor_name { get; set; }
            public string room_name { get; set; }
            public string section_name { get; set; }
            public string asset_name { get; set; }
            public string asset_id { get; set; }
        }
        public class AddSublevelComponentWolineRequest
        {
            public Guid? woline_sublevelcomponent_mapping_id { get; set; }
            public Guid? woonboardingassets_id { get; set; }
            public Guid? sublevelcomponent_asset_id { get; set; }
            public bool is_sublevelcomponent_from_ob_wo { get; set; }
            public bool is_deleted { get; set; }
            public string circuit { get; set; }
            public string image_name { get; set; }
            public string sublevelcomponent_asset_name { get; set; }
            public Guid sublevelcomponent_asset_class_id { get; set; }
            public string building { get; set; }
            public string floor { get; set; }
            public string room { get; set; }
            public string section { get; set; }
            public int? formiobuilding_id { get; set; }
            public int? formiofloor_id { get; set; }
            public int? formioroom_id { get; set; }
            public int? formiosection_id { get; set; }
            public Guid? temp_formiobuilding_id { get; set; }
            public Guid? temp_formiofloor_id { get; set; }
            public Guid? temp_formioroom_id { get; set; }
            public Guid? temp_formiosection_id { get; set; }
            public Guid wo_id { get; set; }
            public Guid inspectiontemplate_asset_class_id { get; set; }
            public int? asset_operating_condition_state { get; set; }
            public int? criticality_index_type { get; set; }
            public int? condition_index_type { get; set; } // good , average , corrosive, dusty
            public bool is_woline_from_other_inspection { get; set; }// if install woline is from issue/PM then this will be true and do not show this in wo datails screen
            public List<subcomponent_image_list_class>? subcomponent_image_list { get; set; }

        }
        public class TempLocationData
        {
            public Guid? temp_formiobuilding_id { get; set; }
            public Guid? temp_formiofloor_id { get; set; }
            public Guid? temp_formioroom_id { get; set; }
            public Guid? temp_formiosection_id { get; set; }
        }
        public class pm_json_class
        {
            public string pm_title { get; set; }
            public string name { get; set; }
            public string json { get; set; }
        }
        public class asset_pm_form_json_class
        {
            public List<pm_json_class> pm_json { get; set; }
        }
    }

}
